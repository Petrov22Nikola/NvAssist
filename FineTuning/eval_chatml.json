{
    "messages": [
        [
            {
                "role": "user",
                "content": "{\"VUID-VkLayerSettingEXT-valueCount-10070\", \"If valueCount is not 0, pValues must be a valid pointer to an array of valueCount values of the type indicated by type\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (setting->valueCount > 0 && !setting->pValues) {\n    ss << setting_loc.dot(vvl::Field::pValues).Message() << \" is NULL\";\n    debug_report->DebugLogMsg(kErrorBit, {}, ss.str().c_str(), \"VUID-VkLayerSettingEXT-valueCount-10070\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdBeginQuery-queryType-02804\", \"The queryType used to create queryPool must not be VK_QUERY_TYPE_TIMESTAMP\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "is_indexed ? \"VUID-vkCmdBeginQueryIndexedEXT-queryType-02804\" : \"VUID-vkCmdBeginQuery-queryType-02804\";\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkImportAndroidHardwareBufferInfoANDROID-buffer-01880\", \"If buffer is not NULL, Android hardware buffers must be supported for import, as reported by VkExternalImageFormatProperties or VkExternalBufferProperties\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((VK_SUCCESS != fmt_lookup_result) || (0 == (ext_img_fmt_props.externalMemoryProperties.externalMemoryFeatures &\n        \"VUID-VkImportAndroidHardwareBufferInfoANDROID-buffer-01880\", device, allocate_info_loc,\n        \"Neither the VkExternalImageFormatProperties nor the VkExternalBufferProperties \"\n        \"structs for the AHardwareBuffer include the VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT flag. (AHB = %p).\",\n        import_ahb_info->buffer);\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkMemoryAllocateInfo-pNext-02387\", \"If the parameters define an import operation, the external handle is an Android hardware buffer, and the pNext chain includes a VkMemoryDedicatedAllocateInfo with image that is not VK_NULL_HANDLE, the format of image must be VK_FORMAT_UNDEFINED or the format returned by vkGetAndroidHardwareBufferPropertiesANDROID in VkAndroidHardwareBufferFormatPropertiesANDROID::format for the Android hardware buffer\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (ici->format != ahb_format_props.format) {\n        \"VUID-VkMemoryAllocateInfo-pNext-02387\", mem_ded_alloc_info->image, dedicated_image_loc,\n        \"was created with format (%s) which does not match the %s AHardwareBuffer's format (%s). (AHB = %p).\",\n        string_VkFormat(ici->format), ahb_loc.Fields().c_str(), string_VkFormat(ahb_format_props.format),\n        import_ahb_info->buffer);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkMemoryAllocateInfo-pNext-02390\", \"If the parameters define an import operation, the external handle is an Android hardware buffer, and the pNext chain includes a VkMemoryDedicatedAllocateInfo structure with image that is not VK_NULL_HANDLE, each bit set in the usage of image must be listed in AHardwareBuffer Usage Equivalence, and if there is a corresponding AHARDWAREBUFFER_USAGE bit listed that bit must be included in the Android hardware buffer's AHardwareBuffer_Desc::usage\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (0 == (ahb_usage & ahb_desc.usage)) {\n        LogError(\"VUID-VkMemoryAllocateInfo-pNext-02390\", mem_ded_alloc_info->image, dedicated_image_loc,\n                 \" usage bit %s equivalent is not in AHardwareBuffer_Desc.usage (0x%\" PRIx64 \"). (AHB = %p).\",\n                 string_VkImageUsageFlags(ubit).c_str(), ahb_desc.usage, import_ahb_info->buffer);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkImageMemoryRequirementsInfo2-image-01897\", \"If image was created with the VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID external memory handle type, then image must be bound to memory\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (image_state->IsExternalBuffer() && (0 == image_state->GetBoundMemoryStates().size())) {\n                           ? \"VUID-vkGetImageMemoryRequirements-image-04004\"\n                           : \"VUID-VkImageMemoryRequirementsInfo2-image-01897\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkBindImageMemoryInfo-memory-02990\", \"If memory was created with the VkImportAndroidHardwareBufferInfoANDROID memory import operation with a non-NULL buffer value, VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID must also have been set in VkExternalMemoryImageCreateInfo::handleTypes when image was created\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((handle_types & VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID) == 0) {\n    const char *vuid = loc.function == Func::vkBindImageMemory ? \"VUID-vkBindImageMemory-memory-02990\"\n                                                               : \"VUID-VkBindImageMemoryInfo-memory-02990\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkImageCreateInfo-pNext-02398\", \"If the pNext chain includes a VkExternalFormatANDROID structure whose externalFormat member is not 0, tiling must be VK_IMAGE_TILING_OPTIMAL\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (VK_IMAGE_TILING_OPTIMAL != create_info.tiling) {\n    skip |= LogError(\"VUID-VkImageCreateInfo-pNext-02398\", device,\n                     create_info_loc.pNext(Struct::VkExternalFormatANDROID, Field::externalFormat),\n                     \"(%\" PRIu64 \") is non-zero, but layout is %s.\", ext_fmt_android->externalFormat,\n                     string_VkImageTiling(create_info.tiling));\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkImageCreateInfo-pNext-02393\", \"If the pNext chain includes a VkExternalMemoryImageCreateInfo structure whose handleTypes member includes VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID, imageType must be VK_IMAGE_TYPE_2D\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (create_info.imageType != VK_IMAGE_TYPE_2D) {\n    skip |= LogError(\"VUID-VkImageCreateInfo-pNext-02393\", device,\n                     create_info_loc.pNext(Struct::VkExternalMemoryImageCreateInfo, Field::handleTypes),\n                     \"includes VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID, but imageType is %s.\",\n                     string_VkImageType(create_info.imageType));\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkImageViewCreateInfo-image-02401\", \"If image has an Android external format, all members of components must be the identity swizzle\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (IsIdentitySwizzle(create_info.components) == false) {\n        \"VUID-VkImageViewCreateInfo-image-02401\", create_info.image, create_info_loc.dot(Field::image),\n        \"was chained with a VkExternalFormatANDROID struct, but \"\n        \"includes one or more non-identity component swizzles, r swizzle = %s, g swizzle = %s, b swizzle = %s, a swizzle \"\n        \"= %s.\",\n        string_VkComponentSwizzle(create_info.components.r), string_VkComponentSwizzle(create_info.components.g),\n        string_VkComponentSwizzle(create_info.components.b), string_VkComponentSwizzle(create_info.components.a));\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkBufferViewCreateInfo-range-04059\", \"If range is equal to VK_WHOLE_SIZE, the number of texel buffer elements given by (\u230a(size - offset) / (texel block size)\u230b \u00d7 (texels per block)) where size is the size of buffer, and texel block size and texels per block are as defined in the Compatible Formats table for format, must be less than or equal to VkPhysicalDeviceLimits::maxTexelBufferElements\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (texels > static_cast<VkDeviceSize>(phys_dev_props.limits.maxTexelBufferElements)) {\n    skip |= LogError(\"VUID-VkBufferViewCreateInfo-range-04059\", buffer_state.Handle(), loc.dot(Field::range),\n                     \"is VK_WHOLE_SIZE, but the buffer's size (%\" PRIuLEAST64 \"), offset (%\" PRIuLEAST64\n                     \"), %s texel block size (%\" PRIu32 \"), and texels-per-block (%\" PRIuLEAST64\n                     \") is a total of (%\" PRIuLEAST64\n                     \") texels which is more than VkPhysicalDeviceLimits::maxTexelBufferElements (%\" PRIuLEAST32 \").\",\n                     buffer_state.create_info.size, create_info.offset, string_VkFormat(format), format_info.block_size,\n                     texel_per_block, texels, phys_dev_props.limits.maxTexelBufferElements);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkBufferCreateInfo-flags-03338\", \"If flags includes VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT, the bufferDeviceAddressCaptureReplay feature must be enabled\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((create_info.flags & VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT) &&\n    skip |= LogError(\"VUID-VkBufferCreateInfo-flags-03338\", device, create_info_loc.dot(Field::flags),\n                     \"has VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT set but the bufferDeviceAddressCaptureReplay \"\n                     \"device feature is not enabled.\");\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkBufferCreateInfo-flags-08099\", \"If flags includes VK_BUFFER_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT, the descriptorBufferCaptureReplay feature must be enabled\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((create_info.flags & VK_BUFFER_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT) &&\n    skip |= LogError(\"VUID-VkBufferCreateInfo-flags-08099\", device, create_info_loc.dot(Field::flags),\n                     \"has VK_BUFFER_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT set but the descriptorBufferCaptureReplay \"\n                     \"device feature is not enabled.\");\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkBufferCreateInfo-pNext-01571\", \"If the pNext chain includes a VkDedicatedAllocationBufferCreateInfoNV structure, and the dedicatedAllocation member of the chained structure is VK_TRUE, then flags must not include VK_BUFFER_CREATE_SPARSE_BINDING_BIT, VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT, or VK_BUFFER_CREATE_SPARSE_ALIASED_BIT\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (pCreateInfo->flags &\n    skip |= LogError(\"VUID-VkBufferCreateInfo-pNext-01571\", device, create_info_loc.dot(Field::flags),\n                     \"%s when VkDedicatedAllocationBufferCreateInfoNV::dedicatedAllocation is VK_TRUE.\",\n                     string_VkBufferCreateFlags(pCreateInfo->flags).c_str());\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkBufferCreateInfo-usage-04813\", \"If usage includes VK_BUFFER_USAGE_VIDEO_DECODE_SRC_BIT_KHR or VK_BUFFER_USAGE_VIDEO_DECODE_DST_BIT_KHR, and flags does not include VK_BUFFER_CREATE_VIDEO_PROFILE_INDEPENDENT_BIT_KHR, then the pNext chain must include a VkVideoProfileListInfoKHR structure with profileCount greater than 0 and pProfiles including at least one VkVideoProfileInfoKHR structure with a videoCodecOperation member specifying a decode operation\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "expect_decode_profile, \"VUID-VkBufferCreateInfo-usage-04813\", expect_encode_profile,\n\"VUID-VkBufferCreateInfo-usage-04814\");\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkBufferViewCreateInfo-offset-00925\", \"offset must be less than the size of buffer\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (pCreateInfo->offset >= buffer_state.create_info.size) {\n    skip |= LogError(\"VUID-VkBufferViewCreateInfo-offset-00925\", buffer_state.Handle(), create_info_loc.dot(Field::offset),\n                     \"(%\" PRIuLEAST64 \") must be less than the size of the buffer (%\" PRIuLEAST64 \").\", pCreateInfo->offset,\n                     buffer_state.create_info.size);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkBufferViewCreateInfo-pNext-08781\", \"If the pNext chain includes a VkBufferUsageFlags2CreateInfoKHR, its usage must be a subset of the VkBufferCreateInfo::usage specified or VkBufferUsageFlags2CreateInfoKHR::usage from VkBufferCreateInfo::pNext when creating buffer\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "create_info_loc.pNext(Struct::VkBufferUsageFlags2CreateInfoKHR, Field::usage), \"is %s.\",\nskip |= LogError(\"VUID-VkBufferViewCreateInfo-pNext-08781\", objlist,\ncreate_info_loc.pNext(Struct::VkBufferUsageFlags2CreateInfoKHR, Field::usage),\n\"(%s) is not a subset of the buffer's usage (%s).\", string_VkBufferUsageFlags2KHR(usage).c_str(),\nstring_VkBufferUsageFlags2KHR(buffer_state.usage).c_str());\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdFillBuffer-commandBuffer-01811\", \"If commandBuffer is an unprotected command buffer and protectedNoFault is not supported, dstBuffer must not be a protected buffer\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "skip |= ValidateBufferUsageFlags(objlist, *buffer_state, VK_BUFFER_USAGE_TRANSFER_DST_BIT, true,\n                                 \"VUID-vkCmdFillBuffer-dstBuffer-00029\", buffer_loc);\nskip |= ValidateProtectedBuffer(cb_state, *buffer_state, buffer_loc, \"VUID-vkCmdFillBuffer-commandBuffer-01811\");\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkDescriptorBufferBindingInfoEXT-usage-08122\", \"If usage includes VK_BUFFER_USAGE_SAMPLER_DESCRIPTOR_BUFFER_BIT_EXT, address must be an address within a valid buffer that was created with VK_BUFFER_USAGE_SAMPLER_DESCRIPTOR_BUFFER_BIT_EXT\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "For example, take those VUIDs for VkDescriptorBufferBindingInfoEXT:\nVUID-VkDescriptorBufferBindingInfoEXT-usage-08122:\nIf usage includes VK_BUFFER_USAGE_SAMPLER_DESCRIPTOR_BUFFER_BIT_EXT, address must be an address within a valid buffer that was\ncreated with VK_BUFFER_USAGE_SAMPLER_DESCRIPTOR_BUFFER_BIT_EXT\nVUID-VkDescriptorBufferBindingInfoEXT-usage-08123:\nIf usage includes VK_BUFFER_USAGE_RESOURCE_DESCRIPTOR_BUFFER_BIT_EXT, address must be an address within a valid buffer that was\ncreated with VK_BUFFER_USAGE_RESOURCE_DESCRIPTOR_BUFFER_BIT_EXT\nVUID-VkDescriptorBufferBindingInfoEXT-usage-08124:\nIf usage includes VK_BUFFER_USAGE_PUSH_DESCRIPTORS_DESCRIPTOR_BUFFER_BIT_EXT, address must be an address within a valid buffer\nthat was created with VK_BUFFER_USAGE_PUSH_DESCRIPTORS_DESCRIPTOR_BUFFER_BIT_EXT\nFor usage to be valid, since the mentioned address can refer to multiple buffers, one must find a buffer that satisfies *all*\nof them. One must *not* consider those VUIDs independantly, each time trying to find a buffer that satisfies the considered VUID\nbut not necessarily the others in the family.\nThe VVL heuristic wants that the vast majority of the time, functions calls and structures are valid, thus validation\nshould be fast and avoid to do things related to error logging unless necessary. To comply with that, buffer address\nvalidation is done in two passes: one to look for a buffer satisfying all VUIDs of the considered family. If none\nis found, another pass is done, this time building a per VUID error message (not per buffer) regrouping all buffers\nviolating it. Outputting for each buffer every VUID it violates would lead to unnecessary log clutter.\nThis two pass process is tedious to do without an helper class, hence BufferAddressValidation was created.\nThe idea is to ask for user to provide the only necessary data:\na VUID, how it is validated, what to log when a buffer violates it, and a snippet of text appended to the error message header.\nThen, just a call to LogErrorsIfNoValidBuffer is needed to do validation and, eventually, error logging.\nFor an example of how to use BufferAddressValidation, see for instance how \"VUID-VkDescriptorBufferBindingInfoEXT-usage-08122\"\nand friends are validated.\n*/\ntemplate <size_t ChecksCount = 1>\nclass BufferAddressValidation {\npublic:\n // Return true if and only if VU is verified\n using ValidationFunction = std::function<bool(vvl::Buffer* const, std::string* out_error_msg)>;\n using ErrorMsgHeaderSuffixFunction = std::function<std::string()>;\n struct VuidAndValidation {\n     std::string_view vuid{};\n     ValidationFunction validation_func = [](vvl::Buffer* const, std::string* out_error_msg) { return true; };\n     ErrorMsgHeaderSuffixFunction error_msg_header_suffix_func = []() { return \"\\n\"; };  // text appended to error message header\n };\n // Look for a buffer that satisfies all VUIDs\n [[nodiscard]] bool HasValidBuffer(vvl::span<vvl::Buffer* const> buffer_list) const noexcept;\n // Look for a buffer that does not satisfy one of the VUIDs\n [[nodiscard]] bool HasInvalidBuffer(vvl::span<vvl::Buffer* const> buffer_list) const noexcept;\n // For every vuid, build an error mentioning every buffer from buffer_list that violates it, then log this error\n // using details provided by the other parameters.\n [[nodiscard]] bool LogInvalidBuffers(const CoreChecks& checker, vvl::span<vvl::Buffer* const> buffer_list,\n                                      const Location& device_address_loc, const LogObjectList& objlist,\n                                      VkDeviceAddress device_address) const noexcept;\n [[nodiscard]] bool LogErrorsIfNoValidBuffer(const CoreChecks& checker, vvl::span<vvl::Buffer* const> buffer_list,\n                                             const Location& device_address_loc, const LogObjectList& objlist,\n                                             VkDeviceAddress device_address) const noexcept {\n     bool skip = false;\n     if (!HasValidBuffer(buffer_list)) {\n         skip |= LogInvalidBuffers(checker, buffer_list, device_address_loc, objlist, device_address);\n     }\n     return skip;\n }\n [[nodiscard]] bool LogErrorsIfInvalidBufferFound(const CoreChecks& checker, vvl::span<vvl::Buffer* const> buffer_list,\n                                                  const Location& device_address_loc, const LogObjectList& objlist,\n                                                  VkDeviceAddress device_address) const noexcept {\n     bool skip = false;\n     if (HasInvalidBuffer(buffer_list)) {\n         skip |= LogInvalidBuffers(checker, buffer_list, device_address_loc, objlist, device_address);\n     }\n     return skip;\n }\n bool AddVuidValidation(VuidAndValidation&& vuid_and_validation) noexcept {\n     for (size_t i = 0; i < ChecksCount; ++i) {\n         if (vuidsAndValidationFunctions[i].vuid.empty()) {\n             vuidsAndValidationFunctions[i] = std::move(vuid_and_validation);\n             return true;\n         }\n     }\n     return false;\n }\n static bool ValidateMemoryBoundToBuffer(const CoreChecks& validator, vvl::Buffer const* const buffer_state,\n                                         std::string* out_error_msg) {\n     if (!buffer_state->sparse && !buffer_state->IsMemoryBound()) {\n         if (out_error_msg) {\n             if (const auto mem_state = buffer_state->MemState(); mem_state && mem_state->Destroyed()) {\n                 *out_error_msg +=\n                     \"buffer is bound to memory (\" + validator.FormatHandle(mem_state->Handle()) + \") but it has been freed\";\n             } else {\n                 *out_error_msg += \"buffer has not been bound to memory\";\n             }\n         }\n         return false;\n     }\n     return true;\n }\n static std::string ValidateMemoryBoundToBufferErrorMsgHeader() {\n     return \"The following buffers are not bound to memory or it has been freed:\";\n }\npublic:\n // public to enable aggregate initialization\n std::array<VuidAndValidation, ChecksCount> vuidsAndValidationFunctions;\nprivate:\n struct Error {\n     LogObjectList objlist;\n     std::string error_msg;\n     bool Empty() const { return error_msg.empty(); }\n };\n};\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkDescriptorBufferBindingInfoEXT-usage-08124\", \"If usage includes VK_BUFFER_USAGE_PUSH_DESCRIPTORS_DESCRIPTOR_BUFFER_BIT_EXT, address must be an address within a valid buffer that was created with VK_BUFFER_USAGE_PUSH_DESCRIPTORS_DESCRIPTOR_BUFFER_BIT_EXT\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "VUID-VkDescriptorBufferBindingInfoEXT-usage-08123:\nIf usage includes VK_BUFFER_USAGE_RESOURCE_DESCRIPTOR_BUFFER_BIT_EXT, address must be an address within a valid buffer that was\nVUID-VkDescriptorBufferBindingInfoEXT-usage-08124:\nIf usage includes VK_BUFFER_USAGE_PUSH_DESCRIPTORS_DESCRIPTOR_BUFFER_BIT_EXT, address must be an address within a valid buffer\nthat was created with VK_BUFFER_USAGE_PUSH_DESCRIPTORS_DESCRIPTOR_BUFFER_BIT_EXT\nFor usage to be valid, since the mentioned address can refer to multiple buffers, one must find a buffer that satisfies *all*\nof them. One must *not* consider those VUIDs independantly, each time trying to find a buffer that satisfies the considered VUID\nbut not necessarily the others in the family.\nThe VVL heuristic wants that the vast majority of the time, functions calls and structures are valid, thus validation\nshould be fast and avoid to do things related to error logging unless necessary. To comply with that, buffer address\nvalidation is done in two passes: one to look for a buffer satisfying all VUIDs of the considered family. If none\nis found, another pass is done, this time building a per VUID error message (not per buffer) regrouping all buffers\nviolating it. Outputting for each buffer every VUID it violates would lead to unnecessary log clutter.\nThis two pass process is tedious to do without an helper class, hence BufferAddressValidation was created.\nThe idea is to ask for user to provide the only necessary data:\na VUID, how it is validated, what to log when a buffer violates it, and a snippet of text appended to the error message header.\nThen, just a call to LogErrorsIfNoValidBuffer is needed to do validation and, eventually, error logging.\nFor an example of how to use BufferAddressValidation, see for instance how \"VUID-VkDescriptorBufferBindingInfoEXT-usage-08122\"\nand friends are validated.\n*/\ntemplate <size_t ChecksCount = 1>\nclass BufferAddressValidation {\npublic:\n // Return true if and only if VU is verified\n using ValidationFunction = std::function<bool(vvl::Buffer* const, std::string* out_error_msg)>;\n using ErrorMsgHeaderSuffixFunction = std::function<std::string()>;\n struct VuidAndValidation {\n     std::string_view vuid{};\n     ValidationFunction validation_func = [](vvl::Buffer* const, std::string* out_error_msg) { return true; };\n     ErrorMsgHeaderSuffixFunction error_msg_header_suffix_func = []() { return \"\\n\"; };  // text appended to error message header\n };\n // Look for a buffer that satisfies all VUIDs\n [[nodiscard]] bool HasValidBuffer(vvl::span<vvl::Buffer* const> buffer_list) const noexcept;\n // Look for a buffer that does not satisfy one of the VUIDs\n [[nodiscard]] bool HasInvalidBuffer(vvl::span<vvl::Buffer* const> buffer_list) const noexcept;\n // For every vuid, build an error mentioning every buffer from buffer_list that violates it, then log this error\n // using details provided by the other parameters.\n [[nodiscard]] bool LogInvalidBuffers(const CoreChecks& checker, vvl::span<vvl::Buffer* const> buffer_list,\n                                      const Location& device_address_loc, const LogObjectList& objlist,\n                                      VkDeviceAddress device_address) const noexcept;\n [[nodiscard]] bool LogErrorsIfNoValidBuffer(const CoreChecks& checker, vvl::span<vvl::Buffer* const> buffer_list,\n                                             const Location& device_address_loc, const LogObjectList& objlist,\n                                             VkDeviceAddress device_address) const noexcept {\n     bool skip = false;\n     if (!HasValidBuffer(buffer_list)) {\n         skip |= LogInvalidBuffers(checker, buffer_list, device_address_loc, objlist, device_address);\n     }\n     return skip;\n }\n [[nodiscard]] bool LogErrorsIfInvalidBufferFound(const CoreChecks& checker, vvl::span<vvl::Buffer* const> buffer_list,\n                                                  const Location& device_address_loc, const LogObjectList& objlist,\n                                                  VkDeviceAddress device_address) const noexcept {\n     bool skip = false;\n     if (HasInvalidBuffer(buffer_list)) {\n         skip |= LogInvalidBuffers(checker, buffer_list, device_address_loc, objlist, device_address);\n     }\n     return skip;\n }\n bool AddVuidValidation(VuidAndValidation&& vuid_and_validation) noexcept {\n     for (size_t i = 0; i < ChecksCount; ++i) {\n         if (vuidsAndValidationFunctions[i].vuid.empty()) {\n             vuidsAndValidationFunctions[i] = std::move(vuid_and_validation);\n             return true;\n         }\n     }\n     return false;\n }\n static bool ValidateMemoryBoundToBuffer(const CoreChecks& validator, vvl::Buffer const* const buffer_state,\n                                         std::string* out_error_msg) {\n     if (!buffer_state->sparse && !buffer_state->IsMemoryBound()) {\n         if (out_error_msg) {\n             if (const auto mem_state = buffer_state->MemState(); mem_state && mem_state->Destroyed()) {\n                 *out_error_msg +=\n                     \"buffer is bound to memory (\" + validator.FormatHandle(mem_state->Handle()) + \") but it has been freed\";\n             } else {\n                 *out_error_msg += \"buffer has not been bound to memory\";\n             }\n         }\n         return false;\n     }\n     return true;\n }\n static std::string ValidateMemoryBoundToBufferErrorMsgHeader() {\n     return \"The following buffers are not bound to memory or it has been freed:\";\n }\npublic:\n // public to enable aggregate initialization\n std::array<VuidAndValidation, ChecksCount> vuidsAndValidationFunctions;\nprivate:\n struct Error {\n     LogObjectList objlist;\n     std::string error_msg;\n     bool Empty() const { return error_msg.empty(); }\n };\n};\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkBeginCommandBuffer-commandBuffer-02840\", \"If commandBuffer is a primary command buffer, then pBeginInfo->flags must not set both the VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT and the VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT flags\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((pBeginInfo->flags & invalid_usage) == invalid_usage) {\n    skip |= LogError(\"VUID-vkBeginCommandBuffer-commandBuffer-02840\", commandBuffer, begin_info_loc.dot(Field::flags),\n                     \"is %s for Primary %s (can't have both ONE_TIME_SUBMIT and SIMULTANEOUS_USE).\",\n                     string_VkCommandBufferUsageFlags(pBeginInfo->flags).c_str(), FormatHandle(commandBuffer).c_str());\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkCommandBufferBeginInfo-flags-06000\", \"If flags contains VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT and the renderPass member of pInheritanceInfo is not VK_NULL_HANDLE, the renderPass member of pInheritanceInfo must be a valid VkRenderPass\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "\"VUID-VkCommandBufferBeginInfo-flags-06000\", \"VUID-VkCommandBufferInheritanceInfo-commonparent\",\ninheritance_info_loc.dot(Field::renderPass));\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkCommandBufferInheritanceRenderingInfo-variableMultisampleRate-06005\", \"If the variableMultisampleRate feature is not enabled, rasterizationSamples must be a valid VkSampleCountFlagBits value\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((!enabled_features.variableMultisampleRate) &&\n        \"VUID-VkCommandBufferInheritanceRenderingInfo-variableMultisampleRate-06005\", commandBuffer,\n        inheritance_loc.pNext(Struct::VkCommandBufferInheritanceRenderingInfo, Field::rasterizationSamples),\n        \"is not valid (0x%\" PRIx32 \") and the variableMultisampleRate feature was not enabled.\",\n        p_inherited_rendering_info->rasterizationSamples);\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkCommandBufferInheritanceRenderingInfo-stencilAttachmentFormat-06541\", \"If stencilAttachmentFormat is not VK_FORMAT_UNDEFINED, it must be a format that includes a stencil aspect\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!vkuFormatHasStencil(stencil_format)) {\n        \"VUID-VkCommandBufferInheritanceRenderingInfo-stencilAttachmentFormat-06541\", commandBuffer,\n        inheritance_loc.pNext(Struct::VkCommandBufferInheritanceRenderingInfo, Field::stencilAttachmentFormat),\n        \"%s is not a stencil format.\", string_VkFormat(stencil_format));\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkCommandBufferInheritanceViewportScissorInfoNV-viewportScissor2D-04782\", \"If the inheritedViewportScissor2D feature is not enabled, viewportScissor2D must be VK_FALSE\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!enabled_features.inheritedViewportScissor2D) {\n        \"VUID-VkCommandBufferInheritanceViewportScissorInfoNV-viewportScissor2D-04782\", commandBuffer,\n        inheritance_loc.pNext(Struct::VkCommandBufferInheritanceViewportScissorInfoNV, Field::viewportScissor2D),\n        \"is VK_TRUE, but the inheritedViewportScissor2D feature was not enabled.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkDeviceGroupCommandBufferBeginInfo-deviceMask-00106\", \"deviceMask must be a valid device mask value\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "chained_device_group_struct->deviceMask, objlist,\nbegin_info_loc.pNext(Struct::VkDeviceGroupCommandBufferBeginInfo, Field::deviceMask),\n\"VUID-VkDeviceGroupCommandBufferBeginInfo-deviceMask-00106\");\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkEndCommandBuffer-commandBuffer-00059\", \"commandBuffer must be in the recording state\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (cb_state.state == CbState::InvalidComplete || cb_state.state == CbState::InvalidIncomplete) {\n    skip |= ReportInvalidCommandBuffer(cb_state, error_obj.location, \"VUID-vkEndCommandBuffer-commandBuffer-00059\");\n    skip |= LogError(\"VUID-vkEndCommandBuffer-commandBuffer-00059\", commandBuffer, error_obj.location,\n                     \"Cannot call End on %s when not in the RECORDING state. Must first call vkBeginCommandBuffer().\",\n                     FormatHandle(commandBuffer).c_str());\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkResetCommandBuffer-commandBuffer-00045\", \"commandBuffer must not be in the pending state\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (cb_state->InUse()) {\n    const LogObjectList objlist(commandBuffer, cmd_pool);\n    skip |= LogError(\"VUID-vkResetCommandBuffer-commandBuffer-00045\", objlist, error_obj.location, \"(%s) is in use.\",\n                     FormatHandle(commandBuffer).c_str());\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdBindIndexBuffer-offset-08783\", \"The sum of offset and the base address of the range of VkDeviceMemory object that is backing buffer, must be a multiple of the size of the type indicated by indexType\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!IsIntegerMultipleOf(offset, offset_align)) {\n    vuid = is_2 ? \"VUID-vkCmdBindIndexBuffer2KHR-offset-08783\" : \"VUID-vkCmdBindIndexBuffer-offset-08783\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdBindIndexBuffer2KHR-size-08768\", \"If size is not VK_WHOLE_SIZE, the sum of offset and size must be less than or equal to the size of buffer\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((offset + size) > buffer_state->create_info.size) {\n    const LogObjectList objlist(commandBuffer, buffer);\n    skip |= LogError(\"VUID-vkCmdBindIndexBuffer2KHR-size-08768\", objlist, error_obj.location.dot(Field::size),\n                     \"(%\" PRIu64 \") + offset (%\" PRIu64 \") is larger than the buffer size (%\" PRIu64 \").\", size, offset,\n                     buffer_state->create_info.size);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdUpdateBuffer-dstBuffer-00034\", \"dstBuffer must have been created with VK_BUFFER_USAGE_TRANSFER_DST_BIT usage flag\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "skip |= ValidateMemoryIsBoundToBuffer(commandBuffer, *dst_buffer_state, buffer_loc, \"VUID-vkCmdUpdateBuffer-dstBuffer-00035\");\n                                 \"VUID-vkCmdUpdateBuffer-dstBuffer-00034\", buffer_loc);\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdExecuteCommands-commandBuffer-00104\", \"If commandBuffer has a VK_QUERY_TYPE_PIPELINE_STATISTICS query active, then each element of pCommandBuffers must have been recorded with VkCommandBufferInheritanceInfo::pipelineStatistics having all bits set that are set in the VkQueryPool the query uses\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "const LogObjectList objlist(cb_state.Handle(), sub_cb_state.Handle(), query_object.pool);\n    \"VUID-vkCmdExecuteCommands-commandBuffer-00104\", objlist, cb_loc,\n    \"was created with pInheritanceInfo::pipelineStatistics %s but the active query pool (%s) was \"\n    \"created with %s.\",\n    string_VkQueryPipelineStatisticFlags(cmd_buf_statistics).c_str(), FormatHandle(query_object.pool).c_str(),\n    string_VkQueryPipelineStatisticFlags(query_pool_state->create_info.pipelineStatistics).c_str());\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdDraw-None-07850\", \"If dynamic state was inherited from VkCommandBufferInheritanceViewportScissorInfoNV, it must be set in the current command buffer prior to this drawing command\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (secondary_state.usedDynamicViewportCount &&\n        \"VUID-vkCmdDraw-None-07850\", primary_state_->Handle(), cb_loc,\n        \"(%s) consume inherited dynamic viewport with count state \"\n        \"but the dynamic viewport count (%\" PRIu32 \") exceeds the inheritance limit (viewportDepthCount=%\" PRIu32 \").\",\n        validation_.FormatHandle(secondary_state.Handle()).c_str(), unsigned(viewport_count_to_inherit_),\n        unsigned(secondary_state.inheritedViewportDepths.size()));\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdExecuteCommands-None-09681\", \"If vkCmdExecuteCommands is being called within a render pass instance begun with vkCmdBeginRenderPass, and vkCmdNextSubpass has been called in the current render pass instance, the contents parameter of the last call to vkCmdNextSubpass must have been set to VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS , or VK_SUBPASS_CONTENTS_INLINE_AND_SECONDARY_COMMAND_BUFFERS_KHR\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "const LogObjectList objlist(commandBuffer, cb_state.activeRenderPass->Handle());\n    LogError(\"VUID-vkCmdExecuteCommands-None-09681\", objlist, error_obj.location,\n             \"contents must be set to VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS or \"\n             \"VK_SUBPASS_CONTENTS_INLINE_AND_SECONDARY_COMMAND_BUFFERS_KHR\"\n             \"when calling vkCmdExecuteCommands() within a non-first subpass (currently subpass %\" PRIu32 \").\",\n             cb_state.GetActiveSubpass());\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdExecuteCommands-pBeginInfo-06020\", \"If vkCmdExecuteCommands is being called within a render pass instance begun with vkCmdBeginRenderPass, the render passes specified in the pBeginInfo->pInheritanceInfo->renderPass members of the vkBeginCommandBuffer commands used to begin recording each element of pCommandBuffers must be compatible with the current render pass\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (secondary_rp_state && (cb_state.activeRenderPass->VkHandle() != secondary_rp_state->VkHandle())) {\n                                            \"VUID-vkCmdExecuteCommands-pBeginInfo-06020\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdExecuteCommands-colorAttachmentCount-06027\", \"If vkCmdExecuteCommands is being called within a render pass instance begun with vkCmdBeginRendering, the colorAttachmentCount member of the VkCommandBufferInheritanceRenderingInfo structure included in the pNext chain of VkCommandBufferBeginInfo::pInheritanceInfo used to begin recording each element of pCommandBuffers must be equal to the VkRenderingInfo::colorAttachmentCount parameter to vkCmdBeginRendering\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (inheritance_rendering_info.colorAttachmentCount != rendering_info.colorAttachmentCount) {\n    const LogObjectList objlist(commandBuffer, pCommandBuffers[i], cb_state.activeRenderPass->Handle());\n    skip |= LogError(\"VUID-vkCmdExecuteCommands-colorAttachmentCount-06027\", objlist, cb_loc,\n                     \"(%s) is executed within a dynamic renderpass instance scope begun \"\n                     \"by vkCmdBeginRendering(), but \"\n                     \"VkCommandBufferInheritanceRenderingInfo::colorAttachmentCount (%\" PRIu32\n                     \") does \"\n                     \"not match VkRenderingInfo::colorAttachmentCount (%\" PRIu32 \").\",\n                     FormatHandle(pCommandBuffers[i]).c_str(),\n                     inheritance_rendering_info.colorAttachmentCount, rendering_info.colorAttachmentCount);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdExecuteCommands-pDepthAttachment-06774\", \"If vkCmdExecuteCommands is being called within a render pass instance begun with vkCmdBeginRendering and the VkRenderingInfo::pDepthAttachment->imageView parameter to vkCmdBeginRendering was VK_NULL_HANDLE, the value of the depthAttachmentFormat member of the VkCommandBufferInheritanceRenderingInfo structure included in the pNext chain of VkCommandBufferBeginInfo::pInheritanceInfo used to begin recording each element of pCommandBuffers must be VK_FORMAT_UNDEFINED\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (format != VK_FORMAT_UNDEFINED) {\n    const LogObjectList objlist(commandBuffer, pCommandBuffers[i], cb_state.activeRenderPass->Handle());\n    skip |= LogError(\"VUID-vkCmdExecuteCommands-pDepthAttachment-06774\", objlist, cb_loc,\n                     \"(%s) is executed within a dynamic renderpass \"\n                     \"instance scope begun by vkCmdBeginRendering(), and \"\n                     \"VkRenderingInfo::pDepthAttachment does not define an \"\n                     \"image view but VkCommandBufferInheritanceRenderingInfo::depthAttachmentFormat \"\n                     \"is %s instead of VK_FORMAT_UNDEFINED.\",\n                     FormatHandle(pCommandBuffers[i]).c_str(), string_VkFormat(format));\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdExecuteCommands-pNext-06034\", \"If vkCmdExecuteCommands is being called within a render pass instance begun with vkCmdBeginRendering and the pNext chain of VkCommandBufferInheritanceInfo includes a VkAttachmentSampleCountInfoAMD or VkAttachmentSampleCountInfoNV structure, if the VkRenderingInfo::pStencilAttachment->imageView parameter to vkCmdBeginRendering is not VK_NULL_HANDLE, the value of the depthStencilAttachmentSamples member of the VkAttachmentSampleCountInfoAMD or VkAttachmentSampleCountInfoNV structure included in the pNext chain of VkCommandBufferBeginInfo::pInheritanceInfo used to begin recording each element of pCommandBuffers must be equal to the sample count used to create that image view\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "const LogObjectList objlist(commandBuffer, pCommandBuffers[i],\n    \"VUID-vkCmdExecuteCommands-pNext-06034\", objlist, cb_loc,\n    \"(%s) is executed within a dynamic renderpass instance \"\n    \"scope begun \"\n    \"by vkCmdBeginRenderingKHR(), but \"\n    \"VkAttachmentSampleCountInfo(AMD/NV)::depthStencilAttachmentSamples does \"\n    \"not match the sample count of the imageView in VkRenderingInfoKHR::pStencilAttachment.\",\n    FormatHandle(pCommandBuffers[i]).c_str());\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdExecuteCommands-pCommandBuffers-00089\", \"Each element of pCommandBuffers must be in the pending or executable state\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "skip |= ValidateSecondaryCommandBufferState(cb_state, sub_cb_state, cb_loc);\nskip |= ValidateCommandBufferState(sub_cb_state, cb_loc, 0, \"VUID-vkCmdExecuteCommands-pCommandBuffers-00089\");\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdExecuteCommands-commandBuffer-01820\", \"If commandBuffer is a protected command buffer and protectedNoFault is not supported, each element of pCommandBuffers must be a protected command buffer\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((cb_state.unprotected == false) && (sub_cb_state.unprotected == true)) {\n    const LogObjectList objlist(commandBuffer, pCommandBuffers[i]);\n    skip |= LogError(\"VUID-vkCmdExecuteCommands-commandBuffer-01820\", objlist, cb_loc,\n                     \"(%s) is a unprotected while primary command buffer (%s) is protected.\",\n                     FormatHandle(pCommandBuffers[i]).c_str(), FormatHandle(commandBuffer).c_str());\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdBindTransformFeedbackBuffersEXT-None-02365\", \"Transform feedback must not be active when the vkCmdBindTransformFeedbackBuffersEXT command is recorded\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (cb_state->transform_feedback_active) {\n    skip |= LogError(\"VUID-vkCmdBindTransformFeedbackBuffersEXT-None-02365\", commandBuffer, error_obj.location,\n                     \"transform feedback is active.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdBindTransformFeedbackBuffersEXT-pBuffers-02364\", \"Each element of pBuffers that is non-sparse must be bound completely and contiguously to a single VkDeviceMemory object\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "\"VUID-vkCmdBindTransformFeedbackBuffersEXT-pBuffers-02364\");\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdBeginTransformFeedbackEXT-firstCounterBuffer-09630\", \"The sum of firstCounterBuffer and counterBufferCount must be less than or equal to the number of transform feedback buffers currently bound by vkCmdBindTransformFeedbackBuffersEXT\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((counterBufferCount + firstCounterBuffer) > cb_state->transform_feedback_buffers_bound) {\n    skip |= LogError(\"VUID-vkCmdBeginTransformFeedbackEXT-firstCounterBuffer-09630\", commandBuffer,\n                     error_obj.location.dot(Field::firstCounterBuffer),\n                     \"is %\" PRIu32 \" and counterBufferCount is %\" PRIu32\n                     \" but vkCmdBindTransformFeedbackBuffersEXT only bound %\" PRIu32 \" buffers.\",\n                     firstCounterBuffer, counterBufferCount, cb_state->transform_feedback_buffers_bound);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdEndTransformFeedbackEXT-pCounterBufferOffsets-02378\", \"For each buffer handle in the array, if it is not VK_NULL_HANDLE it must reference a buffer large enough to hold 4 bytes at the corresponding offset from the pCounterBufferOffsets array\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (pCounterBufferOffsets != nullptr && pCounterBufferOffsets[i] + 4 > buffer_state->create_info.size) {\n    const LogObjectList objlist(commandBuffer, pCounterBuffers[i]);\n    skip |= LogError(\"VUID-vkCmdEndTransformFeedbackEXT-pCounterBufferOffsets-02378\", objlist,\n                     error_obj.location.dot(Field::pCounterBuffers, i),\n                     \"is not large enough to hold 4 bytes at pCounterBufferOffsets[%\" PRIu32 \"](0x%\" PRIx64 \").\", i,\n                     pCounterBufferOffsets[i]);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdBindVertexBuffers2-pSizes-03358\", \"If pSizes is not NULL, all elements of pOffsets plus pSizes , where pSizes is not VK_WHOLE_SIZE, must be less than or equal to the size of the corresponding element in pBuffers\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!enabled_features.maintenance5) {\n    skip |= LogError(\"VUID-vkCmdBindVertexBuffers2-pSizes-03358\", objlist, error_obj.location.dot(Field::pSizes, i),\n                     \"is VK_WHOLE_SIZE, which is not valid in this context. This can be fixed by enabling the \"\n                     \"VkPhysicalDeviceMaintenance5FeaturesKHR::maintenance5 feature.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkConditionalRenderingBeginInfoEXT-offset-01983\", \"offset must be less than the size of buffer by at least 32 bits\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (pConditionalRenderingBegin->offset + 4 > buffer_state->create_info.size) {\n    const LogObjectList objlist(commandBuffer, buffer_state->Handle());\n        \"VUID-VkConditionalRenderingBeginInfoEXT-offset-01983\", objlist, conditional_loc.dot(Field::offset),\n        \"(%\" PRIu64 \") + 4 bytes is not less than the size of pConditionalRenderingBegin->buffer (%\" PRIu64 \").\",\n        pConditionalRenderingBegin->offset, buffer_state->create_info.size);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdBindShadingRateImageNV-imageView-02059\", \"If imageView is not VK_NULL_HANDLE, it must be a valid VkImageView handle of type VK_IMAGE_VIEW_TYPE_2D or VK_IMAGE_VIEW_TYPE_2D_ARRAY\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!view_state) {\n    const LogObjectList objlist(commandBuffer, imageView);\n    skip |= LogError(\"VUID-vkCmdBindShadingRateImageNV-imageView-02059\", objlist, error_obj.location,\n                     \"If imageView is not VK_NULL_HANDLE, it must be a valid \"\n                     \"VkImageView handle.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdBindShadingRateImageNV-imageView-02062\", \"If imageView is not VK_NULL_HANDLE, imageLayout must match the actual VkImageLayout of each subresource accessible from imageView at the time the subresource is accessed\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "error_obj.location.dot(Field::imageView),\n\"VUID-vkCmdBindShadingRateImageNV-imageView-02062\");\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdSetViewportShadingRatePaletteNV-None-02064\", \"The shadingRateImage feature must be enabled\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "skip |= ValidateExtendedDynamicState(*cb_state, error_obj.location, enabled_features.shadingRateImage,\n                                     \"VUID-vkCmdSetViewportShadingRatePaletteNV-None-02064\", \"shadingRateImage\");\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkDepthBiasRepresentationInfoEXT-depthBiasExact-08949\", \"If the depthBiasExact feature is not enabled, depthBiasExact must be VK_FALSE\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((depth_bias_representation.depthBiasExact == VK_TRUE) && !enabled_features.depthBiasExact) {\n    skip |= LogError(\"VUID-VkDepthBiasRepresentationInfoEXT-depthBiasExact-08949\", objlist,\n                     loc.pNext(Struct::VkDepthBiasRepresentationInfoEXT, Field::depthBiasExact),\n                     \"is VK_TRUE, but the depthBiasExact feature was not enabled.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdSetDiscardRectangleEXT-x-00587\", \"The x and y member of offset in each VkRect2D element of pDiscardRectangles must be greater than or equal to 0\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (pDiscardRectangles[i].offset.x < 0) {\n    skip |= LogError(\"VUID-vkCmdSetDiscardRectangleEXT-x-00587\", commandBuffer,\n                     error_obj.location.dot(Field::pDiscardRectangles, i).dot(Field::offset).dot(Field::x),\n                     \"(%\" PRId32 \") is negative.\", pDiscardRectangles[i].offset.x);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdSetPatchControlPointsEXT-patchControlPoints-04874\", \"patchControlPoints must be greater than zero and less than or equal to VkPhysicalDeviceLimits::maxTessellationPatchSize\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (patchControlPoints > phys_dev_props.limits.maxTessellationPatchSize) {\n    skip |= LogError(\"VUID-vkCmdSetPatchControlPointsEXT-patchControlPoints-04874\", commandBuffer,\n                     error_obj.location.dot(Field::patchControlPoints),\n                     \"(%\" PRIu32\n                     \") must be less than \"\n                     \"maxTessellationPatchSize (%\" PRIu32 \")\",\n                     patchControlPoints, phys_dev_props.limits.maxTessellationPatchSize);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdSetFrontFace-None-08971\", \"At least one of the following must be true: the extendedDynamicState feature is enabled the shaderObject feature is enabled the value of VkApplicationInfo::apiVersion used to create the VkInstance parent of commandBuffer is greater than or equal to Version 1.3\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "enabled_features.extendedDynamicState || enabled_features.shaderObject,\n\"VUID-vkCmdSetFrontFace-None-08971\", \"extendedDynamicState or shaderObject\");\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdSetScissorWithCount-None-08971\", \"At least one of the following must be true: the extendedDynamicState feature is enabled the shaderObject feature is enabled the value of VkApplicationInfo::apiVersion used to create the VkInstance parent of commandBuffer is greater than or equal to Version 1.3\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "enabled_features.extendedDynamicState || enabled_features.shaderObject,\n\"VUID-vkCmdSetScissorWithCount-None-08971\", \"extendedDynamicState or shaderObject\");\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdSetDepthCompareOp-None-08971\", \"At least one of the following must be true: the extendedDynamicState feature is enabled the shaderObject feature is enabled the value of VkApplicationInfo::apiVersion used to create the VkInstance parent of commandBuffer is greater than or equal to Version 1.3\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "enabled_features.extendedDynamicState || enabled_features.shaderObject,\n\"VUID-vkCmdSetDepthCompareOp-None-08971\", \"extendedDynamicState or shaderObject\");\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdSetStencilOp-None-08971\", \"At least one of the following must be true: the extendedDynamicState feature is enabled the shaderObject feature is enabled the value of VkApplicationInfo::apiVersion used to create the VkInstance parent of commandBuffer is greater than or equal to Version 1.3\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "enabled_features.extendedDynamicState || enabled_features.shaderObject,\n\"VUID-vkCmdSetStencilOp-None-08971\", \"extendedDynamicState or shaderObject\");\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdSetPolygonModeEXT-fillModeNonSolid-07424\", \"If the fillModeNonSolid feature is not enabled, polygonMode must be VK_POLYGON_MODE_FILL or VK_POLYGON_MODE_FILL_RECTANGLE_NV\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((polygonMode == VK_POLYGON_MODE_LINE || polygonMode == VK_POLYGON_MODE_POINT) && !enabled_features.fillModeNonSolid) {\n    skip |= LogError(\"VUID-vkCmdSetPolygonModeEXT-fillModeNonSolid-07424\", commandBuffer,\n                     error_obj.location.dot(Field::polygonMode),\n                     \"is %s but the \"\n                     \"fillModeNonSolid feature was not enabled.\",\n                     string_VkPolygonMode(polygonMode));\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdSetAlphaToOneEnableEXT-None-09423\", \"At least one of the following must be true: The extendedDynamicState3AlphaToOneEnable feature is enabled The shaderObject feature is enabled\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "*cb_state, error_obj.location, enabled_features.extendedDynamicState3AlphaToOneEnable || enabled_features.shaderObject,\n\"VUID-vkCmdSetAlphaToOneEnableEXT-None-09423\", \"extendedDynamicState3AlphaToOneEnable or shaderObject\");\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdSetColorBlendEquationEXT-None-09423\", \"At least one of the following must be true: The extendedDynamicState3ColorBlendEquation feature is enabled The shaderObject feature is enabled\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "*cb_state, error_obj.location, enabled_features.extendedDynamicState3ColorBlendEquation || enabled_features.shaderObject,\n\"VUID-vkCmdSetColorBlendEquationEXT-None-09423\", \"extendedDynamicState3ColorBlendEquation or shaderObject\");\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkColorBlendEquationEXT-colorBlendOp-07361\", \"colorBlendOp and alphaBlendOp must not be a VkBlendOp from VK_EXT_blend_operation_advanced\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (IsAdvanceBlendOperation(equation.colorBlendOp) || IsAdvanceBlendOperation(equation.alphaBlendOp)) {\n        LogError(\"VUID-VkColorBlendEquationEXT-colorBlendOp-07361\", commandBuffer, equation_loc.dot(Field::colorBlendOp),\n                 \"(%s) and alphaBlendOp (%s) must not be an advanced blending operation.\",\n                 string_VkBlendOp(equation.colorBlendOp), string_VkBlendOp(equation.alphaBlendOp));\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdSetRasterizationStreamEXT-transformFeedback-07411\", \"The transformFeedback feature must be enabled\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!enabled_features.transformFeedback) {\n    skip |= LogError(\"VUID-vkCmdSetRasterizationStreamEXT-transformFeedback-07411\", commandBuffer, error_obj.location,\n                     \"the transformFeedback feature was not enabled.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdSetExtraPrimitiveOverestimationSizeEXT-extraPrimitiveOverestimationSize-07428\", \"extraPrimitiveOverestimationSize must be in the range of 0.0 to VkPhysicalDeviceConservativeRasterizationPropertiesEXT::maxExtraPrimitiveOverestimationSize inclusive\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (extraPrimitiveOverestimationSize < 0.0f ||\n    extraPrimitiveOverestimationSize >\n    skip |= LogError(\"VUID-vkCmdSetExtraPrimitiveOverestimationSizeEXT-extraPrimitiveOverestimationSize-07428\", commandBuffer,\n                     error_obj.location.dot(Field::extraPrimitiveOverestimationSize),\n                     \"(%f) must be less then zero or greater than maxExtraPrimitiveOverestimationSize (%f).\",\n                     extraPrimitiveOverestimationSize,\n                     phys_dev_ext_props.conservative_rasterization_props.maxExtraPrimitiveOverestimationSize);\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkColorBlendAdvancedEXT-srcPremultiplied-07505\", \"If the non-premultiplied source color property is not supported, srcPremultiplied must be VK_TRUE\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (advanced.srcPremultiplied == VK_TRUE &&\n    skip |= LogError(\"VUID-VkColorBlendAdvancedEXT-srcPremultiplied-07505\", commandBuffer,\n                     error_obj.location.dot(Field::pColorBlendAdvanced, attachment).dot(Field::srcPremultiplied),\n                     \"is VK_TRUE but the advancedBlendNonPremultipliedSrcColor feature was not enabled.\");\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdSetLineRasterizationModeEXT-None-09423\", \"At least one of the following must be true: The extendedDynamicState3LineRasterizationMode feature is enabled The shaderObject feature is enabled\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "*cb_state, error_obj.location, enabled_features.extendedDynamicState3LineRasterizationMode || enabled_features.shaderObject,\n\"VUID-vkCmdSetLineRasterizationModeEXT-None-09423\", \"extendedDynamicState3LineRasterizationMode or shaderObject\");\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdSetDepthClipNegativeOneToOneEXT-None-09423\", \"At least one of the following must be true: The extendedDynamicState3DepthClipNegativeOneToOne feature is enabled The shaderObject feature is enabled\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "enabled_features.extendedDynamicState3DepthClipNegativeOneToOne || enabled_features.shaderObject,\n\"VUID-vkCmdSetDepthClipNegativeOneToOneEXT-None-09423\", \"extendedDynamicState3DepthClipNegativeOneToOne or shaderObject\");\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdSetCoverageToColorLocationNV-None-09423\", \"At least one of the following must be true: The extendedDynamicState3CoverageToColorLocation feature is enabled The shaderObject feature is enabled\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "enabled_features.extendedDynamicState3CoverageToColorLocation || enabled_features.shaderObject,\n\"VUID-vkCmdSetCoverageToColorLocationNV-None-09423\", \"extendedDynamicState3CoverageToColorLocation or shaderObject\");\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdSetRepresentativeFragmentTestEnableNV-None-09423\", \"At least one of the following must be true: The extendedDynamicState3RepresentativeFragmentTestEnable feature is enabled The shaderObject feature is enabled\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "\"VUID-vkCmdSetRepresentativeFragmentTestEnableNV-None-09423\",\n\"extendedDynamicState3RepresentativeFragmentTestEnable or shaderObject\");\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdSetFragmentShadingRateKHR-pipelineFragmentShadingRate-04508\", \"If pipelineFragmentShadingRate is not enabled, pFragmentSize->height must be 1\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!enabled_features.pipelineFragmentShadingRate && pFragmentSize->height != 1) {\n    skip |= LogError(\"VUID-vkCmdSetFragmentShadingRateKHR-pipelineFragmentShadingRate-04508\", commandBuffer,\n                     error_obj.location.dot(Field::pFragmentSize).dot(Field::height),\n                     \"is %\" PRIu32 \" but the pipelineFragmentShadingRate feature was not enabled.\", pFragmentSize->height);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdSetFragmentShadingRateKHR-pFragmentSize-04513\", \"pFragmentSize->width must be greater than or equal to 1\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (pFragmentSize->width == 0) {\n    skip |= LogError(\"VUID-vkCmdSetFragmentShadingRateKHR-pFragmentSize-04513\", commandBuffer,\n                     error_obj.location.dot(Field::pFragmentSize).dot(Field::width), \"is zero\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdSetFragmentShadingRateKHR-pFragmentSize-04518\", \"pFragmentSize->height must be less than or equal to 4\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (pFragmentSize->height > 4) {\n    skip |= LogError(\"VUID-vkCmdSetFragmentShadingRateKHR-pFragmentSize-04518\", commandBuffer,\n                     error_obj.location.dot(Field::pFragmentSize).dot(Field::height), \"(%\" PRIu32 \") is larger than 4.\",\n                     pFragmentSize->height);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdSetAttachmentFeedbackLoopEnableEXT-attachmentFeedbackLoopDynamicState-08862\", \"The attachmentFeedbackLoopDynamicState feature must be enabled\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "skip |= ValidateExtendedDynamicState(*cb_state, error_obj.location, enabled_features.attachmentFeedbackLoopDynamicState,\n                                     \"VUID-vkCmdSetAttachmentFeedbackLoopEnableEXT-attachmentFeedbackLoopDynamicState-08862\",\n                                     \"attachmentFeedbackLoopDynamicState\");\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkCopyBufferInfo2-dstOffset-00114\", \"The dstOffset member of each element of pRegions must be less than the size of dstBuffer\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (region.dstOffset >= dst_buffer_size) {\n    const char *vuid = is_2 ? \"VUID-VkCopyBufferInfo2-dstOffset-00114\" : \"VUID-vkCmdCopyBuffer-dstOffset-00114\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdCopyBuffer-size-00116\", \"The size member of each element of pRegions must be less than or equal to the size of dstBuffer minus dstOffset\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (region.size > (dst_buffer_size - region.dstOffset)) {\n    const char *vuid = is_2 ? \"VUID-VkCopyBufferInfo2-size-00116\" : \"VUID-vkCmdCopyBuffer-size-00116\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkCopyBufferInfo2-srcBuffer-00119\", \"If srcBuffer is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "const Location src_buffer_loc = loc.dot(Field::srcBuffer);\nvuid = is_2 ? \"VUID-VkCopyBufferInfo2-srcBuffer-00119\" : \"VUID-vkCmdCopyBuffer-srcBuffer-00119\";\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdCopyBuffer-srcBuffer-00118\", \"srcBuffer must have been created with VK_BUFFER_USAGE_TRANSFER_SRC_BIT usage flag\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "skip |= ValidateMemoryIsBoundToBuffer(commandBuffer, *dst_buffer_state, dst_buffer_loc, vuid);\nvuid = is_2 ? \"VUID-VkCopyBufferInfo2-srcBuffer-00118\" : \"VUID-vkCmdCopyBuffer-srcBuffer-00118\";\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdCopyBuffer-commandBuffer-01823\", \"If commandBuffer is an unprotected command buffer and protectedNoFault is not supported, dstBuffer must not be a protected buffer\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "vuid = is_2 ? \"VUID-vkCmdCopyBuffer2-commandBuffer-01822\" : \"VUID-vkCmdCopyBuffer-commandBuffer-01822\";\nskip |= ValidateProtectedBuffer(cb_state, *src_buffer_state, src_buffer_loc, vuid);\nvuid = is_2 ? \"VUID-vkCmdCopyBuffer2-commandBuffer-01823\" : \"VUID-vkCmdCopyBuffer-commandBuffer-01823\";\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkImageSubresourceLayers-layerCount-01700\", \"If layerCount is not VK_REMAINING_ARRAY_LAYERS, it must be greater than 0\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "} else if (subresource_layers->layerCount == 0) {\n        LogError(\"VUID-VkImageSubresourceLayers-layerCount-01700\", handle, subresource_loc.dot(Field::layerCount), \"is zero.\");\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkCopyImageInfo2-srcOffset-01783\", \"The srcOffset and extent members of each element of pRegions must respect the image transfer granularity requirements of commandBuffer's command pool's queue family, as described in VkQueueFamilyProperties\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "vuid = is_2 ? \"VUID-VkCopyImageInfo2-srcOffset-01783\" : \"VUID-vkCmdCopyImage-srcOffset-01783\";\nskip |= CheckItgOffset(objlist, region->srcOffset, granularity, region_loc.dot(Field::srcOffset), vuid);\nvuid = is_2 ? \"VUID-VkCopyImageInfo2-srcOffset-01783\" : \"VUID-vkCmdCopyImage-srcOffset-01783\";\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdCopyImage-dstOffset-01784\", \"The dstOffset and extent members of each element of pRegions must respect the image transfer granularity requirements of commandBuffer's command pool's queue family, as described in VkQueueFamilyProperties\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "vuid = is_2 ? \"VUID-VkCopyImageInfo2-dstOffset-01784\" : \"VUID-vkCmdCopyImage-dstOffset-01784\";\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdCopyImage-dstImage-01788\", \"If dstImage is of type VK_IMAGE_TYPE_2D, then for each element of pRegions, dstOffset.z must be 0\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((dst_image_state.create_info.imageType == VK_IMAGE_TYPE_2D) && (0 != region.dstOffset.z) && !(is_host)) {\n    vuid = is_2 ? \"VUID-VkCopyImageInfo2-dstImage-01788\" : \"VUID-vkCmdCopyImage-dstImage-01788\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkImageCopy-apiVersion-07941\", \"If the VK_KHR_maintenance1 extension is not enabled, and VkPhysicalDeviceProperties::apiVersion is less than Vulkan 1.1, the layerCount member of srcSubresource and dstSubresource must match\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (region.srcSubresource.layerCount != region.dstSubresource.layerCount) {\n        (is_2 || is_host) ? \"VUID-VkImageCopy2-apiVersion-07941\" : \"VUID-VkImageCopy-apiVersion-07941\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkImageCopy2-extent-06668\", \"extent.width must not be 0\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (src_copy_extent.width == 0) {\n    const LogObjectList objlist(handle, src_image);\n    const char *vuid = (is_2 || is_host) ? \"VUID-VkImageCopy2-extent-06668\" : \"VUID-VkImageCopy-extent-06668\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkCopyImageInfo2-srcImage-08794\", \"If srcImage and dstImage have the same VkImageType, and one of the layerCount members of srcSubresource or dstSubresource is VK_REMAINING_ARRAY_LAYERS, the other member must be either VK_REMAINING_ARRAY_LAYERS or equal to the arrayLayers member of the VkImageCreateInfo used to create the image minus baseArrayLayer\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (src_slices != (dst_image_state->create_info.arrayLayers - dst_subresource.baseArrayLayer)) {\n    vuid = is_2 ? \"VUID-VkCopyImageInfo2-srcImage-08794\" : \"VUID-vkCmdCopyImage-srcImage-08794\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdCopyImage-srcImage-08793\", \"If srcImage and dstImage have the same VkImageType, for each element of pRegions, if neither of the layerCount members of srcSubresource or dstSubresource are VK_REMAINING_ARRAY_LAYERS, the layerCount members of srcSubresource or dstSubresource must match\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "vuid = is_2 ? \"VUID-VkCopyImageInfo2-srcImage-08793\" : \"VUID-vkCmdCopyImage-srcImage-08793\";\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkCopyImageInfo2-srcImage-01995\", \"The format features of srcImage must contain VK_FORMAT_FEATURE_TRANSFER_SRC_BIT\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "vuid = is_2 ? \"VUID-VkCopyImageInfo2-srcImage-01995\" : \"VUID-vkCmdCopyImage-srcImage-01995\";\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdCopyImage-srcImage-01791\", \"If srcImage is of type VK_IMAGE_TYPE_2D, and dstImage is of type VK_IMAGE_TYPE_3D, then for each element of pRegions, extent.depth must equal srcSubresource.layerCount\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (src_is_2d && dst_is_3d && (src_copy_extent.depth != src_subresource.layerCount)) {\n    vuid = is_2 ? \"VUID-VkCopyImageInfo2-srcImage-01791\" : \"VUID-vkCmdCopyImage-srcImage-01791\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkCopyImageInfo2-apiVersion-07933\", \"If the VK_KHR_maintenance1 extension is not enabled, and VkPhysicalDeviceProperties::apiVersion is less than Vulkan 1.1, srcImage and dstImage must have the same VkImageType\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (src_image_type != dst_image_type) {\n    vuid = is_2 ? \"VUID-VkCopyImageInfo2-apiVersion-07933\" : \"VUID-vkCmdCopyImage-apiVersion-07933\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdCopyImage-srcImage-08713\", \"If srcImage has a multi-planar image format, then for each element of pRegions, srcSubresource.aspectMask must be a single valid multi-planar aspect mask bit\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (vkuFormatIsMultiplane(src_format) && !IsOnlyOneValidPlaneAspect(src_format, aspect)) {\n    vuid = is_2 ? \"VUID-VkCopyImageInfo2-srcImage-08713\" : \"VUID-vkCmdCopyImage-srcImage-08713\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkCopyImageInfo2-srcImage-01556\", \"If srcImage has a multi-planar image format and the dstImage does not have a multi-planar image format, then for each element of pRegions, dstSubresource.aspectMask must be VK_IMAGE_ASPECT_COLOR_BIT\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((vkuFormatIsMultiplane(src_format)) && (!vkuFormatIsMultiplane(dst_format)) &&\n    vuid = is_2 ? \"VUID-VkCopyImageInfo2-srcImage-01556\" : \"VUID-vkCmdCopyImage-srcImage-01556\";\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdCopyImage-None-01549\", \"In a copy to or from a plane of a multi-planar image, the VkFormat of the image and plane must be compatible according to the description of compatible planes for the plane being copied\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((src_format_size != dst_format_size) && (src_format_size != 0) && (dst_format_size != 0)) {\n    vuid = is_2 ? \"VUID-VkCopyImageInfo2-None-01549\" : \"VUID-vkCmdCopyImage-None-01549\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkCopyImageInfo2-dstImageLayout-00133\", \"dstImageLayout must specify the layout of the image subresources of dstImage specified in pRegions at the time this command is executed on a VkDevice\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "vuid = is_2 ? \"VUID-VkCopyImageInfo2-srcImageLayout-00128\" : \"VUID-vkCmdCopyImage-srcImageLayout-00128\";\nskip |= VerifyImageLayoutSubresource(cb_state, *src_image_state, src_subresource, srcImageLayout, src_image_loc, vuid);\nvuid = is_2 ? \"VUID-VkCopyImageInfo2-dstImageLayout-00133\" : \"VUID-vkCmdCopyImage-dstImageLayout-00133\";\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdCopyImage-srcImage-09247\", \"If the VkFormat of each of srcImage and dstImage is a compressed image format, the formats must have the same texel block extent\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (src_block_extent.width != dst_block_extent.width || src_block_extent.height != dst_block_extent.height ||\n    const char *compatible_vuid = is_2 ? \"VUID-VkCopyImageInfo2-srcImage-09247\" : \"VUID-vkCmdCopyImage-srcImage-09247\";\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkCopyImageInfo2-aspect-06663\", \"If the aspect member of any element of pRegions includes any flag other than VK_IMAGE_ASPECT_STENCIL_BIT or dstImage was not created with separate stencil usage, VK_IMAGE_USAGE_TRANSFER_DST_BIT must have been included in the VkImageCreateInfo::usage used to create dstImage\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "vuid = is_2 ? \"VUID-VkCopyImageInfo2-aspect-06662\" : \"VUID-vkCmdCopyImage-aspect-06662\";\n    ValidateImageUsageFlags(commandBuffer, *src_image_state, VK_IMAGE_USAGE_TRANSFER_SRC_BIT, false, vuid, src_image_loc);\nvuid = is_2 ? \"VUID-VkCopyImageInfo2-aspect-06663\" : \"VUID-vkCmdCopyImage-aspect-06663\";\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkCopyImageInfo2-aspect-06665\", \"If the aspect member of any element of pRegions includes VK_IMAGE_ASPECT_STENCIL_BIT, and dstImage was created with separate stencil usage, VK_IMAGE_USAGE_TRANSFER_DST_BIT must have been included in the VkImageStencilUsageCreateInfo::stencilUsage used to create dstImage\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (dst_separate_stencil && has_stencil_aspect &&\n    vuid = is_2 ? \"VUID-VkCopyImageInfo2-aspect-06665\" : \"VUID-vkCmdCopyImage-aspect-06665\";\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdCopyImage2-commandBuffer-01825\", \"If commandBuffer is an unprotected command buffer and protectedNoFault is not supported, srcImage must not be a protected image\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "vuid = is_2 ? \"VUID-vkCmdCopyImage2-commandBuffer-01825\" : \"VUID-vkCmdCopyImage-commandBuffer-01825\";\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkCopyImageInfo2-srcImageLayout-01917\", \"srcImageLayout must be VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR, VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL, or VK_IMAGE_LAYOUT_GENERAL\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!IsValueIn(srcImageLayout,\n    vuid = is_2 ? \"VUID-VkCopyImageInfo2-srcImageLayout-01917\" : \"VUID-vkCmdCopyImage-srcImageLayout-01917\";\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdCopyImageToBuffer2-commandBuffer-cmdpool\", \"The VkCommandPool that commandBuffer was allocated from must support transfer, graphics, or compute operations\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (0 == (queue_flags & (VK_QUEUE_GRAPHICS_BIT | VK_QUEUE_COMPUTE_BIT | VK_QUEUE_TRANSFER_BIT))) {\n    const LogObjectList objlist(cb_state.allocate_info.commandPool, commandBuffer, srcImage, dstBuffer);\n    vuid = is_2 ? \"VUID-vkCmdCopyImageToBuffer2-commandBuffer-cmdpool\" : \"VUID-vkCmdCopyImageToBuffer-commandBuffer-cmdpool\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkCopyImageToBufferInfo2-srcImage-07973\", \"srcImage must have a sample count equal to VK_SAMPLE_COUNT_1_BIT\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "vuid = is_2 ? \"VUID-VkCopyImageToBufferInfo2-pRegions-00183\" : \"VUID-vkCmdCopyImageToBuffer-pRegions-00183\";\nskip |= ValidateBufferBounds(commandBuffer, *src_image_state, *dst_buffer_state, regionCount, pRegions, loc, vuid);\nvuid = is_2 ? \"VUID-VkCopyImageToBufferInfo2-srcImage-07973\" : \"VUID-vkCmdCopyImageToBuffer-srcImage-07973\";\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdCopyImageToBuffer-dstBuffer-00192\", \"If dstBuffer is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "vuid = is_2 ? \"VUID-VkCopyImageToBufferInfo2-srcImage-07966\" : \"VUID-vkCmdCopyImageToBuffer-srcImage-07966\";\nskip |= ValidateMemoryIsBoundToImage(src_objlist, *src_image_state, src_image_loc, vuid);\nvuid = is_2 ? \"VUID-VkCopyImageToBufferInfo2-dstBuffer-00192\" : \"VUID-vkCmdCopyImageToBuffer-dstBuffer-00192\";\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdCopyImageToBuffer-commandBuffer-01831\", \"If commandBuffer is an unprotected command buffer and protectedNoFault is not supported, srcImage must not be a protected image\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "skip |= ValidateImageUsageFlags(commandBuffer, *src_image_state, VK_IMAGE_USAGE_TRANSFER_SRC_BIT, true, vuid, src_image_loc);\nvuid = is_2 ? \"VUID-VkCopyImageToBufferInfo2-dstBuffer-00191\" : \"VUID-vkCmdCopyImageToBuffer-dstBuffer-00191\";\nskip |= ValidateBufferUsageFlags(dst_objlist, *dst_buffer_state, VK_BUFFER_USAGE_TRANSFER_DST_BIT, true, vuid, dst_buffer_loc);\nvuid = is_2 ? \"VUID-vkCmdCopyImageToBuffer2-commandBuffer-01831\" : \"VUID-vkCmdCopyImageToBuffer-commandBuffer-01831\";\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdCopyImageToBuffer2-commandBuffer-01833\", \"If commandBuffer is a protected command buffer and protectedNoFault is not supported, dstBuffer must not be an unprotected buffer\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "skip |= ValidateProtectedImage(cb_state, *src_image_state, src_image_loc, vuid);\nvuid = is_2 ? \"VUID-vkCmdCopyImageToBuffer2-commandBuffer-01832\" : \"VUID-vkCmdCopyImageToBuffer-commandBuffer-01832\";\nskip |= ValidateProtectedBuffer(cb_state, *dst_buffer_state, dst_buffer_loc, vuid);\nvuid = is_2 ? \"VUID-vkCmdCopyImageToBuffer2-commandBuffer-01833\" : \"VUID-vkCmdCopyImageToBuffer-commandBuffer-01833\";\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkCopyImageToBufferInfo2-srcImageLayout-01397\", \"srcImageLayout must be VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR, VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL, or VK_IMAGE_LAYOUT_GENERAL\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!IsValueIn(srcImageLayout,\n    vuid = is_2 ? \"VUID-VkCopyImageToBufferInfo2-srcImageLayout-01397\" : \"VUID-vkCmdCopyImageToBuffer-srcImageLayout-01397\";\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdCopyImageToBuffer2-imageOffset-07747\", \"The imageOffset and imageExtent members of each element of pCopyImageToBufferInfo->pRegions must respect the image transfer granularity requirements of commandBuffer's command pool's queue family, as described in VkQueueFamilyProperties\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "vuid = is_2 ? \"VUID-VkCopyImageToBufferInfo2-srcImageLayout-00189\" : \"VUID-vkCmdCopyImageToBuffer-srcImageLayout-00189\";\n    VerifyImageLayoutSubresource(cb_state, *src_image_state, region.imageSubresource, srcImageLayout, src_image_loc, vuid);\nvuid = is_2 ? \"VUID-vkCmdCopyImageToBuffer2-imageOffset-07747\" : \"VUID-vkCmdCopyImageToBuffer-imageOffset-07747\";\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkCopyBufferToImageInfo2-dstImage-07973\", \"dstImage must have a sample count equal to VK_SAMPLE_COUNT_1_BIT\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "vuid = is_2 ? \"VUID-VkCopyBufferToImageInfo2-pRegions-00171\" : \"VUID-vkCmdCopyBufferToImage-pRegions-00171\";\nskip |= ValidateBufferBounds(commandBuffer, *dst_image_state, *src_buffer_state, regionCount, pRegions, loc, vuid);\nvuid = is_2 ? \"VUID-VkCopyBufferToImageInfo2-dstImage-07973\" : \"VUID-vkCmdCopyBufferToImage-dstImage-07973\";\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdCopyBufferToImage-dstImage-07966\", \"If dstImage is non-sparse then the image or the specified disjoint plane must be bound completely and contiguously to a single VkDeviceMemory object\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "skip |= ValidateImageSampleCount(cb_state.VkHandle(), *dst_image_state, VK_SAMPLE_COUNT_1_BIT, dst_image_loc, vuid);\nvuid = is_2 ? \"VUID-VkCopyBufferToImageInfo2-srcBuffer-00176\" : \"VUID-vkCmdCopyBufferToImage-srcBuffer-00176\";\nskip |= ValidateMemoryIsBoundToBuffer(commandBuffer, *src_buffer_state, src_buffer_loc, vuid);\nvuid = is_2 ? \"VUID-VkCopyBufferToImageInfo2-dstImage-07966\" : \"VUID-vkCmdCopyBufferToImage-dstImage-07966\";\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdCopyBufferToImage-commandBuffer-01828\", \"If commandBuffer is an unprotected command buffer and protectedNoFault is not supported, srcBuffer must not be a protected buffer\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "skip |= ValidateBufferUsageFlags(src_objlist, *src_buffer_state, VK_BUFFER_USAGE_TRANSFER_SRC_BIT, true, vuid, src_buffer_loc);\nvuid = is_2 ? \"VUID-VkCopyBufferToImageInfo2-dstImage-00177\" : \"VUID-vkCmdCopyBufferToImage-dstImage-00177\";\nskip |= ValidateImageUsageFlags(commandBuffer, *dst_image_state, VK_IMAGE_USAGE_TRANSFER_DST_BIT, true, vuid, dst_image_loc);\nvuid = is_2 ? \"VUID-vkCmdCopyBufferToImage2-commandBuffer-01828\" : \"VUID-vkCmdCopyBufferToImage-commandBuffer-01828\";\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkCopyBufferToImageInfo2-dstImage-07969\", \"dstImage must not have been created with flags containing VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (dst_image_state->create_info.flags & VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT) {\n    const LogObjectList objlist(commandBuffer, srcBuffer, dstImage);\n    vuid = is_2 ? \"VUID-VkCopyBufferToImageInfo2-dstImage-07969\" : \"VUID-vkCmdCopyBufferToImage-dstImage-07969\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdCopyBufferToImage-dstImageLayout-01396\", \"dstImageLayout must be VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR, VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL, or VK_IMAGE_LAYOUT_GENERAL\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!IsValueIn(dstImageLayout,\n    vuid = is_2 ? \"VUID-VkCopyBufferToImageInfo2-dstImageLayout-01396\" : \"VUID-vkCmdCopyBufferToImage-dstImageLayout-01396\";\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdCopyBufferToImage-commandBuffer-07739\", \"If the queue family used to create the VkCommandPool which commandBuffer was allocated from does not support VK_QUEUE_GRAPHICS_BIT, for each element of pRegions, the aspectMask member of imageSubresource must not be VK_IMAGE_ASPECT_DEPTH_BIT or VK_IMAGE_ASPECT_STENCIL_BIT\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!HasRequiredQueueFlags(cb_state, *physical_device_state, VK_QUEUE_GRAPHICS_BIT)) {\n        is_2 ? \"VUID-vkCmdCopyBufferToImage2-commandBuffer-07739\" : \"VUID-vkCmdCopyBufferToImage-commandBuffer-07739\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCopyMemoryToImageEXT-hostImageCopy-09058\", \"The hostImageCopy feature must be enabled\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!(enabled_features.hostImageCopy)) {\n        from_image ? \"VUID-vkCopyImageToMemoryEXT-hostImageCopy-09063\" : \"VUID-vkCopyMemoryToImageEXT-hostImageCopy-09058\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkCopyImageToMemoryInfoEXT-srcImage-07969\", \"srcImage must not have been created with flags containing VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (image_state->create_info.flags & VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT) {\n        from_image ? \"VUID-VkCopyImageToMemoryInfoEXT-srcImage-07969\" : \"VUID-VkCopyMemoryToImageInfoEXT-dstImage-07969\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkCopyMemoryToImageInfoEXT-dstImage-07973\", \"dstImage must have a sample count equal to VK_SAMPLE_COUNT_1_BIT\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "from_image ? \"VUID-VkCopyImageToMemoryInfoEXT-srcImage-07973\" : \"VUID-VkCopyMemoryToImageInfoEXT-dstImage-07973\");\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkCopyImageToMemoryInfoEXT-flags-09394\", \"If flags includes VK_HOST_IMAGE_COPY_MEMCPY_EXT, for each region in pRegions, memoryRowLength and memoryImageHeight must both be 0\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((region.memoryRowLength != 0) || (region.memoryImageHeight != 0)) {\n        from_image ? \"VUID-VkCopyImageToMemoryInfoEXT-flags-09394\" : \"VUID-VkCopyMemoryToImageInfoEXT-flags-09393\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkCopyMemoryToImageInfoEXT-dstImage-09112\", \"If the stencil aspect of dstImage is accessed, and dstImage was created with separate stencil usage, dstImage must have been created with VK_IMAGE_USAGE_HOST_TRANSFER_BIT_EXT set in VkImageStencilUsageCreateInfo::stencilUsage\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "from_image ? \"VUID-VkCopyImageToMemoryInfoEXT-srcImage-09111\" : \"VUID-VkCopyMemoryToImageInfoEXT-dstImage-09111\";\nfrom_image ? \"VUID-VkCopyImageToMemoryInfoEXT-srcImage-09112\" : \"VUID-VkCopyMemoryToImageInfoEXT-dstImage-09112\";\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkCopyImageToImageInfoEXT-srcImage-09069\", \"srcImage and dstImage must have been created with identical image creation parameters\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "std::stringstream ss;\nss << \"The creation parameters for srcImage and dstImage differ:\\n\" << mismatch_stream.str();\nLogObjectList objlist(src_image_state.Handle(), dst_image_state.Handle());\nskip |= LogError(\"VUID-VkCopyImageToImageInfoEXT-srcImage-09069\", objlist, loc, \"%s.\", ss.str().c_str());\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkCopyImageToImageInfoEXT-dstImage-09115\", \"If flags contains VK_HOST_IMAGE_COPY_MEMCPY_EXT, the extent member of each element of pRegions must equal the extents of dstImage identified by dstSubresource\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!IsExtentEqual(region.extent, image_state.create_info.extent)) {\n        is_src ? \"VUID-VkCopyImageToImageInfoEXT-srcImage-09115\" : \"VUID-VkCopyImageToImageInfoEXT-dstImage-09115\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkCopyImageToImageInfoEXT-srcImage-07981\", \"If srcImage has a multi-planar image format, then for each element of pRegions, srcSubresource.aspectMask must be a single valid multi-planar aspect mask bit\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "is_src ? \"VUID-VkCopyImageToImageInfoEXT-srcImage-07981\" : \"VUID-VkCopyImageToImageInfoEXT-dstImage-07981\";\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkCopyImageToImageInfoEXT-dstImageLayout-09073\", \"dstImageLayout must be one of the image layouts returned in VkPhysicalDeviceHostImageCopyPropertiesEXT::pCopyDstLayouts\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "\"VUID-VkCopyImageToImageInfoEXT-srcImageLayout-09072\");\ninfo_ptr->dstImageLayout, loc.dot(Field::dstImageLayout), Field::pCopyDstLayouts,\n\"VUID-VkCopyImageToImageInfoEXT-dstImageLayout-09073\");\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkCopyImageToImageInfoEXT-srcImage-09111\", \"If the stencil aspect of srcImage is accessed, and srcImage was not created with separate stencil usage, srcImage must have been created with VK_IMAGE_USAGE_HOST_TRANSFER_BIT_EXT set in VkImageCreateInfo::usage\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "\"VUID-VkCopyImageToImageInfoEXT-dstImageLayout-09071\");\nskip |= UsageHostTransferCheck(*src_image_state, has_stencil, has_non_stencil, \"VUID-VkCopyImageToImageInfoEXT-srcImage-09111\",\n\"VUID-VkCopyImageToImageInfoEXT-srcImage-09112\", \"VUID-VkCopyImageToImageInfoEXT-srcImage-09113\",\nerror_obj.location);\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkCopyImageToImageInfoEXT-dstImage-09113\", \"If non-stencil aspects of dstImage are accessed, dstImage must have been created with VK_IMAGE_USAGE_HOST_TRANSFER_BIT_EXT set in VkImageCreateInfo::usage\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "\"VUID-VkCopyImageToImageInfoEXT-srcImage-09112\", \"VUID-VkCopyImageToImageInfoEXT-srcImage-09113\",\nskip |= UsageHostTransferCheck(*dst_image_state, has_stencil, has_non_stencil, \"VUID-VkCopyImageToImageInfoEXT-dstImage-09111\",\n\"VUID-VkCopyImageToImageInfoEXT-dstImage-09112\", \"VUID-VkCopyImageToImageInfoEXT-dstImage-09113\",\nerror_obj.location);\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkBlitImageInfo2-srcImage-00220\", \"If srcImage is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "skip |= ValidateImageSampleCount(commandBuffer, *src_image_state, VK_SAMPLE_COUNT_1_BIT, src_image_loc, vuid);\nvuid = is_2 ? \"VUID-VkBlitImageInfo2-dstImage-00234\" : \"VUID-vkCmdBlitImage-dstImage-00234\";\nskip |= ValidateImageSampleCount(commandBuffer, *dst_image_state, VK_SAMPLE_COUNT_1_BIT, dst_image_loc, vuid);\nvuid = is_2 ? \"VUID-VkBlitImageInfo2-srcImage-00220\" : \"VUID-vkCmdBlitImage-srcImage-00220\";\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdBlitImage-srcImage-00219\", \"srcImage must have been created with VK_IMAGE_USAGE_TRANSFER_SRC_BIT usage flag\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "skip |= ValidateMemoryIsBoundToImage(src_objlist, *src_image_state, src_image_loc, vuid);\nvuid = is_2 ? \"VUID-VkBlitImageInfo2-dstImage-00225\" : \"VUID-vkCmdBlitImage-dstImage-00225\";\nskip |= ValidateMemoryIsBoundToImage(dst_objlist, *dst_image_state, dst_image_loc, vuid);\nvuid = is_2 ? \"VUID-VkBlitImageInfo2-srcImage-00219\" : \"VUID-vkCmdBlitImage-srcImage-00219\";\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkBlitImageInfo2-dstImage-02000\", \"The format features of dstImage must contain VK_FORMAT_FEATURE_BLIT_DST_BIT\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "skip |= ValidateImageUsageFlags(commandBuffer, *dst_image_state, VK_IMAGE_USAGE_TRANSFER_DST_BIT, true, vuid, dst_image_loc);\nvuid = is_2 ? \"VUID-VkBlitImageInfo2-srcImage-01999\" : \"VUID-vkCmdBlitImage-srcImage-01999\";\nskip |= ValidateImageFormatFeatureFlags(commandBuffer, *src_image_state, VK_FORMAT_FEATURE_2_BLIT_SRC_BIT, src_image_loc, vuid);\nvuid = is_2 ? \"VUID-VkBlitImageInfo2-dstImage-02000\" : \"VUID-vkCmdBlitImage-dstImage-02000\";\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdBlitImage2-commandBuffer-01835\", \"If commandBuffer is an unprotected command buffer and protectedNoFault is not supported, dstImage must not be a protected image\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "skip |= ValidateImageFormatFeatureFlags(commandBuffer, *dst_image_state, VK_FORMAT_FEATURE_2_BLIT_DST_BIT, dst_image_loc, vuid);\nvuid = is_2 ? \"VUID-vkCmdBlitImage2-commandBuffer-01834\" : \"VUID-vkCmdBlitImage-commandBuffer-01834\";\nskip |= ValidateProtectedImage(cb_state, *src_image_state, src_image_loc, vuid);\nvuid = is_2 ? \"VUID-vkCmdBlitImage2-commandBuffer-01835\" : \"VUID-vkCmdBlitImage-commandBuffer-01835\";\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdBlitImage-dstImage-02545\", \"dstImage and srcImage must not have been created with flags containing VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (src_image_state->create_info.flags & VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT) {\n    vuid = is_2 ? \"VUID-VkBlitImageInfo2-dstImage-02545\" : \"VUID-vkCmdBlitImage-dstImage-02545\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdBlitImage-filter-02002\", \"If filter is VK_FILTER_CUBIC_EXT, then the format features of srcImage must contain VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT, src_image_loc, vuid);\n} else if (VK_FILTER_CUBIC_IMG == filter) {\nvuid = is_2 ? \"VUID-VkBlitImageInfo2-filter-02002\" : \"VUID-vkCmdBlitImage-filter-02002\";\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkBlitImageInfo2-filter-00237\", \"If filter is VK_FILTER_CUBIC_EXT, srcImage must be of type VK_IMAGE_TYPE_2D\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((VK_FILTER_CUBIC_IMG == filter) && (VK_IMAGE_TYPE_2D != src_type)) {\n    vuid = is_2 ? \"VUID-VkBlitImageInfo2-filter-00237\" : \"VUID-vkCmdBlitImage-filter-00237\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdBlitImage-srcImage-00229\", \"If either of srcImage or dstImage was created with a signed integer VkFormat, the other must also have been created with a signed integer VkFormat\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (vkuFormatIsSINT(src_format) != vkuFormatIsSINT(dst_format)) {\n    vuid = is_2 ? \"VUID-VkBlitImageInfo2-srcImage-00229\" : \"VUID-vkCmdBlitImage-srcImage-00229\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkBlitImageInfo2-srcImageLayout-01398\", \"srcImageLayout must be VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR, VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL or VK_IMAGE_LAYOUT_GENERAL\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!IsValueIn(srcImageLayout,\n    vuid = is_2 ? \"VUID-VkBlitImageInfo2-srcImageLayout-01398\" : \"VUID-vkCmdBlitImage-srcImageLayout-01398\";\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdBlitImage-srcImage-09459\", \"If srcImage and dstImage are the same, and an elements of pRegions contains the srcSubresource and dstSubresource with matching mipLevel and overlapping array layers, then the srcImageLayout and dstImageLayout must be VK_IMAGE_LAYOUT_GENERAL or VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!IsValueIn(srcImageLayout, {VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR, VK_IMAGE_LAYOUT_GENERAL}) ||\n    vuid = is_2 ? \"VUID-VkBlitImageInfo2-srcImage-09459\" : \"VUID-vkCmdBlitImage-srcImage-09459\";\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkImageBlit-layerCount-08801\", \"If one of the layerCount members of srcSubresource or dstSubresource is VK_REMAINING_ARRAY_LAYERS, the other member must be either VK_REMAINING_ARRAY_LAYERS or equal to the arrayLayers member of the VkImageCreateInfo used to create the image minus baseArrayLayer\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (src_subresource.layerCount != (dst_image_state->create_info.arrayLayers - dst_subresource.baseArrayLayer)) {\n    vuid = is_2 ? \"VUID-VkImageBlit2-layerCount-08801\" : \"VUID-VkImageBlit-layerCount-08801\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkImageBlit2-layerCount-08800\", \"If neither of the layerCount members of srcSubresource or dstSubresource are VK_REMAINING_ARRAY_LAYERS, the layerCount members of srcSubresource or dstSubresource must match\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "} else if (src_subresource.layerCount != dst_subresource.layerCount) {\n    vuid = is_2 ? \"VUID-VkImageBlit2-layerCount-08800\" : \"VUID-VkImageBlit-layerCount-08800\";\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkBlitImageInfo2-aspectMask-00242\", \"For each element of pRegions, dstSubresource.aspectMask must specify aspects present in dstImage\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!VerifyAspectsPresent(dst_subresource.aspectMask, dst_format)) {\n    vuid = is_2 ? \"VUID-VkBlitImageInfo2-aspectMask-00242\" : \"VUID-vkCmdBlitImage-aspectMask-00242\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdBlitImage-srcImage-00247\", \"If srcImage is of type VK_IMAGE_TYPE_1D or VK_IMAGE_TYPE_2D, then for each element of pRegions, srcOffsets[0].z must be 0 and srcOffsets[1].z must be 1\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((0 != region.srcOffsets[0].z) || (1 != region.srcOffsets[1].z)) {\n    vuid = is_2 ? \"VUID-VkBlitImageInfo2-srcImage-00247\" : \"VUID-vkCmdBlitImage-srcImage-00247\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkBlitImageInfo2-srcOffset-00246\", \"For each element of pRegions, srcOffsets[0].z and srcOffsets[1].z must both be greater than or equal to 0 and less than or equal to the depth of the specified srcSubresource of srcImage\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((region.srcOffsets[0].z < 0) || (region.srcOffsets[0].z > static_cast<int32_t>(src_extent.depth)) ||\n    vuid = is_2 ? \"VUID-VkBlitImageInfo2-srcOffset-00246\" : \"VUID-vkCmdBlitImage-srcOffset-00246\";\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdBlitImage-dstImage-00250\", \"If dstImage is of type VK_IMAGE_TYPE_1D, then for each element of pRegions, dstOffsets[0].y must be 0 and dstOffsets[1].y must be 1\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((0 != region.dstOffsets[0].y) || (1 != region.dstOffsets[1].y)) {\n    vuid = is_2 ? \"VUID-VkBlitImageInfo2-dstImage-00250\" : \"VUID-vkCmdBlitImage-dstImage-00250\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkBlitImageInfo2-dstOffset-00249\", \"For each element of pRegions, dstOffsets[0].y and dstOffsets[1].y must both be greater than or equal to 0 and less than or equal to the height of the specified dstSubresource of dstImage\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((region.dstOffsets[0].y < 0) || (region.dstOffsets[0].y > static_cast<int32_t>(dst_extent.height)) ||\n    vuid = is_2 ? \"VUID-VkBlitImageInfo2-dstOffset-00249\" : \"VUID-vkCmdBlitImage-dstOffset-00249\";\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdBlitImage-pRegions-00216\", \"The destination region specified by each element of pRegions must be a region that is contained within dstImage\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (oob) {\n    vuid = is_2 ? \"VUID-VkBlitImageInfo2-pRegions-00216\" : \"VUID-vkCmdBlitImage-pRegions-00216\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkResolveImageInfo2-srcImage-00256\", \"If srcImage is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "const LogObjectList all_objlist(commandBuffer, srcImage, dstImage);\nvuid = is_2 ? \"VUID-VkResolveImageInfo2-srcImage-00256\" : \"VUID-vkCmdResolveImage-srcImage-00256\";\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdResolveImage-dstImage-02003\", \"The format features of dstImage must contain VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "vuid = is_2 ? \"VUID-VkResolveImageInfo2-dstImage-00258\" : \"VUID-vkCmdResolveImage-dstImage-00258\";\nskip |= ValidateMemoryIsBoundToImage(dst_objlist, *dst_image_state, dst_image_loc, vuid);\nvuid = is_2 ? \"VUID-VkResolveImageInfo2-dstImage-02003\" : \"VUID-vkCmdResolveImage-dstImage-02003\";\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdResolveImage-commandBuffer-01839\", \"If commandBuffer is a protected command buffer and protectedNoFault is not supported, dstImage must not be an unprotected image\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "skip |= ValidateProtectedImage(cb_state, *src_image_state, src_image_loc, vuid);\nvuid = is_2 ? \"VUID-vkCmdResolveImage2-commandBuffer-01838\" : \"VUID-vkCmdResolveImage-commandBuffer-01838\";\nskip |= ValidateProtectedImage(cb_state, *dst_image_state, dst_image_loc, vuid);\nvuid = is_2 ? \"VUID-vkCmdResolveImage2-commandBuffer-01839\" : \"VUID-vkCmdResolveImage-commandBuffer-01839\";\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdResolveImage-srcImage-06763\", \"The format features of srcImage must contain VK_FORMAT_FEATURE_TRANSFER_SRC_BIT\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "skip |= ValidateUnprotectedImage(cb_state, *dst_image_state, dst_image_loc, vuid);\nvuid = is_2 ? \"VUID-VkResolveImageInfo2-srcImage-06762\" : \"VUID-vkCmdResolveImage-srcImage-06762\";\nskip |= ValidateImageUsageFlags(commandBuffer, *src_image_state, VK_IMAGE_USAGE_TRANSFER_SRC_BIT, true, vuid, src_image_loc);\nvuid = is_2 ? \"VUID-VkResolveImageInfo2-srcImage-06763\" : \"VUID-vkCmdResolveImage-srcImage-06763\";\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkResolveImageInfo2-dstImage-02546\", \"dstImage and srcImage must not have been created with flags containing VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (src_image_state->create_info.flags & VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT) {\n    vuid = is_2 ? \"VUID-VkResolveImageInfo2-dstImage-02546\" : \"VUID-vkCmdResolveImage-dstImage-02546\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdResolveImage-srcImageLayout-01400\", \"srcImageLayout must be VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR, VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL or VK_IMAGE_LAYOUT_GENERAL\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!IsValueIn(srcImageLayout,\n    vuid = is_2 ? \"VUID-VkResolveImageInfo2-srcImageLayout-01400\" : \"VUID-vkCmdResolveImage-srcImageLayout-01400\";\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkResolveImageInfo2-dstImageLayout-00262\", \"dstImageLayout must specify the layout of the image subresources of dstImage specified in pRegions at the time this command is executed on a VkDevice\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "vuid = is_2 ? \"VUID-VkResolveImageInfo2-srcImageLayout-00260\" : \"VUID-vkCmdResolveImage-srcImageLayout-00260\";\nskip |= VerifyImageLayoutSubresource(cb_state, *src_image_state, src_subresource, srcImageLayout, src_image_loc, vuid);\nvuid = is_2 ? \"VUID-VkResolveImageInfo2-dstImageLayout-00262\" : \"VUID-vkCmdResolveImage-dstImageLayout-00262\";\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkImageResolve2-layerCount-08804\", \"If one of the layerCount members of srcSubresource or dstSubresource is VK_REMAINING_ARRAY_LAYERS, the other member must be either VK_REMAINING_ARRAY_LAYERS or equal to the arrayLayers member of the VkImageCreateInfo used to create the image minus baseArrayLayer\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (dst_subresource.layerCount != (src_image_state->create_info.arrayLayers - src_subresource.baseArrayLayer)) {\n    vuid = is_2 ? \"VUID-VkImageResolve2-layerCount-08804\" : \"VUID-VkImageResolve-layerCount-08804\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkResolveImageInfo2-srcImage-04446\", \"If dstImage is of type VK_IMAGE_TYPE_3D, then for each element of pRegions, srcSubresource.layerCount must be 1\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (src_subresource.layerCount != 1) {\n    vuid = is_2 ? \"VUID-VkResolveImageInfo2-srcImage-04446\" : \"VUID-vkCmdResolveImage-srcImage-04446\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdResolveImage-srcImage-00271\", \"If srcImage is of type VK_IMAGE_TYPE_1D, then for each element of pRegions, srcOffset.y must be 0 and extent.height must be 1\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((region.srcOffset.y != 0) || (region.extent.height != 1)) {\n    vuid = is_2 ? \"VUID-VkResolveImageInfo2-srcImage-00271\" : \"VUID-vkCmdResolveImage-srcImage-00271\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkResolveImageInfo2-dstImage-00278\", \"If dstImage is of type VK_IMAGE_TYPE_1D or VK_IMAGE_TYPE_2D, then for each element of pRegions, dstOffset.z must be 0 and extent.depth must be 1\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((region.dstOffset.z != 0) || (region.extent.depth != 1)) {\n    vuid = is_2 ? \"VUID-VkResolveImageInfo2-dstImage-00278\" : \"VUID-vkCmdResolveImage-dstImage-00278\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdResolveImage-srcOffset-00270\", \"For each element of pRegions, srcOffset.y and (extent.height + srcOffset.y) must both be greater than or equal to 0 and less than or equal to the height of the specified srcSubresource of srcImage\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((extent_check & kYBit) != 0) {\n    vuid = is_2 ? \"VUID-VkResolveImageInfo2-srcOffset-00270\" : \"VUID-vkCmdResolveImage-srcOffset-00270\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkResolveImageInfo2-dstOffset-00275\", \"For each element of pRegions, dstOffset.y and (extent.height + dstOffset.y) must both be greater than or equal to 0 and less than or equal to the height of the specified dstSubresource of dstImage\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((extent_check & kYBit) != 0) {\n    vuid = is_2 ? \"VUID-VkResolveImageInfo2-dstOffset-00275\" : \"VUID-vkCmdResolveImage-dstOffset-00275\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdResolveImage-srcImage-01386\", \"srcImage and dstImage must have been created with the same image format\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (src_image_state->create_info.format != dst_image_state->create_info.format) {\n    vuid = is_2 ? \"VUID-VkResolveImageInfo2-srcImage-01386\" : \"VUID-vkCmdResolveImage-srcImage-01386\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkBindDescriptorSetsInfoKHR-pDescriptorSets-00358\", \"Each element of pDescriptorSets must have been allocated with a VkDescriptorSetLayout that matches (is the same as, or identically defined as) the VkDescriptorSetLayout at set n in layout, where n is the sum of firstSet and the index into pDescriptorSets\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!VerifySetLayoutCompatibility(*descriptor_set, pipeline_layout->set_layouts, pipeline_layout->Handle(),\n    const LogObjectList objlist(cb_state.Handle(), pDescriptorSets[set_idx]);\n    const char *vuid = is_2 ? \"VUID-VkBindDescriptorSetsInfoKHR-pDescriptorSets-00358\"\n                            : \"VUID-vkCmdBindDescriptorSets-pDescriptorSets-00358\";\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkBindDescriptorSetsInfoKHR-dynamicOffsetCount-00359\", \"dynamicOffsetCount must be equal to the total number of dynamic descriptors in pDescriptorSets\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (total_dynamic_descriptors != dynamicOffsetCount) {\n    const char *vuid = is_2 ? \"VUID-VkBindDescriptorSetsInfoKHR-dynamicOffsetCount-00359\"\n                            : \"VUID-vkCmdBindDescriptorSets-dynamicOffsetCount-00359\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkBindDescriptorSetsInfoKHR-pDynamicOffsets-01972\", \"Each element of pDynamicOffsets which corresponds to a descriptor binding with type VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC must be a multiple of VkPhysicalDeviceLimits::minStorageBufferOffsetAlignment\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((binding->descriptorType == VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC) &&\n    const char *vuid = is_2 ? \"VUID-VkBindDescriptorSetsInfoKHR-pDynamicOffsets-01972\"\n                            : \"VUID-vkCmdBindDescriptorSets-pDynamicOffsets-01972\";\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdBindDescriptorSets-pDescriptorSets-01979\", \"For each dynamic uniform or storage buffer binding in pDescriptorSets, the sum of the effective offset and the range of the binding must be less than or equal to the size of the buffer\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "const LogObjectList objlist(cb_state.Handle(), pDescriptorSets[set_idx],\nconst char *vuid = is_2 ? \"VUID-VkBindDescriptorSetsInfoKHR-pDescriptorSets-01979\"\n                        : \"VUID-vkCmdBindDescriptorSets-pDescriptorSets-01979\";\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkBindDescriptorSetsInfoKHR-firstSet-00360\", \"The sum of firstSet and descriptorSetCount must be less than or equal to VkPipelineLayoutCreateInfo::setLayoutCount provided when layout was created\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((firstSet + setCount) > static_cast<uint32_t>(pipeline_layout->set_layouts.size())) {\n    const char *vuid = is_2 ? \"VUID-VkBindDescriptorSetsInfoKHR-firstSet-00360\" : \"VUID-vkCmdBindDescriptorSets-firstSet-00360\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkDescriptorSetLayoutBindingFlagsCreateInfo-descriptorBindingSampledImageUpdateAfterBind-03006\", \"If VkPhysicalDeviceDescriptorIndexingFeatures::descriptorBindingSampledImageUpdateAfterBind is not enabled, all bindings with descriptor type VK_DESCRIPTOR_TYPE_SAMPLER, VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER, or VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE must not use VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "!enabled_features.descriptorBindingSampledImageUpdateAfterBind) {\n    LogError(\"VUID-VkDescriptorSetLayoutBindingFlagsCreateInfo-descriptorBindingSampledImageUpdateAfterBind-03006\",\n             device, binding_flags_loc,\n             \"includes VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT but pBindings[%\" PRIu32\n             \"].descriptorType is %s \"\n             \"but descriptorBindingSampledImageUpdateAfterBind was not enabled.\",\n             i, string_VkDescriptorType(binding_info.descriptorType));\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkDescriptorSetLayoutBindingFlagsCreateInfo-None-03011\", \"All bindings with descriptor type VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT, VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC, or VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC must not use VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((binding_info.descriptorType == VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT ||\n    skip |= LogError(\"VUID-VkDescriptorSetLayoutBindingFlagsCreateInfo-None-03011\", device, binding_flags_loc,\n                     \"includes VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT but pBindings[%\" PRIu32\n                     \"].descriptorType is %s.\",\n                     i, string_VkDescriptorType(binding_info.descriptorType));\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkDescriptorSetLayoutBindingFlagsCreateInfo-pBindingFlags-03004\", \"If an element of pBindingFlags includes VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT, then it must be the element with the highest binding number\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (binding_info.binding != max_binding) {\n    skip |= LogError(\"VUID-VkDescriptorSetLayoutBindingFlagsCreateInfo-pBindingFlags-03004\", device, binding_flags_loc,\n                     \"includes VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT \"\n                     \"but %\" PRIu32 \" is the largest value of all the bindings.\",\n                     binding_info.binding);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkDescriptorSetLayoutBinding-descriptorType-04604\", \"If the inlineUniformBlock feature is not enabled, descriptorType must not be VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!enabled_features.inlineUniformBlock) {\n        \"VUID-VkDescriptorSetLayoutBinding-descriptorType-04604\", device, binding_loc.dot(Field::descriptorType),\n        \"is VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT, but the inlineUniformBlock feature was not enabled.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkDescriptorSetLayoutCreateInfo-flags-00280\", \"If flags contains VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR, then all elements of pBindings must not have a descriptorType of VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC or VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (push_descriptor_set) {\n    skip |= LogError(\"VUID-VkDescriptorSetLayoutCreateInfo-flags-00280\", device, binding_loc.dot(Field::descriptorType),\n                     \"is VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC, but pCreateInfo->flags includes \"\n                     \"VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkDescriptorSetLayoutBinding-flags-08007\", \"If VkDescriptorSetLayoutCreateInfo::flags contains VK_DESCRIPTOR_SET_LAYOUT_CREATE_EMBEDDED_IMMUTABLE_SAMPLERS_BIT_EXT, and descriptorCount is equal to 1, pImmutableSamplers must not be NULL\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((binding_info.descriptorCount == 1) && (binding_info.pImmutableSamplers == nullptr)) {\n    skip |= LogError(\"VUID-VkDescriptorSetLayoutBinding-flags-08007\", device, binding_loc.dot(Field::descriptorCount),\n                     \"is 1 and pImmutableSamplers is NULL, but pCreateInfo->flags includes \"\n                     \"VK_DESCRIPTOR_SET_LAYOUT_CREATE_EMBEDDED_IMMUTABLE_SAMPLERS_BIT_EXT.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkCopyDescriptorSet-dstSet-parameter\", \"dstSet must be a valid VkDescriptorSet handle\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (pDescriptorCopies[idx0].dstSet) {\n    skip |= ValidateObject(pDescriptorCopies[idx0].dstSet, kVulkanObjectTypeDescriptorSet, false,\n                           \"VUID-VkCopyDescriptorSet-dstSet-parameter\", \"VUID-VkCopyDescriptorSet-commonparent\",\n                           copies_loc.dot(Field::dstSet));\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkCopyDescriptorSet-srcArrayElement-00346\", \"The sum of srcArrayElement and descriptorCount must be less than or equal to the number of array elements in the descriptor set binding specified by srcBinding, and all applicable consecutive bindings, as described by consecutive binding updates\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((src_start_idx + update.descriptorCount) > src_set->GetTotalDescriptorCount()) {\n    const LogObjectList objlist(update.srcSet, src_layout->Handle());\n    skip |= LogError(\"VUID-VkCopyDescriptorSet-srcArrayElement-00346\", objlist, copy_loc.dot(Field::srcArrayElement),\n                     \"(%\" PRIu32 \") plus descriptorCount (%\" PRIu32 \") (plus offset index of %\" PRIu32\n                     \") is larger than the total descriptors count (%\" PRIu32 \") for the binding at srcBinding (%\" PRIu32 \").\",\n                     update.srcArrayElement, update.descriptorCount,\n                     src_set->GetGlobalIndexRangeFromBinding(update.srcBinding).start, src_set->GetTotalDescriptorCount(),\n                     update.srcBinding);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkCopyDescriptorSet-srcSet-01918\", \"If srcSet's layout was created with the VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT flag set, then dstSet's layout must also have been created with the VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT flag set\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((src_layout->GetCreateFlags() & VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT) &&\n    const LogObjectList objlist(update.srcSet, update.dstSet, src_layout->Handle(), dst_layout->Handle());\n    skip |= LogError(\"VUID-VkCopyDescriptorSet-srcSet-01918\", objlist, copy_loc.dot(Field::srcSet),\n                     \"layout was created with %s, but dstSet layout was created with %s.\",\n                     string_VkDescriptorSetLayoutCreateFlags(src_layout->GetCreateFlags()).c_str(),\n                     string_VkDescriptorSetLayoutCreateFlags(dst_layout->GetCreateFlags()).c_str());\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkCopyDescriptorSet-dstBinding-02224\", \"If the descriptor type of the descriptor set binding specified by dstBinding is VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK, dstArrayElement must be an integer multiple of 4\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (dst_type == VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT && ((update.dstArrayElement % 4) != 0)) {\n    const LogObjectList objlist(update.dstSet, dst_layout->Handle());\n    skip |= LogError(\"VUID-VkCopyDescriptorSet-dstBinding-02224\", objlist, copy_loc.dot(Field::dstArrayElement),\n                     \"is %\" PRIu32 \", but dstBinding (%\" PRIu32 \") type is VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT.\",\n                     update.dstArrayElement, update.dstBinding);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkDescriptorImageInfo-imageView-06712\", \"imageView must not be a 2D array image view created from a 3D image\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (view_state.create_info.viewType == VK_IMAGE_VIEW_TYPE_2D_ARRAY) {\n    skip |= LogError(\"VUID-VkDescriptorImageInfo-imageView-06712\", objlist, image_info_loc.dot(Field::imageView),\n                     \"is VK_IMAGE_VIEW_TYPE_2D_ARRAY but the image is VK_IMAGE_TYPE_3D.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkDescriptorImageInfo-imageLayout-09425\", \"If imageLayout is VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL, then the aspectMask used to create imageView must not include either VK_IMAGE_ASPECT_DEPTH_BIT or VK_IMAGE_ASPECT_STENCIL_BIT\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (aspect_mask & (VK_IMAGE_ASPECT_DEPTH_BIT | VK_IMAGE_ASPECT_STENCIL_BIT)) {\n    skip |= LogError(\"VUID-VkDescriptorImageInfo-imageLayout-09425\", objlist, image_info_loc.dot(Field::imageView),\n                     \"uses layout VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL but aspectMask (%s) include depth/stencil bit.\",\n                     string_VkImageAspectFlags(aspect_mask).c_str());\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkWriteDescriptorSet-descriptorType-00339\", \"If descriptorType is VK_DESCRIPTOR_TYPE_STORAGE_IMAGE, the imageView member of each element of pImageInfo must have been created with VK_IMAGE_USAGE_STORAGE_BIT set\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!(usage & VK_IMAGE_USAGE_STORAGE_BIT)) {\n    skip |= LogError(\"VUID-VkWriteDescriptorSet-descriptorType-00339\", objlist, image_info_loc.dot(Field::imageView),\n                     \"was created with %s, but descriptorType is VK_DESCRIPTOR_TYPE_STORAGE_IMAGE.\",\n                     string_VkImageUsageFlags(usage).c_str());\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkWriteDescriptorSet-descriptorType-04149\", \"If descriptorType is VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE the imageLayout member of each element of pImageInfo must be a member of the list given in Sampled Image\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "const char *vuid = kVUIDUndefined;\n        vuid = \"VUID-VkWriteDescriptorSet-descriptorType-04149\";\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkWriteDescriptorSetAccelerationStructureKHR-pAccelerationStructures-03579\", \"Each acceleration structure in pAccelerationStructures must have been created with a type of VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR or VK_ACCELERATION_STRUCTURE_TYPE_GENERIC_KHR\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "const LogObjectList objlist(dst_set, as_state->Handle());\n    \"VUID-VkWriteDescriptorSetAccelerationStructureKHR-pAccelerationStructures-03579\", objlist,\n    write_loc.pNext(Struct::VkWriteDescriptorSetAccelerationStructureKHR, Field::pAccelerationStructures, j),\n    \"was created with %s.\", string_VkAccelerationStructureTypeKHR(as_state->create_info.type));\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkWriteDescriptorSet-descriptorType-00331\", \"If descriptorType is VK_DESCRIPTOR_TYPE_STORAGE_BUFFER or VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC, the buffer member of each element of pBufferInfo must have been created with VK_BUFFER_USAGE_STORAGE_BUFFER_BIT set\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!(buffer_state.usage & VK_BUFFER_USAGE_STORAGE_BUFFER_BIT)) {\n    skip |= LogError(\"VUID-VkWriteDescriptorSet-descriptorType-00331\", buffer_state.Handle(), buffer_loc,\n                     \"was created with %s, but descriptorType is %s.\",\n                     string_VkBufferUsageFlags2KHR(buffer_state.usage).c_str(), string_VkDescriptorType(type));\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkWriteDescriptorSet-descriptorType-00332\", \"If descriptorType is VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER or VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC, the range member of each element of pBufferInfo, or the effective range if range is VK_WHOLE_SIZE, must be less than or equal to VkPhysicalDeviceLimits::maxUniformBufferRange\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (buffer_info.range != VK_WHOLE_SIZE && buffer_info.range > max_ub_range) {\n        LogError(\"VUID-VkWriteDescriptorSet-descriptorType-00332\", buffer_info.buffer, buffer_info_loc.dot(Field::range),\n                 \"(%\" PRIu64 \") is greater than maxUniformBufferRange (%\" PRIu32 \") for descriptorType %s.\",\n                 buffer_info.range, max_ub_range, string_VkDescriptorType(type));\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkWriteDescriptorSet-descriptorType-00325\", \"If descriptorType is VK_DESCRIPTOR_TYPE_SAMPLER or VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER, and dstSet was not allocated with a layout that included immutable samplers for dstBinding with descriptorType, the sampler member of each element of pImageInfo must be a valid VkSampler object\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!ValidateSampler(update_sampler)) {\n    const LogObjectList objlist(update.srcSet, update_sampler);\n    skip |= LogError(\"VUID-VkWriteDescriptorSet-descriptorType-00325\", objlist, copy_loc,\n                     \"Attempted copy update to sampler descriptor with invalid sampler (%s).\",\n                     FormatHandle(update_sampler).c_str());\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkWriteDescriptorSet-descriptorType-02994\", \"If descriptorType is VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER or VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER, each element of pTexelBufferView must be either a valid VkBufferView handle or VK_NULL_HANDLE\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!buffer_state) {\n    skip |= LogError(\"VUID-VkWriteDescriptorSet-descriptorType-02994\", device, write_loc,\n                     \"Attempted write update to texel buffer descriptor with invalid buffer (%s).\",\n                     FormatHandle(buffer).c_str());\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkWriteDescriptorSet-dstBinding-00315\", \"dstBinding must be less than or equal to the maximum value of binding of all VkDescriptorSetLayoutBinding structures specified when dstSet's descriptor set layout was created\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "return LogError(\"VUID-VkWriteDescriptorSet-dstBinding-10009\", objlist, write_loc.dot(Field::dstSet),\n} else if (update.dstBinding > dst_layout->GetMaxBinding()) {\nreturn LogError(\"VUID-VkWriteDescriptorSet-dstBinding-00315\", objlist, dst_binding_loc,\n                \"(%\" PRIu32 \") is larger than %s binding count (%\" PRIu32 \").\", update.dstBinding,\n                FormatHandle(dst_layout->Handle()).c_str(), dst_layout->GetBindingCount());\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkWriteDescriptorSet-descriptorType-02219\", \"If descriptorType is VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK, dstArrayElement must be an integer multiple of 4\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((update.dstArrayElement % 4) != 0) {\n    skip |= LogError(\"VUID-VkWriteDescriptorSet-descriptorType-02219\", objlist, dst_binding_loc,\n                     \"(%\" PRIu32 \") is of type VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT, but dstArrayElement is %\" PRIu32\n                     \".\",\n                     update.dstBinding, update.dstArrayElement);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkWriteDescriptorSet-descriptorCount-00317\", \"All consecutive bindings updated via a single VkWriteDescriptorSet structure, except those with a descriptorCount of zero, must have identical descriptorType and stageFlags\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((current_binding->stage_flags != stage_flags) || (current_binding->type != descriptor_type)) {\n        \"VUID-VkWriteDescriptorSet-descriptorCount-00317\", objlist, write_loc,\n        \"binding #%\" PRIu32 \" (started on dstBinding [%\" PRIu32 \"] plus %\" PRIu32\n        \" descriptors offset) has stageFlags of %s and descriptorType of %s, but previous binding was %s and %s.\",\n        current_binding->binding, update.dstBinding, i,\n        string_VkShaderStageFlags(current_binding->stage_flags).c_str(),\n        string_VkDescriptorType(current_binding->type), string_VkShaderStageFlags(stage_flags).c_str(),\n        string_VkDescriptorType(descriptor_type));\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkWriteDescriptorSet-descriptorType-09506\", \"If descriptorType is VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER, dstSet was allocated with a layout that included immutable samplers for dstBinding, and those samplers enable sampler Y'CBCR conversion, then imageView must not be VK_NULL_HANDLE\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (desc.IsImmutableSampler()) {\n    const LogObjectList objlist(update.dstSet, desc.GetSampler());\n    skip |= LogError(\"VUID-VkWriteDescriptorSet-descriptorType-09506\", objlist,\n                     write_loc.dot(Field::pImageInfo, di).dot(Field::imageView), \"is VK_NULL_HANDLE.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkDescriptorImageInfo-mutableComparisonSamplers-04450\", \"If the VK_KHR_portability_subset extension is enabled, and VkPhysicalDevicePortabilitySubsetFeaturesKHR::mutableComparisonSamplers is VK_FALSE, then sampler must have been created with VkSamplerCreateInfo::compareEnable set to VK_FALSE\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((VK_FALSE == enabled_features.mutableComparisonSamplers) &&\n    skip |= LogError(\"VUID-VkDescriptorImageInfo-mutableComparisonSamplers-04450\", device, write_loc,\n                     \"(portability error): sampler comparison not available.\");\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdSetDescriptorBufferOffsetsEXT-firstSet-08066\", \"The sum of firstSet and setCount must be less than or equal to VkPipelineLayoutCreateInfo::setLayoutCount provided when layout was created\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((firstSet + setCount) > pipeline_layout->set_layouts.size()) {\n    const char *vuid = is_2 ? \"VUID-VkSetDescriptorBufferOffsetsInfoEXT-firstSet-08066\"\n                            : \"VUID-vkCmdSetDescriptorBufferOffsetsEXT-firstSet-08066\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkSetDescriptorBufferOffsetsInfoEXT-pBufferIndices-08065\", \"Each element of pBufferIndices must reference a valid descriptor buffer binding set by a previous call to vkCmdBindDescriptorBuffersEXT in commandBuffer\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!valid_buffer) {\n    const char *vuid = is_2 ? \"VUID-VkSetDescriptorBufferOffsetsInfoEXT-pBufferIndices-08065\"\n                            : \"VUID-vkCmdSetDescriptorBufferOffsetsEXT-pBufferIndices-08065\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdSetDescriptorBufferOffsetsEXT-pOffsets-08061\", \"The offsets in pOffsets must be aligned to VkPhysicalDeviceDescriptorBufferPropertiesEXT::descriptorBufferOffsetAlignment\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (SafeModulo(pOffsets[i], phys_dev_ext_props.descriptor_buffer_props.descriptorBufferOffsetAlignment) != 0) {\n    const char *vuid = is_2 ? \"VUID-VkSetDescriptorBufferOffsetsInfoEXT-pOffsets-08061\"\n                            : \"VUID-vkCmdSetDescriptorBufferOffsetsEXT-pOffsets-08061\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkBindDescriptorBufferEmbeddedSamplersInfoEXT-set-08070\", \"The VkDescriptorSetLayout at index set when layout was created must have been created with the VK_DESCRIPTOR_SET_LAYOUT_CREATE_EMBEDDED_IMMUTABLE_SAMPLERS_BIT_EXT bit set\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!(set_layout->GetCreateFlags() & VK_DESCRIPTOR_SET_LAYOUT_CREATE_EMBEDDED_IMMUTABLE_SAMPLERS_BIT_EXT)) {\n    const char *vuid = is_2 ? \"VUID-VkBindDescriptorBufferEmbeddedSamplersInfoEXT-set-08070\"\n                            : \"VUID-vkCmdBindDescriptorBufferEmbeddedSamplersEXT-set-08070\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkDescriptorBufferBindingInfoEXT-address-08057\", \"address must be aligned to VkPhysicalDeviceDescriptorBufferPropertiesEXT::descriptorBufferOffsetAlignment\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (SafeModulo(pBindingInfos[i].address, phys_dev_ext_props.descriptor_buffer_props.descriptorBufferOffsetAlignment) != 0) {\n    skip |= LogError(\"VUID-VkDescriptorBufferBindingInfoEXT-address-08057\", commandBuffer, binding_loc.dot(Field::address),\n                     \"(%\" PRIuLEAST64\n                     \") is not aligned \"\n                     \"to descriptorBufferOffsetAlignment (%\" PRIuLEAST64 \")\",\n                     pBindingInfos[i].address, phys_dev_ext_props.descriptor_buffer_props.descriptorBufferOffsetAlignment);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdBindDescriptorBuffersEXT-bufferCount-08051\", \"bufferCount must be less than or equal to VkPhysicalDeviceDescriptorBufferPropertiesEXT::maxDescriptorBufferBindings\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (bufferCount > phys_dev_ext_props.descriptor_buffer_props.maxDescriptorBufferBindings) {\n    skip |= LogError(\"VUID-vkCmdBindDescriptorBuffersEXT-bufferCount-08051\", commandBuffer,\n                     error_obj.location.dot(Field::bufferCount),\n                     \"bufferCount (%\" PRIu32\n                     \") must be less than or equal to \"\n                     \"VkPhysicalDeviceDescriptorBufferPropertiesEXT::maxDescriptorBufferBindings (%\" PRIu32 \").\",\n                     bufferCount, phys_dev_ext_props.descriptor_buffer_props.maxDescriptorBufferBindings);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkGetBufferOpaqueCaptureDescriptorDataEXT-None-08072\", \"The descriptorBufferCaptureReplay feature must be enabled\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!enabled_features.descriptorBufferCaptureReplay) {\n    skip |= LogError(\"VUID-vkGetBufferOpaqueCaptureDescriptorDataEXT-None-08072\", pInfo->buffer, error_obj.location,\n                     \"descriptorBufferCaptureReplay feature was not enabled.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkImageCaptureDescriptorDataInfoEXT-image-08079\", \"image must have been created with VK_IMAGE_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT set in VkImageCreateInfo::flags\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!(image_state->create_info.flags & VK_IMAGE_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT)) {\n    skip |= LogError(\"VUID-VkImageCaptureDescriptorDataInfoEXT-image-08079\", pInfo->image,\n                     error_obj.location.dot(Field::pInfo).dot(Field::image), \"is %s.\",\n                     string_VkImageCreateFlags(image_state->create_info.flags).c_str());\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkGetSamplerOpaqueCaptureDescriptorDataEXT-device-08086\", \"If device was created with multiple physical devices, then the bufferDeviceAddressMultiDevice feature must be enabled\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (physical_device_count > 1 && !enabled_features.bufferDeviceAddressMultiDevice &&\n    skip |= LogError(\"VUID-vkGetSamplerOpaqueCaptureDescriptorDataEXT-device-08086\", pInfo->sampler, error_obj.location,\n                     \"device was created with multiple physical devices (%\" PRIu32\n                     \"), but the \"\n                     \"bufferDeviceAddressMultiDevice feature was not enabled.\",\n                     physical_device_count);\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkAccelerationStructureCaptureDescriptorDataInfoEXT-accelerationStructure-08093\", \"If accelerationStructure is not VK_NULL_HANDLE then accelerationStructureNV must be VK_NULL_HANDLE\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (pInfo->accelerationStructureNV != VK_NULL_HANDLE) {\n    LogError(\"VUID-VkAccelerationStructureCaptureDescriptorDataInfoEXT-accelerationStructure-08093\", device,\n             error_obj.location,\n             \"If accelerationStructure is not VK_NULL_HANDLE, accelerationStructureNV must be VK_NULL_HANDLE. \");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkDescriptorAddressInfoEXT-nullDescriptor-08938\", \"If address is zero, range must be VK_WHOLE_SIZE\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "skip |= LogError(\"VUID-VkDescriptorAddressInfoEXT-address-08043\", device, address_loc.dot(Field::address),\n                 \"is zero, but the nullDescriptor feature was not enabled.\");\n} else if (address_info->range != VK_WHOLE_SIZE) {\nskip |= LogError(\"VUID-VkDescriptorAddressInfoEXT-nullDescriptor-08938\", device, address_loc.dot(Field::range),\n                 \"(%\" PRIu64 \") is not VK_WHOLE_SIZE, but address is zero.\", address_info->range);\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkGetDescriptorEXT-descriptorType-09469\", \"If pDescriptorInfo->type is VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER and pDescriptorInfo->data.pCombinedImageSampler has an imageView member that was created with a VkSamplerYcbcrConversionInfo structure in its pNext chain, dataSize must equal the size of VkPhysicalDeviceDescriptorBufferPropertiesEXT::combinedImageSamplerDescriptorSize times VkSamplerYcbcrConversionImageFormatProperties::combinedImageSamplerDescriptorCount\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (size != data_size) {\n    skip |= LogError(\"VUID-vkGetDescriptorEXT-descriptorType-09469\", device, descriptor_info_loc.dot(Field::type),\n                     \"(VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER) has %s and descriptor size is %zu \"\n                     \"[combinedImageSamplerDescriptorCount (%\" PRIu32\n                     \") times combinedImageSamplerDescriptorSize (%zu)], but dataSize is %zu\",\n                     FormatHandle(image_view_state->samplerConversion).c_str(), size,\n                     sampler_ycbcr_image_format_info.combinedImageSamplerDescriptorCount,\n                     phys_dev_ext_props.descriptor_buffer_props.combinedImageSamplerDescriptorSize, data_size);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkDescriptorGetInfoEXT-type-08022\", \"If type is VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE, and if pSampledImage is not NULL, the pSampledImage->imageView member of data must be a VkImageView created on device, or VK_NULL_HANDLE\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (pDescriptorInfo->data.pSampledImage && (pDescriptorInfo->data.pSampledImage->imageView != VK_NULL_HANDLE) &&\n    skip |= LogError(\"VUID-VkDescriptorGetInfoEXT-type-08022\", device, descriptor_info_loc.dot(Field::type),\n                     \"is VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE, but \"\n                     \"pSampledImage->imageView is not a valid image view.\");\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkDescriptorGetInfoEXT-type-08027\", \"If type is VK_DESCRIPTOR_TYPE_STORAGE_BUFFER, pStorageBuffer is not NULL and pStorageBuffer->address is not zero, pStorageBuffer->address must be an address within a VkBuffer created on device\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (address_info && (address_info->address != 0) && (GetBuffersByAddress(address_info->address).empty())) {\n    skip |= LogError(\"VUID-VkDescriptorGetInfoEXT-type-08027\", device, descriptor_info_loc.dot(Field::type),\n                     \"is VK_DESCRIPTOR_TYPE_STORAGE_BUFFER, but \"\n                     \"pStorageBuffer->address (%\" PRIu64\n                     \") is not zero or \"\n                     \"an address within a buffer.\",\n                     address_info->address);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkDescriptorDataEXT-type-08039\", \"If VkDescriptorGetInfoEXT:type is VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER, and the nullDescriptor feature is not enabled, pUniformBuffer must not be NULL\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!address_info && !enabled_features.nullDescriptor) {\n    skip |= LogError(\"VUID-VkDescriptorDataEXT-type-08039\", device, descriptor_info_loc.dot(Field::type),\n                     \"is VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER, but \"\n                     \"pUniformBuffer is NULL and the nullDescriptor feature was not enabled.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkDescriptorDataEXT-type-08033\", \"If VkDescriptorGetInfoEXT:type is VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER, and pStorageTexelBuffer->address is the address of a non-sparse buffer, then that buffer must be bound completely and contiguously to a single VkDeviceMemory object\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "buffer_address_vuid = \"VUID-VkDescriptorDataEXT-type-08033\";\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkDescriptorDataEXT-type-08035\", \"If VkDescriptorGetInfoEXT:type is VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE, and the nullDescriptor feature is not enabled, pSampledImage must not be NULL and pSampledImage->imageView must not be VK_NULL_HANDLE\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!enabled_features.nullDescriptor &&\n    skip |= LogError(\"VUID-VkDescriptorDataEXT-type-08035\", device, descriptor_info_loc.dot(Field::type),\n                     \"is VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE, but \"\n                     \"pSampledImage is NULL, or pSampledImage->imageView is VK_NULL_HANDLE, and the nullDescriptor \"\n                     \"feature is not enabled.\");\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkDescriptorSetAllocateInfo-pSetLayouts-08009\", \"Each element of pSetLayouts must not have been created with the VK_DESCRIPTOR_SET_LAYOUT_CREATE_DESCRIPTOR_BUFFER_BIT_EXT bit set\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (ds_layout_state->GetCreateFlags() & VK_DESCRIPTOR_SET_LAYOUT_CREATE_DESCRIPTOR_BUFFER_BIT_EXT) {\n    skip |= LogError(\"VUID-VkDescriptorSetAllocateInfo-pSetLayouts-08009\", pAllocateInfo->pSetLayouts[i], set_layout_loc,\n                     \"(%s) was created with VK_DESCRIPTOR_SET_LAYOUT_CREATE_DESCRIPTOR_BUFFER_BIT_EXT.\",\n                     FormatHandle(pAllocateInfo->pSetLayouts[i]).c_str());\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkDescriptorSetVariableDescriptorCountAllocateInfo-descriptorSetCount-03045\", \"If descriptorSetCount is not zero, descriptorSetCount must equal VkDescriptorSetAllocateInfo::descriptorSetCount\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (count_allocate_info->descriptorSetCount != 0 &&\n    count_allocate_info->descriptorSetCount != pAllocateInfo->descriptorSetCount) {\n        \"VUID-VkDescriptorSetVariableDescriptorCountAllocateInfo-descriptorSetCount-03045\", device,\n        allocate_info_loc.pNext(Struct::VkDescriptorSetVariableDescriptorCountAllocateInfo, Field::descriptorSetCount),\n        \"(%\" PRIu32 \") != pAllocateInfo->descriptorSetCount (%\" PRIu32 \").\", count_allocate_info->descriptorSetCount,\n        pAllocateInfo->descriptorSetCount);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdPushDescriptorSetKHR-set-00365\", \"set must be the unique set number in the pipeline layout that uses a descriptor set layout that was created with VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!dsl->IsPushDescriptor()) {\n    const char *vuid = is_2 ? \"VUID-VkPushDescriptorSetInfoKHR-set-00365\" : \"VUID-vkCmdPushDescriptorSetKHR-set-00365\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkDescriptorUpdateTemplateCreateInfo-templateType-00351\", \"If templateType is VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR, pipelineBindPoint must be a valid VkPipelineBindPoint value\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!valid_bp) {\n    skip |= LogError(\"VUID-VkDescriptorUpdateTemplateCreateInfo-templateType-00351\", device,\n                     create_info_loc.dot(Field::pipelineBindPoint), \"is %s.\", string_VkPipelineBindPoint(bind_point));\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkDescriptorUpdateTemplateEntry-descriptor-02226\", \"If descriptor type is VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK, dstArrayElement must be an integer multiple of 4\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (descriptor_update.dstArrayElement & 3) {\n    skip |= LogError(\"VUID-VkDescriptorUpdateTemplateEntry-descriptor-02226\", pCreateInfo->pipelineLayout,\n                     create_info_loc.dot(Field::pDescriptorUpdateEntries, i),\n                     \"has descriptorType VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT, but dstArrayElement (%\" PRIu32\n                     \") is not a \"\n                     \"multiple of 4).\",\n                     descriptor_update.dstArrayElement);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdPushDescriptorSetWithTemplateKHR-set-07304\", \"set must be less than VkPipelineLayoutCreateInfo::setLayoutCount provided when layout was created\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "} else if (layout_data && (set >= layout_data->set_layouts.size())) {\n        is_2 ? \"VUID-VkPushDescriptorSetWithTemplateInfoKHR-set-07304\" : \"VUID-vkCmdPushDescriptorSetWithTemplateKHR-set-07304\";\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkPushDescriptorSetWithTemplateInfoKHR-layout-07993\", \"layout must be compatible with the layout used to create descriptorUpdateTemplate\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!IsPipelineLayoutSetCompat(set, layout_data.get(), template_layout.get())) {\n    const LogObjectList objlist(commandBuffer, descriptorUpdateTemplate, template_ci.pipelineLayout, layout);\n    const char *vuid = is_2 ? \"VUID-VkPushDescriptorSetWithTemplateInfoKHR-layout-07993\"\n                            : \"VUID-vkCmdPushDescriptorSetWithTemplateKHR-layout-07993\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkPipelineLayoutCreateInfo-pSetLayouts-04606\", \"Any element of pSetLayouts must not have been created with the VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_EXT bit set\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (set_layouts[i]->GetCreateFlags() & VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_EXT) {\n    skip |= LogError(\"VUID-VkPipelineLayoutCreateInfo-pSetLayouts-04606\", set_layouts[i]->VkHandle(),\n                     create_info_loc.dot(Field::pSetLayouts, i),\n                     \"was created with VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_EXT bit.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkPipelineLayoutCreateInfo-descriptorType-06939\", \"The total number of descriptors in descriptor set layouts created without the VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT bit set with a descriptorType of VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER, VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE, VK_DESCRIPTOR_TYPE_SAMPLE_WEIGHT_IMAGE_QCOM, VK_DESCRIPTOR_TYPE_BLOCK_MATCH_IMAGE_QCOM, and VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER, accessible to any given shader stage across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceLimits::maxPerStageDescriptorSampledImages\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (max_descriptors_per_stage[DSL_TYPE_SAMPLED_IMAGES] > phys_dev_props.limits.maxPerStageDescriptorSampledImages) {\n        LogError(\"VUID-VkPipelineLayoutCreateInfo-descriptorType-06939\", device, error_obj.location,\n                 \"max per-stage sampled image bindings count (%\" PRIu32\n                 \") exceeds device \"\n                 \"maxPerStageDescriptorSampledImages limit (%\" PRIu32 \").\",\n                 max_descriptors_per_stage[DSL_TYPE_SAMPLED_IMAGES], phys_dev_props.limits.maxPerStageDescriptorSampledImages);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkPipelineLayoutCreateInfo-descriptorType-03028\", \"The total number of descriptors in descriptor set layouts created without the VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT bit set with a descriptorType of VK_DESCRIPTOR_TYPE_SAMPLER and VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER accessible across all shader stages and across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceLimits::maxDescriptorSetSamplers\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (sum > phys_dev_props.limits.maxDescriptorSetSamplers) {\n    skip |= LogError(\"VUID-VkPipelineLayoutCreateInfo-descriptorType-03028\", device, error_obj.location,\n                     \"sum of sampler bindings among all stages (%\" PRIu32\n                     \") exceeds device \"\n                     \"maxDescriptorSetSamplers limit (%\" PRIu32 \").\",\n                     sum, phys_dev_props.limits.maxDescriptorSetSamplers);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkPipelineLayoutCreateInfo-None-10005\", \"The total number of descriptors in descriptor set layouts created without the VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT bit set with a descriptorType of VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC or VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC accessible across all shader stages and across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceMaintenance7PropertiesKHR::maxDescriptorSetTotalBuffersDynamic\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (total_sum > phys_dev_ext_props.maintenance7_props.maxDescriptorSetTotalBuffersDynamic) {\n    skip |= LogError(\"VUID-VkPipelineLayoutCreateInfo-None-10005\", device, error_obj.location,\n                     \"sum of both dynamic storage buffer bindings (%\" PRIu32\n                     \") and dynamic uniform buffer bindings (%\" PRIu32 \") among all stages (%\" PRIu64\n                     \") exceeds device \"\n                     \"maxDescriptorSetTotalBuffersDynamic limit (%\" PRIu32 \").\",\n                     sum_all_uniform_buffer_dynamic, sum_all_storage_buffer_dynamic, total_sum,\n                     phys_dev_ext_props.maintenance7_props.maxDescriptorSetTotalBuffersDynamic);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkPipelineLayoutCreateInfo-descriptorType-03035\", \"The total number of descriptors in descriptor set layouts created without the VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT bit set with a descriptorType of VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT accessible across all shader stages and across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceLimits::maxDescriptorSetInputAttachments\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (sum_all_stages[VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT] > phys_dev_props.limits.maxDescriptorSetInputAttachments) {\n        LogError(\"VUID-VkPipelineLayoutCreateInfo-descriptorType-03035\", device, error_obj.location,\n                 \"sum of input attachment bindings among all stages (%\" PRIu32\n                 \") exceeds device \"\n                 \"maxDescriptorSetInputAttachments limit (%\" PRIu32 \").\",\n                 sum_all_stages[VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT], phys_dev_props.limits.maxDescriptorSetInputAttachments);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkPipelineLayoutCreateInfo-descriptorType-03022\", \"The total number of descriptors with a descriptorType of VK_DESCRIPTOR_TYPE_SAMPLER and VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER accessible to any given shader stage across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceDescriptorIndexingProperties::maxPerStageDescriptorUpdateAfterBindSamplers\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (max_descriptors_per_stage_update_after_bind[DSL_TYPE_SAMPLERS] >\n    skip |= LogError(\"VUID-VkPipelineLayoutCreateInfo-descriptorType-03022\", device, error_obj.location,\n                     \"max per-stage sampler bindings count (%\" PRIu32\n                     \") exceeds device \"\n                     \"maxPerStageDescriptorUpdateAfterBindSamplers limit (%\" PRIu32 \").\",\n                     max_descriptors_per_stage_update_after_bind[DSL_TYPE_SAMPLERS],\n                     phys_dev_props_core12.maxPerStageDescriptorUpdateAfterBindSamplers);\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkPipelineLayoutCreateInfo-descriptorType-03027\", \"The total number of descriptors with a descriptorType of VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT accessible to any given shader stage across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceDescriptorIndexingProperties::maxPerStageDescriptorUpdateAfterBindInputAttachments\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (max_descriptors_per_stage_update_after_bind[DSL_TYPE_INPUT_ATTACHMENTS] >\n    skip |= LogError(\"VUID-VkPipelineLayoutCreateInfo-descriptorType-03027\", device, error_obj.location,\n                     \"max per-stage input attachment bindings count (%\" PRIu32\n                     \") exceeds device \"\n                     \"maxPerStageDescriptorUpdateAfterBindInputAttachments limit (%\" PRIu32 \").\",\n                     max_descriptors_per_stage_update_after_bind[DSL_TYPE_INPUT_ATTACHMENTS],\n                     phys_dev_props_core12.maxPerStageDescriptorUpdateAfterBindInputAttachments);\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkPipelineLayoutCreateInfo-pSetLayouts-03039\", \"The total number of descriptors of the type VK_DESCRIPTOR_TYPE_STORAGE_BUFFER accessible across all shader stages and across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceDescriptorIndexingProperties::maxDescriptorSetUpdateAfterBindStorageBuffers\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (sum_all_stages_update_after_bind[VK_DESCRIPTOR_TYPE_STORAGE_BUFFER] >\n    skip |= LogError(\"VUID-VkPipelineLayoutCreateInfo-pSetLayouts-03039\", device, error_obj.location,\n                     \"sum of storage buffer bindings among all stages (%\" PRIu32\n                     \") exceeds device \"\n                     \"maxDescriptorSetUpdateAfterBindStorageBuffers limit (%\" PRIu32 \").\",\n                     sum_all_stages_update_after_bind[VK_DESCRIPTOR_TYPE_STORAGE_BUFFER],\n                     phys_dev_props_core12.maxDescriptorSetUpdateAfterBindStorageBuffers);\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkPipelineLayoutCreateInfo-pSetLayouts-03040\", \"If the maintenance7 feature is not enabled, the total number of descriptors of the type VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC accessible across all shader stages and across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceLimits::maxDescriptorSetUpdateAfterBindStorageBuffersDynamic\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (sum_all_after_bind_storage_buffer_dynamic >\n    skip |= LogError(\"VUID-VkPipelineLayoutCreateInfo-pSetLayouts-03040\", device, error_obj.location,\n                     \"sum of dynamic storage buffer bindings among all stages (%\" PRIu32\n                     \") exceeds device \"\n                     \"maxDescriptorSetUpdateAfterBindStorageBuffersDynamic limit (%\" PRIu32 \").\",\n                     sum_all_after_bind_storage_buffer_dynamic,\n                     phys_dev_props_core12.maxDescriptorSetUpdateAfterBindStorageBuffersDynamic);\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkPipelineLayoutCreateInfo-descriptorType-03574\", \"The total number of bindings with a descriptorType of VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR accessible across all shader stages and across all elements of pSetLayouts must be less than or equal to VkPhysicalDeviceAccelerationStructurePropertiesKHR::maxDescriptorSetUpdateAfterBindAccelerationStructures\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (sum_all_stages_update_after_bind[VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR] >\n    skip |= LogError(\"VUID-VkPipelineLayoutCreateInfo-descriptorType-03574\", device, error_obj.location,\n                     \"sum of acceleration structures bindings among all stages (%\" PRIu32\n                     \") exceeds device \"\n                     \"maxDescriptorSetUpdateAfterBindAccelerationStructures limit (%\" PRIu32 \").\",\n                     sum_all_stages_update_after_bind[VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR],\n                     phys_dev_ext_props.acc_structure_props.maxDescriptorSetUpdateAfterBindAccelerationStructures);\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdPushConstants-offset-01796\", \"For each byte in the range specified by offset and size and for each push constant range that overlaps that byte, stageFlags must include all stages in that push constant range's VkPushConstantRange::stageFlags\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (matching_stages != range.stageFlags) {\n    const char *vuid = is_2 ? \"VUID-VkPushConstantsInfoKHR-offset-01796\" : \"VUID-vkCmdPushConstants-offset-01796\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkSamplerCreateInfo-minFilter-01645\", \"If sampler Y'CBCR conversion is enabled and the potential format features of the sampler Y'CBCR conversion do not support VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT, minFilter and magFilter must be equal to the sampler Y'CBCR conversion's chromaFilter\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (pCreateInfo->magFilter != chroma_filter) {\n        \"VUID-VkSamplerCreateInfo-minFilter-01645\", device,\n        create_info_loc.pNext(Struct::VkSamplerYcbcrConversionInfo, Field::conversion),\n        \"(%s) does not support VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT \"\n        \"for format %s and magFilter (%s) is different from \"\n        \"chromaFilter (%s)\",\n        FormatHandle(sampler_ycbcr_conversion).c_str(), string_VkFormat(ycbcr_state->format),\n        string_VkFilter(pCreateInfo->magFilter), string_VkFilter(chroma_filter));\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkDeviceCreateInfo-queueFamilyIndex-02802\", \"The queueFamilyIndex member of each element of pQueueCreateInfos must be unique within pQueueCreateInfos , except that two members can share the same queueFamilyIndex if one describes protected-capable queues and one describes queues that are not protected-capable\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (queue_family_map.emplace(requested_queue_family, flags).second == false) {\n    skip |= LogError(\"VUID-VkDeviceCreateInfo-queueFamilyIndex-02802\", pd_state.Handle(),\n                     info_loc.dot(Field::queueFamilyIndex),\n                     \"(%\" PRIu32 \") is not unique and was also used in pCreateInfo->pQueueCreateInfos[%\" PRIu32 \"].\",\n                     requested_queue_family, queue_family_map.at(requested_queue_family).unprocted_index);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkDeviceQueueCreateInfo-queueCount-00382\", \"queueCount must be less than or equal to the queueCount member of the VkQueueFamilyProperties structure, as returned by vkGetPhysicalDeviceQueueFamilyProperties in the pQueueFamilyProperties[queueFamilyIndex]\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "\"VUID-VkDeviceQueueCreateInfo-queueCount-00382\", pd_state.Handle(), info_loc.dot(Field::queueCount),\n\" (%\" PRIu32\n\") is not less than or equal to available queue count for this pCreateInfo->pQueueCreateInfos[%\" PRIu32\n\"].queueFamilyIndex} (%\" PRIu32 \") obtained previously from vkGetPhysicalDeviceQueueFamilyProperties%s (%s).\",\nrequested_queue_count, i, requested_queue_family, conditional_ext_cmd, count_note.c_str());\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkDeviceCreateInfo-shadingRateImage-04479\", \"If the shadingRateImage feature is enabled, the primitiveFragmentShadingRate feature must not be enabled\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (fragment_shading_rate_features->primitiveFragmentShadingRate) {\n    skip |= LogError(\"VUID-VkDeviceCreateInfo-shadingRateImage-04479\", pd_state->Handle(), error_obj.location,\n                     \"Cannot enable shadingRateImage and primitiveFragmentShadingRate features simultaneously.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkDeviceCreateInfo-None-04896\", \"If sparseImageInt64Atomics is enabled, shaderImageInt64Atomics must be enabled\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (shader_image_atomic_int64_features->sparseImageInt64Atomics &&\n    skip |= LogError(\"VUID-VkDeviceCreateInfo-None-04896\", pd_state->Handle(), error_obj.location,\n                     \"if sparseImageInt64Atomics feature is enabled then shaderImageInt64Atomics \"\n                     \"feature must also be enabled.\");\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkGetDeviceQueue-queueFamilyIndex-00384\", \"queueFamilyIndex must be one of the queue family indices specified when device was created, via the VkDeviceQueueCreateInfo structure\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "skip |= ValidateDeviceQueueFamily(queueFamilyIndex, error_obj.location.dot(Field::queueFamilyIndex),\n                                  \"VUID-vkGetDeviceQueue-queueFamilyIndex-00384\");\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkDeviceQueueInfo2-flags-06225\", \"flags must be equal to VkDeviceQueueCreateInfo::flags for a VkDeviceQueueCreateInfo structure for the queue family indicated by queueFamilyIndex when device was created\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!valid_flags && !skip) {\n    skip |= LogError(\"VUID-VkDeviceQueueInfo2-flags-06225\", device, error_obj.location,\n                     \"The combination of queueFamilyIndex (%\" PRIu32\n                     \") and flags (%s) were never both set together in any element of \"\n                     \"vkCreateDevice::pCreateInfo->pQueueCreateInfos at device creation time.\",\n                     queueFamilyIndex, string_VkDeviceQueueCreateFlags(flags).c_str());\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdSetDeviceMask-deviceMask-00110\", \"deviceMask must not include any set bits that were not in the VkDeviceGroupCommandBufferBeginInfo::deviceMask value when the command buffer began recording\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "const Location loc = error_obj.location.dot(Field::deviceMask);\nskip |= ValidateDeviceMaskToPhysicalDeviceCount(deviceMask, objlist, loc, \"VUID-vkCmdSetDeviceMask-deviceMask-00108\");\nskip |= ValidateDeviceMaskToZero(deviceMask, objlist, loc, \"VUID-vkCmdSetDeviceMask-deviceMask-00109\");\nskip |= ValidateDeviceMaskToCommandBuffer(cb_state, deviceMask, objlist, loc, \"VUID-vkCmdSetDeviceMask-deviceMask-00110\");\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkDestroyCommandPool-commandPool-00041\", \"All VkCommandBuffer objects allocated from commandPool must not be in the pending state\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (cb_state->InUse()) {\n    const LogObjectList objlist(cb_state->Handle(), commandPool);\n    skip |= LogError(\"VUID-vkDestroyCommandPool-commandPool-00041\", objlist, error_obj.location, \"(%s) is in use.\",\n                     FormatHandle(cb_state->Handle()).c_str());\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCreateRayTracingPipelinesNV-device-09677\", \"device must support at least one queue family with the VK_QUEUE_COMPUTE_BIT capability\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "case Func::vkCreateRayTracingPipelinesNV:\n    vuid = \"VUID-vkCreateRayTracingPipelinesNV-device-09677\";\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCreateBufferView-device-09665\", \"device must support at least one queue family with one of the VK_QUEUE_COMPUTE_BIT or VK_QUEUE_GRAPHICS_BIT capabilities\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "case Func::vkCreateBufferView:\n    vuid = \"VUID-vkCreateBufferView-device-09665\";\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCreateShadersEXT-device-09669\", \"device must support at least one queue family with one of the VK_QUEUE_COMPUTE_BIT or VK_QUEUE_GRAPHICS_BIT capabilities\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "case Func::vkCreateShadersEXT:\n    vuid = \"VUID-vkCreateShadersEXT-device-09669\";\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdBuildAccelerationStructuresKHR-dstAccelerationStructure-03703\", \"The range of memory backing the dstAccelerationStructure member of any element of pInfos that is accessed by this command must not overlap the memory backing the scratchData member of any element of pInfos (including the same element), which is accessed by this command\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "VkDeviceSize scratch_b_size, const Location *loc_scratches_b) const {\nconst char *scratch_dst_accel_struct_overlap = \"VUID-vkCmdBuildAccelerationStructuresKHR-dstAccelerationStructure-03703\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkBindImageMemoryInfo-image-01045\", \"image must not have been created with any sparse memory binding flags\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (is_buffer) {\n    vuid = bind_2 ? \"VUID-VkBindBufferMemoryInfo-buffer-01030\" : \"VUID-vkBindBufferMemory-buffer-01030\";\n    vuid = bind_2 ? \"VUID-VkBindImageMemoryInfo-image-01045\" : \"VUID-vkBindImageMemory-image-01045\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkBindImageMemory-image-07460\", \"image must not have been bound to a memory object\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (is_buffer) {\n    vuid = bind_2 ? \"VUID-VkBindBufferMemoryInfo-buffer-07459\" : \"VUID-vkBindBufferMemory-buffer-07459\";\n    vuid = bind_2 ? \"VUID-VkBindImageMemoryInfo-image-07460\" : \"VUID-vkBindImageMemory-image-07460\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkAllocateMemory-pAllocateInfo-01714\", \"pAllocateInfo->memoryTypeIndex must be less than VkPhysicalDeviceMemoryProperties::memoryTypeCount as returned by vkGetPhysicalDeviceMemoryProperties for the VkPhysicalDevice that device was created from\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (pAllocateInfo->memoryTypeIndex >= phys_dev_mem_props.memoryTypeCount) {\n    skip |= LogError(\"VUID-vkAllocateMemory-pAllocateInfo-01714\", device, allocate_info_loc.dot(Field::memoryTypeIndex),\n                     \"%\" PRIu32 \" is not a valid index. Device only advertises %\" PRIu32 \" memory types.\",\n                     pAllocateInfo->memoryTypeIndex, phys_dev_mem_props.memoryTypeCount);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkMemoryDedicatedAllocateInfo-image-01797\", \"If image is not VK_NULL_HANDLE, image must not have been created with VK_IMAGE_CREATE_DISJOINT_BIT set in VkImageCreateInfo::flags\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (image_state->disjoint == true) {\n    skip |= LogError(\"VUID-VkMemoryDedicatedAllocateInfo-image-01797\", objlist, image_loc,\n                     \"(%s) was created with VK_IMAGE_CREATE_DISJOINT_BIT.\", FormatHandle(dedicated_image).c_str());\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkMemoryAllocateInfo-allocationSize-01742\", \"If the parameters define an import operation, the external handle specified was created by the Vulkan API, and the external handle type is VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT, then the values of allocationSize and memoryTypeIndex must match those specified when the payload being imported was created\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (pAllocateInfo->allocationSize != payload_info->allocation_size) {\n        LogError(\"VUID-VkMemoryAllocateInfo-allocationSize-01742\", device, allocate_info_loc.dot(Field::allocationSize),\n                 \"allocationSize (%\" PRIu64 \") does not match %s (%d) allocationSize (%\" PRIu64 \").\",\n                 pAllocateInfo->allocationSize, import_loc.Fields().c_str(), import_memory_fd_info->fd,\n                 payload_info->allocation_size);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkMemoryDedicatedAllocateInfo-buffer-01879\", \"If buffer is not VK_NULL_HANDLE and VkMemoryAllocateInfo defines a memory import operation with handle type VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT, the memory being imported must also be a dedicated buffer allocation and buffer must be identical to the buffer associated with the imported memory\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "// TODO - Print out info about buffer creation info\nconst LogObjectList objlist(payload_info->dedicated_buffer, dedicated_buffer);\nskip |= LogError(\"VUID-VkMemoryDedicatedAllocateInfo-buffer-01879\", objlist,\n                 allocate_info_loc.pNext(Struct::VkMemoryDedicatedAllocateInfo, Field::buffer),\n                 \"is %s but %s (%d) was created with a dedicated buffer %s.\",\n                 FormatHandle(dedicated_buffer).c_str(), import_loc.Fields().c_str(),\n                 import_memory_fd_info->fd, FormatHandle(payload_info->dedicated_buffer).c_str());\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkMemoryDedicatedAllocateInfo-image-01876\", \"If image is not VK_NULL_HANDLE and VkMemoryAllocateInfo defines a memory import operation with handle type VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT, VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT, VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT, VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT, VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT, or VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT, and the external handle was created by the Vulkan API, then the memory being imported must also be a dedicated image allocation and image must be identical to the image associated with the imported memory\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (payload_info->dedicated_image == VK_NULL_HANDLE) {\n    skip |= LogError(\"VUID-VkMemoryDedicatedAllocateInfo-image-01876\", dedicated_image,\n                     allocate_info_loc.pNext(Struct::VkMemoryDedicatedAllocateInfo, Field::image),\n                     \"is %s but %s (0x%\" PRIxPTR \") was not created with a dedicated image.\",\n                     FormatHandle(dedicated_image).c_str(), import_loc.Fields().c_str(),\n                     reinterpret_cast<std::uintptr_t>(import_memory_win32_info->handle));\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkFreeMemory-memory-00677\", \"All submitted commands that refer to memory (via images or buffers) must have completed execution\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (auto mem_info = Get<vvl::DeviceMemory>(memory)) {\n    skip |= ValidateObjectNotInUse(mem_info.get(), error_obj.location, \"VUID-vkFreeMemory-memory-00677\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkBindAccelerationStructureMemoryInfoNV-memoryOffset-03621\", \"memoryOffset must be less than the size of memory\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "vuid = bind_2 ? \"VUID-VkBindImageMemoryInfo-memoryOffset-01046\" : \"VUID-vkBindImageMemory-memoryOffset-01046\";\nvuid = \"VUID-VkBindAccelerationStructureMemoryInfoNV-memoryOffset-03621\";\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkExportMemoryAllocateInfo-handleTypes-00656\", \"The bits in handleTypes must be supported and compatible, as reported by VkExternalImageFormatProperties or VkExternalBufferProperties\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((external_features & VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT) == 0) {\n    const LogObjectList objlist(buffer, memory);\n    skip |= LogError(\"VUID-VkExportMemoryAllocateInfo-handleTypes-00656\", objlist, loc,\n                     \"The VkDeviceMemory (%s) has VkExportMemoryAllocateInfo::handleTypes with the %s flag \"\n                     \"set, which does not support VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT with the buffer \"\n                     \"create flags (%s) and usage flags (%s).\",\n                     FormatHandle(memory).c_str(), string_VkExternalMemoryHandleTypeFlagBits(flag),\n                     string_VkBufferCreateFlags(external_info.flags).c_str(),\n                     string_VkBufferUsageFlags(external_info.usage).c_str());\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkMemoryAllocateInfo-pNext-00639\", \"If the pNext chain includes a VkExportMemoryAllocateInfo structure, and any of the handle types specified in VkExportMemoryAllocateInfo::handleTypes require a dedicated allocation, as reported by vkGetPhysicalDeviceImageFormatProperties2 in VkExternalImageFormatProperties::externalMemoryProperties.externalMemoryFeatures, or by vkGetPhysicalDeviceExternalBufferProperties in VkExternalBufferProperties::externalMemoryProperties.externalMemoryFeatures, the pNext chain must include a VkMemoryDedicatedAllocateInfo or VkDedicatedAllocationMemoryAllocateInfoNV structure with either its image or buffer member set to a value other than VK_NULL_HANDLE\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!mem_info->IsDedicatedBuffer()) {\n    const LogObjectList objlist(buffer, memory);\n    skip |= LogError(\"VUID-VkMemoryAllocateInfo-pNext-00639\", objlist, loc.dot(Field::memory),\n                     \"(%s) has VkExportMemoryAllocateInfo::handleTypes with the %s flag \"\n                     \"set, which requires dedicated allocation for the buffer created with flags (%s) and \"\n                     \"usage flags (%s), but the memory is allocated without dedicated allocation support.\",\n                     FormatHandle(memory).c_str(), string_VkExternalMemoryHandleTypeFlagBits(flag),\n                     string_VkBufferCreateFlags(external_info.flags).c_str(),\n                     string_VkBufferUsageFlags(external_info.usage).c_str());\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkBindBufferMemory-size-01037\", \"The size member of the VkMemoryRequirements structure returned from a call to vkGetBufferMemoryRequirements with buffer must be less than or equal to the size of memory minus memoryOffset\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (buffer_state->requirements.size > (mem_info->allocate_info.allocationSize - memoryOffset)) {\n    const char *vuid = bind_buffer_mem_2 ? \"VUID-VkBindBufferMemoryInfo-size-01037\" : \"VUID-vkBindBufferMemory-size-01037\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkBindBufferMemoryInfo-descriptorBufferCaptureReplay-08112\", \"If the buffer was created with the VK_BUFFER_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT bit set, memory must have been allocated with the VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT bit set\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!(memory_allocate_flags & VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT)) {\n    const char *vuid = bind_buffer_mem_2 ? \"VUID-VkBindBufferMemoryInfo-descriptorBufferCaptureReplay-08112\"\n                                         : \"VUID-vkBindBufferMemory-descriptorBufferCaptureReplay-08112\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkBindBufferMemory-bufferDeviceAddressCaptureReplay-09200\", \"If the VkPhysicalDeviceBufferDeviceAddressFeatures::bufferDeviceAddressCaptureReplay feature is enabled and buffer was created with the VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT bit set, memory must have been allocated with the VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT bit set\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!(memory_allocate_flags & VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT)) {\n    const char *vuid = bind_buffer_mem_2 ? \"VUID-VkBindBufferMemoryInfo-bufferDeviceAddressCaptureReplay-09200\"\n                                         : \"VUID-vkBindBufferMemory-bufferDeviceAddressCaptureReplay-09200\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkImportMemoryWin32HandleInfoKHR-handleType-00658\", \"If handleType is not 0, it must be supported for import, as reported by VkExternalImageFormatProperties or VkExternalBufferProperties\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!HasExternalMemoryImportSupport(*buffer_state, mem_info->import_handle_type.value())) {\n    const LogObjectList objlist(buffer, memory);\n        \"VUID-VkImportMemoryWin32HandleInfoKHR-handleType-00658\", objlist, loc.dot(Field::memory),\n        \"(%s) was imported from handleType %s but VkExternalBufferProperties does not report it as importable.\",\n        FormatHandle(memory).c_str(), string_VkExternalMemoryHandleTypeFlagBits(mem_info->import_handle_type.value()));\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkBindBufferMemory-None-01899\", \"If buffer was created with the VK_BUFFER_CREATE_PROTECTED_BIT bit not set, the buffer must not be bound to a memory object allocated with a memory type that reports VK_MEMORY_PROPERTY_PROTECTED_BIT\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "const char *vuid = bind_buffer_mem_2 ? \"VUID-VkBindBufferMemoryInfo-None-01899\" : \"VUID-vkBindBufferMemory-None-01899\";\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkImageMemoryRequirementsInfo2-image-02280\", \"If image was created with a single-plane format and with any tiling other than VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT, then there must not be a VkImagePlaneMemoryRequirementsInfo included in the pNext chain of the VkImageMemoryRequirementsInfo2 structure\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((vkuFormatIsMultiplane(image_format) == false) && (image_tiling != VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT)) {\n    skip |= LogError(\"VUID-VkImageMemoryRequirementsInfo2-image-02280\", pInfo->image, image_loc,\n                     \"(%s) is a single-plane format (%s) and does not have tiling of \"\n                     \"VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT,\"\n                     \"but the current pNext includes a VkImagePlaneMemoryRequirementsInfo struct\",\n                     FormatHandle(pInfo->image).c_str(), string_VkFormat(image_format));\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkMemoryMapInfoKHR-memory-07963\", \"memory must not have been allocated with multiple instances\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (mem_info.multi_instance) {\n    skip |= LogError(map2 ? \"VUID-VkMemoryMapInfoKHR-memory-07963\" : \"VUID-vkMapMemory-memory-00683\", instance, loc,\n                     \"Memory allocated with multiple instances.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkMapMemory-memory-00678\", \"memory must not be currently host mapped\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (mem_info.mapped_range.size != 0) {\n    skip |= LogError(map2 ? \"VUID-VkMemoryMapInfoKHR-memory-07958\" : \"VUID-vkMapMemory-memory-00678\", memory, loc,\n                     \"memory has already be mapped.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkMapMemory-flags-09568\", \"VK_MEMORY_MAP_PLACED_BIT_EXT must not be set in flags\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (flags & VK_MEMORY_MAP_PLACED_BIT_EXT) {\n    skip |= LogError(\"VUID-vkMapMemory-flags-09568\", memory, error_obj.location.dot(Field::flags),\n                     \"VK_MEMORY_MAP_PLACED_BIT_EXT is not allowed in vkMapMemory()\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkMemoryMapInfoKHR-flags-09651\", \"If VK_MEMORY_MAP_PLACED_BIT_EXT is set in flags and size is VK_WHOLE_SIZE, VkMemoryAllocateInfo::allocationSize must be aligned to an integer multiple of VkPhysicalDeviceMapMemoryPlacedPropertiesEXT::minPlacedMemoryMapAlignment\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (mem_info->allocate_info.allocationSize % phys_dev_ext_props.map_memory_placed_props.minPlacedMemoryMapAlignment !=\n    skip |= LogError(\"VUID-VkMemoryMapInfoKHR-flags-09651\", pMemoryMapInfo->memory, info_loc.dot(Field::size),\n                     \"is VK_WHOLE_SIZE but the size of the memory (0x%\" PRIx64\n                     \") is not an integer multiple of minPlacedMemoryMapAlignment (0x%\" PRIx64 \")\",\n                     mem_info->allocate_info.allocationSize,\n                     phys_dev_ext_props.map_memory_placed_props.minPlacedMemoryMapAlignment);\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkMemoryMapPlacedInfoEXT-pPlacedAddress-09577\", \"pPlacedAddress must be aligned to an integer multiple of VkPhysicalDeviceMapMemoryPlacedPropertiesEXT::minPlacedMemoryMapAlignment\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "} else if (reinterpret_cast<std::uintptr_t>(placed_info->pPlacedAddress) %\n    skip |= LogError(\"VUID-VkMemoryMapPlacedInfoEXT-pPlacedAddress-09577\", pMemoryMapInfo->memory, addr_loc,\n                     \"(%p) is not an integer multiple of \"\n                     \"minPlacedMemoryMapAlignment (0x%\" PRIx64 \")\",\n                     placed_info->pPlacedAddress, phys_dev_ext_props.map_memory_placed_props.minPlacedMemoryMapAlignment);\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkMappedMemoryRange-memory-00684\", \"memory must be currently host mapped\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (mem_info->mapped_range.size == 0) {\n    skip |= LogError(\"VUID-VkMappedMemoryRange-memory-00684\", mem_ranges[i].memory, memory_range_loc,\n                     \"Attempting to use memory (%s) that is not currently host mapped.\",\n                     FormatHandle(mem_ranges[i].memory).c_str());\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkMappedMemoryRange-size-01389\", \"If size is equal to VK_WHOLE_SIZE, the end of the current mapping of memory must either be a multiple of VkPhysicalDeviceLimits::nonCoherentAtomSize bytes from the beginning of the memory object, or be equal to the end of the memory object\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (SafeModulo(mapping_end, atom_size) != 0 && mapping_end != allocation_size) {\n    skip |= LogError(\"VUID-VkMappedMemoryRange-size-01389\", mem_ranges->memory, memory_range_loc.dot(Field::size),\n                     \"is VK_WHOLE_SIZE and the mapping end (%\" PRIu64 \" = %\" PRIu64 \" + %\" PRIu64\n                     \") not a multiple of VkPhysicalDeviceLimits::nonCoherentAtomSize (%\" PRIu64\n                     \") and not equal to the end of the memory object (%\" PRIu64 \").\",\n                     mapping_end, mapping_offset, mapping_size, atom_size, allocation_size);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkBindImageMemory-memoryOffset-01048\", \"memoryOffset must be an integer multiple of the alignment member of the VkMemoryRequirements structure returned from a call to vkGetImageMemoryRequirements with image\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (SafeModulo(bind_info.memoryOffset, mem_req.alignment) != 0) {\n    const char *vuid = bind_image_mem_2 ? \"VUID-VkBindImageMemoryInfo-pNext-01616\"\n                                        : \"VUID-vkBindImageMemory-memoryOffset-01048\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkBindImageMemory2-pBindInfos-04006\", \"pBindInfos must not refer to the same image subresource more than once\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "const LogObjectList objlist(bind_info.image, bind_info.memory);\nskip |= LogError(\"VUID-vkBindImageMemory2-pBindInfos-04006\", objlist, loc.dot(Field::image),\n                 \"is non-disjoint and is being bound twice at pBindInfos[%d]\", it->second[0]);\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkBindImageMemoryInfo-memory-02629\", \"If the dedicatedAllocationImageAliasing feature is enabled, and the VkMemoryAllocateInfo provided when memory was allocated included a VkMemoryDedicatedAllocateInfo structure in its pNext chain, and VkMemoryDedicatedAllocateInfo::image was not VK_NULL_HANDLE, then memoryOffset must be zero, and image must be either equal to VkMemoryDedicatedAllocateInfo::image or an image that was created using the same parameters in VkImageCreateInfo, with the exception that extent and arrayLayers may differ subject to the following restrictions: every dimension in the extent parameter of the image being bound must be equal to or smaller than the original image for which the allocation was created; and the arrayLayers parameter of the image being bound must be equal to or smaller than the original image for which the allocation was created\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((bind_info.memoryOffset != 0) || !current_image_state ||\n    const char *vuid = bind_image_mem_2 ? \"VUID-VkBindImageMemoryInfo-memory-02629\"\n                                        : \"VUID-vkBindImageMemory-memory-02629\";\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkBindImageMemory-descriptorBufferCaptureReplay-08113\", \"If the image was created with the VK_IMAGE_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT bit set, memory must have been allocated with the VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT bit set\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((image_state->create_info.flags & VK_IMAGE_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT) &&\n    const char *vuid = bind_image_mem_2 ? \"VUID-VkBindImageMemoryInfo-descriptorBufferCaptureReplay-08113\"\n                                        : \"VUID-vkBindImageMemory-descriptorBufferCaptureReplay-08113\";\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkBindImageMemoryInfo-memory-02989\", \"If memory was created by a memory import operation, that is not VkImportAndroidHardwareBufferInfoANDROID with a non-NULL buffer value, the external handle type of the imported memory must also have been set in VkExternalMemoryImageCreateInfo::handleTypes when image was created\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((mem_info->import_handle_type.value() & image_state->external_memory_handle_types) == 0) {\n        bind_image_mem_2 ? \"VUID-VkBindImageMemoryInfo-memory-02989\" : \"VUID-vkBindImageMemory-memory-02989\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkBindImageMemory-None-01902\", \"If image was created with the VK_IMAGE_CREATE_PROTECTED_BIT bit not set, the image must not be bound to a memory object created with a memory type that reports VK_MEMORY_PROPERTY_PROTECTED_BIT\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "bind_image_mem_2 ? \"VUID-VkBindImageMemoryInfo-None-01902\" : \"VUID-vkBindImageMemory-None-01902\";\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkBindImageMemoryInfo-pNext-01632\", \"If the pNext chain does not include a VkBindImageMemorySwapchainInfoKHR structure, memory must be a valid VkDeviceMemory handle\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!mem_info) {\n    const LogObjectList objlist(bind_info.image, bind_info.memory);\n    skip |= LogError(\"VUID-VkBindImageMemoryInfo-pNext-01632\", objlist, loc.dot(Field::memory), \"(%s) is invalid.\",\n                     FormatHandle(bind_info.memory).c_str());\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkBindImagePlaneMemoryInfo-planeAspect-02284\", \"If the image's tiling is VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT, then planeAspect must be a single valid memory plane for the image (that is, aspectMask must specify a plane index that is less than the VkDrmFormatModifierPropertiesEXT::drmFormatModifierPlaneCount associated with the image's format and VkImageDrmFormatModifierPropertiesEXT::drmFormatModifier)\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "const LogObjectList objlist(bind_info.image, bind_info.memory);\nskip |= LogError(\"VUID-VkBindImagePlaneMemoryInfo-planeAspect-02284\", objlist,\n                 loc.pNext(Struct::VkBindImagePlaneMemoryInfo, Field::planeAspect),\n                 \"is %s but is invalid for %s.\", string_VkImageAspectFlags(aspect).c_str(),\n                 string_VkFormat(image_format));\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkSparseMemoryBind-resourceOffset-09491\", \"If the resource being bound is a VkBuffer, resourceOffset, memoryOffset and size must be an integer multiple of the alignment of the VkMemoryRequirements structure returned from a call to vkGetBufferMemoryRequirements with the buffer resource\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (SafeModulo(bind.resourceOffset, buffer.requirements.alignment) != 0) {\n    const LogObjectList objlist(bind.memory, buffer.Handle());\n        LogError(\"VUID-VkSparseMemoryBind-resourceOffset-09491\", objlist, buffer_bind_info_loc.dot(Field::buffer),\n                 \"(%s) is being bound, but %s.resourceOffset (%\" PRIu64\n                 \") is not a multiple of required memory alignment (%\" PRIu64 \").\",\n                 FormatHandle(buffer).c_str(), bind_loc.Fields().c_str(), bind.resourceOffset, buffer.requirements.alignment);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkSparseMemoryBind-memory-01096\", \"If memory is not VK_NULL_HANDLE, memory and memoryOffset must match the memory requirements of the resource, as described in section Resource Memory Association\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!((uint32_t(1) << mem_state->allocate_info.memoryTypeIndex) & requirements.memoryTypeBits)) {\n    const LogObjectList objlist(bind.memory, resource_handle);\n    skip |= LogError(\"VUID-VkSparseMemoryBind-memory-01096\", objlist, loc.dot(Field::memory),\n                     \"has a type index (%\" PRIu32 \") that is not among the allowed types mask (0x%\" PRIX32\n                     \") for this resource.\",\n                     mem_state->allocate_info.memoryTypeIndex, requirements.memoryTypeBits);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkSparseMemoryBind-size-01102\", \"size must be less than or equal to the size of memory minus memoryOffset\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((mem_state->allocate_info.allocationSize - bind.memoryOffset) < bind.size) {\n    const LogObjectList objlist(bind.memory, resource_handle);\n    skip |= LogError(\"VUID-VkSparseMemoryBind-size-01102\", objlist, loc.dot(Field::size),\n                     \"(%\" PRIu64 \") must be less than or equal to the size of memory (%\" PRIu64\n                     \") minus memoryOffset (%\" PRIu64 \").\",\n                     bind.size, mem_state->allocate_info.allocationSize, bind.memoryOffset);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkSparseMemoryBind-size-01100\", \"size must be less than or equal to the size of the resource minus resourceOffset\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((resource_size - bind.resourceOffset) < bind.size) {\n    const LogObjectList objlist(bind.memory, resource_handle);\n    skip |= LogError(\"VUID-VkSparseMemoryBind-size-01100\", objlist, loc.dot(Field::size),\n                     \"(%\" PRIu64 \") must be less than or equal to the size of the resource (%\" PRIu64\n                     \") minus resourceOffset (%\" PRIu64 \").\",\n                     bind.size, resource_size, bind.resourceOffset);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkSparseImageMemoryBind-memory-02732\", \"If memory was created with VkExportMemoryAllocateInfo::handleTypes not equal to 0, at least one handle type it contained must also have been set in VkExternalMemoryImageCreateInfo::handleTypes when the image was created\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!(mem_state->export_handle_types & image_state->external_memory_handle_types)) {\n    const LogObjectList objlist(bind.memory, image_state->Handle());\n    skip |= LogError(\"VUID-VkSparseImageMemoryBind-memory-02732\", objlist,\n                     memory_loc.dot(Field::memory).pNext(Struct::VkExportMemoryAllocateInfo).dot(Field::handleTypes),\n                     \"is %s, but the external handle types specified in resource are %s.\",\n                     string_VkExternalMemoryHandleTypeFlags(mem_state->export_handle_types).c_str(),\n                     string_VkExternalMemoryHandleTypeFlags(image_state->external_memory_handle_types).c_str());\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkSparseImageMemoryBind-extent-01108\", \"extent.width must either be a multiple of the sparse image block width of the image, or else (extent.width + offset.x) must equal the width of the image subresource\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((SafeModulo(bind.extent.width, granularity.width) != 0) &&\n    ((bind.extent.width + bind.offset.x) != subresource_extent.width)) {\n    skip |= LogError(\"VUID-VkSparseImageMemoryBind-extent-01108\", image_state->Handle(),\n                     bind_loc.dot(Field::extent).dot(Field::width),\n                     \"(%\" PRIu32\n                     \") must either be a multiple of the sparse image block width \"\n                     \"(VkSparseImageFormatProperties::imageGranularity.width (%\" PRIu32\n                     \")) of the image, or else (extent.width + offset.x) (%\" PRIu32\n                     \") must equal the width of the image subresource (%\" PRIu32 \").\",\n                     bind.extent.width, granularity.width, bind.extent.width + bind.offset.x, subresource_extent.width);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdCopyMemoryIndirectNV-stride-07655\", \"stride must be a multiple of 4 and must be greater than or equal to sizeof(VkCopyMemoryIndirectCommandNV)\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (stride % 4 != 0 || stride < sizeof(VkCopyMemoryIndirectCommandKHR)) {\n    skip |= LogError(\"VUID-vkCmdCopyMemoryIndirectNV-stride-07655\", commandBuffer, \n                     error_obj.location.dot(Field::stride),\n                     \"(%u) must be a multiple of 4 and must be greater than or equal to size of VkCopyMemoryIndirectCommandKHR (%u)\",\n                     stride, sizeof(VkCopyMemoryIndirectCommandKHR));\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdCopyMemoryToImageIndirectNV-mipLevel-07670\", \"The specified mipLevel of each region must be less than the mipLevels specified in VkImageCreateInfo when dstImage was created\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (mip_level >= dst_image_state->create_info.mipLevels) {\n    const LogObjectList objlist(commandBuffer, dstImage);\n    skip |= LogError(\"VUID-vkCmdCopyMemoryToImageIndirectNV-mipLevel-07670\", objlist,\n                     subresource_loc.dot(Field::mipLevel),\n                     \"(%u) of region (%d) must be less than the mipLevels (%u) specified in \"\n                     \"VkImageCreateInfo when dstImage was created.\",\n                     mip_level, i, dst_image_state->create_info.mipLevels);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdCopyMemoryToImageIndirectKHR-dstImage-07973\", \"dstImage must have a sample count equal to VK_SAMPLE_COUNT_1_BIT\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (dst_image_state->create_info.samples != VK_SAMPLE_COUNT_1_BIT) {\n    const LogObjectList objlist(commandBuffer, dstImage);\n    skip |= LogError(\"VUID-vkCmdCopyMemoryToImageIndirectKHR-dstImage-07973\", objlist, error_obj.location.dot(Field::dstImage),\n                     \"is created with %s but needs to be VK_SAMPLE_COUNT_1_BIT.\",\n                     string_VkSampleCountFlagBits(dst_image_state->create_info.samples));\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkGetBufferDeviceAddress-bufferDeviceAddress-03324\", \"The bufferDeviceAddress or VkPhysicalDeviceBufferDeviceAddressFeaturesEXT::bufferDeviceAddress feature must be enabled\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!enabled_features.bufferDeviceAddress && !enabled_features.bufferDeviceAddressEXT) {\n    skip |= LogError(\"VUID-vkGetBufferDeviceAddress-bufferDeviceAddress-03324\", pInfo->buffer, error_obj.location,\n                     \"The bufferDeviceAddress feature must be enabled.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkGetBufferOpaqueCaptureAddress-device-03327\", \"If device was created with multiple physical devices, then the bufferDeviceAddressMultiDevice feature must be enabled\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (physical_device_count > 1 && !enabled_features.bufferDeviceAddressMultiDevice) {\n    skip |= LogError(\"VUID-vkGetBufferOpaqueCaptureAddress-device-03327\", objlist, error_obj.location,\n                     \"If device was created with multiple physical devices, then the \"\n                     \"bufferDeviceAddressMultiDevice feature must be enabled.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdDrawMultiEXT-drawCount-04934\", \"drawCount must be less than VkPhysicalDeviceMultiDrawPropertiesEXT::maxMultiDrawCount\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (drawCount > phys_dev_ext_props.multi_draw_props.maxMultiDrawCount) {\n        LogError(\"VUID-vkCmdDrawMultiEXT-drawCount-04934\", cb_state.GetObjectList(VK_PIPELINE_BIND_POINT_GRAPHICS),\n                 error_obj.location.dot(Field::drawCount), \"(%\" PRIu32 \") must be less than maxMultiDrawCount (%\" PRIu32 \").\",\n                 drawCount, phys_dev_ext_props.multi_draw_props.maxMultiDrawCount);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdDrawMultiIndexedEXT-drawCount-04939\", \"drawCount must be less than VkPhysicalDeviceMultiDrawPropertiesEXT::maxMultiDrawCount\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (drawCount > phys_dev_ext_props.multi_draw_props.maxMultiDrawCount) {\n    skip |= LogError(\"VUID-vkCmdDrawMultiIndexedEXT-drawCount-04939\", cb_state.GetObjectList(VK_PIPELINE_BIND_POINT_GRAPHICS),\n                     error_obj.location.dot(Field::drawCount),\n                     \"(%\" PRIu32 \") must be less than VkPhysicalDeviceMultiDrawPropertiesEXT::maxMultiDrawCount (%\" PRIu32 \").\",\n                     drawCount, phys_dev_ext_props.multi_draw_props.maxMultiDrawCount);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdDrawIndirect-drawCount-02719\", \"drawCount must be less than or equal to VkPhysicalDeviceLimits::maxDrawIndirectCount\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (drawCount > phys_dev_props.limits.maxDrawIndirectCount) {\n    skip |= LogError(\"VUID-vkCmdDrawIndirect-drawCount-02719\", cb_state.GetObjectList(VK_PIPELINE_BIND_POINT_GRAPHICS),\n                     error_obj.location.dot(Field::drawCount),\n                     \"(%\" PRIu32 \") is not less than or equal to the maximum allowed (%\" PRIu32 \").\", drawCount,\n                     phys_dev_props.limits.maxDrawIndirectCount);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdDrawIndexedIndirect-drawCount-02718\", \"If the multiDrawIndirect feature is not enabled, drawCount must be 0 or 1\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!enabled_features.multiDrawIndirect && ((drawCount > 1))) {\n    skip |= LogError(\"VUID-vkCmdDrawIndexedIndirect-drawCount-02718\", cb_state.GetObjectList(VK_PIPELINE_BIND_POINT_GRAPHICS),\n                     error_obj.location.dot(Field::drawCount),\n                     \"(%\" PRIu32 \") must be 0 or 1 if multiDrawIndirect feature is not enabled.\", drawCount);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdDrawIndexedIndirect-drawCount-00539\", \"If drawCount is equal to 1, (offset + sizeof(VkDrawIndexedIndirectCommand)) must be less than or equal to the size of buffer\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "} else if ((drawCount == 1) && (offset + sizeof(VkDrawIndexedIndirectCommand)) > buffer_state->create_info.size) {\n    LogObjectList objlist = cb_state.GetObjectList(VK_PIPELINE_BIND_POINT_GRAPHICS);\n    objlist.add(buffer);\n    skip |= LogError(\"VUID-vkCmdDrawIndexedIndirect-drawCount-00539\", objlist, error_obj.location.dot(Field::drawCount),\n                     \"is 1 and (offset + sizeof(VkDrawIndexedIndirectCommand)) (%\" PRIu64\n                     \") is not less than \"\n                     \"or equal to the size of buffer (%\" PRIu64 \").\",\n                     (offset + sizeof(VkDrawIndexedIndirectCommand)), buffer_state->create_info.size);\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdDispatchBase-groupCountX-00424\", \"groupCountX must be less than or equal to VkPhysicalDeviceLimits::maxComputeWorkGroupCount[0] minus baseGroupX\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "} else if (groupCountX > (limit - baseGroupX)) {\n        LogError(\"VUID-vkCmdDispatchBase-groupCountX-00424\", cb_state.GetObjectList(VK_SHADER_STAGE_COMPUTE_BIT),\n                 error_obj.location.dot(Field::baseGroupX),\n                 \"(%\" PRIu32 \") + groupCountX (%\" PRIu32 \") exceeds device limit maxComputeWorkGroupCount[0] (%\" PRIu32 \").\",\n                 baseGroupX, groupCountX, limit);\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdDispatchBase-baseGroupX-00427\", \"If any of baseGroupX, baseGroupY, or baseGroupZ are not zero, then the bound compute pipeline must have been created with the VK_PIPELINE_CREATE_DISPATCH_BASE flag or the bound compute shader object must have been created with the VK_SHADER_CREATE_DISPATCH_BASE_BIT_EXT flag\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!(pipeline_state->create_flags & VK_PIPELINE_CREATE_DISPATCH_BASE)) {\n    skip |= LogError(\"VUID-vkCmdDispatchBase-baseGroupX-00427\", cb_state.GetObjectList(VK_SHADER_STAGE_COMPUTE_BIT),\n                     error_obj.location,\n                     \"If any of baseGroupX (%\" PRIu32 \"), baseGroupY (%\" PRIu32 \"), or baseGroupZ (%\" PRIu32\n                     \") are not zero, then the bound compute pipeline \"\n                     \"must have been created with the VK_PIPELINE_CREATE_DISPATCH_BASE flag\",\n                     baseGroupX, baseGroupY, baseGroupZ);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdDrawIndirectCount-countBufferOffset-02716\", \"countBufferOffset must be a multiple of 4\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (countBufferOffset & 3) {\n        LogError(\"VUID-vkCmdDrawIndirectCount-countBufferOffset-02716\", cb_state.GetObjectList(VK_PIPELINE_BIND_POINT_GRAPHICS),\n                 error_obj.location.dot(Field::countBufferOffset), \"(%\" PRIu64 \"), is not a multiple of 4.\", countBufferOffset);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdDrawIndexedIndirectCount-countBufferOffset-02716\", \"countBufferOffset must be a multiple of 4\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (countBufferOffset & 3) {\n    skip |= LogError(\"VUID-vkCmdDrawIndexedIndirectCount-countBufferOffset-02716\",\n                     cb_state.GetObjectList(VK_PIPELINE_BIND_POINT_GRAPHICS), error_obj.location.dot(Field::countBufferOffset),\n                     \"(%\" PRIu64 \"), is not a multiple of 4.\", countBufferOffset);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdDrawIndirectByteCountEXT-transformFeedbackDraw-02288\", \"The implementation must support VkPhysicalDeviceTransformFeedbackPropertiesEXT::transformFeedbackDraw\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (IsExtEnabled(device_extensions.vk_ext_transform_feedback) &&\n    !phys_dev_ext_props.transform_feedback_props.transformFeedbackDraw) {\n    skip |= LogError(\"VUID-vkCmdDrawIndirectByteCountEXT-transformFeedbackDraw-02288\",\n                     cb_state.GetObjectList(VK_PIPELINE_BIND_POINT_GRAPHICS), error_obj.location,\n                     \"VkPhysicalDeviceTransformFeedbackPropertiesEXT::transformFeedbackDraw is not supported\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdTraceRaysNV-callableShaderBindingOffset-02462\", \"callableShaderBindingOffset must be a multiple of VkPhysicalDeviceRayTracingPropertiesNV::shaderGroupBaseAlignment\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (SafeModulo(callableShaderBindingOffset, phys_dev_ext_props.ray_tracing_props_nv.shaderGroupBaseAlignment) != 0) {\n    skip |= LogError(\"VUID-vkCmdTraceRaysNV-callableShaderBindingOffset-02462\",\n                     cb_state.GetObjectList(VK_PIPELINE_BIND_POINT_RAY_TRACING_KHR),\n                     error_obj.location.dot(Field::callableShaderBindingOffset),\n                     \"must be a multiple of \"\n                     \"VkPhysicalDeviceRayTracingPropertiesNV::shaderGroupBaseAlignment.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdTraceRaysNV-hitShaderBindingStride-02467\", \"hitShaderBindingStride must be less than or equal to VkPhysicalDeviceRayTracingPropertiesNV::maxShaderGroupStride\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (hitShaderBindingStride > phys_dev_ext_props.ray_tracing_props_nv.maxShaderGroupStride) {\n    skip |= LogError(\"VUID-vkCmdTraceRaysNV-hitShaderBindingStride-02467\",\n                     cb_state.GetObjectList(VK_PIPELINE_BIND_POINT_RAY_TRACING_KHR),\n                     error_obj.location.dot(Field::hitShaderBindingStride),\n                     \"must be less than or equal to \"\n                     \"VkPhysicalDeviceRayTracingPropertiesNV::maxShaderGroupStride.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdTraceRaysNV-width-02469\", \"width must be less than or equal to VkPhysicalDeviceLimits::maxComputeWorkGroupCount[0]\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (width > phys_dev_props.limits.maxComputeWorkGroupCount[0]) {\n    skip |= LogError(\"VUID-vkCmdTraceRaysNV-width-02469\", cb_state.GetObjectList(VK_PIPELINE_BIND_POINT_RAY_TRACING_KHR),\n                     error_obj.location.dot(Field::width),\n                     \"must be less than or equal to VkPhysicalDeviceLimits::maxComputeWorkGroupCount[0].\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdTraceRaysNV-missShaderBindingOffset-02457\", \"missShaderBindingOffset must be less than the size of missShaderBindingTableBuffer\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (miss_shader_buffer_state && missShaderBindingOffset >= miss_shader_buffer_state->create_info.size) {\n    LogObjectList objlist = cb_state.GetObjectList(VK_PIPELINE_BIND_POINT_RAY_TRACING_KHR);\n    objlist.add(missShaderBindingTableBuffer);\n    skip |= LogError(\"VUID-vkCmdTraceRaysNV-missShaderBindingOffset-02457\", objlist,\n                     error_obj.location.dot(Field::missShaderBindingOffset),\n                     \"%\" PRIu64 \" must be less than the size of missShaderBindingTableBuffer %\" PRIu64 \" .\",\n                     missShaderBindingOffset, miss_shader_buffer_state->create_info.size);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdTraceRaysKHR-flags-03514\", \"If the currently bound ray tracing pipeline was created with flags that included VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR, entries in the table identified by pHitShaderBindingTable->deviceAddress accessed as a result of this command in order to execute an intersection shader must not be set to zero\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((pHitShaderBindingTable->size == 0 || pHitShaderBindingTable->stride == 0)) {\n        is_indirect ? \"VUID-vkCmdTraceRaysIndirectKHR-flags-03514\" : \"VUID-vkCmdTraceRaysKHR-flags-03514\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdTraceRaysIndirectKHR-flags-03512\", \"If the currently bound ray tracing pipeline was created with flags that included VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR, entries in the table identified by pHitShaderBindingTable->deviceAddress accessed as a result of this command in order to execute an any-hit shader must not be set to zero\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (pHitShaderBindingTable->size == 0 || pHitShaderBindingTable->stride == 0) {\n        is_indirect ? \"VUID-vkCmdTraceRaysIndirectKHR-flags-03512\" : \"VUID-vkCmdTraceRaysKHR-flags-03512\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdTraceRaysKHR-pHitShaderBindingTable-03688\", \"The buffer from which the pHitShaderBindingTable->deviceAddress is queried must have been created with the VK_BUFFER_USAGE_SHADER_BINDING_TABLE_BIT_KHR usage flag\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "const char *vuid_single_device_memory = is_indirect ? \"VUID-vkCmdTraceRaysIndirectKHR-pHitShaderBindingTable-03687\"\n                                                    : \"VUID-vkCmdTraceRaysKHR-pHitShaderBindingTable-03687\";\nconst char *vuid_binding_table_flag = is_indirect ? \"VUID-vkCmdTraceRaysIndirectKHR-pHitShaderBindingTable-03688\"\n                                                  : \"VUID-vkCmdTraceRaysKHR-pHitShaderBindingTable-03688\";\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdTraceRaysIndirectKHR-pMissShaderBindingTable-03683\", \"If the buffer from which pMissShaderBindingTable->deviceAddress was queried is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (pMissShaderBindingTable) {\n    const Location table_loc = loc.dot(Field::pMissShaderBindingTable);\n    const char *vuid_single_device_memory = is_indirect ? \"VUID-vkCmdTraceRaysIndirectKHR-pMissShaderBindingTable-03683\"\n                                                        : \"VUID-vkCmdTraceRaysKHR-pMissShaderBindingTable-03683\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdTraceRaysKHR-flags-03511\", \"If the currently bound ray tracing pipeline was created with flags that included VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR, the shader group handle identified by pMissShaderBindingTable->deviceAddress must not be set to zero\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (pipeline_state->create_flags & VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR) {\n        is_indirect ? \"VUID-vkCmdTraceRaysIndirectKHR-flags-03511\" : \"VUID-vkCmdTraceRaysKHR-flags-03511\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdDrawMeshTasksNV-taskCount-02119\", \"taskCount must be less than or equal to VkPhysicalDeviceMeshShaderPropertiesNV::maxDrawMeshTasksCount\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (taskCount > phys_dev_ext_props.mesh_shader_props_nv.maxDrawMeshTasksCount) {\n        \"VUID-vkCmdDrawMeshTasksNV-taskCount-02119\", cb_state.GetObjectList(VK_PIPELINE_BIND_POINT_GRAPHICS),\n        error_obj.location.dot(Field::taskCount),\n        \"(0x%\" PRIxLEAST32\n        \"), must be less than or equal to VkPhysicalDeviceMeshShaderPropertiesNV::maxDrawMeshTasksCount (0x%\" PRIxLEAST32 \").\",\n        taskCount, phys_dev_ext_props.mesh_shader_props_nv.maxDrawMeshTasksCount);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdDrawMeshTasksIndirectNV-offset-02710\", \"offset must be a multiple of 4\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (offset & 3) {\n    skip |= LogError(\"VUID-vkCmdDrawMeshTasksIndirectNV-offset-02710\", cb_state.GetObjectList(VK_PIPELINE_BIND_POINT_GRAPHICS),\n                     error_obj.location.dot(Field::offset), \"(%\" PRIu64 \"), is not a multiple of 4.\", offset);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdDrawMeshTasksIndirectCountNV-maxDrawCount-02183\", \"If maxDrawCount is greater than or equal to 1, (stride \u00d7 (maxDrawCount - 1) + offset + sizeof(VkDrawMeshTasksIndirectCommandNV)) must be less than or equal to the size of buffer\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (maxDrawCount > 1) {\n    skip |= ValidateCmdDrawStrideWithBuffer(cb_state, \"VUID-vkCmdDrawMeshTasksIndirectCountNV-maxDrawCount-02183\", stride,\n                                            Struct::VkDrawMeshTasksIndirectCommandNV, sizeof(VkDrawMeshTasksIndirectCommandNV),\n                                            maxDrawCount, offset, *buffer_state, error_obj.location);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdDrawMeshTasksIndirectEXT-drawCount-07088\", \"If drawCount is greater than 1, stride must be a multiple of 4 and must be greater than or equal to sizeof(VkDrawMeshTasksIndirectCommandEXT)\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (drawCount > 1) {\n    skip |= ValidateCmdDrawStrideWithStruct(cb_state, \"VUID-vkCmdDrawMeshTasksIndirectEXT-drawCount-07088\", stride,\n                                            Struct::VkDrawMeshTasksIndirectCommandEXT,\n                                            sizeof(VkDrawMeshTasksIndirectCommandEXT), error_obj.location);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdDrawMeshTasksIndirectCountEXT-stride-07096\", \"stride must be a multiple of 4 and must be greater than or equal to sizeof(VkDrawMeshTasksIndirectCommandEXT)\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "skip |= ValidateBufferUsageFlags(LogObjectList(commandBuffer, countBuffer), *count_buffer_state,\nskip |= ValidateCmdDrawStrideWithStruct(cb_state, \"VUID-vkCmdDrawMeshTasksIndirectCountEXT-stride-07096\", stride,\n                                        Struct::VkDrawMeshTasksIndirectCommandEXT, sizeof(VkDrawMeshTasksIndirectCommandEXT),\n                                        error_obj.location);\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkImportSemaphoreFdInfoKHR-flags-03323\", \"If flags contains VK_SEMAPHORE_IMPORT_TEMPORARY_BIT, the VkSemaphoreTypeCreateInfo::semaphoreType field of the semaphore from which fd was exported must not be VK_SEMAPHORE_TYPE_TIMELINE\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (sem_state->type == VK_SEMAPHORE_TYPE_TIMELINE) {\n    skip |= LogError(\"VUID-VkImportSemaphoreFdInfoKHR-flags-03323\", sem_state->Handle(), info_loc.dot(Field::flags),\n                     \"includes VK_SEMAPHORE_IMPORT_TEMPORARY_BIT and semaphore is VK_SEMAPHORE_TYPE_TIMELINE.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkSemaphoreGetFdInfoKHR-handleType-01132\", \"handleType must have been included in VkExportSemaphoreCreateInfo::handleTypes when semaphore's current payload was created\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((pGetFdInfo->handleType & sem_state->exportHandleTypes) == 0) {\n    skip |= LogError(\"VUID-VkSemaphoreGetFdInfoKHR-handleType-01132\", sem_state->Handle(), info_loc.dot(Field::handleType),\n                     \"(%s) is different from VkExportSemaphoreCreateInfo::handleTypes (%s).\",\n                     string_VkExternalSemaphoreHandleTypeFlagBits(pGetFdInfo->handleType),\n                     string_VkExternalSemaphoreHandleTypeFlags(sem_state->exportHandleTypes).c_str());\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkFenceGetFdInfoKHR-handleType-01453\", \"handleType must have been included in VkExportFenceCreateInfo::handleTypes when fence's current payload was created\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((pGetFdInfo->handleType & fence_state->exportHandleTypes) == 0) {\n    skip |= LogError(\"VUID-VkFenceGetFdInfoKHR-handleType-01453\", fence_state->Handle(), info_loc.dot(Field::handleType),\n                     \"(%s) is different from VkExportFenceCreateInfo::handleTypes (%s). \",\n                     string_VkExternalFenceHandleTypeFlagBits(pGetFdInfo->handleType),\n                     string_VkExternalFenceHandleTypeFlags(fence_state->exportHandleTypes).c_str());\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkImportSemaphoreWin32HandleInfoKHR-flags-03322\", \"If flags contains VK_SEMAPHORE_IMPORT_TEMPORARY_BIT, the VkSemaphoreTypeCreateInfo::semaphoreType field of the semaphore from which handle or name was exported must not be VK_SEMAPHORE_TYPE_TIMELINE\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((pImportSemaphoreWin32HandleInfo->flags & VK_SEMAPHORE_IMPORT_TEMPORARY_BIT) != 0 &&\n    sem_state->type == VK_SEMAPHORE_TYPE_TIMELINE) {\n    skip |= LogError(\"VUID-VkImportSemaphoreWin32HandleInfoKHR-flags-03322\", sem_state->Handle(),\n                     error_obj.location.dot(Field::pImportSemaphoreWin32HandleInfo).dot(Field::semaphore),\n                     \"includes VK_SEMAPHORE_IMPORT_TEMPORARY_BIT and semaphore is VK_SEMAPHORE_TYPE_TIMELINE.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkFenceGetWin32HandleInfoKHR-fence-01450\", \"fence must not currently have its payload replaced by an imported payload as described below in Importing Fence Payloads unless that imported payload's handle type was included in VkExternalFenceProperties::exportFromImportedHandleTypes for handleType\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (fence_state->Scope() != vvl::Fence::kInternal && fence_state->HasImportedHandleType() &&\n    !CanFenceExportFromImported(physical_device, pGetWin32HandleInfo->handleType, fence_state->ImportedHandleType())) {\n    skip |= LogError(\"VUID-VkFenceGetWin32HandleInfoKHR-fence-01450\", fence_state->Handle(),\n                     error_obj.location.dot(Field::pGetWin32HandleInfo).dot(Field::handleType),\n                     \"(%s) cannot be exported from fence with imported payload with handle type %s\",\n                     string_VkExternalFenceHandleTypeFlagBits(pGetWin32HandleInfo->handleType),\n                     string_VkExternalFenceHandleTypeFlagBits(fence_state->ImportedHandleType()));\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkExportMetalObjectsInfoEXT-pNext-06793\", \"If the pNext chain includes a VkExportMetalBufferInfoEXT structure, the VkDeviceMemory in its memory member must have been allocated with VK_EXPORT_METAL_OBJECT_TYPE_METAL_BUFFER_BIT_EXT in the exportObjectType member of a VkExportMetalObjectCreateInfoEXT structure in the pNext chain of the VkMemoryAllocateInfo structure in the vkAllocateMemory command\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!mem_info->metal_buffer_export) {\n        \"VUID-VkExportMetalObjectsInfoEXT-pNext-06793\", device, error_obj.location,\n        \"pNext chain contains a VkExportMetalBufferInfoEXT structure with memory = \"\n        \"%s, but that memory was not allocated with a VkExportMetalObjectCreateInfoEXT whose exportObjectType \"\n        \"member was set to VK_EXPORT_METAL_OBJECT_TYPE_METAL_BUFFER_BIT_EXT in the pNext chain of the \"\n        \"VkMemoryAllocateInfo structure\",\n        FormatHandle(metal_buffer_ptr->memory).c_str());\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkExportMetalObjectsInfoEXT-pNext-06796\", \"If the pNext chain includes a VkExportMetalTextureInfoEXT structure, and its imageView member is not VK_NULL_HANDLE, the VkImageView in its imageView member must have been created with VK_EXPORT_METAL_OBJECT_TYPE_METAL_TEXTURE_BIT_EXT in the exportObjectType member of a VkExportMetalObjectCreateInfoEXT structure in the pNext chain of the VkImageViewCreateInfo structure in the vkCreateImageView command\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!image_view_info->metal_imageview_export) {\n        \"VUID-VkExportMetalObjectsInfoEXT-pNext-06796\", device, error_obj.location,\n        \"pNext chain contains a VkExportMetalTextureInfoEXT structure with \"\n        \"imageView = \"\n        \"%s, but that image view was not created with a VkExportMetalObjectCreateInfoEXT whose \"\n        \"exportObjectType \"\n        \"member was set to VK_EXPORT_METAL_OBJECT_TYPE_METAL_TEXTURE_BIT_EXT in the pNext chain of the \"\n        \"VkImageViewCreateInfo structure\",\n        FormatHandle(metal_texture_ptr->imageView).c_str());\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkExportMetalObjectsInfoEXT-pNext-06803\", \"If the pNext chain includes a VkExportMetalIOSurfaceInfoEXT structure, the VkImage in its image member must have been created with VK_EXPORT_METAL_OBJECT_TYPE_METAL_IOSURFACE_BIT_EXT in the exportObjectType member of a VkExportMetalObjectCreateInfoEXT structure in the pNext chain of the VkImageCreateInfo structure in the vkCreateImage command\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!image_info->metal_io_surface_export) {\n        \"VUID-VkExportMetalObjectsInfoEXT-pNext-06803\", device, error_obj.location,\n        \"pNext chain contains a VkExportMetalIOSurfaceInfoEXT structure with image = \"\n        \"%s, but that image was not created with a VkExportMetalObjectCreateInfoEXT whose exportObjectType \"\n        \"member was set to VK_EXPORT_METAL_OBJECT_TYPE_METAL_IOSURFACE_BIT_EXT in the pNext chain of the \"\n        \"VkImageCreateInfo structure\",\n        FormatHandle(metal_io_surface_ptr->image).c_str());\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkImageCreateInfo-imageCreateFormatFeatures-09048\", \"If imageCreateFormatFeatures (as defined in Image Creation Limits) does not contain VK_FORMAT_FEATURE_2_HOST_IMAGE_TRANSFER_BIT_EXT, then usage must not contain VK_IMAGE_USAGE_HOST_TRANSFER_BIT_EXT\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (((tiling_features & VK_FORMAT_FEATURE_2_HOST_IMAGE_TRANSFER_BIT_EXT) == 0) &&\n    (create_info.usage & VK_IMAGE_USAGE_HOST_TRANSFER_BIT_EXT)) {\n    skip |= LogError(\"VUID-VkImageCreateInfo-imageCreateFormatFeatures-09048\", device, loc.dot(Field::usage),\n                     \"includes VK_IMAGE_USAGE_HOST_TRANSFER_BIT_EXT, but %s doesn't support \"\n                     \"VK_FORMAT_FEATURE_2_HOST_IMAGE_TRANSFER_BIT_EXT.\\n\"\n                     \"(supported features: %s)\",\n                     string_VkFormat(create_info.format), string_VkFormatFeatureFlags2(tiling_features).c_str());\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkImageAlignmentControlCreateInfoMESA-maximumRequestedAlignment-09656\", \"If maximumRequestedAlignment is not 0, the bitwise-and of maximumRequestedAlignment and supportedImageAlignmentMask must be non-zero\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "\"(%\" PRIu32 \") must be a power of two.\", alignment_control_create_info->maximumRequestedAlignment);\n} else if ((alignment_control_create_info->maximumRequestedAlignment &\nskip |= LogError(\"VUID-VkImageAlignmentControlCreateInfoMESA-maximumRequestedAlignment-09656\", device,\ncreate_info_loc.pNext(Struct::VkImageAlignmentControlCreateInfoMESA, Field::maximumRequestedAlignment),\n\"(0x%\" PRIx32 \") and supportedImageAlignmentMask (0x%\" PRIx32 \") don't share any bits.\",\nalignment_control_create_info->maximumRequestedAlignment,\nphys_dev_ext_props.image_alignment_control_props.supportedImageAlignmentMask);\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkImageCreateInfo-fragmentDensityMapOffset-06515\", \"If the fragmentDensityMapOffset feature is not enabled and usage includes VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT, extent.height must be less than or equal to the ceiling of maxFramebufferHeight/minFragmentDensityTexelSize.height\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (pCreateInfo->extent.height > ceiling_height) {\n    skip |= LogError(\"VUID-VkImageCreateInfo-fragmentDensityMapOffset-06515\", device, create_info_loc.dot(Field::usage),\n                     \"includes VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT and image height (%\" PRIu32\n                     \") exceeds the \"\n                     \"ceiling of device \"\n                     \"maxFramebufferHeight (%\" PRIu32 \") / minFragmentDensityTexelSize.height (%\" PRIu32\n                     \"). The ceiling value: %\" PRIu32 \".\",\n                     pCreateInfo->extent.height, device_limits->maxFramebufferHeight,\n                     phys_dev_ext_props.fragment_density_map_props.minFragmentDensityTexelSize.height, ceiling_height);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkImageCreateInfo-samples-02258\", \"samples must be a valid VkSampleCountFlagBits value that is set in imageCreateSampleCounts (as defined in Image Creation Limits)\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((pCreateInfo->samples & format_limits.sampleCounts) == 0) {\n    skip |= LogError(\"VUID-VkImageCreateInfo-samples-02258\", device, create_info_loc.dot(Field::samples),\n                     \"(%s) is not supported by format %s (format sampleCounts: %s).\",\n                     string_VkSampleCountFlagBits(pCreateInfo->samples), string_VkFormat(pCreateInfo->format),\n                     string_VkSampleCountFlags(format_limits.sampleCounts).c_str());\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkImageCreateInfo-format-06411\", \"If the image format is one of the formats that require a sampler Y'CBCR conversion, samples must be VK_SAMPLE_COUNT_1_BIT\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (pCreateInfo->samples != VK_SAMPLE_COUNT_1_BIT) {\n    skip |= LogError(\"VUID-VkImageCreateInfo-format-06411\", device, create_info_loc.dot(Field::samples),\n                     \"(%s), but when using a YCbCr Conversion format (%s), samples must be \"\n                     \"VK_SAMPLE_COUNT_1_BIT.\",\n                     string_VkSampleCountFlagBits(pCreateInfo->samples), string_VkFormat(pCreateInfo->format));\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkImageCreateInfo-format-01577\", \"If format is not a multi-planar format, and flags does not include VK_IMAGE_CREATE_ALIAS_BIT, flags must not contain VK_IMAGE_CREATE_DISJOINT_BIT\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!vkuFormatIsMultiplane(pCreateInfo->format) && !(pCreateInfo->flags & VK_IMAGE_CREATE_ALIAS_BIT) &&\n    skip |= LogError(\"VUID-VkImageCreateInfo-format-01577\", device, create_info_loc,\n                     \"format is %s and flags are %s. The flags should not include VK_IMAGE_CREATE_DISJOINT_BIT.\",\n                     string_VkFormat(pCreateInfo->format), string_VkImageCreateFlags(pCreateInfo->flags).c_str());\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkImageCreateInfo-multisampledRenderToSingleSampled-06882\", \"If the multisampledRenderToSingleSampled feature is not enabled, flags must not contain VK_IMAGE_CREATE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_BIT_EXT\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!(enabled_features.multisampledRenderToSingleSampled)) {\n    skip |= LogError(\"VUID-VkImageCreateInfo-multisampledRenderToSingleSampled-06882\", device,\n                     create_info_loc.dot(Field::flags),\n                     \"contains VK_IMAGE_CREATE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_BIT_EXT but the \"\n                     \"multisampledRenderToSingleSampled feature is not enabled.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkImageCreateInfo-pNext-01443\", \"If the pNext chain includes a VkExternalMemoryImageCreateInfo or VkExternalMemoryImageCreateInfoNV structure whose handleTypes member is not 0, initialLayout must be VK_IMAGE_LAYOUT_UNDEFINED\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (pCreateInfo->initialLayout != VK_IMAGE_LAYOUT_UNDEFINED) {\n    skip |= LogError(\"VUID-VkImageCreateInfo-pNext-01443\", device,\n                     create_info_loc.pNext(Struct::VkExternalMemoryImageCreateInfo, Field::handleTypes),\n                     \"is %\" PRIu32 \" but pCreateInfo->initialLayout is %s.\", external_memory_create_info->handleTypes,\n                     string_VkImageLayout(pCreateInfo->initialLayout));\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkImageCreateInfo-pNext-00991\", \"If the pNext chain includes a VkExternalMemoryImageCreateInfoNV structure, its handleTypes member must only contain bits that are also in VkExternalImageFormatPropertiesNV::externalMemoryProperties.compatibleHandleTypes, as returned by vkGetPhysicalDeviceExternalImageFormatPropertiesNV with format, imageType, tiling, usage, and flags equal to those in this structure, and with externalHandleType equal to any one of the handle types specified in VkExternalMemoryImageCreateInfoNV::handleTypes\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "skip |= LogError(\"VUID-VkImageCreateInfo-pNext-00991\", device,\n                 create_info_loc.pNext(Struct::VkExternalMemoryImageCreateInfoNV, Field::handleTypes),\n                 \"(%s) is not reported as compatible by vkGetPhysicalDeviceExternalImageFormatPropertiesNV.\",\n                 string_VkExternalMemoryHandleTypeFlagsNV(external_memory_create_info_nv->handleTypes).c_str());\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkImageCreateInfo-flags-08329\", \"If flags includes VK_IMAGE_CREATE_VIDEO_PROFILE_INDEPENDENT_BIT_KHR and usage does not include VK_IMAGE_USAGE_VIDEO_DECODE_DST_BIT_KHR, then usage must not include VK_IMAGE_USAGE_VIDEO_DECODE_DPB_BIT_KHR\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (video_profile_independent && (pCreateInfo->usage & VK_IMAGE_USAGE_VIDEO_DECODE_DPB_BIT_KHR) &&\n    skip |= LogError(\"VUID-VkImageCreateInfo-flags-08329\", device, create_info_loc.dot(Field::flags),\n                     \"has VK_IMAGE_CREATE_VIDEO_PROFILE_INDEPENDENT_BIT_KHR set but usage (%s) contains \"\n                     \"VK_IMAGE_USAGE_VIDEO_DECODE_DPB_BIT_KHR without also containing \"\n                     \"VK_IMAGE_USAGE_VIDEO_DECODE_DST_BIT_KHR.\",\n                     string_VkImageUsageFlags(pCreateInfo->usage).c_str());\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkImageCreateInfo-pNext-06743\", \"If the pNext chain includes a VkImageCompressionControlEXT structure, format is a multi-planar format, and VkImageCompressionControlEXT::flags includes VK_IMAGE_COMPRESSION_FIXED_RATE_EXPLICIT_EXT, then VkImageCompressionControlEXT::compressionControlPlaneCount must be equal to the number of planes in format\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (image_compression_control->compressionControlPlaneCount != vkuFormatPlaneCount(pCreateInfo->format)) {\n    skip |= LogError(\"VUID-VkImageCreateInfo-pNext-06743\", device, create_info_loc,\n                     \"VkImageCompressionControlEXT::flags contain VK_IMAGE_COMPRESSION_FIXED_RATE_EXPLICIT_EXT, but \"\n                     \"VkImageCompressionControlEXT::compressionControlPlaneCount (%\" PRIu32\n                     \") is not equal to the number of planes in the multi-planar format %s (%\" PRIu32 \")\",\n                     image_compression_control->compressionControlPlaneCount, string_VkFormat(pCreateInfo->format),\n                     vkuFormatPlaneCount(pCreateInfo->format));\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdClearColorImage-image-00003\", \"If image is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "const auto &image_state = *image_state_ptr;\nconst Location image_loc = error_obj.location.dot(Field::image);\nLogObjectList objlist(commandBuffer, image);\nskip |= ValidateMemoryIsBoundToImage(objlist, image_state, image_loc, \"VUID-vkCmdClearColorImage-image-00003\");\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdClearColorImage-image-00007\", \"image must not have a compressed or depth/stencil format\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "LogError(\"VUID-vkCmdClearColorImage-image-00007\", objlist, image_loc,\n         \"(%s) was created with a depth/stencil format (%s).\", FormatHandle(image).c_str(), string_VkFormat(format));\nskip |= LogError(\"VUID-vkCmdClearColorImage-image-00007\", objlist, image_loc,\n             \"(%s) was created with a compressed format (%s).\", FormatHandle(image).c_str(), string_VkFormat(format));\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdClearDepthStencilImage-image-00010\", \"If image is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "const VkFormat image_format = image_state.create_info.format;\nconst LogObjectList objlist(commandBuffer, image);\nskip |= ValidateMemoryIsBoundToImage(objlist, image_state, image_loc, \"VUID-vkCmdClearDepthStencilImage-image-00010\");\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdClearDepthStencilImage-image-02826\", \"If the image's format does not have a depth component, then the VkImageSubresourceRange::aspectMask member of each element of the pRanges array must not include the VK_IMAGE_ASPECT_DEPTH_BIT bit\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (vkuFormatHasDepth(image_format) == false) {\n    skip |= LogError(\"VUID-vkCmdClearDepthStencilImage-image-02826\", objlist, range_loc.dot(Field::aspectMask),\n                     \"has a VK_IMAGE_ASPECT_DEPTH_BIT but %s \"\n                     \"doesn't have a depth component.\",\n                     string_VkFormat(image_format));\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdClearDepthStencilImage-pRanges-02659\", \"If the aspect member of any element of pRanges includes VK_IMAGE_ASPECT_STENCIL_BIT, and image was not created with separate stencil usage, VK_IMAGE_USAGE_TRANSFER_DST_BIT must have been included in the VkImageCreateInfo::usage used to create image\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (VK_IMAGE_USAGE_TRANSFER_DST_BIT != (VK_IMAGE_USAGE_TRANSFER_DST_BIT & image_state.create_info.usage)) {\n    skip |= LogError(\"VUID-vkCmdClearDepthStencilImage-pRanges-02659\", objlist, image_loc,\n                     \"(%s) was not created with the \"\n                     \"VK_IMAGE_USAGE_TRANSFER_DST_BIT set.\",\n                     FormatHandle(image).c_str());\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdClearAttachments-aspectMask-07884\", \"If the current render pass instance does not use dynamic rendering, and the aspectMask member of any element of pAttachments contains VK_IMAGE_ASPECT_DEPTH_BIT, the current subpass instance's depth-stencil attachment must be either VK_ATTACHMENT_UNUSED or the attachment format must contain a depth component\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((aspect_mask & VK_IMAGE_ASPECT_DEPTH_BIT) && !vkuFormatHasDepth(image_view_format)) {\n    const LogObjectList objlist(commandBuffer, cb_state.activeRenderPass->Handle(),\n    skip |= LogError(\"VUID-vkCmdClearAttachments-aspectMask-07884\", objlist, attachment_loc,\n                     \"in pSubpasses[%\" PRIu32\n                     \"] has VK_IMAGE_ASPECT_DEPTH_BIT and is backed by an image view with format (%s).\",\n                     cb_state.GetActiveSubpass(), string_VkFormat(image_view_format));\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdClearAttachments-aspectMask-07271\", \"If the aspectMask member of any element of pAttachments contains VK_IMAGE_ASPECT_COLOR_BIT, the colorAttachment must be a valid color attachment index in the current render pass instance\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "const LogObjectList objlist(commandBuffer, cb_state.activeRenderPass->Handle());\n    LogError(\"VUID-vkCmdClearAttachments-aspectMask-07271\", objlist, attachment_loc.dot(Field::colorAttachment),\n             \"is index %\" PRIu32 \", which is not less than colorAttachmentCount (%\" PRIu32 \") which was set by %s\",\n             clear_desc->colorAttachment, color_attachment_count, describe_color_count().c_str());\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdClearAttachments-None-09679\", \"If the attachment format has components other than R and G, it must not have a 64-bit component width\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (vkuFormatIs64bit(image_view_format) && vkuFormatComponentCount(image_view_format) > 2) {\n    const LogObjectList objlist(commandBuffer, image_view->Handle());\n    skip |= LogError(\"VUID-vkCmdClearAttachments-None-09679\", objlist, attachment_loc,\n                     \"(%s) was created with a 64-bit format (%s) but it has more than 2 components. The clear command \"\n                     \"can only clear 16 bytes so this format is too large\",\n                     FormatHandle(image_view->Handle()).c_str(), string_VkFormat(image_view_format));\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkImageViewCreateInfo-subresourceRange-02725\", \"If subresourceRange.layerCount is not VK_REMAINING_ARRAY_LAYERS, image is a 3D image created with VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT set, and viewType is VK_IMAGE_VIEW_TYPE_2D or VK_IMAGE_VIEW_TYPE_2D_ARRAY, subresourceRange.layerCount must be non-zero and subresourceRange.baseArrayLayer + subresourceRange.layerCount must be less than or equal to the depth computed from baseMipLevel and extent.depth specified in VkImageCreateInfo when image was created, according to the formula defined in Image Mip Level Sizing\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (necessary_layer_count > image_layer_count) {\n                          ? \"VUID-VkImageViewCreateInfo-subresourceRange-02725\"\n                          : GetSubresourceRangeVUID(subresource_loc, vvl::SubresourceRangeError::LayerCount_01725);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkImageViewCreateInfo-usage-02275\", \"If usage contains VK_IMAGE_USAGE_STORAGE_BIT, then the image view's format features must contain VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "skip |= LogError(\"VUID-VkImageViewCreateInfo-usage-02275\", image_state.Handle(), create_info_loc.dot(Field::format),\n                 \"%s with tiling %s doesn't support VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT.\\n\"\n                 \"(supported features: %s)\",\n                 string_VkFormat(view_format), string_VkImageTiling(image_tiling),\n                 string_VkFormatFeatureFlags2(tiling_features).c_str());\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkImageViewCreateInfo-image-08333\", \"If image was created with VK_IMAGE_CREATE_VIDEO_PROFILE_INDEPENDENT_BIT_KHR and usage contains VK_IMAGE_USAGE_VIDEO_DECODE_DST_BIT_KHR, then the image view's format features must contain VK_FORMAT_FEATURE_VIDEO_DECODE_OUTPUT_BIT_KHR\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((image_usage & VK_IMAGE_USAGE_VIDEO_DECODE_DST_BIT_KHR) &&\n    skip |= LogError(\"VUID-VkImageViewCreateInfo-image-08333\", image_state.Handle(), create_info_loc.dot(Field::format),\n                     \"%s and tiling %s doesn't support VK_FORMAT_FEATURE_VIDEO_DECODE_OUTPUT_BIT_KHR.\\n\"\n                     \"(supported features: %s)\",\n                     string_VkFormat(view_format), string_VkImageTiling(image_tiling),\n                     string_VkFormatFeatureFlags2(tiling_features).c_str());\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkImageViewCreateInfo-image-08338\", \"If image was created with VK_IMAGE_CREATE_VIDEO_PROFILE_INDEPENDENT_BIT_KHR, then usage must not include VK_IMAGE_USAGE_VIDEO_ENCODE_DST_BIT_KHR\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "skip |= LogError(\"VUID-VkImageViewCreateInfo-image-08338\", image_state.Handle(), create_info_loc.dot(Field::usage),\n                 \"is VK_IMAGE_USAGE_VIDEO_ENCODE_DST_BIT_KHR which is not allowed for image views from video profile \"\n                 \"independent images.\");\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkImageViewCreateInfo-pNext-02664\", \"If the pNext chain includes a VkImageViewUsageCreateInfo structure, image was created with a VkImageStencilUsageCreateInfo structure included in the pNext chain of VkImageCreateInfo, and subresourceRange.aspectMask includes bits other than VK_IMAGE_ASPECT_STENCIL_BIT, the usage member of the VkImageViewUsageCreateInfo structure must not include any bits that were not set in the usage member of the VkImageCreateInfo structure used to create image\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((aspect_mask & ~VK_IMAGE_ASPECT_STENCIL_BIT) != 0 &&\n        LogError(\"VUID-VkImageViewCreateInfo-pNext-02664\", pCreateInfo->image,\n                 create_info_loc.pNext(Struct::VkImageViewUsageCreateInfo, Field::usage),\n                 \"(%s) must not include any bits that were not set in VkImageCreateInfo::usage (%s) of the image \"\n                 \"if subResourceRange.aspectMask (%s) includes bits other than VK_IMAGE_ASPECT_STENCIL_BIT.\",\n                 string_VkImageUsageFlags(chained_ivuci_struct->usage).c_str(),\n                 string_VkImageUsageFlags(image_usage).c_str(), string_VkImageAspectFlags(aspect_mask).c_str());\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkImageViewSlicedCreateInfoEXT-sliceOffset-07867\", \"sliceOffset must be less than the effective view depth as specified in Image Mip Level Sizing\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (slice_offset >= effective_view_depth) {\n    skip |= LogError(\"VUID-VkImageViewSlicedCreateInfoEXT-sliceOffset-07867\", pCreateInfo->image,\n                     create_info_loc.pNext(Struct::VkImageViewSlicedCreateInfoEXT, Field::sliceOffset),\n                     \"(%\" PRIu32 \") must be less than the effective view depth (%\" PRIu32 \").\", slice_offset,\n                     effective_view_depth);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkImageViewCreateInfo-image-01586\", \"If image was created with the VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT flag, if the format of the image is a multi-planar format, and if subresourceRange.aspectMask is one of the multi-planar aspect mask bits, then format must be compatible with the VkFormat for the plane of the image format indicated by subresourceRange.aspectMask, as defined in Compatible Formats of Planes of Multi-Planar Formats\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (has_valid_aspect && ((image_class != view_class) || (image_class == VKU_FORMAT_COMPATIBILITY_CLASS_NONE))) {\n    // View format must match the multiplane compatible format\n    skip |= LogError(\"VUID-VkImageViewCreateInfo-image-01586\", pCreateInfo->image, create_info_loc.dot(Field::format),\n                     \"(%s) is not compatible with plane %\" PRIu32 \" of the %s format %s, must be compatible with %s.\",\n                     string_VkFormat(view_format), vkuGetPlaneIndex(static_cast<VkImageAspectFlagBits>(aspect_mask)), FormatHandle(pCreateInfo->image).c_str(),\n                     string_VkFormat(image_format), string_VkFormat(compat_format));\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkImageViewCreateInfo-subResourceRange-01021\", \"viewType must be compatible with the type of image as shown in the view type compatibility table\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (view_type != VK_IMAGE_VIEW_TYPE_1D && view_type != VK_IMAGE_VIEW_TYPE_1D_ARRAY) {\n    skip |= LogError(\"VUID-VkImageViewCreateInfo-subResourceRange-01021\", pCreateInfo->image,\n                     create_info_loc.dot(Field::viewType), \"(%s) is not compatible with image type %s.\",\n                     string_VkImageViewType(view_type), string_VkImageType(image_type));\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkImageViewCreateInfo-image-01003\", \"If image was not created with VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT then viewType must not be VK_IMAGE_VIEW_TYPE_CUBE or VK_IMAGE_VIEW_TYPE_CUBE_ARRAY\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((view_type == VK_IMAGE_VIEW_TYPE_CUBE || view_type == VK_IMAGE_VIEW_TYPE_CUBE_ARRAY) &&\n    skip |= LogError(\"VUID-VkImageViewCreateInfo-image-01003\", pCreateInfo->image,\n                     create_info_loc.dot(Field::viewType), \"(%s) is not compatible with image type %s.\",\n                     string_VkImageViewType(view_type), string_VkImageType(image_type));\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkImageViewCreateInfo-image-04970\", \"If image was created with VK_IMAGE_TYPE_3D and viewType is VK_IMAGE_VIEW_TYPE_2D or VK_IMAGE_VIEW_TYPE_2D_ARRAY then subresourceRange.levelCount must be 1\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "skip |= LogError(\"VUID-VkImageViewCreateInfo-image-04970\", pCreateInfo->image,\n                 create_info_loc.dot(Field::viewType),\n                 \"(%s) is with image type %s must have a \"\n                 \"subresourcesRange.levelCount of 1 but it is %s.\",\n                 string_VkImageViewType(view_type), string_VkImageType(image_type),\n                 string_LevelCount(image_state.create_info, pCreateInfo->subresourceRange).c_str());\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkImageViewCreateInfo-viewType-02963\", \"If viewType is VK_IMAGE_VIEW_TYPE_CUBE_ARRAY and subresourceRange.layerCount is VK_REMAINING_ARRAY_LAYERS, the remaining number of layers must be a multiple of 6\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (view_type == VK_IMAGE_VIEW_TYPE_CUBE_ARRAY && ((remaining_layers) % 6) != 0) {\n    skip |= LogError(\"VUID-VkImageViewCreateInfo-viewType-02963\", pCreateInfo->image,\n                     create_info_loc.dot(Field::subresourceRange).dot(Field::layerCount),\n                     \"VK_REMAINING_ARRAY_LAYERS=(%d) must be a multiple of 6.\", remaining_layers);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkImageViewCreateInfo-flags-04116\", \"If flags does not contain VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT and image was created with usage containing VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT, its flags must not contain any of VK_IMAGE_CREATE_PROTECTED_BIT, VK_IMAGE_CREATE_SPARSE_BINDING_BIT, VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT, or VK_IMAGE_CREATE_SPARSE_ALIASED_BIT\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (image_flags & (VK_IMAGE_CREATE_PROTECTED_BIT | VK_IMAGE_CREATE_SPARSE_BINDING_BIT |\n    skip |= LogError(\"VUID-VkImageViewCreateInfo-flags-04116\", pCreateInfo->image, create_info_loc.dot(Field::image),\n                     \"was created with usage containing \"\n                     \"VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT flags must not contain any of \"\n                     \"VK_IMAGE_CREATE_PROTECTED_BIT, VK_IMAGE_CREATE_SPARSE_BINDING_BIT, \"\n                     \"VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT, or VK_IMAGE_CREATE_SPARSE_ALIASED_BIT\");\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkImageViewCreateInfo-flags-03568\", \"If flags contains VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DEFERRED_BIT_EXT, flags must not contain VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (pCreateInfo->flags & VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT) {\n    skip |= LogError(\"VUID-VkImageViewCreateInfo-flags-03568\", pCreateInfo->image, create_info_loc.dot(Field::flags),\n                     \"(%s) includes both DEFERRED_BIT and DYNAMIC_BIT.\",\n                     string_VkImageViewCreateFlags(pCreateInfo->flags).c_str());\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkImageViewMinLodCreateInfoEXT-minLod-06455\", \"If the minLod feature is not enabled, minLod must be 0.0\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((!enabled_features.minLod) && (image_view_min_lod->minLod != 0)) {\n    skip |= LogError(\"VUID-VkImageViewMinLodCreateInfoEXT-minLod-06455\", pCreateInfo->image,\n                     create_info_loc.pNext(Struct::VkImageViewMinLodCreateInfoEXT, Field::minLod),\n                     \"%f, but the minLod feature is not enabled.\", image_view_min_lod->minLod);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkImageViewCreateInfo-image-04818\", \"If image was created with usage containing VK_IMAGE_USAGE_VIDEO_ENCODE_DST_BIT_KHR, VK_IMAGE_USAGE_VIDEO_ENCODE_SRC_BIT_KHR, or VK_IMAGE_USAGE_VIDEO_ENCODE_DPB_BIT_KHR, then the viewType must be VK_IMAGE_VIEW_TYPE_2D or VK_IMAGE_VIEW_TYPE_2D_ARRAY\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (image_usage & encode_usage) {\n    skip |= LogError(\"VUID-VkImageViewCreateInfo-image-04818\", pCreateInfo->image, create_info_loc.dot(Field::viewType),\n                     \"%s is incompatible with video encode usage.\", string_VkImageViewType(pCreateInfo->viewType));\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkDestroyImageView-imageView-01026\", \"All submitted commands that refer to imageView must have completed execution\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (auto image_view_state = Get<vvl::ImageView>(imageView)) {\n    skip |= ValidateObjectNotInUse(image_view_state.get(), error_obj.location, \"VUID-vkDestroyImageView-imageView-01026\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkGetImageSubresourceLayout-arrayLayer-01717\", \"The arrayLayer member of pSubresource must be less than the arrayLayers specified in image\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (subresource.arrayLayer >= image_state.create_info.arrayLayers) {\n        is_2 ? \"VUID-vkGetImageSubresourceLayout2KHR-arrayLayer-01717\" : \"VUID-vkGetImageSubresourceLayout-arrayLayer-01717\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkGetImageSubresourceLayout2KHR-format-04462\", \"If format of the image has a depth component, the aspectMask member of pSubresource must contain VK_IMAGE_ASPECT_DEPTH_BIT\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (vkuFormatHasDepth(image_format) && ((aspect_mask & VK_IMAGE_ASPECT_DEPTH_BIT) == 0)) {\n        is_2 ? \"VUID-vkGetImageSubresourceLayout2KHR-format-04462\" : \"VUID-vkGetImageSubresourceLayout-format-04462\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkGetImageSubresourceLayout-tiling-08717\", \"If the tiling of the image is VK_IMAGE_TILING_LINEAR and has a multi-planar image format, then the aspectMask member of pSubresource must be a single valid multi-planar aspect mask bit\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (vkuFormatIsMultiplane(image_format) && !IsOnlyOneValidPlaneAspect(image_format, aspect_mask)) {\n        is_2 ? \"VUID-vkGetImageSubresourceLayout2KHR-tiling-08717\" : \"VUID-vkGetImageSubresourceLayout-tiling-08717\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkGetImageSubresourceLayout2KHR-tiling-09435\", \"If the tiling of the image is VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT, then the aspectMask member of pSubresource must be VK_IMAGE_ASPECT_MEMORY_PLANE_i_BIT_EXT and the index i must be less than the VkDrmFormatModifierPropertiesEXT::drmFormatModifierPlaneCount associated with the image's format and VkImageDrmFormatModifierPropertiesEXT::drmFormatModifier\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!is_valid) {\n        is_2 ? \"VUID-vkGetImageSubresourceLayout2KHR-tiling-09435\" : \"VUID-vkGetImageSubresourceLayout-tiling-09433\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkGetImageSubresourceLayout2KHR-image-09434\", \"If image was created with the VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID external memory handle type, then image must be bound to memory\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (image_state.IsExternalBuffer() && image_state.GetBoundMemoryStates().empty()) {\n        is_2 ? \"VUID-vkGetImageSubresourceLayout2KHR-image-09434\" : \"VUID-vkGetImageSubresourceLayout-image-09432\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkHostImageLayoutTransitionInfoEXT-image-09241\", \"If image has a color format that is single-plane, then the aspectMask member of subresourceRange must be VK_IMAGE_ASPECT_COLOR_BIT\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!vkuFormatIsMultiplane(image_format)) {\n    const LogObjectList objlist(device, image_state->Handle());\n    skip |= LogError(\"VUID-VkHostImageLayoutTransitionInfoEXT-image-09241\", objlist,\n                     transition_loc.dot(Field::subresourceRange).dot(Field::aspectMask),\n                     \"is %s (not VK_IMAGE_ASPECT_COLOR_BIT) and image was created with format %s.\",\n                     string_VkImageAspectFlags(aspect_mask).c_str(), string_VkFormat(image_format));\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkHostImageLayoutTransitionInfoEXT-aspectMask-08702\", \"If the aspectMask member of subresourceRange includes VK_IMAGE_ASPECT_DEPTH_BIT, oldLayout and newLayout must not be one of VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL or VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "const LogObjectList objlist(device, image_state->Handle());\nskip |= LogError(\"VUID-VkHostImageLayoutTransitionInfoEXT-aspectMask-08702\", objlist,\n                 transition_loc.dot(Field::subresourceRange).dot(Field::aspectMask),\n                 \"is %s meaning that neither oldLayout nor newLayout can be \"\n                 \"VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL or VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL\"\n                 \" (oldLayout = %s and newLayout = %s).\",\n                 string_VkImageAspectFlags(aspect_mask).c_str(), string_VkImageLayout(transition.oldLayout),\n                 string_VkImageLayout(transition.oldLayout));\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkImageViewCreateInfo-pNext-06944\", \"If the pNext chain includes VkImageViewSampleWeightCreateInfoQCOM structure, then textureSampleWeighted feature must be enabled\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((enabled_features.textureSampleWeighted == VK_FALSE)) {\n    skip |= LogError(\"VUID-VkImageViewCreateInfo-pNext-06944\", create_info.image, loc,\n                     \"pNext chain includes VkImageViewSampleWeightCreateInfoQCOM \"\n                     \"but textureSampleWeighted feature is not enabled.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkImageViewCreateInfo-pNext-06949\", \"If the pNext chain includes VkImageViewSampleWeightCreateInfoQCOM structure, then viewType must be VK_IMAGE_VIEW_TYPE_1D_ARRAY or VK_IMAGE_VIEW_TYPE_2D_ARRAY\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((create_info.viewType != VK_IMAGE_VIEW_TYPE_1D_ARRAY) && (create_info.viewType != VK_IMAGE_VIEW_TYPE_2D_ARRAY)) {\n    skip |= LogError(\"VUID-VkImageViewCreateInfo-pNext-06949\", create_info.image, loc,\n                     \"pNext chain includes VkImageViewSampleWeightCreateInfoQCOM \"\n                     \"but the view type (%s) is not VK_IMAGE_VIEW_TYPE_1D_ARRAY or VK_IMAGE_VIEW_TYPE_2D_ARRAY.\",\n                     string_VkImageViewType(create_info.viewType));\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkImageViewCreateInfo-pNext-06954\", \"If the pNext chain includes VkImageViewSampleWeightCreateInfoQCOM structure and viewType is VK_IMAGE_VIEW_TYPE_2D_ARRAY, then subresourceRange.layerCount must be equal or greater than numPhases\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((create_info.viewType == VK_IMAGE_VIEW_TYPE_2D_ARRAY) &&\n    skip |= LogError(\"VUID-VkImageViewCreateInfo-pNext-06954\", create_info.image, loc,\n                     \"pNext chain includes VkImageViewSampleWeightCreateInfoQCOM \"\n                     \"and the view type is VK_IMAGE_VIEW_TYPE_1D_ARRAY but the subresourceRange.layerCount (%s) is not greater \"\n                     \"than or equal to \"\n                     \"VkImageViewSampleWeightCreateInfoQCOM::numPhases (%\" PRIu32 \").\",\n                     string_LayerCount(image_state.create_info, create_info.subresourceRange).c_str(),\n                     sample_weight_info->numPhases);\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkImageViewSampleWeightCreateInfoQCOM-filterSize-06959\", \"filterSize.height must be less than or equal to VkPhysicalDeviceImageProcessingPropertiesQCOM::maxWeightFilterDimension.height\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((sample_weight_info->filterSize.height > phys_dev_ext_props.image_processing_props.maxWeightFilterDimension.height)) {\n    skip |= LogError(\"VUID-VkImageViewSampleWeightCreateInfoQCOM-filterSize-06959\", create_info.image, loc,\n                     \"VkImageViewSampleWeightCreateInfoQCOM::filterSize.height (%\" PRIu32\n                     \") is not less than or equal to \"\n                     \"VkPhysicalDeviceImageProcessingPropertiesQCOM::maxWeightFilterDimension.height (%\" PRIu32 \").\",\n                     sample_weight_info->filterSize.width,\n                     phys_dev_ext_props.image_processing_props.maxWeightFilterDimension.width);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkRenderPassCreateInfo2-pAttachments-02522\", \"For any member of pAttachments with a loadOp equal to VK_ATTACHMENT_LOAD_OP_CLEAR, the first use of that attachment must not specify a layout equal to VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL, VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL, or VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (use_rp2 && ((first_layout == VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL) ||\n    skip |= LogError(\"VUID-VkRenderPassCreateInfo2-pAttachments-02522\", device, layout_loc,\n                     \"(%s) is an invalid for pAttachments[%d] (first attachment to have LOAD_OP_CLEAR).\",\n                     string_VkImageLayout(first_layout), attachment);\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkRenderPassCreateInfo-pAttachments-02511\", \"For any member of pAttachments with a stencilLoadOp equal to VK_ATTACHMENT_LOAD_OP_CLEAR, the first use of that attachment must not specify a layout equal to VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL or VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "skip |= LogError(\"VUID-VkRenderPassCreateInfo-pAttachments-02511\", device, layout_loc,\n                 \"(%s) is an invalid for pAttachments[%d] (first attachment to have LOAD_OP_CLEAR).\",\n                 string_VkImageLayout(first_layout), attachment);\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkRenderPassBeginInfo-framebuffer-parameter\", \"framebuffer must be a valid VkFramebuffer handle\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!view_state) {\n    const LogObjectList objlist(render_pass, framebuffer_state.Handle(), image_view);\n    skip |= LogError(\"VUID-VkRenderPassBeginInfo-framebuffer-parameter\", objlist, attachment_loc, \"%s is invalid.\",\n                     FormatHandle(image_view).c_str());\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdBeginRenderPass-initialLayout-00897\", \"If any of the initialLayout or finalLayout member of the VkAttachmentDescription structures or the layout member of the VkAttachmentReference structures specified when creating the render pass specified in the renderPass member of pRenderPassBegin is VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL then the corresponding attachment image view of the framebuffer specified in the framebuffer member of pRenderPassBegin must have been created with a usage value including VK_IMAGE_USAGE_SAMPLED_BIT or VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "vuid = use_rp2 ? \"VUID-vkCmdBeginRenderPass2-initialLayout-03097\" : \"VUID-vkCmdBeginRenderPass-initialLayout-00897\";\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdBeginRenderPass2-initialLayout-03099\", \"If any of the initialLayout or finalLayout member of the VkAttachmentDescription structures or the layout member of the VkAttachmentReference structures specified when creating the render pass specified in the renderPass member of pRenderPassBegin is VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL then the corresponding attachment image view of the framebuffer specified in the framebuffer member of pRenderPassBegin must have been created with a usage value including VK_IMAGE_USAGE_TRANSFER_DST_BIT\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "vuid = use_rp2 ? \"VUID-vkCmdBeginRenderPass2-initialLayout-03098\" : \"VUID-vkCmdBeginRenderPass-initialLayout-00898\";\nvuid = use_rp2 ? \"VUID-vkCmdBeginRenderPass2-initialLayout-03099\" : \"VUID-vkCmdBeginRenderPass-initialLayout-00899\";\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdBeginRenderPass-initialLayout-01758\", \"If any of the initialLayout or finalLayout member of the VkAttachmentDescription structures or the layout member of the VkAttachmentReference structures specified when creating the render pass specified in the renderPass member of pRenderPassBegin is VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL, VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL, VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL, or VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL then the corresponding attachment image view of the framebuffer specified in the framebuffer member of pRenderPassBegin must have been created with a usage value including VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "vuid = use_rp2 ? \"VUID-vkCmdBeginRenderPass2-initialLayout-03096\" : \"VUID-vkCmdBeginRenderPass-initialLayout-01758\";\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdBeginRenderPass2-initialLayout-02844\", \"If any of the initialLayout or finalLayout member of the VkAttachmentDescription structures or the layout member of the VkAttachmentReference structures specified when creating the render pass specified in the renderPass member of pRenderPassBegin is VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL, or VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL, VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL, or VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL then the corresponding attachment image view of the framebuffer specified in the framebuffer member of pRenderPassBegin must have been created with a usage value including VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "vuid = use_rp2 ? \"VUID-vkCmdBeginRenderPass2-initialLayout-02844\" : \"VUID-vkCmdBeginRenderPass-initialLayout-02842\";\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdClearDepthStencilImage-imageLayout-00012\", \"imageLayout must be either of VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL or VK_IMAGE_LAYOUT_GENERAL\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((dest_image_layout != VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL) && (dest_image_layout != VK_IMAGE_LAYOUT_GENERAL)) {\n    LogObjectList objlist(cb_state.Handle(), image_state.Handle());\n    skip |= LogError(\"VUID-vkCmdClearDepthStencilImage-imageLayout-00012\", objlist, loc,\n                     \"Layout for cleared image is %s but can only be TRANSFER_DST_OPTIMAL or GENERAL.\",\n                     string_VkImageLayout(dest_image_layout));\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkGraphicsPipelineCreateInfo-flags-07369\", \"flags must not include both VK_PIPELINE_CREATE_NO_PROTECTED_ACCESS_BIT_EXT and VK_PIPELINE_CREATE_PROTECTED_ACCESS_ONLY_BIT_EXT\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((flags & VK_PIPELINE_CREATE_2_NO_PROTECTED_ACCESS_BIT_EXT) && (flags & VK_PIPELINE_CREATE_2_PROTECTED_ACCESS_ONLY_BIT_EXT)) {\n    skip |= LogError(\"VUID-VkGraphicsPipelineCreateInfo-flags-07369\", device, loc,\n                     \"is %s (contains both NO_PROTECTED_ACCESS_BIT and PROTECTED_ACCESS_ONLY_BIT).\",\n                     string_VkPipelineCreateFlags2KHR(flags).c_str());\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkPipelineRobustnessCreateInfoEXT-pipelineRobustness-06929\", \"If the pipelineRobustness feature is not enabled, images must be VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DEVICE_DEFAULT_EXT\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (pipeline_robustness_info.images != VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DEVICE_DEFAULT_EXT) {\n    skip |= LogError(\"VUID-VkPipelineRobustnessCreateInfoEXT-pipelineRobustness-06929\", device,\n                     loc.pNext(Struct::VkPipelineRobustnessCreateInfoEXT, Field::images),\n                     \"is %s but the pipelineRobustness feature was not enabled.\",\n                     string_VkPipelineRobustnessImageBehaviorEXT(pipeline_robustness_info.images));\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkGetPipelineExecutableStatisticsKHR-pipeline-03274\", \"The pipeline member of pExecutableInfo must have been created with VK_PIPELINE_CREATE_CAPTURE_STATISTICS_BIT_KHR\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!(pipeline_state->create_flags & VK_PIPELINE_CREATE_CAPTURE_STATISTICS_BIT_KHR)) {\n    skip |= LogError(\"VUID-vkGetPipelineExecutableStatisticsKHR-pipeline-03274\", pExecutableInfo->pipeline, error_obj.location,\n                     \"called on a pipeline created without the \"\n                     \"VK_PIPELINE_CREATE_CAPTURE_STATISTICS_BIT_KHR flag set.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdBindPipeline-pipelineBindPoint-00780\", \"If pipelineBindPoint is VK_PIPELINE_BIND_POINT_GRAPHICS, pipeline must be a graphics pipeline\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "} else if (pipelineBindPoint == VK_PIPELINE_BIND_POINT_COMPUTE) {\n    const LogObjectList objlist(cb_state->Handle(), pipeline);\n    skip |= LogError(\"VUID-vkCmdBindPipeline-pipelineBindPoint-00780\", objlist, error_obj.location,\n                     \"Cannot bind a pipeline of type %s to the compute pipeline bind point\",\n                     string_VkPipelineBindPoint(pipeline_state.pipeline_type));\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdBindPipeline-variableSampleLocations-01525\", \"If VkPhysicalDeviceSampleLocationsPropertiesEXT::variableSampleLocations is VK_FALSE, and pipeline is a graphics pipeline created with a VkPipelineSampleLocationsStateCreateInfoEXT structure having its sampleLocationsEnable member set to VK_TRUE but without VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT enabled then the current render pass instance must have been begun by specifying a VkRenderPassSampleLocationsBeginInfoEXT structure whose pPostSubpassSampleLocations member contains an element with a subpassIndex matching the current subpass index and the sampleLocationsInfo member of that element must match the sampleLocationsInfo specified in VkPipelineSampleLocationsStateCreateInfoEXT when the pipeline was created\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!found) {\n    const LogObjectList objlist(cb_state->Handle(), pipeline, cb_state->activeRenderPass->Handle());\n    skip |= LogError(\"VUID-vkCmdBindPipeline-variableSampleLocations-01525\", objlist, error_obj.location,\n                     \"the current render pass was not begun with any element of \"\n                     \"pPostSubpassSampleLocations subpassIndex \"\n                     \"matching the current subpass index (%\" PRIu32\n                     \") and sampleLocationsInfo from VkPipelineMultisampleStateCreateInfo of the pipeline.\",\n                     cb_state->GetActiveSubpass());\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdBindPipeline-pipelineProtectedAccess-07409\", \"If the pipelineProtectedAccess feature is enabled, and commandBuffer is not a protected command buffer, pipeline must have been created without VK_PIPELINE_CREATE_PROTECTED_ACCESS_ONLY_BIT_EXT\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (pipeline_state.create_flags & VK_PIPELINE_CREATE_PROTECTED_ACCESS_ONLY_BIT_EXT) {\n    skip |= LogError(\"VUID-vkCmdBindPipeline-pipelineProtectedAccess-07409\", objlist, error_obj.location,\n                     \"Binding pipeline created with \"\n                     \"VK_PIPELINE_CREATE_PROTECTED_ACCESS_ONLY_BIT_EXT in an unprotected command buffer.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdSetDescriptorBufferOffsets2EXT-pSetDescriptorBufferOffsetsInfo-09471\", \"Each bit in pSetDescriptorBufferOffsetsInfo->stageFlags must be a stage supported by the commandBuffer's parent VkCommandPool's queue family\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "vuid = \"VUID-vkCmdSetDescriptorBufferOffsetsEXT-pipelineBindPoint-08067\";\ncase Func::vkCmdSetDescriptorBufferOffsets2EXT:\nvuid = \"VUID-vkCmdSetDescriptorBufferOffsets2EXT-pSetDescriptorBufferOffsetsInfo-09471\";\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdPushDescriptorSetWithTemplateKHR-commandBuffer-00366\", \"The pipelineBindPoint specified during the creation of the descriptor update template must be supported by the commandBuffer's parent VkCommandPool's queue family\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "vuid = \"VUID-vkCmdPushDescriptorSet2KHR-pPushDescriptorSetInfo-09468\";\ncase Func::vkCmdPushDescriptorSetWithTemplateKHR:\nvuid = \"VUID-vkCmdPushDescriptorSetWithTemplateKHR-commandBuffer-00366\";\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkPipelineShaderStageCreateInfo-flags-02784\", \"If flags has the VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT flag set, the subgroupSizeControl feature must be enabled\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((flags & VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT) != 0 &&\n    skip |= LogError(\"VUID-VkPipelineShaderStageCreateInfo-flags-02784\", device, loc.dot(Field::flags),\n                     \"includes \"\n                     \"VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT, \"\n                     \"but the subgroupSizeControl feature was not enabled.\");\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkSpecializationInfo-offset-00773\", \"The offset member of each element of pMapEntries must be less than dataSize\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (map_entry.offset >= spec->dataSize) {\n    skip |= LogError(\"VUID-VkSpecializationInfo-offset-00773\", device, map_loc.dot(Field::offset),\n                     \"is %\" PRIu32 \" but dataSize is %zu (for constantID %\" PRIu32 \").\", map_entry.offset, spec->dataSize,\n                     map_entry.constantID);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkGraphicsPipelineCreateInfo-layout-01688\", \"The number of resources in layout accessible to each shader stage that is used by the pipeline must be less than or equal to VkPhysicalDeviceLimits::maxPerStageResources\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "vuid = \"VUID-VkRayTracingPipelineCreateInfoKHR-layout-03428\";\nvuid = \"VUID-VkGraphicsPipelineCreateInfo-layout-01688\";\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkPipelineShaderStageCreateInfo-stage-06844\", \"If a shader module identifier is specified for this stage, the pNext chain must not include a VkShaderModuleCreateInfo structure\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (module_create_info) {\n    skip |= LogError(\"VUID-VkPipelineShaderStageCreateInfo-stage-06844\", device, loc.dot(Field::pNext),\n                     \"has both a \"\n                     \"VkPipelineShaderStageModuleIdentifierCreateInfoEXT \"\n                     \"struct and a VkShaderModuleCreateInfo struct in the pNext chain. (stage %s).\",\n                     string_VkShaderStageFlagBits(stage_ci.stage));\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkGraphicsPipelineCreateInfo-renderPass-06046\", \"If renderPass is not VK_NULL_HANDLE, subpass must be a valid subpass within renderPass\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (subpass >= rp_state->create_info.subpassCount) {\n        LogError(\"VUID-VkGraphicsPipelineCreateInfo-renderPass-06046\", rp_state->Handle(),\n                 create_info_loc.dot(Field::subpass), \"(%\" PRIu32 \") is out of range for this renderpass (0..%\" PRIu32 \").\",\n                 subpass, rp_state->create_info.subpassCount - 1);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkVertexInputAttributeDescription-vertexAttributeAccessBeyondStride-04457\", \"If the VK_KHR_portability_subset extension is enabled, and VkPhysicalDevicePortabilitySubsetFeaturesKHR::vertexAttributeAccessBeyondStride is VK_FALSE, the sum of offset plus the size of the vertex attribute data described by format must not be greater than stride in the VkVertexInputBindingDescription referenced in binding\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((attrib.offset + vkuFormatElementSize(attrib.format)) > desc.stride) {\n    skip |= LogError(\"VUID-VkVertexInputAttributeDescription-vertexAttributeAccessBeyondStride-04457\", device,\n                     create_info_loc,\n                     \"(portability error): attribute.offset (%\" PRIu32\n                     \") + \"\n                     \"sizeof(vertex_description.format) (%\" PRIu32\n                     \") is larger than the vertex stride (%\" PRIu32 \").\",\n                     attrib.offset, vkuFormatElementSize(attrib.format), desc.stride);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkGraphicsPipelineCreateInfo-flags-06609\", \"If flags includes VK_PIPELINE_CREATE_LINK_TIME_OPTIMIZATION_BIT_EXT, pipeline libraries included via VkPipelineLibraryCreateInfoKHR must have been created with VK_PIPELINE_CREATE_RETAIN_LINK_TIME_OPTIMIZATION_INFO_BIT_EXT\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (has_link_time_opt && !lib_has_retain_link_time_opt) {\n    const LogObjectList objlist(device, lib->Handle());\n    skip |= LogError(\"VUID-VkGraphicsPipelineCreateInfo-flags-06609\", objlist, library_loc,\n                     \"(%s) was created with %s, which is missing \"\n                     \"VK_PIPELINE_CREATE_RETAIN_LINK_TIME_OPTIMIZATION_INFO_BIT_EXT, %s is %s.\",\n                     string_VkGraphicsPipelineLibraryFlagsEXT(lib->graphics_lib_type).c_str(),\n                     string_VkPipelineCreateFlags2KHR(lib_pipeline_flags).c_str(),\n                     create_info_loc.dot(Field::flags).Fields().c_str(),\n                     string_VkPipelineCreateFlags2KHR(pipeline_flags).c_str());\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkPipelineLibraryCreateInfoKHR-pLibraries-06855\", \"If any library in pLibraries was created with a shader stage with VkPipelineShaderStageModuleIdentifierCreateInfoEXT and identifierSize not equal to 0, the pipeline must be created with the VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT flag set\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((lib->uses_shader_module_id) && !(pipeline_flags & VK_PIPELINE_CREATE_2_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT_KHR)) {\n    const LogObjectList objlist(device);\n    skip |= LogError(\"VUID-VkPipelineLibraryCreateInfoKHR-pLibraries-06855\", objlist, library_loc,\n                     \"(%s) was created with %s but VkPipelineShaderStageModuleIdentifierCreateInfoEXT::identifierSize was \"\n                     \"not equal to 0 for the pipeline\",\n                     string_VkGraphicsPipelineLibraryFlagsEXT(lib->graphics_lib_type).c_str(),\n                     string_VkPipelineCreateFlags2KHR(lib_pipeline_flags).c_str());\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkPipelineLibraryCreateInfoKHR-pLibraries-08096\", \"If any element of pLibraries was created with VK_PIPELINE_CREATE_DESCRIPTOR_BUFFER_BIT_EXT, all elements must have been created with VK_PIPELINE_CREATE_DESCRIPTOR_BUFFER_BIT_EXT\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (i == 0) {\n    skip |= LogError(\"VUID-VkPipelineLibraryCreateInfoKHR-pLibraries-08096\", device, library_loc,\n                     \"%s created with VK_PIPELINE_CREATE_DESCRIPTOR_BUFFER_BIT_EXT which is opposite of pLibraries[0].\",\n                     lib->descriptor_buffer_mode ? \"was\" : \"was not\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkGraphicsPipelineCreateInfo-flags-08897\", \"If VkGraphicsPipelineLibraryCreateInfoEXT::flags includes VK_GRAPHICS_PIPELINE_LIBRARY_VERTEX_INPUT_INTERFACE_BIT_EXT, pre-rasterization shader state is specified either in a library or by the inclusion of VK_GRAPHICS_PIPELINE_LIBRARY_PRE_RASTERIZATION_SHADERS_BIT_EXT, and that state includes a vertex shader stage in pStages, the pipeline must define vertex input state\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "skip |= LogError(\"VUID-VkGraphicsPipelineCreateInfo-flags-08897\", device, create_info_loc,\n                 \"pVertexInputState and pInputAssemblyState are both NULL so this is an invalid Vertex Input State (no \"\n                 \"dynamic state were used to ignore them).\");\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkGraphicsPipelineCreateInfo-renderPass-06603\", \"If the pipeline requires pre-rasterization shader state, fragment shader state, or fragment output state, and renderPass is not VK_NULL_HANDLE, renderPass must be a valid VkRenderPass handle\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "has_flags ? \"VUID-VkGraphicsPipelineCreateInfo-flags-06643\" : \"VUID-VkGraphicsPipelineCreateInfo-renderPass-06603\";\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkGraphicsPipelineCreateInfo-flags-08901\", \"If flags does not include VK_PIPELINE_CREATE_LIBRARY_BIT_KHR, the pipeline must either define pre-rasterization shader state or include that state in a linked pipeline library\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!pipeline.pre_raster_state) {\n    skip |= LogError(\"VUID-VkGraphicsPipelineCreateInfo-flags-08901\", device, create_info_loc,\n                     \"Attempting to link pipeline libraries without a pre-rasterization shader state (did you forget to \"\n                     \"add VK_PIPELINE_CREATE_LIBRARY_BIT_KHR to your intermediate pipeline?).\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkGraphicsPipelineCreateInfo-None-07826\", \"If the pipeline includes a complete set of state, and there are no libraries included in VkPipelineLibraryCreateInfoKHR::pLibraries, then VkPipelineLayout must be a valid pipeline layout\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!pipeline_layout_state && (!pipeline.library_create_info || pipeline.library_create_info->libraryCount == 0)) {\n    skip |= LogError(\"VUID-VkGraphicsPipelineCreateInfo-None-07826\", device, create_info_loc.dot(Field::layout),\n                     \"is not a valid VkPipelineLayout, but defines a complete set of state.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkGraphicsPipelineCreateInfo-flags-06730\", \"If flags does not include VK_PIPELINE_CREATE_LINK_TIME_OPTIMIZATION_BIT_EXT, the pipeline includes a complete set of state specified entirely by libraries, and each library was created with a VkPipelineLayout created with VK_PIPELINE_LAYOUT_CREATE_INDEPENDENT_SETS_BIT_EXT, then layout must be compatible with the union of the libraries' pipeline layouts\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "skip |= LogError(\"VUID-VkGraphicsPipelineCreateInfo-flags-06730\", device, create_info_loc.dot(Field::layout),\n                 \"is null/invalid and therefore not compatible with the union of libraries layout\");\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkGraphicsPipelineCreateInfo-flags-06614\", \"If VkGraphicsPipelineLibraryCreateInfoEXT::flags includes only one of VK_GRAPHICS_PIPELINE_LIBRARY_PRE_RASTERIZATION_SHADERS_BIT_EXT or VK_GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_SHADER_BIT_EXT, an element of VkPipelineLibraryCreateInfoKHR::pLibraries includes the other subset, and layout was created with VK_PIPELINE_LAYOUT_CREATE_INDEPENDENT_SETS_BIT_EXT, then the layout used by the library must also have been created with VK_PIPELINE_LAYOUT_CREATE_INDEPENDENT_SETS_BIT_EXT\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (pre_raster_independant_set ^ fs_independant_set) {\n        only_libs ? \"VUID-VkGraphicsPipelineCreateInfo-pLibraries-06615\" : \"VUID-VkGraphicsPipelineCreateInfo-flags-06614\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkGraphicsPipelineCreateInfo-pLibraries-06613\", \"If one element of VkPipelineLibraryCreateInfoKHR::pLibraries includes VK_GRAPHICS_PIPELINE_LIBRARY_PRE_RASTERIZATION_SHADERS_BIT_EXT and another element includes VK_GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_SHADER_BIT_EXT, and the layout specified by either library was not created with VK_PIPELINE_LAYOUT_CREATE_INDEPENDENT_SETS_BIT_EXT, then the layout used by each library must be identically defined\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "const char *vuid = only_libs ? \"VUID-VkGraphicsPipelineCreateInfo-pLibraries-06613\"\n                             : \"VUID-VkGraphicsPipelineCreateInfo-flags-06612\";\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkGraphicsPipelineCreateInfo-flags-06612\", \"If VkGraphicsPipelineLibraryCreateInfoEXT::flags includes only one of VK_GRAPHICS_PIPELINE_LIBRARY_PRE_RASTERIZATION_SHADERS_BIT_EXT or VK_GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_SHADER_BIT_EXT, and an element of VkPipelineLibraryCreateInfoKHR::pLibraries includes the other flag, and layout was not created with VK_PIPELINE_LAYOUT_CREATE_INDEPENDENT_SETS_BIT_EXT, then the layout used by this pipeline and the library must be identically defined\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "const char *vuid = only_libs ? \"VUID-VkGraphicsPipelineCreateInfo-pLibraries-06613\"\n                             : \"VUID-VkGraphicsPipelineCreateInfo-flags-06612\";\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkGraphicsPipelineCreateInfo-flags-06620\", \"If VkGraphicsPipelineLibraryCreateInfoEXT::flags includes only one of VK_GRAPHICS_PIPELINE_LIBRARY_PRE_RASTERIZATION_SHADERS_BIT_EXT or VK_GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_SHADER_BIT_EXT, and an element of VkPipelineLibraryCreateInfoKHR::pLibraries includes the other flag, push constants specified in layout in both this pipeline and the library which are available to shader stages in each must be identically defined\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (pre_raster_range.stageFlags != frag_shader_range.stageFlags ||\n    const char *vuid = only_libs ? \"VUID-VkGraphicsPipelineCreateInfo-pLibraries-06621\"\n                                 : \"VUID-VkGraphicsPipelineCreateInfo-flags-06620\";\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkGraphicsPipelineCreateInfo-flags-06757\", \"If VkGraphicsPipelineLibraryCreateInfoEXT::flags includes only one of VK_GRAPHICS_PIPELINE_LIBRARY_PRE_RASTERIZATION_SHADERS_BIT_EXT or VK_GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_SHADER_BIT_EXT, an element of VkPipelineLibraryCreateInfoKHR::pLibraries includes the other subset, and any element of the pSetLayouts array used to create the library's layout was VK_NULL_HANDLE, then the corresponding element of the pSetLayouts array used to create this pipeline's layout must not have shader bindings for shaders in the other subset\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "vuid = \"VUID-VkGraphicsPipelineCreateInfo-flags-06757\";\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkGraphicsPipelineCreateInfo-flags-06679\", \"If VkGraphicsPipelineLibraryCreateInfoEXT::flags includes only one of VK_GRAPHICS_PIPELINE_LIBRARY_PRE_RASTERIZATION_SHADERS_BIT_EXT or VK_GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_SHADER_BIT_EXT, an element of VkPipelineLibraryCreateInfoKHR::pLibraries includes the other subset, any element of the pSetLayouts array when layout was created and the corresponding element of the pSetLayouts array used to create the library's layout must not both be VK_NULL_HANDLE\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "vuid = \"VUID-VkGraphicsPipelineCreateInfo-flags-06679\";\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkGraphicsPipelineCreateInfo-flags-06633\", \"If VkGraphicsPipelineLibraryCreateInfoEXT::flags includes VK_GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_SHADER_BIT_EXT with a pMultisampleState that was not NULL, and an element of VkPipelineLibraryCreateInfoKHR::pLibraries was created with VK_GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_OUTPUT_INTERFACE_BIT_EXT, pMultisampleState must be identically defined to that used to create the library\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "} else if (frag_shader_info.ms_state && !frag_output_info.ms_state) {\n    const char *vuid = (frag_shader_info.init == GPLInitType::gpl_flags) ? \"VUID-VkGraphicsPipelineCreateInfo-flags-06633\"\n                       : (frag_output_info.init == GPLInitType::gpl_flags)\n                           ? \"VUID-VkGraphicsPipelineCreateInfo-pLibraries-06634\"\n                           : \"VUID-VkGraphicsPipelineCreateInfo-pLibraries-06635\";\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkGraphicsPipelineCreateInfo-pLibraries-06635\", \"If one element of VkPipelineLibraryCreateInfoKHR::pLibraries was created with VK_GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_SHADER_BIT_EXT with a pMultisampleState that was not NULL, and if a different element of VkPipelineLibraryCreateInfoKHR::pLibraries was created with VK_GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_OUTPUT_INTERFACE_BIT_EXT, the pMultisampleState used to create each library must be identically defined\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "(frag_shader_info.init == GPLInitType::gpl_flags)   ? \"VUID-VkGraphicsPipelineCreateInfo-flags-06633\"\n: (frag_output_info.init == GPLInitType::gpl_flags) ? \"VUID-VkGraphicsPipelineCreateInfo-pLibraries-06634\"\n                                                    : \"VUID-VkGraphicsPipelineCreateInfo-pLibraries-06635\";\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkGraphicsPipelineCreateInfo-externalFormatResolve-09315\", \"If the externalFormatResolve feature is enabled, the pipeline requires fragment output interface state, renderPass is not VK_NULL_HANDLE, subpass includes an external format resolve attachment, and pDynamicState->pDynamicStates does not include VK_DYNAMIC_STATE_FRAGMENT_SHADING_RATE_KHR, VkPipelineFragmentShadingRateStateCreateInfoKHR::width must be 1\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (fragment_shading_rate->fragmentSize.width != 1) {\n    skip |= LogError(\"VUID-VkGraphicsPipelineCreateInfo-externalFormatResolve-09315\", device,\n                     create_info_loc.pNext(Struct::VkPipelineFragmentShadingRateStateCreateInfoKHR, Field::fragmentSize)\n                         .dot(Field::width),\n                     \"is %\" PRIu32 \", but externalFormat is %\" PRIu64 \" for subpass %\" PRIu32 \".\",\n                     fragment_shading_rate->fragmentSize.width, external_format, pipeline.Subpass());\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkGraphicsPipelineCreateInfo-externalFormatResolve-09310\", \"If the externalFormatResolve feature is enabled, the pipeline requires fragment shader state and fragment output interface state, renderPass is VK_NULL_HANDLE, and VkExternalFormatANDROID::externalFormat is not 0, the fragment shader must not declare the DepthReplacing or StencilRefReplacingEXT execution modes\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "skip |= LogError(\"VUID-VkGraphicsPipelineCreateInfo-externalFormatResolve-09310\", device,\n                 create_info_loc.pNext(Struct::VkExternalFormatANDROID, Field::externalFormat),\n                 \"is %\" PRIu64 \" but the fragment shader declares StencilRefReplacingEXT.\", external_format);\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkPipelineInputAssemblyStateCreateInfo-topology-06253\", \"If the primitiveTopologyPatchListRestart feature is not enabled, and topology is VK_PRIMITIVE_TOPOLOGY_PATCH_LIST, primitiveRestartEnable must be VK_FALSE\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!enabled_features.primitiveTopologyPatchListRestart) {\n    skip |= LogError(\"VUID-VkPipelineInputAssemblyStateCreateInfo-topology-06253\", device, ia_loc,\n                     \"topology is %s and primitiveRestartEnable is VK_TRUE and the \"\n                     \"primitiveTopologyPatchListRestart feature was not enabled.\",\n                     string_VkPrimitiveTopology(topology));\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkGraphicsPipelineCreateInfo-pStages-08888\", \"If the pipeline is being created with pre-rasterization shader state and vertex input state and pStages includes tessellation shader stages, and either VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY dynamic state is not enabled or dynamicPrimitiveTopologyUnrestricted is VK_FALSE, the topology member of pInputAssembly must be VK_PRIMITIVE_TOPOLOGY_PATCH_LIST\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (has_tessellation && (!ia_state || ia_state->topology != VK_PRIMITIVE_TOPOLOGY_PATCH_LIST)) {\n    skip |= LogError(\"VUID-VkGraphicsPipelineCreateInfo-pStages-08888\", device, ia_loc.dot(Field::topology),\n                     \"is %s for tessellation shaders in pipeline (needs to be VK_PRIMITIVE_TOPOLOGY_PATCH_LIST).\",\n                     ia_state ? string_VkPrimitiveTopology(ia_state->topology) : \"null\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkPipelineShaderStageCreateInfo-stage-00705\", \"If the tessellationShader feature is not enabled, stage must not be VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT or VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!enabled_features.tessellationShader &&\n    skip |= LogError(\"VUID-VkPipelineShaderStageCreateInfo-stage-00705\", device, create_info_loc,\n                     \"pStages include Tessellation Shader but tessellationShader feature was not enabled.\");\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkGraphicsPipelineCreateInfo-pStages-00729\", \"If the pipeline requires pre-rasterization shader state and pStages includes a tessellation control shader stage, it must include a tessellation evaluation shader stage\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (has_control && !has_eval) {\n    skip |= LogError(\"VUID-VkGraphicsPipelineCreateInfo-pStages-00729\", device, create_info_loc,\n                     \"pStages include a VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT but no \"\n                     \"VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT stage.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkPipelineColorBlendAttachmentState-srcAlphaBlendFactor-00610\", \"If the dualSrcBlend feature is not enabled, srcAlphaBlendFactor must not be VK_BLEND_FACTOR_SRC1_COLOR, VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR, VK_BLEND_FACTOR_SRC1_ALPHA, or VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!enabled_features.dualSrcBlend) {\n    skip |= LogError(\"VUID-VkPipelineColorBlendAttachmentState-srcAlphaBlendFactor-00610\", device,\n                     attachment_loc.dot(Field::srcAlphaBlendFactor),\n                     \"(%s) is a dual-source blend factor, but dualSrcBlend feature was not enabled.\",\n                     string_VkBlendFactor(attachment_state.srcAlphaBlendFactor));\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkPipelineColorBlendAttachmentState-colorBlendOp-01406\", \"If either of colorBlendOp or alphaBlendOp is an advanced blend operation, then colorBlendOp must equal alphaBlendOp\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (attachment_state.colorBlendOp != attachment_state.alphaBlendOp) {\n        LogError(\"VUID-VkPipelineColorBlendAttachmentState-colorBlendOp-01406\", device, attachment_loc,\n                 \"has different colorBlendOp (%s) and alphaBlendOp (%s) but one of \"\n                 \"them is an advance blend operation.\",\n                 string_VkBlendOp(attachment_state.colorBlendOp), string_VkBlendOp(attachment_state.alphaBlendOp));\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkGraphicsPipelineCreateInfo-renderPass-06063\", \"If the pipeline requires fragment output interface state and renderPass is VK_NULL_HANDLE, if the pNext chain includes VkAttachmentSampleCountInfoAMD or VkAttachmentSampleCountInfoNV, the colorAttachmentCount member of that structure must be equal to the value of VkPipelineRenderingCreateInfo::colorAttachmentCount\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (null_rp && rendering_struct && attachment_sample_count_info &&\n    skip |= LogError(\"VUID-VkGraphicsPipelineCreateInfo-renderPass-06063\", device,\n                     create_info_loc.pNext(Struct::VkAttachmentSampleCountInfoAMD, Field::attachmentCount),\n                     \"(%\" PRIu32 \") is different then %s (%\" PRIu32 \").\", attachment_sample_count_info->colorAttachmentCount,\n                     create_info_loc.pNext(Struct::VkPipelineRenderingCreateInfo, Field::colorAttachmentCount).Fields().c_str(),\n                     rendering_struct->colorAttachmentCount);\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkPipelineRasterizationStateStreamCreateInfoEXT-geometryStreams-02324\", \"VkPhysicalDeviceTransformFeedbackFeaturesEXT::geometryStreams must be enabled\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!enabled_features.geometryStreams) {\n    skip |= LogError(\"VUID-VkPipelineRasterizationStateStreamCreateInfoEXT-geometryStreams-02324\", device, raster_loc,\n                     \"pNext chain includes VkPipelineRasterizationStateStreamCreateInfoEXT, but \"\n                     \"geometryStreams feature was not enabled.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkGraphicsPipelineCreateInfo-conservativePointAndLineRasterization-06761\", \"If conservativePointAndLineRasterization is not supported, the pipeline requires pre-rasterization shader state, and the pipeline includes a mesh shader with either the OutputPoints or OutputLinesNV execution modes, VkPipelineRasterizationConservativeStateCreateInfoEXT::conservativeRasterizationMode must be VK_CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((pipeline.create_info_shaders & VK_SHADER_STAGE_MESH_BIT_EXT) != 0) {\n    skip |= LogError(\"VUID-VkGraphicsPipelineCreateInfo-conservativePointAndLineRasterization-06761\", device,\n                     raster_loc.pNext(Struct::VkPipelineRasterizationConservativeStateCreateInfoEXT,\n                                      Field::conservativeRasterizationMode),\n                     \"is %s, but mesh shader output primitive is %s and \"\n                     \"VkPhysicalDeviceConservativeRasterizationPropertiesEXT::\"\n                     \"conservativePointAndLineRasterization is false.\",\n                     string_VkConservativeRasterizationModeEXT(\n                         rasterization_conservative_state_ci.conservativeRasterizationMode),\n                     string_VkPrimitiveTopology(pipeline.topology_at_rasterizer));\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkGraphicsPipelineCreateInfo-pDynamicState-09639\", \"If the pipeline requires pre-rasterization shader state, pDynamicState includes VK_DYNAMIC_STATE_CONSERVATIVE_RASTERIZATION_MODE_EXT, and pDynamicState does not include VK_DYNAMIC_STATE_EXTRA_PRIMITIVE_OVERESTIMATION_SIZE_EXT, pRasterizationState must include a VkPipelineRasterizationConservativeStateCreateInfoEXT in its pNext chain\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (pipeline.IsDynamic(CB_DYNAMIC_STATE_CONSERVATIVE_RASTERIZATION_MODE_EXT) &&\n    skip |= LogError(\"VUID-VkGraphicsPipelineCreateInfo-pDynamicState-09639\", device, raster_loc.dot(Field::pNext),\n                     \"is missing VkPipelineRasterizationConservativeStateCreateInfoEXT which it needs because this \"\n                     \"pipeline has VK_DYNAMIC_STATE_CONSERVATIVE_RASTERIZATION_MODE_EXT but not \"\n                     \"VK_DYNAMIC_STATE_EXTRA_PRIMITIVE_OVERESTIMATION_SIZE_EXT.\");\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkGraphicsPipelineCreateInfo-renderPass-09030\", \"If renderPass is not VK_NULL_HANDLE, the pipeline is being created with fragment output interface state, and subpass uses color attachments, and related dynamic state is not set, pColorBlendState must be a valid pointer to a valid VkPipelineColorBlendStateCreateInfo structure\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (subpass_desc.pColorAttachments[i].attachment != VK_ATTACHMENT_UNUSED) {\n    skip |= LogError(\"VUID-VkGraphicsPipelineCreateInfo-renderPass-09030\", rp_state.Handle(),\n                     create_info_loc.dot(Field::pColorBlendState),\n                     \"is NULL when rasterization is enabled and \"\n                     \"pSubpasses[%\" PRIu32 \"].pColorAttachments[%\" PRIu32 \"].attachment (%\" PRIu32\n                     \") is a color attachments.\",\n                     pipeline.Subpass(), i, subpass_desc.pColorAttachments[i].attachment);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkGraphicsPipelineCreateInfo-subpass-01411\", \"If the pipeline requires fragment output interface state, the VK_NV_framebuffer_mixed_samples extension is enabled, rasterizationSamples is not dynamic, and if subpass has a depth/stencil attachment and depth test, stencil test, or depth bounds test are enabled, then the rasterizationSamples member of pMultisampleState must be the same as the sample count of the depth/stencil attachment\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (ds_test_enabled && (!IsPowerOfTwo(subpass_depth_samples) || (raster_samples != subpass_depth_samples))) {\n        \"VUID-VkGraphicsPipelineCreateInfo-subpass-01411\", device, ms_loc.dot(Field::rasterizationSamples),\n        \"(%\" PRIu32 \") does not match the number of samples of the RenderPass depth attachment (%\" PRIu32 \").\",\n        raster_samples, subpass_depth_samples);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkGraphicsPipelineCreateInfo-renderPass-06854\", \"If renderPass is not VK_NULL_HANDLE, the VK_EXT_multisampled_render_to_single_sampled extension is enabled, rasterizationSamples is not dynamic, and subpass has a VkMultisampledRenderToSingleSampledInfoEXT structure included in the VkSubpassDescription2::pNext chain with multisampledRenderToSingleSampledEnable equal to VK_TRUE, then the rasterizationSamples member of pMultisampleState must be equal to VkMultisampledRenderToSingleSampledInfoEXT::rasterizationSamples\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (msrtss_info && msrtss_info->multisampledRenderToSingleSampledEnable &&\n        LogError(\"VUID-VkGraphicsPipelineCreateInfo-renderPass-06854\", rp_state.Handle(),\n                 create_info_loc.dot(Field::pSubpasses, pipeline.Subpass())\n                     .pNext(Struct::VkMultisampledRenderToSingleSampledInfoEXT, Field::rasterizationSamples),\n                 \"(%\" PRIu32 \") is not equal to %s (%\" PRIu32 \") and multisampledRenderToSingleSampledEnable is VK_TRUE.\",\n                 msrtss_info->rasterizationSamples, ms_loc.dot(Field::rasterizationSamples).Fields().c_str(),\n                 multisample_state->rasterizationSamples);\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkGraphicsPipelineCreateInfo-pDynamicStates-07612\", \"If the pipeline requires fragment shader state or fragment output interface state, and rasterizationSamples and sampleLocationsInfo are not dynamic, and VkPipelineSampleLocationsStateCreateInfoEXT::sampleLocationsEnable included in the pNext chain of pMultisampleState is VK_TRUE or VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_ENABLE_EXT is used, sampleLocationsInfo.sampleLocationsPerPixel must equal rasterizationSamples\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (sample_location_info.sampleLocationsPerPixel != multisample_state->rasterizationSamples) {\n    skip |= LogError(\"VUID-VkGraphicsPipelineCreateInfo-pDynamicStates-07612\", device,\n                     sample_info_loc.dot(Field::sampleLocationsPerPixel), \"(%s) is different from %s (%s).\",\n                     string_VkSampleCountFlagBits(sample_location_info.sampleLocationsPerPixel),\n                     ms_loc.dot(Field::rasterizationSamples).Fields().c_str(),\n                     string_VkSampleCountFlagBits(multisample_state->rasterizationSamples));\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkGraphicsPipelineCreateInfo-pMultisampleState-09026\", \"If the pipeline requires fragment output interface state, and the VK_EXT_extended_dynamic_state3 extension is not enabled or any of the VK_DYNAMIC_STATE_RASTERIZATION_SAMPLES_EXT, VK_DYNAMIC_STATE_SAMPLE_MASK_EXT, or VK_DYNAMIC_STATE_ALPHA_TO_COVERAGE_ENABLE_EXT dynamic states is not set, or alphaToOne is enabled on the device and VK_DYNAMIC_STATE_ALPHA_TO_ONE_ENABLE_EXT is not set, pMultisampleState must be a valid pointer to a valid VkPipelineMultisampleStateCreateInfo structure\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!pipeline.IsDynamic(CB_DYNAMIC_STATE_RASTERIZATION_SAMPLES_EXT) ||\n    skip |= LogError(\"VUID-VkGraphicsPipelineCreateInfo-pMultisampleState-09026\", device,\n                     create_info_loc.dot(Field::pMultisampleState), \"is NULL.\");\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkPipelineDepthStencilStateCreateInfo-rasterizationOrderStencilAttachmentAccess-06464\", \"If the rasterizationOrderStencilAttachmentAccess feature is not enabled, flags must not include VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_EXT\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!enabled_features.rasterizationOrderStencilAttachmentAccess) {\n    skip |= LogError(\"VUID-VkPipelineDepthStencilStateCreateInfo-rasterizationOrderStencilAttachmentAccess-06464\",\n                     device, ds_loc.dot(Field::flags),\n                     \"is (%s) but rasterizationOrderStencilAttachmentAccess feature was not enabled\",\n                     string_VkPipelineDepthStencilStateCreateFlags(ds_state->flags).c_str());\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkGraphicsPipelineCreateInfo-pDynamicStates-07065\", \"If the pipeline requires pre-rasterization shader state, and includes a mesh shader, there must be no element of the pDynamicStates member of pDynamicState set to VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY, or VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (pipeline.IsDynamic(CB_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY)) {\n    skip |= LogError(\"VUID-VkGraphicsPipelineCreateInfo-pDynamicStates-07065\", device,\n                     create_info_loc.dot(Field::pDynamicState)\n                         .dot(Field::pDynamicStates, get_state_index(VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY)),\n                     \"is VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY, but the pipeline contains a mesh shader.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkGraphicsPipelineCreateInfo-pDynamicStates-03378\", \"If the extendedDynamicState feature is not enabled, and the value of VkApplicationInfo::apiVersion used to create the VkInstance is less than Version 1.3 there must be no element of the pDynamicStates member of pDynamicState set to VK_DYNAMIC_STATE_CULL_MODE, VK_DYNAMIC_STATE_FRONT_FACE, VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY, VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT, VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT, VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE, VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE, VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE, VK_DYNAMIC_STATE_DEPTH_COMPARE_OP, VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE, VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE, or VK_DYNAMIC_STATE_STENCIL_OP\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "\"VUID-VkGraphicsPipelineCreateInfo-pDynamicStates-03378\", device, create_info_loc.dot(Field::pDynamicState),\n\"contains dynamic states from VK_EXT_extended_dynamic_state, but the extendedDynamicState feature was not enabled.\");\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkGraphicsPipelineCreateInfo-pDynamicStates-04870\", \"If the extendedDynamicState2PatchControlPoints feature is not enabled, there must be no element of the pDynamicStates member of pDynamicState set to VK_DYNAMIC_STATE_PATCH_CONTROL_POINTS_EXT\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!enabled_features.extendedDynamicState2PatchControlPoints &&\n    skip |= LogError(\"VUID-VkGraphicsPipelineCreateInfo-pDynamicStates-04870\", device,\n                     create_info_loc.dot(Field::pDynamicState)\n                         .dot(Field::pDynamicStates, get_state_index(VK_DYNAMIC_STATE_PATCH_CONTROL_POINTS_EXT)),\n                     \"is VK_DYNAMIC_STATE_PATCH_CONTROL_POINTS_EXT, but the extendedDynamicState2PatchControlPoints feature \"\n                     \"was not enabled.\");\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkGraphicsPipelineCreateInfo-extendedDynamicState3SampleMask-07374\", \"If the extendedDynamicState3SampleMask feature is not enabled, there must be no element of the pDynamicStates member of pDynamicState set to VK_DYNAMIC_STATE_SAMPLE_MASK_EXT\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!enabled_features.extendedDynamicState3SampleMask && pipeline.IsDynamic(CB_DYNAMIC_STATE_SAMPLE_MASK_EXT)) {\n        \"VUID-VkGraphicsPipelineCreateInfo-extendedDynamicState3SampleMask-07374\", device,\n        create_info_loc.dot(Field::pDynamicState).dot(Field::pDynamicStates, get_state_index(VK_DYNAMIC_STATE_SAMPLE_MASK_EXT)),\n        \"is VK_DYNAMIC_STATE_SAMPLE_MASK_EXT but the extendedDynamicState3SampleMask feature is not enabled.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkGraphicsPipelineCreateInfo-extendedDynamicState3ColorBlendEquation-07379\", \"If the extendedDynamicState3ColorBlendEquation feature is not enabled, there must be no element of the pDynamicStates member of pDynamicState set to VK_DYNAMIC_STATE_COLOR_BLEND_EQUATION_EXT\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!enabled_features.extendedDynamicState3ColorBlendEquation &&\n        \"VUID-VkGraphicsPipelineCreateInfo-extendedDynamicState3ColorBlendEquation-07379\", device,\n        create_info_loc.dot(Field::pDynamicState)\n            .dot(Field::pDynamicStates, get_state_index(VK_DYNAMIC_STATE_COLOR_BLEND_EQUATION_EXT)),\n        \"is VK_DYNAMIC_STATE_COLOR_BLEND_EQUATION_EXT but the extendedDynamicState3ColorBlendEquation feature is not enabled.\");\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkGraphicsPipelineCreateInfo-extendedDynamicState3DepthClipEnable-07384\", \"If the extendedDynamicState3DepthClipEnable feature is not enabled, there must be no element of the pDynamicStates member of pDynamicState set to VK_DYNAMIC_STATE_DEPTH_CLIP_ENABLE_EXT\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!enabled_features.extendedDynamicState3DepthClipEnable && pipeline.IsDynamic(CB_DYNAMIC_STATE_DEPTH_CLIP_ENABLE_EXT)) {\n        \"VUID-VkGraphicsPipelineCreateInfo-extendedDynamicState3DepthClipEnable-07384\", device,\n        create_info_loc.dot(Field::pDynamicState)\n            .dot(Field::pDynamicStates, get_state_index(VK_DYNAMIC_STATE_DEPTH_CLIP_ENABLE_EXT)),\n        \"is VK_DYNAMIC_STATE_DEPTH_CLIP_ENABLE_EXT but the extendedDynamicState3DepthClipEnable feature is not enabled.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkGraphicsPipelineCreateInfo-extendedDynamicState3LineStippleEnable-07389\", \"If the extendedDynamicState3LineStippleEnable feature is not enabled, there must be no element of the pDynamicStates member of pDynamicState set to VK_DYNAMIC_STATE_LINE_STIPPLE_ENABLE_EXT\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!enabled_features.extendedDynamicState3LineStippleEnable && pipeline.IsDynamic(CB_DYNAMIC_STATE_LINE_STIPPLE_ENABLE_EXT)) {\n        \"VUID-VkGraphicsPipelineCreateInfo-extendedDynamicState3LineStippleEnable-07389\", device,\n        create_info_loc.dot(Field::pDynamicState)\n            .dot(Field::pDynamicStates, get_state_index(VK_DYNAMIC_STATE_LINE_STIPPLE_ENABLE_EXT)),\n        \"is VK_DYNAMIC_STATE_LINE_STIPPLE_ENABLE_EXT but the extendedDynamicState3LineStippleEnable feature is not enabled.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkGraphicsPipelineCreateInfo-extendedDynamicState3CoverageToColorLocation-07394\", \"If the extendedDynamicState3CoverageToColorLocation feature is not enabled, there must be no element of the pDynamicStates member of pDynamicState set to VK_DYNAMIC_STATE_COVERAGE_TO_COLOR_LOCATION_NV\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!enabled_features.extendedDynamicState3CoverageToColorLocation &&\n    skip |= LogError(\"VUID-VkGraphicsPipelineCreateInfo-extendedDynamicState3CoverageToColorLocation-07394\", device,\n                     create_info_loc.dot(Field::pDynamicState)\n                         .dot(Field::pDynamicStates, get_state_index(VK_DYNAMIC_STATE_COVERAGE_TO_COLOR_LOCATION_NV)),\n                     \"is VK_DYNAMIC_STATE_COVERAGE_TO_COLOR_LOCATION_NV but the extendedDynamicState3CoverageToColorLocation \"\n                     \"feature is not enabled.\");\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkGraphicsPipelineCreateInfo-extendedDynamicState3RepresentativeFragmentTestEnable-07399\", \"If the extendedDynamicState3RepresentativeFragmentTestEnable feature is not enabled, there must be no element of the pDynamicStates member of pDynamicState set to VK_DYNAMIC_STATE_REPRESENTATIVE_FRAGMENT_TEST_ENABLE_NV\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!enabled_features.extendedDynamicState3RepresentativeFragmentTestEnable &&\n    skip |= LogError(\"VUID-VkGraphicsPipelineCreateInfo-extendedDynamicState3RepresentativeFragmentTestEnable-07399\", device,\n                     create_info_loc.dot(Field::pDynamicState)\n                         .dot(Field::pDynamicStates, get_state_index(VK_DYNAMIC_STATE_REPRESENTATIVE_FRAGMENT_TEST_ENABLE_NV)),\n                     \"is VK_DYNAMIC_STATE_REPRESENTATIVE_FRAGMENT_TEST_ENABLE_NV but the \"\n                     \"extendedDynamicState3RepresentativeFragmentTestEnable feature is not enabled.\");\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkGraphicsPipelineCreateInfo-pDynamicState-04495\", \"If the pipeline requires pre-rasterization shader state or fragment shader state and VK_DYNAMIC_STATE_FRAGMENT_SHADING_RATE_KHR is not included in pDynamicState->pDynamicStates, VkPipelineFragmentShadingRateStateCreateInfoKHR::fragmentSize.height must be greater than or equal to 1\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (fragment_shading_rate_state.fragmentSize.height == 0) {\n        LogError(\"VUID-VkGraphicsPipelineCreateInfo-pDynamicState-04495\", device, fragment_loc.dot(Field::height), \"is zero.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkGraphicsPipelineCreateInfo-pDynamicState-04500\", \"If the pipeline requires pre-rasterization shader state or fragment shader state and VK_DYNAMIC_STATE_FRAGMENT_SHADING_RATE_KHR is not included in pDynamicState->pDynamicStates, and the pipelineFragmentShadingRate feature is not enabled, VkPipelineFragmentShadingRateStateCreateInfoKHR::fragmentSize.width and VkPipelineFragmentShadingRateStateCreateInfoKHR::fragmentSize.height must both be equal to 1\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!enabled_features.pipelineFragmentShadingRate && fragment_shading_rate_state.fragmentSize.width != 1) {\n    skip |= LogError(\"VUID-VkGraphicsPipelineCreateInfo-pDynamicState-04500\", device, fragment_loc.dot(Field::width),\n                     \"is %\" PRIu32 \", but the pipelineFragmentShadingRate feature was not enabled.\",\n                     fragment_shading_rate_state.fragmentSize.width);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkGraphicsPipelineCreateInfo-fragmentShadingRateNonTrivialCombinerOps-04506\", \"If the pipeline requires pre-rasterization shader state or fragment shader state, the fragmentShadingRateNonTrivialCombinerOps limit is not supported, and VK_DYNAMIC_STATE_FRAGMENT_SHADING_RATE_KHR is not included in pDynamicState->pDynamicStates, elements of VkPipelineFragmentShadingRateStateCreateInfoKHR::combinerOps must be VK_FRAGMENT_SHADING_RATE_COMBINER_OP_KEEP_KHR or VK_FRAGMENT_SHADING_RATE_COMBINER_OP_REPLACE_KHR\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!phys_dev_ext_props.fragment_shading_rate_props.fragmentShadingRateNonTrivialCombinerOps &&\n    skip |= LogError(\"VUID-VkGraphicsPipelineCreateInfo-fragmentShadingRateNonTrivialCombinerOps-04506\", device,\n                     create_info_loc.pNext(Struct::VkPipelineFragmentShadingRateStateCreateInfoKHR, Field::combinerOps, 1),\n                     \"is %s, but the fragmentShadingRateNonTrivialCombinerOps feature is not enabled.\",\n                     string_VkFragmentShadingRateCombinerOpKHR(fragment_shading_rate_state.combinerOps[1]));\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkGraphicsPipelineCreateInfo-renderPass-09033\", \"If renderPass is VK_NULL_HANDLE, the pipeline is being created with fragment shader state and fragment output interface state, and either of VkPipelineRenderingCreateInfo::depthAttachmentFormat or VkPipelineRenderingCreateInfo::stencilAttachmentFormat are not VK_FORMAT_UNDEFINED, and the VK_EXT_extended_dynamic_state3 extension is not enabled or any of the VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE, VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE, VK_DYNAMIC_STATE_DEPTH_COMPARE_OP, VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE, VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE, VK_DYNAMIC_STATE_STENCIL_OP, or VK_DYNAMIC_STATE_DEPTH_BOUNDS dynamic states are not set, pDepthStencilState must be a valid pointer to a valid VkPipelineDepthStencilStateCreateInfo structure\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "\"VUID-VkGraphicsPipelineCreateInfo-renderPass-09033\", device, create_info_loc.dot(Field::pDepthStencilState),\n\"is NULL, but %s is %s and stencilAttachmentFormat is %s.\",\ncreate_info_loc.pNext(Struct::VkPipelineRenderingCreateInfo, Field::depthAttachmentFormat).Fields().c_str(),\nstring_VkFormat(rendering_struct->depthAttachmentFormat),\nstring_VkFormat(rendering_struct->stencilAttachmentFormat));\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkGraphicsPipelineCreateInfo-renderPass-06582\", \"If the pipeline requires fragment output interface state, renderPass is VK_NULL_HANDLE, and any element of VkPipelineRenderingCreateInfo::pColorAttachmentFormats is not VK_FORMAT_UNDEFINED, that format must be a format with potential format features that include VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT or VK_FORMAT_FEATURE_2_LINEAR_COLOR_ATTACHMENT_BIT_NV\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((format_features &\n        \"VUID-VkGraphicsPipelineCreateInfo-renderPass-06582\", device,\n        create_info_loc.pNext(Struct::VkPipelineRenderingCreateInfo, Field::pColorAttachmentFormats, color_index),\n        \"(%s) potential format features are %s.\", string_VkFormat(color_format),\n        string_VkFormatFeatureFlags2(format_features).c_str());\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkGraphicsPipelineCreateInfo-renderPass-06578\", \"If the pipeline requires pre-rasterization shader state, fragment shader state, or fragment output interface state, and renderPass is VK_NULL_HANDLE, the index of the most significant bit in VkPipelineRenderingCreateInfo::viewMask must be less than maxMultiviewViewCount\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (MostSignificantBit(rendering_struct->viewMask) >= static_cast<int32_t>(phys_dev_props_core11.maxMultiviewViewCount)) {\n    skip |= LogError(\"VUID-VkGraphicsPipelineCreateInfo-renderPass-06578\", device,\n                     create_info_loc.pNext(Struct::VkPipelineRenderingCreateInfo, Field::viewMask),\n                     \"is 0x%\" PRIx32 \", but maxMultiviewViewCount is %\" PRIu32 \"\", rendering_struct->viewMask,\n                     phys_dev_props_core11.maxMultiviewViewCount);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkVertexInputBindingDivisorDescriptionKHR-vertexAttributeInstanceRateZeroDivisor-02228\", \"If the vertexAttributeInstanceRateZeroDivisor feature is not enabled, divisor must not be 0\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((0 == vibdd->divisor) && !enabled_features.vertexAttributeInstanceRateZeroDivisor) {\n        LogError(\"VUID-VkVertexInputBindingDivisorDescriptionKHR-vertexAttributeInstanceRateZeroDivisor-02228\", device,\n                 divisor_loc.dot(Field::divisor),\n                 \"is (%\" PRIu32 \") but vertexAttributeInstanceRateZeroDivisor feature was not enabled.\", vibdd->divisor);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCreateGraphicsPipelines-flags-00721\", \"If the flags member of any element of pCreateInfos contains the VK_PIPELINE_CREATE_DERIVATIVE_BIT flag, the base pipeline must have been created with the VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT flag set\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (base_pipeline && !(base_pipeline->create_flags & VK_PIPELINE_CREATE_2_ALLOW_DERIVATIVES_BIT_KHR)) {\n    skip |= LogError(\"VUID-vkCreateGraphicsPipelines-flags-00721\", base_pipeline->Handle(), loc,\n                     \"base pipeline does not allow derivatives.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkGraphicsPipelineCreateInfo-renderPass-07720\", \"If renderPass is VK_NULL_HANDLE, the pipeline is being created with pre-rasterization shader state, and VkPipelineRenderingCreateInfo::viewMask is not 0, and multiviewMeshShader is not enabled, then pStages must not include a mesh shader\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!enabled_features.multiviewMeshShader && (stages & VK_SHADER_STAGE_MESH_BIT_EXT)) {\n    const char *vuid = dynamic_rendering ? \"VUID-VkGraphicsPipelineCreateInfo-renderPass-07720\"\n                                         : \"VUID-VkGraphicsPipelineCreateInfo-renderPass-07064\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkPipelineDiscardRectangleStateCreateInfoEXT-discardRectangleCount-00582\", \"discardRectangleCount must be less than or equal to VkPhysicalDeviceDiscardRectanglePropertiesEXT::maxDiscardRectangles\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!pipeline.IsDynamic(CB_DYNAMIC_STATE_DISCARD_RECTANGLE_ENABLE_EXT) &&\n    discard_rectangle_state.discardRectangleCount > phys_dev_ext_props.discard_rectangle_props.maxDiscardRectangles) {\n    skip |= LogError(\"VUID-VkPipelineDiscardRectangleStateCreateInfoEXT-discardRectangleCount-00582\", device,\n                     create_info_loc.pNext(Struct::VkPipelineDiscardRectangleStateCreateInfoEXT, Field::discardRectangleCount),\n                     \"(%\" PRIu32 \") is not less than maxDiscardRectangles (%\" PRIu32 \").\",\n                     discard_rectangle_state.discardRectangleCount,\n                     phys_dev_ext_props.discard_rectangle_props.maxDiscardRectangles);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkRayTracingPipelineCreateInfoKHR-flags-03594\", \"If flags includes VK_PIPELINE_CREATE_RAY_TRACING_SHADER_GROUP_HANDLE_CAPTURE_REPLAY_BIT_KHR, each element of pLibraryInfo->pLibraries must have been created with the VK_PIPELINE_CREATE_RAY_TRACING_SHADER_GROUP_HANDLE_CAPTURE_REPLAY_BIT_KHR bit set\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((flags & VK_PIPELINE_CREATE_RAY_TRACING_SHADER_GROUP_HANDLE_CAPTURE_REPLAY_BIT_KHR) &&\n    !(library_create_info.flags & VK_PIPELINE_CREATE_RAY_TRACING_SHADER_GROUP_HANDLE_CAPTURE_REPLAY_BIT_KHR)) {\n        LogError(\"VUID-VkRayTracingPipelineCreateInfoKHR-flags-03594\", device, library_loc,\n                 \"was created with %s, which is missing \"\n                 \"VK_PIPELINE_CREATE_RAY_TRACING_SHADER_GROUP_HANDLE_CAPTURE_REPLAY_BIT_KHR included in %s (%s).\",\n                 string_VkPipelineCreateFlags(flags).c_str(), create_info_loc.dot(Field::flags).Fields().c_str(),\n                 string_VkPipelineCreateFlags(library_create_info.flags).c_str());\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkRayTracingShaderGroupCreateInfoKHR-type-03474\", \"If type is VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR then generalShader must be a valid index into VkRayTracingPipelineCreateInfoKHR::pStages referring to a shader of VK_SHADER_STAGE_RAYGEN_BIT_KHR, VK_SHADER_STAGE_MISS_BIT_KHR, or VK_SHADER_STAGE_CALLABLE_BIT_KHR\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!GroupHasValidIndex(\n    skip |= LogError(isKHR ? \"VUID-VkRayTracingShaderGroupCreateInfoKHR-type-03474\"\n                           : \"VUID-VkRayTracingShaderGroupCreateInfoNV-type-02413\",\n                     device, group_loc.dot(Field::generalShader), \"is %\" PRIu32 \".\", group.generalShader);\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkRayTracingShaderGroupCreateInfoNV-type-02415\", \"If type is VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_NV then intersectionShader must be a valid index into VkRayTracingPipelineCreateInfoNV::pStages referring to a shader of VK_SHADER_STAGE_INTERSECTION_BIT_NV\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!GroupHasValidIndex(pipeline, group.intersectionShader, VK_SHADER_STAGE_INTERSECTION_BIT_NV)) {\n    skip |= LogError(isKHR ? \"VUID-VkRayTracingShaderGroupCreateInfoKHR-type-03476\"\n                           : \"VUID-VkRayTracingShaderGroupCreateInfoNV-type-02415\",\n                     device, group_loc.dot(Field::intersectionShader), \"is %\" PRIu32 \".\", group.intersectionShader);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkRayTracingShaderGroupCreateInfoKHR-closestHitShader-03478\", \"closestHitShader must be either VK_SHADER_UNUSED_KHR or a valid index into VkRayTracingPipelineCreateInfoKHR::pStages referring to a shader of VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!GroupHasValidIndex(pipeline, group.closestHitShader, VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR)) {\n    skip |= LogError(isKHR ? \"VUID-VkRayTracingShaderGroupCreateInfoKHR-closestHitShader-03478\"\n                           : \"VUID-VkRayTracingShaderGroupCreateInfoNV-closestHitShader-02417\",\n                     device, group_loc.dot(Field::closestHitShader), \"is %\" PRIu32 \".\", group.closestHitShader);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCreateRayTracingPipelinesKHR-deferredOperation-03678\", \"Any previous deferred operation that was associated with deferredOperation must be complete\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "skip |= ValidateDeferredOperation(device, deferredOperation, error_obj.location.dot(Field::deferredOperation),\n                                  \"VUID-vkCreateRayTracingPipelinesKHR-deferredOperation-03678\");\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkRayTracingPipelineCreateInfoKHR-flags-04719\", \"If flags includes VK_PIPELINE_CREATE_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR, each element of pLibraryInfo->pLibraries must have been created with the VK_PIPELINE_CREATE_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR bit set\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (create_info.pLibraryInfo) {\n        {\"VUID-VkRayTracingPipelineCreateInfoKHR-flags-04718\", VK_PIPELINE_CREATE_RAY_TRACING_SKIP_AABBS_BIT_KHR},\n        {\"VUID-VkRayTracingPipelineCreateInfoKHR-flags-04719\", VK_PIPELINE_CREATE_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR},\n        {\"VUID-VkRayTracingPipelineCreateInfoKHR-flags-04720\",\n         VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR},\n        {\"VUID-VkRayTracingPipelineCreateInfoKHR-flags-04721\",\n         VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_BIT_KHR},\n        {\"VUID-VkRayTracingPipelineCreateInfoKHR-flags-04722\",\n         VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR},\n        {\"VUID-VkRayTracingPipelineCreateInfoKHR-flags-04723\", VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR},\n        {\"VUID-VkRayTracingPipelineCreateInfoKHR-flags-07403\", VK_PIPELINE_CREATE_RAY_TRACING_OPACITY_MICROMAP_BIT_EXT},\n    }};\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkRayTracingPipelineCreateInfoKHR-flags-07403\", \"If flags includes VK_PIPELINE_CREATE_RAY_TRACING_OPACITY_MICROMAP_BIT_EXT, each element of pLibraryInfo->pLibraries must have been created with the VK_PIPELINE_CREATE_RAY_TRACING_OPACITY_MICROMAP_BIT_EXT bit set\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "{\"VUID-VkRayTracingPipelineCreateInfoKHR-flags-04722\",\n{\"VUID-VkRayTracingPipelineCreateInfoKHR-flags-04723\", VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR},\n{\"VUID-VkRayTracingPipelineCreateInfoKHR-flags-07403\", VK_PIPELINE_CREATE_RAY_TRACING_OPACITY_MICROMAP_BIT_EXT},\n}};\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkGetQueryPoolResults-queryType-09441\", \"If the queryType used to create queryPool was VK_QUERY_TYPE_PERFORMANCE_QUERY_KHR, the queryPool must have been recorded once for each pass as retrieved via a call to vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (submitted < query_pool_state.n_performance_passes) {\n    const char *vuid = loc.function == Func::vkGetQueryPoolResults ? \"VUID-vkGetQueryPoolResults-queryType-09441\"\n                                                                   : \"VUID-vkCmdCopyQueryPoolResults-queryType-09441\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkGetQueryPoolResults-firstQuery-09436\", \"firstQuery must be less than the number of queries in queryPool\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "skip |= ValidateQueryPoolIndex(device, *query_pool_state, firstQuery, queryCount, error_obj.location,\n                               \"VUID-vkGetQueryPoolResults-firstQuery-09436\", \"VUID-vkGetQueryPoolResults-firstQuery-09437\");\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkGetQueryPoolResults-queryType-09442\", \"If the queryType used to create queryPool was VK_QUERY_TYPE_RESULT_STATUS_ONLY_KHR, then flags must include VK_QUERY_RESULT_WITH_STATUS_BIT_KHR\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (query_pool_state->create_info.queryType == VK_QUERY_TYPE_RESULT_STATUS_ONLY_KHR &&\n    (flags & VK_QUERY_RESULT_WITH_STATUS_BIT_KHR) == 0) {\n    skip |= LogError(\"VUID-vkGetQueryPoolResults-queryType-09442\", queryPool, error_obj.location.dot(Field::flags),\n                     \"(%s) doesn't have VK_QUERY_RESULT_WITH_STATUS_BIT_KHR, but queryPool %s was created with \"\n                     \"VK_QUERY_TYPE_RESULT_STATUS_ONLY_KHR \"\n                     \"queryType.\",\n                     string_VkQueryResultFlags(flags).c_str(), FormatHandle(queryPool).c_str());\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkQueryPoolPerformanceCreateInfoKHR-pCounterIndices-03321\", \"Each element of pCounterIndices must be in the range of counters reported by vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR for the queue family specified in queueFamilyIndex\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (perf_ci->pCounterIndices[idx] >= perf_counters->counters.size()) {\n        \"VUID-VkQueryPoolPerformanceCreateInfoKHR-pCounterIndices-03321\", device,\n        create_info_loc.pNext(Struct::VkQueryPoolPerformanceCreateInfoKHR, Field::pCounterIndices, idx),\n        \"(%\" PRIu32 \") is not a valid counter index.\", perf_ci->pCounterIndices[idx]);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdBeginQueryIndexedEXT-queryType-02804\", \"The queryType used to create queryPool must not be VK_QUERY_TYPE_TIMESTAMP\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "is_indexed ? \"VUID-vkCmdBeginQueryIndexedEXT-queryType-02804\" : \"VUID-vkCmdBeginQuery-queryType-02804\";\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdBeginQuery-queryType-00803\", \"If the queryType used to create queryPool was VK_QUERY_TYPE_OCCLUSION, the VkCommandPool that commandBuffer was allocated from must support graphics operations\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!HasRequiredQueueFlags(cb_state, *physical_device_state, VK_QUEUE_GRAPHICS_BIT)) {\n        is_indexed ? \"VUID-vkCmdBeginQueryIndexedEXT-queryType-00803\" : \"VUID-vkCmdBeginQuery-queryType-00803\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdBeginQueryIndexedEXT-queryPool-03224\", \"If queryPool was created with a queryType of VK_QUERY_TYPE_PERFORMANCE_QUERY_KHR and one of the counters used to create queryPool was VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR, the query begin must be the first recorded command in commandBuffer\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (query_pool_state->has_perf_scope_command_buffer && cb_state.command_count > 0) {\n        is_indexed ? \"VUID-vkCmdBeginQueryIndexedEXT-queryPool-03224\" : \"VUID-vkCmdBeginQuery-queryPool-03224\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdBeginQuery-queryType-04728\", \"The queryType used to create queryPool must not be VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_KHR or VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_SIZE_KHR\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "is_indexed ? \"VUID-vkCmdBeginQueryIndexedEXT-queryType-04728\" : \"VUID-vkCmdBeginQuery-queryType-04728\";\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdBeginQueryIndexedEXT-queryType-06741\", \"The queryType used to create queryPool must not be VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SIZE_KHR or VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_BOTTOM_LEVEL_POINTERS_KHR\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "is_indexed ? \"VUID-vkCmdBeginQueryIndexedEXT-queryType-06741\" : \"VUID-vkCmdBeginQuery-queryType-06741\";\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdBeginQuery-queryType-06687\", \"If the queryType used to create queryPool was VK_QUERY_TYPE_PRIMITIVES_GENERATED_EXT the VkCommandPool that commandBuffer was allocated from must support graphics operations\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((cb_state.command_pool->queue_flags & VK_QUEUE_GRAPHICS_BIT) == 0) {\n        is_indexed ? \"VUID-vkCmdBeginQueryIndexedEXT-queryType-06689\" : \"VUID-vkCmdBeginQuery-queryType-06687\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdBeginQuery-queryType-07070\", \"If the queryType used to create queryPool was VK_QUERY_TYPE_MESH_PRIMITIVES_GENERATED_EXT the VkCommandPool that commandBuffer was allocated from must support graphics operations\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "string_VkQueryType(query_pool_ci.queryType));\nconst LogObjectList objlist(cb_state.Handle(), cb_state.command_pool->Handle());\nskip |= LogError(\"VUID-vkCmdBeginQuery-queryType-07070\", objlist, loc, \"%s\",\nDescribeRequiredQueueFlag(cb_state, *physical_device_state, VK_QUEUE_GRAPHICS_BIT).c_str());\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdBeginQueryIndexedEXT-queryType-00800\", \"If the occlusionQueryPrecise feature is not enabled, or the queryType used to create queryPool was not VK_QUERY_TYPE_OCCLUSION, flags must not contain VK_QUERY_CONTROL_PRECISE_BIT\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!enabled_features.occlusionQueryPrecise) {\n        is_indexed ? \"VUID-vkCmdBeginQueryIndexedEXT-queryType-00800\" : \"VUID-vkCmdBeginQuery-queryType-00800\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdBeginQueryIndexedEXT-commandBuffer-01885\", \"commandBuffer must not be a protected command buffer\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (cb_state.unprotected == false) {\n        is_indexed ? \"VUID-vkCmdBeginQueryIndexedEXT-commandBuffer-01885\" : \"VUID-vkCmdBeginQuery-commandBuffer-01885\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdBeginQuery-None-07127\", \"If there is a bound video session, then there must be no active queries\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!cb_state.activeQueries.empty()) {\n    const char *vuid = is_indexed ? \"VUID-vkCmdBeginQueryIndexedEXT-None-07127\" : \"VUID-vkCmdBeginQuery-None-07127\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdBeginQueryIndexedEXT-queryType-07130\", \"If the queryType used to create queryPool was VK_QUERY_TYPE_VIDEO_ENCODE_FEEDBACK_KHR and there is a bound video session, then queryPool must have been created with a VkVideoProfileInfoKHR structure included in the pNext chain of VkQueryPoolCreateInfo identical to the one specified in VkVideoSessionCreateInfoKHR::pVideoProfile the bound video session was created with\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (cb_state.bound_video_session->profile != query_pool_state->supported_video_profile) {\n        is_indexed ? \"VUID-vkCmdBeginQueryIndexedEXT-queryType-07130\" : \"VUID-vkCmdBeginQuery-queryType-07130\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdBeginQuery-queryType-06688\", \"If the queryType used to create queryPool was VK_QUERY_TYPE_PRIMITIVES_GENERATED_EXT then primitivesGeneratedQuery must be enabled\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!enabled_features.primitivesGeneratedQuery) {\n    const LogObjectList objlist(commandBuffer, queryPool);\n    skip |= LogError(\"VUID-vkCmdBeginQuery-queryType-06688\", objlist, error_obj.location.dot(Field::queryPool),\n                     \"was created with a queryType VK_QUERY_TYPE_PRIMITIVES_GENERATED_EXT, but \"\n                     \"primitivesGeneratedQuery feature was not enabled.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdDecodeVideoKHR-pNext-08366\", \"If the bound video session was created with VK_VIDEO_SESSION_CREATE_INLINE_QUERIES_BIT_KHR, and the pNext chain of pDecodeInfo includes a VkVideoInlineQueryInfoKHR structure with its queryPool member specifying a valid VkQueryPool handle, then all the queries used by the command, as specified by the VkVideoInlineQueryInfoKHR structure, must be unavailable\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": ": (command == Func::vkCmdBeginQueryIndexedEXT) ? \"VUID-vkCmdBeginQueryIndexedEXT-None-00807\"\n: (command == Func::vkCmdWriteTimestamp)       ? \"VUID-vkCmdWriteTimestamp-None-00830\"\n: (command == Func::vkCmdWriteTimestamp2)      ? \"VUID-vkCmdWriteTimestamp2-None-03864\"\n: (command == Func::vkCmdDecodeVideoKHR)       ? \"VUID-vkCmdDecodeVideoKHR-pNext-08366\"\n: (command == Func::vkCmdEncodeVideoKHR)       ? \"VUID-vkCmdEncodeVideoKHR-pNext-08361\"\n: (command == Func::vkCmdWriteAccelerationStructuresPropertiesKHR)\n    ? \"VUID-vkCmdWriteAccelerationStructuresPropertiesKHR-queryPool-02494\"\n    : unexpected_caller_vuid;\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdBeginQuery-None-02863\", \"If queryPool was created with a queryType of VK_QUERY_TYPE_PERFORMANCE_QUERY_KHR, this command must not be recorded in a command buffer that, either directly or through secondary command buffers, also contains a vkCmdResetQueryPool command affecting the same query\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (command_buffer_state == QUERYSTATE_RESET) {\n    const LogObjectList objlist(cb_state.Handle(), query_obj.pool);\n        query_obj.indexed ? \"VUID-vkCmdBeginQueryIndexedEXT-None-02863\" : \"VUID-vkCmdBeginQuery-None-02863\", objlist, loc,\n        \"VkQuery begin command recorded in a command buffer that, either directly or \"\n        \"through secondary command buffers, also contains a vkCmdResetQueryPool command \"\n        \"affecting the same query.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdEndQuery-None-01923\", \"All queries used by the command must be active\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (query_payload == cb_state.activeQueries.end()) {\n    const char *vuid = is_indexed ? \"VUID-vkCmdEndQueryIndexedEXT-None-02342\" : \"VUID-vkCmdEndQuery-None-01923\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdEndQuery-None-07007\", \"If called within a subpass of a render pass instance, the corresponding vkCmdBeginQuery* command must have been called previously within the same subpass\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!query_payload->inside_render_pass) {\n    const char *vuid = is_indexed ? \"VUID-vkCmdEndQueryIndexedEXT-None-07007\" : \"VUID-vkCmdEndQuery-None-07007\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdEndQueryIndexedEXT-query-02345\", \"If vkCmdEndQueryIndexedEXT is called within a render pass instance, the sum of query and the number of bits set in the current subpass's view mask must be less than or equal to the number of queries in queryPool\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (slot + bits > query_pool_state->create_info.queryCount) {\n    const char *vuid = is_indexed ? \"VUID-vkCmdEndQueryIndexedEXT-query-02345\" : \"VUID-vkCmdEndQuery-query-00812\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdResetQueryPool-firstQuery-02862\", \"If queryPool was created with VK_QUERY_TYPE_PERFORMANCE_QUERY_KHR, this command must not be recorded in a command buffer that, either directly or through secondary command buffers, also contains begin commands for a query from the set of queries [firstQuery, firstQuery + queryCount - 1]\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (state == QUERYSTATE_ENDED) {\n    const LogObjectList objlist(cb_state_arg.Handle(), queryPool);\n    skip |= state_data.LogError(\"VUID-vkCmdResetQueryPool-firstQuery-02862\", objlist, record_obj.location,\n                                \"Query index %\" PRIu32 \" was begun and reset in the same command buffer.\",\n                                firstQuery + i);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdCopyQueryPoolResults-dstOffset-00819\", \"dstOffset must be less than the size of dstBuffer\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (dstOffset >= dst_buff_state->requirements.size) {\n    skip |= LogError(\"VUID-vkCmdCopyQueryPoolResults-dstOffset-00819\", buffer_objlist, error_obj.location.dot(Field::dstOffset),\n                     \"(%\" PRIu64 \") is not less than the size (%\" PRIu64 \") of buffer (%s).\", dstOffset,\n                     dst_buff_state->requirements.size, FormatHandle(dst_buff_state->Handle()).c_str());\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdCopyQueryPoolResults-firstQuery-09437\", \"The sum of firstQuery and queryCount must be less than or equal to the number of queries in queryPool\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "skip |= ValidateQueryPoolIndex(commandBuffer, *query_pool_state, firstQuery, queryCount, error_obj.location,\n                               \"VUID-vkCmdCopyQueryPoolResults-firstQuery-09436\",\n                               \"VUID-vkCmdCopyQueryPoolResults-firstQuery-09437\");\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdCopyQueryPoolResults-queryType-09442\", \"If the queryType used to create queryPool was VK_QUERY_TYPE_RESULT_STATUS_ONLY_KHR, then flags must include VK_QUERY_RESULT_WITH_STATUS_BIT_KHR\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (query_pool_state->create_info.queryType == VK_QUERY_TYPE_RESULT_STATUS_ONLY_KHR &&\n    (flags & VK_QUERY_RESULT_WITH_STATUS_BIT_KHR) == 0) {\n    const LogObjectList objlist(commandBuffer, queryPool);\n    skip |= LogError(\"VUID-vkCmdCopyQueryPoolResults-queryType-09442\", objlist, error_obj.location.dot(Field::flags),\n                     \"(%s) does not include VK_QUERY_RESULT_WITH_STATUS_BIT_KHR, but %s was created with queryType \"\n                     \"VK_QUERY_TYPE_RESULT_STATUS_ONLY_KHR.\",\n                     string_VkQueryResultFlags(flags).c_str(), FormatHandle(queryPool).c_str());\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdWriteTimestamp2-queryPool-03861\", \"queryPool must have been created with a queryType of VK_QUERY_TYPE_TIMESTAMP\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (query_pool_state->create_info.queryType != VK_QUERY_TYPE_TIMESTAMP) {\n    const char *vuid = is_2 ? \"VUID-vkCmdWriteTimestamp2-queryPool-03861\" : \"VUID-vkCmdWriteTimestamp-queryPool-01416\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdWriteTimestamp2-synchronization2-03858\", \"The synchronization2 feature must be enabled\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!enabled_features.synchronization2) {\n    skip |= LogError(\"VUID-vkCmdWriteTimestamp2-synchronization2-03858\", commandBuffer, error_obj.location,\n                     \"Synchronization2 feature is not enabled.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdBeginQueryIndexedEXT-queryType-02339\", \"If the queryType used to create queryPool was VK_QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT the index parameter must be less than VkPhysicalDeviceTransformFeedbackPropertiesEXT::maxTransformFeedbackStreams\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (IsExtEnabled(device_extensions.vk_ext_transform_feedback) &&\n    (index >= phys_dev_ext_props.transform_feedback_props.maxTransformFeedbackStreams)) {\n        \"VUID-vkCmdBeginQueryIndexedEXT-queryType-02339\", commandBuffer, error_obj.location.dot(Field::index),\n        \"(%\" PRIu32\n        \") must be less than VkPhysicalDeviceTransformFeedbackPropertiesEXT::maxTransformFeedbackStreams %\" PRIu32 \".\",\n        index, phys_dev_ext_props.transform_feedback_props.maxTransformFeedbackStreams);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdEndQueryIndexedEXT-queryType-06695\", \"If the queryType used to create queryPool was not VK_QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT and not VK_QUERY_TYPE_PRIMITIVES_GENERATED_EXT, the index must be zero\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "} else if (index != 0) {\n    const LogObjectList objlist(commandBuffer, queryPool);\n    skip |= LogError(\"VUID-vkCmdEndQueryIndexedEXT-queryType-06695\", objlist, error_obj.location.dot(Field::index),\n                     \"(%\" PRIu32\n                     \") must be zero if %s was not created with type VK_QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT and not\"\n                     \" VK_QUERY_TYPE_PRIMITIVES_GENERATED_EXT.\",\n                     index, FormatHandle(queryPool).c_str());\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdEndDebugUtilsLabelEXT-commandBuffer-01912\", \"There must be an outstanding vkCmdBeginDebugUtilsLabelEXT command prior to the vkCmdEndDebugUtilsLabelEXT on the queue that commandBuffer is submitted to\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "skip |= core.LogError(\"VUID-vkCmdEndDebugUtilsLabelEXT-commandBuffer-01912\", cb_state.Handle(), loc,\n                      \"(%s) contains vkCmdEndDebugUtilsLabelEXT that does not have a matching \"\n                      \"vkCmdBeginDebugUtilsLabelEXT in this or one of the previously submitted command buffers. %s\",\n                      core.FormatHandle(cb_state).c_str(), previous_debug_region.c_str());\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkSubmitInfo-pCommandBuffers-06193\", \"If pCommandBuffers contains any resumed render pass instances, they must be suspended by a render pass instance earlier in submission order within pCommandBuffers\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!suspended_render_pass_instance) {\n        LogError(\"VUID-VkSubmitInfo-pCommandBuffers-06193\", queue, submit_loc.dot(Field::pCommandBuffers, i),\n                 \"resumes a render pass instance, but there is no suspended render pass instance.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkDeviceGroupSubmitInfo-commandBufferCount-00083\", \"commandBufferCount must equal VkSubmitInfo::commandBufferCount\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (chained_device_group_struct->commandBufferCount != submit.commandBufferCount) {\n    skip |= LogError(\"VUID-VkDeviceGroupSubmitInfo-commandBufferCount-00083\", queue,\n                     submit_loc.pNext(Struct::VkDeviceGroupSubmitInfo, Field::commandBufferCount),\n                     \"(%\" PRIu32 \") is different than commandBufferCount (%\" PRIu32 \").\",\n                     chained_device_group_struct->commandBufferCount, submit.commandBufferCount);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkCommandBufferSubmitInfo-pNext-09446\", \"If a VkRenderPassStripeSubmitInfoARM is included in the pNext chain, the value of VkRenderPassStripeSubmitInfoARM::stripeSemaphoreInfoCount must be equal to the sum of the VkRenderPassStripeBeginInfoARM::stripeInfoCount parameters provided to render pass instances recorded in commandBuffer that did not specify the VK_RENDERING_RESUMING_BIT flag\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (rp_submit_info->stripeSemaphoreInfoCount != cb_state.striped_count && !cb_state.resumesRenderPassInstance) {\n    skip |= LogError(\"VUID-VkCommandBufferSubmitInfo-pNext-09446\", objlist,\n                     loc.pNext(Struct::VkRenderPassStripeSubmitInfoARM, Field::stripeSemaphoreInfoCount),\n                     \"= %\" PRIu32 \" must be equal to  VkRenderPassStripeBeginInfoARM::stripeInfoCount = %\" PRIu32 \".\",\n                     rp_submit_info->stripeSemaphoreInfoCount, cb_state.striped_count);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkQueueSubmit2-queue-06447\", \"If queue was not created with VK_DEVICE_QUEUE_CREATE_PROTECTED_BIT, the flags member of any element of pSubmits must not include VK_SUBMIT_PROTECTED_BIT_KHR\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((protected_submit == true) && ((queue_state->create_flags & VK_DEVICE_QUEUE_CREATE_PROTECTED_BIT)) == 0) {\n    skip |= LogError(\"VUID-vkQueueSubmit2-queue-06447\", queue, submit_loc,\n                     \"contains a protected submission to %s which was not created with \"\n                     \"VK_DEVICE_QUEUE_CREATE_PROTECTED_BIT\",\n                     FormatHandle(queue).c_str());\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkSubmitInfo2KHR-commandBuffer-06192\", \"If any commandBuffer member of an element of pCommandBufferInfos contains any resumed render pass instances, they must be suspended by a render pass instance earlier in submission order within pCommandBufferInfos\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!suspended_render_pass_instance) {\n    skip |= LogError(\"VUID-VkSubmitInfo2KHR-commandBuffer-06192\", queue, info_loc.dot(Field::commandBuffer),\n                     \"resumes a render pass instance, but there is no suspended render pass instance.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkQueueSubmit-pCommandBuffers-00070\", \"Each element of the pCommandBuffers member of each element of pSubmits must be in the pending or executable state\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "skip |= ValidateQueuedQFOTransfers(cb_state, qfo_image_scoreboards, qfo_buffer_scoreboards, loc);\nconst char *const vuid = (loc.function == Func::vkQueueSubmit) ? \"VUID-vkQueueSubmit-pCommandBuffers-00070\"\n                                                               : \"VUID-vkQueueSubmit2-commandBuffer-03874\";\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkSparseImageMemoryBindInfo-image-02901\", \"image must have been created with VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT set\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!image_state->sparse_residency) {\n        LogError(\"VUID-VkSparseImageMemoryBindInfo-image-02901\", image_bind.image, bind_loc.dot(Field::image),\n                 \"was created with flags %s.\", string_VkImageCreateFlags(image_state->create_info.flags).c_str());\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkBindAccelerationStructureMemoryInfoNV-memory-03622\", \"memory must have been allocated using one of the memory types allowed in the memoryTypeBits member of the VkMemoryRequirements structure returned from a call to vkGetAccelerationStructureMemoryRequirementsNV with accelerationStructure and type of VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "\"VUID-VkBindAccelerationStructureMemoryInfoNV-memory-03622\");\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdBuildAccelerationStructuresIndirectKHR-pInfos-03668\", \"For each element of pInfos, if its mode member is VK_BUILD_ACCELERATION_STRUCTURE_MODE_UPDATE_KHR, its srcAccelerationStructure and dstAccelerationStructure members must either be the same VkAccelerationStructureKHR, or not have any memory aliasing\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "? \"VUID-vkCmdBuildAccelerationStructuresKHR-pInfos-03668\"\n: error_obj.location.function == Func::vkCmdBuildAccelerationStructuresIndirectKHR\n? \"VUID-vkCmdBuildAccelerationStructuresIndirectKHR-pInfos-03668\"\n: \"VUID-vkBuildAccelerationStructuresKHR-pInfos-03668\";\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdBuildAccelerationStructuresKHR-dstAccelerationStructure-03702\", \"The range of memory backing the dstAccelerationStructure member of any element of pInfos that is accessed by this command must not overlap the memory backing the dstAccelerationStructure member of any other element of pInfos, which is accessed by this command\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (dst_as_state && other_dst_as_state) {\n    const char *vuid = error_obj.location.function == Func::vkCmdBuildAccelerationStructuresKHR\n                           ? \"VUID-vkCmdBuildAccelerationStructuresKHR-dstAccelerationStructure-03702\"\n                       : error_obj.location.function == Func::vkCmdBuildAccelerationStructuresIndirectKHR\n                           ? \"VUID-vkCmdBuildAccelerationStructuresIndirectKHR-dstAccelerationStructure-03702\"\n                           : \"VUID-vkBuildAccelerationStructuresKHR-dstAccelerationStructure-03702\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkGetAccelerationStructureDeviceAddressKHR-pInfo-09541\", \"If the buffer on which pInfo->accelerationStructure was placed is non-sparse then it must be bound completely and contiguously to a single VkDeviceMemory object\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "const Location info_loc = error_obj.location.dot(Field::pInfo);\n                                      \"VUID-vkGetAccelerationStructureDeviceAddressKHR-pInfo-09541\");\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdBuildAccelerationStructuresIndirectKHR-pInfos-03804\", \"For any element of pInfos[i].pGeometries or pInfos[i].ppGeometries with a geometryType of VK_GEOMETRY_TYPE_TRIANGLES_KHR, geometry.triangles.vertexData.deviceAddress must be a valid device address obtained from vkGetBufferDeviceAddress\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (vertex_buffer_states.empty() && geometry_build_ranges[geom_i].primitiveCount > 0) {\n    skip |= LogError(pick_vuid(\"VUID-vkCmdBuildAccelerationStructuresKHR-pInfos-03804\",\n                               \"VUID-vkCmdBuildAccelerationStructuresIndirectKHR-pInfos-03804\"),\n                     cmd_buffer, p_geom_geom_triangles_loc.dot(Field::vertexData).dot(Field::deviceAddress),\n                     \"(0x%\" PRIx64 \") is not an address belonging to an existing buffer.\",\n                     geom_data.geometry.triangles.vertexData.deviceAddress);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdBuildAccelerationStructuresKHR-pInfos-03807\", \"For any element of pInfos[i].pGeometries or pInfos[i].ppGeometries with a geometryType of VK_GEOMETRY_TYPE_TRIANGLES_KHR, if geometry.triangles.indexType is not VK_INDEX_TYPE_NONE_KHR, if geometry.triangles.indexData.deviceAddress is the address of a non-sparse buffer then it must be bound completely and contiguously to a single VkDeviceMemory object\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "{{{pick_vuid(\"VUID-vkCmdBuildAccelerationStructuresKHR-pInfos-03807\",\n             \"VUID-vkCmdBuildAccelerationStructuresIndirectKHR-pInfos-03807\"),\n   [this](vvl::Buffer *const buffer_state, std::string *out_error_msg) {\n       return BufferAddressValidation<1>::ValidateMemoryBoundToBuffer(*this, buffer_state,\n                                                                      out_error_msg);\n   },\n   []() { return BufferAddressValidation<1>::ValidateMemoryBoundToBufferErrorMsgHeader(); }}}}};\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdBuildAccelerationStructuresKHR-pInfos-03711\", \"For any element of pInfos[i].pGeometries or pInfos[i].ppGeometries with a geometryType of VK_GEOMETRY_TYPE_TRIANGLES_KHR, geometry.triangles.vertexData.deviceAddress must be aligned to the size in bytes of the smallest component of the format in vertexFormat\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (SafeModulo(geom_data.geometry.triangles.vertexData.deviceAddress, min_component_byte_size) != 0) {\n    skip |= LogError(pick_vuid(\"VUID-vkCmdBuildAccelerationStructuresKHR-pInfos-03711\",\n                               \"VUID-vkCmdBuildAccelerationStructuresIndirectKHR-pInfos-03711\"),\n                     cmd_buffer, p_geom_geom_triangles_loc.dot(Field::vertexData).dot(Field::deviceAddress),\n                     \"is 0x%\" PRIx64 \" and is not aligned to the minimum component byte size (%\" PRIu32\n                     \") of its corresponding vertex \"\n                     \"format (%s).\",\n                     geom_data.geometry.triangles.vertexData.deviceAddress, min_component_byte_size,\n                     string_VkFormat(geom_data.geometry.triangles.vertexFormat));\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdBuildAccelerationStructuresKHR-pInfos-03809\", \"For any element of pInfos[i].pGeometries or pInfos[i].ppGeometries with a geometryType of VK_GEOMETRY_TYPE_TRIANGLES_KHR, if geometry.triangles.transformData.deviceAddress is the address of a non-sparse buffer then it must be bound completely and contiguously to a single VkDeviceMemory object\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "{{{pick_vuid(\"VUID-vkCmdBuildAccelerationStructuresKHR-pInfos-03809\",\n             \"VUID-vkCmdBuildAccelerationStructuresIndirectKHR-pInfos-03809\"),\n   [this](vvl::Buffer *const buffer_state, std::string *out_error_msg) {\n       return BufferAddressValidation<1>::ValidateMemoryBoundToBuffer(*this, buffer_state,\n                                                                      out_error_msg);\n   },\n   []() { return BufferAddressValidation<1>::ValidateMemoryBoundToBufferErrorMsgHeader(); }}}}};\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdBuildAccelerationStructuresIndirectKHR-pInfos-03814\", \"For any element of pInfos[i].pGeometries or pInfos[i].ppGeometries with a geometryType of VK_GEOMETRY_TYPE_INSTANCES_KHR, if geometry.instances.data.deviceAddress is the address of a non-sparse buffer then it must be bound completely and contiguously to a single VkDeviceMemory object\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "{{{pick_vuid(\"VUID-vkCmdBuildAccelerationStructuresKHR-pInfos-03814\",\n             \"VUID-vkCmdBuildAccelerationStructuresIndirectKHR-pInfos-03814\"),\n   [this](vvl::Buffer *const buffer_state, std::string *out_error_msg) {\n       return BufferAddressValidation<1>::ValidateMemoryBoundToBuffer(*this, buffer_state, out_error_msg);\n   },\n   []() { return BufferAddressValidation<1>::ValidateMemoryBoundToBufferErrorMsgHeader(); }}}}};\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdBuildAccelerationStructuresKHR-pInfos-03802\", \"For each element of pInfos, its scratchData.deviceAddress member must be a valid device address obtained from vkGetBufferDeviceAddress\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (buffer_states.empty()) {\n    skip |= LogError(pick_vuid(\"VUID-vkCmdBuildAccelerationStructuresKHR-pInfos-03802\",\n                               \"VUID-vkCmdBuildAccelerationStructuresIndirectKHR-pInfos-03802\"),\n                     device, info_loc.dot(Field::scratchData).dot(Field::deviceAddress),\n                     \"(0x%\" PRIx64 \") has no buffer is associated with it.\", info.scratchData.deviceAddress);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdBuildAccelerationStructuresIndirectKHR-pInfos-03672\", \"If pInfos[i].mode is VK_BUILD_ACCELERATION_STRUCTURE_MODE_UPDATE_KHR, all addresses between pInfos[i].scratchData.deviceAddress and pInfos[i].scratchData.deviceAddress + N - 1 must be in the buffer device address range of the same buffer, where N is given by the updateScratchSize member of the VkAccelerationStructureBuildSizesInfoKHR structure returned from a call to vkGetAccelerationStructureBuildSizesKHR with an identical VkAccelerationStructureBuildGeometryInfoKHR structure and primitive count\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "? pick_vuid(\"VUID-vkCmdBuildAccelerationStructuresKHR-pInfos-03671\",\n            \"VUID-vkCmdBuildAccelerationStructuresIndirectKHR-pInfos-03671\")\n: pick_vuid(\"VUID-vkCmdBuildAccelerationStructuresKHR-pInfos-03672\",\n            \"VUID-vkCmdBuildAccelerationStructuresIndirectKHR-pInfos-03672\");\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdBuildAccelerationStructuresKHR-pInfos-03667\", \"For each element of pInfos, if its mode member is VK_BUILD_ACCELERATION_STRUCTURE_MODE_UPDATE_KHR, its srcAccelerationStructure member must have previously been constructed with VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR set in VkAccelerationStructureBuildGeometryInfoKHR::flags in the build\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (src_as_state->built && !(src_as_state->build_info_khr.flags & VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR)) {\n    const char *vuid = info_loc.function == Func::vkCmdBuildAccelerationStructuresKHR\n                           ? \"VUID-vkCmdBuildAccelerationStructuresKHR-pInfos-03667\"\n                       : info_loc.function == Func::vkCmdBuildAccelerationStructuresIndirectKHR\n                           ? \"VUID-vkCmdBuildAccelerationStructuresIndirectKHR-pInfos-03667\"\n                           : \"VUID-vkBuildAccelerationStructuresKHR-pInfos-03667\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkBuildAccelerationStructuresKHR-pInfos-03759\", \"For each element of pInfos, if its mode member is VK_BUILD_ACCELERATION_STRUCTURE_MODE_UPDATE_KHR, its flags member must have the same value which was specified when srcAccelerationStructure was last built\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "? \"VUID-vkCmdBuildAccelerationStructuresKHR-pInfos-03759\"\n? \"VUID-vkCmdBuildAccelerationStructuresIndirectKHR-pInfos-03759\"\n: \"VUID-vkBuildAccelerationStructuresKHR-pInfos-03759\";\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdBuildAccelerationStructuresIndirectKHR-pInfos-03758\", \"For each element of pInfos, if its mode member is VK_BUILD_ACCELERATION_STRUCTURE_MODE_UPDATE_KHR, its geometryCount member must have the same value which was specified when srcAccelerationStructure was last built\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "? \"VUID-vkCmdBuildAccelerationStructuresKHR-pInfos-03758\"\n: info_loc.function == Func::vkCmdBuildAccelerationStructuresIndirectKHR\n? \"VUID-vkCmdBuildAccelerationStructuresIndirectKHR-pInfos-03758\"\n: \"VUID-vkBuildAccelerationStructuresKHR-pInfos-03758\";\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdBuildAccelerationStructuresKHR-pInfos-03762\", \"For each element of pInfos, if its mode member is VK_BUILD_ACCELERATION_STRUCTURE_MODE_UPDATE_KHR, then for each VkAccelerationStructureGeometryKHR structure referred to by its pGeometries or ppGeometries members, its flags member must have the same value which was specified when srcAccelerationStructure was last built\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (updated_geometry.flags != last_geometry.flags) {\n    const char *vuid = info_loc.function == Func::vkCmdBuildAccelerationStructuresKHR\n                           ? \"VUID-vkCmdBuildAccelerationStructuresKHR-pInfos-03762\"\n                       : info_loc.function == Func::vkCmdBuildAccelerationStructuresIndirectKHR\n                           ? \"VUID-vkCmdBuildAccelerationStructuresIndirectKHR-pInfos-03762\"\n                           : \"VUID-vkBuildAccelerationStructuresKHR-pInfos-03762\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkBuildAccelerationStructuresKHR-pInfos-03763\", \"For each element of pInfos, if its mode member is VK_BUILD_ACCELERATION_STRUCTURE_MODE_UPDATE_KHR, then for each VkAccelerationStructureGeometryKHR structure referred to by its pGeometries or ppGeometries members, if geometryType is VK_GEOMETRY_TYPE_TRIANGLES_KHR, its geometry.triangles.vertexFormat member must have the same value which was specified when srcAccelerationStructure was last built\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "? \"VUID-vkCmdBuildAccelerationStructuresKHR-pInfos-03763\"\n? \"VUID-vkCmdBuildAccelerationStructuresIndirectKHR-pInfos-03763\"\n: \"VUID-vkBuildAccelerationStructuresKHR-pInfos-03763\";\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdBuildAccelerationStructuresIndirectKHR-pInfos-03765\", \"For each element of pInfos, if its mode member is VK_BUILD_ACCELERATION_STRUCTURE_MODE_UPDATE_KHR, then for each VkAccelerationStructureGeometryKHR structure referred to by its pGeometries or ppGeometries members, if geometryType is VK_GEOMETRY_TYPE_TRIANGLES_KHR, its geometry.triangles.indexType member must have the same value which was specified when srcAccelerationStructure was last built\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "? \"VUID-vkCmdBuildAccelerationStructuresKHR-pInfos-03765\"\n: info_loc.function == Func::vkCmdBuildAccelerationStructuresIndirectKHR\n? \"VUID-vkCmdBuildAccelerationStructuresIndirectKHR-pInfos-03765\"\n: \"VUID-vkBuildAccelerationStructuresKHR-pInfos-03765\";\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdBuildAccelerationStructuresKHR-pInfos-03767\", \"For each element of pInfos, if its mode member is VK_BUILD_ACCELERATION_STRUCTURE_MODE_UPDATE_KHR, then for each VkAccelerationStructureGeometryKHR structure referred to by its pGeometries or ppGeometries members, if geometryType is VK_GEOMETRY_TYPE_TRIANGLES_KHR, if its geometry.triangles.transformData address was not NULL when srcAccelerationStructure was last built, then it must not be NULL\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (last_geometry.geometry.triangles.transformData.deviceAddress != 0 &&\n    const char *vuid = info_loc.function == Func::vkCmdBuildAccelerationStructuresKHR\n                           ? \"VUID-vkCmdBuildAccelerationStructuresKHR-pInfos-03767\"\n                       : info_loc.function == Func::vkCmdBuildAccelerationStructuresIndirectKHR\n                           ? \"VUID-vkCmdBuildAccelerationStructuresIndirectKHR-pInfos-03767\"\n                           : \"VUID-vkBuildAccelerationStructuresKHR-pInfos-03767\";\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdBuildAccelerationStructuresKHR-pInfos-03707\", \"For each element of pInfos, the buffer used to create its dstAccelerationStructure member must be bound to device memory\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (const auto dst_as_state = Get<vvl::AccelerationStructureKHR>(info->dstAccelerationStructure)) {\n                                          \"VUID-vkCmdBuildAccelerationStructuresKHR-pInfos-03707\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkBuildAccelerationStructuresKHR-pInfos-03776\", \"For each element of pInfos, if its mode member is VK_BUILD_ACCELERATION_STRUCTURE_MODE_UPDATE_KHR the buffer used to create its srcAccelerationStructure member must be bound to memory that was not allocated with multiple instances\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "\"VUID-vkBuildAccelerationStructuresKHR-pInfos-03723\");\n \"VUID-vkBuildAccelerationStructuresKHR-pInfos-03776\");\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkBuildAccelerationStructuresKHR-scratchData-03704\", \"The range of memory backing the scratchData member of any element of pInfos that is accessed by this command must not overlap the memory backing the scratchData member of any other element of pInfos, which is accessed by this command\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "std::string info_i_scratch_str = info_loc.dot(Field::scratchData).Fields();\nstd::string other_info_j_scratch_str = other_info_j_loc.dot(Field::scratchData).Fields();\n    \"VUID-vkBuildAccelerationStructuresKHR-scratchData-03704\", device, info_loc.dot(Field::scratchData),\n    \"overlaps with %s on host address range %s.\\n\"\n    \"%s.hostAddress is %p and assumed scratch size is %\" PRIu64\n    \".\\n\"\n    \"%s.hostAddress is %p and assumed scratch size is %\" PRIu64 \".\",\n    other_info_j_scratch_str.c_str(), string_range_hex(scratch_addr_range & other_scratch_addr_range).c_str(),\n    info_i_scratch_str.c_str(), info->scratchData.hostAddress, scratch_i_size, other_info_j_scratch_str.c_str(),\n    other_info->scratchData.hostAddress, other_scratch_size);\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdBuildAccelerationStructuresIndirectKHR-pInfos-03707\", \"For each element of pInfos, the buffer used to create its dstAccelerationStructure member must be bound to device memory\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (auto dst_as_state = Get<vvl::AccelerationStructureKHR>(info->dstAccelerationStructure)) {\n                                          \"VUID-vkCmdBuildAccelerationStructuresIndirectKHR-pInfos-03707\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdBuildAccelerationStructureNV-dst-02488\", \"dst must have been created with compatible VkAccelerationStructureInfoNV where VkAccelerationStructureInfoNV::type and VkAccelerationStructureInfoNV::flags are identical, VkAccelerationStructureInfoNV::instanceCount and VkAccelerationStructureInfoNV::geometryCount for dst are greater than or equal to the build size and each geometry in VkAccelerationStructureInfoNV::pGeometries for dst has greater than or equal to the number of vertices, indices, and AABBs\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (dst_as_state->create_info.info.type != pInfo->type) {\n    skip |= LogError(\"VUID-vkCmdBuildAccelerationStructureNV-dst-02488\", commandBuffer, error_obj.location,\n                     \"create info VkAccelerationStructureInfoNV::type\"\n                     \"[%s] must be identical to build info VkAccelerationStructureInfoNV::type [%s].\",\n                     string_VkAccelerationStructureTypeKHR(dst_as_state->create_info.info.type),\n                     string_VkAccelerationStructureTypeKHR(pInfo->type));\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdBuildAccelerationStructureNV-dst-02488\", \"dst must have been created with compatible VkAccelerationStructureInfoNV where VkAccelerationStructureInfoNV::type and VkAccelerationStructureInfoNV::flags are identical, VkAccelerationStructureInfoNV::instanceCount and VkAccelerationStructureInfoNV::geometryCount for dst are greater than or equal to the build size and each geometry in VkAccelerationStructureInfoNV::pGeometries for dst has greater than or equal to the number of vertices, indices, and AABBs\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (create_geometry_data.triangles.indexCount < build_geometry_data.triangles.indexCount) {\n    skip |= LogError(\"VUID-vkCmdBuildAccelerationStructureNV-dst-02488\", commandBuffer, error_obj.location,\n                     \"create info pGeometries[%\" PRIu32 \"].geometry.triangles.indexCount [%\" PRIu32\n                     \"]\"\n                     \"must be greater than or equal to build info pGeometries[%\" PRIu32\n                     \"].geometry.triangles.indexCount [%\" PRIu32 \"].\",\n                     i, create_geometry_data.triangles.indexCount, i, build_geometry_data.triangles.indexCount);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdBuildAccelerationStructureNV-update-02492\", \"If update is VK_TRUE, the size member of the VkMemoryRequirements structure returned from a call to vkGetAccelerationStructureMemoryRequirementsNV with VkAccelerationStructureMemoryRequirementsInfoNV::accelerationStructure set to dst and VkAccelerationStructureMemoryRequirementsInfoNV::type set to VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV must be less than or equal to the size of scratch minus scratchOffset\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (scratch_buffer_state && dst_as_state &&\n    skip |= LogError(\"VUID-vkCmdBuildAccelerationStructureNV-update-02492\", commandBuffer, error_obj.location,\n                     \"If update is VK_TRUE, The size member of the \"\n                     \"VkMemoryRequirements structure returned from a call to \"\n                     \"vkGetAccelerationStructureMemoryRequirementsNV with \"\n                     \"VkAccelerationStructureMemoryRequirementsInfoNV::accelerationStructure set to dst and \"\n                     \"VkAccelerationStructureMemoryRequirementsInfoNV::type set to \"\n                     \"VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV must be less than \"\n                     \"or equal to the size of scratch minus scratchOffset\");\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdCopyAccelerationStructureNV-buffer-03719\", \"The buffer used to create dst must be bound to device memory\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "error_obj.location.dot(Field::dst), \"VUID-vkCmdCopyAccelerationStructureNV-dst-07792\");\n        \"VUID-vkCmdCopyAccelerationStructureNV-buffer-03719\");\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkDestroyAccelerationStructureNV-accelerationStructure-03752\", \"All submitted commands that refer to accelerationStructure must have completed execution\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (auto as_state = Get<vvl::AccelerationStructureNV>(accelerationStructure)) {\n                                   \"VUID-vkDestroyAccelerationStructureNV-accelerationStructure-03752\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkWriteAccelerationStructuresPropertiesKHR-accelerationStructures-03431\", \"All acceleration structures in pAccelerationStructures must have been built with VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR if queryType is VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_KHR\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!(as_info.flags & VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR)) {\n    const LogObjectList objlist(device, pAccelerationStructures[i]);\n    skip |= LogError(\"VUID-vkWriteAccelerationStructuresPropertiesKHR-accelerationStructures-03431\", objlist,\n                     as_loc, \"has flags %s.\", string_VkBuildAccelerationStructureFlagsKHR(as_info.flags).c_str());\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdWriteAccelerationStructuresPropertiesNV-queryPool-03755\", \"queryPool must have been created with a queryType matching queryType\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (query_pool_ci.queryType != queryType) {\n    skip |= LogError(\"VUID-vkCmdWriteAccelerationStructuresPropertiesNV-queryPool-03755\", commandBuffer,\n                     error_obj.location.dot(Field::queryType),\n                     \"was created with %s which is differnent from the type queryPool was created with %s.\",\n                     string_VkQueryType(queryType), string_VkQueryType(query_pool_ci.queryType));\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkCopyAccelerationStructureInfoKHR-buffer-03719\", \"The buffer used to create dst must be bound to device memory\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (auto buffer_state = Get<vvl::Buffer>(dst_accel_state->create_info.buffer)) {\n                                          \"VUID-VkCopyAccelerationStructureInfoKHR-buffer-03719\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCopyAccelerationStructureKHR-deferredOperation-03678\", \"Any previous deferred operation that was associated with deferredOperation must be complete\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "skip |= ValidateDeferredOperation(device, deferredOperation, error_obj.location.dot(Field::deferredOperation),\n                                  \"VUID-vkCopyAccelerationStructureKHR-deferredOperation-03678\");\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkCopyAccelerationStructureToMemoryInfoKHR-src-04959\", \"The source acceleration structure src must have been constructed prior to the execution of this command\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!src_accel_struct.built) {\n    objlist.add(src_accel_struct.Handle());\n    skip |= LogError(\"VUID-VkCopyAccelerationStructureToMemoryInfoKHR-src-04959\", objlist, loc.dot(Field::src),\n                     \"has not been built.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdCopyAccelerationStructureToMemoryKHR-pInfo-03739\", \"pInfo->dst.deviceAddress must be a valid device address for a buffer bound to device memory\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (buffer_states.empty()) {\n    skip |= LogError(\"VUID-vkCmdCopyAccelerationStructureToMemoryKHR-pInfo-03739\", commandBuffer,\n                     error_obj.location.dot(Field::pInfo).dot(Field::dst).dot(Field::deviceAddress),\n                     \"(0x%\" PRIx64 \") is not a valid buffer address.\", dst_address);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdCopyMemoryToAccelerationStructureKHR-buffer-03745\", \"The buffer used to create pInfo->dst must be bound to device memory\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (auto accel_state = Get<vvl::AccelerationStructureKHR>(pInfo->dst)) {\n                                          \"VUID-vkCmdCopyMemoryToAccelerationStructureKHR-buffer-03745\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkGetRayTracingShaderGroupHandlesKHR-dataSize-02420\", \"dataSize must be at least VkPhysicalDeviceRayTracingPipelinePropertiesKHR::shaderGroupHandleSize \u00d7 groupCount\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (dataSize < (phys_dev_ext_props.ray_tracing_props_khr.shaderGroupHandleSize * groupCount)) {\n        LogError(\"VUID-vkGetRayTracingShaderGroupHandlesKHR-dataSize-02420\", device, error_obj.location.dot(Field::dataSize),\n                 \"(%zu) must be at least \"\n                 \"shaderGroupHandleSize (%\" PRIu32 \") * groupCount (%\" PRIu32 \").\",\n                 dataSize, phys_dev_ext_props.ray_tracing_props_khr.shaderGroupHandleSize, groupCount);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkGetRayTracingCaptureReplayShaderGroupHandlesKHR-pipeline-07829\", \"If the pipelineLibraryGroupHandles feature is not enabled, pipeline must not have been created with VK_PIPELINE_CREATE_LIBRARY_BIT_KHR\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!enabled_features.pipelineLibraryGroupHandles) {\n    skip |= LogError(\"VUID-vkGetRayTracingCaptureReplayShaderGroupHandlesKHR-pipeline-07829\", pipeline,\n                     error_obj.location.dot(Field::pipeline),\n                     \"was created with %s, but the pipelineLibraryGroupHandles feature was not enabled.\",\n                     string_VkPipelineCreateFlags(create_info.flags).c_str());\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkGetRayTracingShaderGroupStackSizeKHR-group-03608\", \"The value of group must be less than the number of shader groups in pipeline\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (group >= create_info.groupCount) {\n        LogError(\"VUID-vkGetRayTracingShaderGroupStackSizeKHR-group-03608\", pipeline, error_obj.location.dot(Field::group),\n                 \"(%\" PRIu32 \") must be less than the number of shader groups in pipeline (%\" PRIu32 \").\", group,\n                 create_info.groupCount);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkGeometryAABBNV-offset-02439\", \"offset must be less than the size of aabbData\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (aabb_state && aabb_state->create_info.size > 0 && aabb_state->create_info.size <= aabbs.offset) {\n    skip |= LogError(\"VUID-VkGeometryAABBNV-offset-02439\", device, loc, \"is invalid.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkAttachmentSampleLocationsEXT-attachmentIndex-01531\", \"attachmentIndex must be less than the attachmentCount specified in VkRenderPassCreateInfo the render pass specified by VkRenderPassBeginInfo::renderPass was created with\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (sample_location.attachmentIndex >= rp_state->create_info.attachmentCount) {\n    const LogObjectList objlist(commandBuffer, pRenderPassBegin->renderPass);\n        \"VUID-VkAttachmentSampleLocationsEXT-attachmentIndex-01531\", objlist, sampler_loc.dot(Field::attachmentIndex),\n        \"(%\" PRIu32 \") is greater than the attachment count of %\" PRIu32 \" for the render pass being begun.\",\n        sample_location.attachmentIndex, rp_state->create_info.attachmentCount);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkDeviceGroupRenderPassBeginInfo-deviceMask-00906\", \"deviceMask must not be zero\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "skip |= ValidateDeviceMaskToPhysicalDeviceCount(device_group_begin_info->deviceMask, objlist, device_mask_loc,\n                                                \"VUID-VkDeviceGroupRenderPassBeginInfo-deviceMask-00905\");\nskip |= ValidateDeviceMaskToZero(device_group_begin_info->deviceMask, objlist, device_mask_loc,\n                                 \"VUID-VkDeviceGroupRenderPassBeginInfo-deviceMask-00906\");\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdBeginRenderPass-contents-09640\", \"If contents is VK_SUBPASS_CONTENTS_INLINE_AND_SECONDARY_COMMAND_BUFFERS_KHR, then at least one of the following features must be enabled: maintenance7 nestedCommandBuffer\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (contents == VK_SUBPASS_CONTENTS_INLINE_AND_SECONDARY_COMMAND_BUFFERS_KHR && !enabled_features.nestedCommandBuffer &&\n    const char *vuid = error_obj.location.function == Func::vkCmdBeginRenderPass ? \"VUID-vkCmdBeginRenderPass-contents-09640\"\n                                                                                 : \"VUID-VkSubpassBeginInfo-contents-09382\";\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdEndRenderPass2-None-06171\", \"The current render pass instance must not have been begun with vkCmdBeginRendering\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (rp_state.UsesDynamicRendering()) {\n    vuid = use_rp2 ? \"VUID-vkCmdEndRenderPass2-None-06171\" : \"VUID-vkCmdEndRenderPass-None-06170\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkSubpassFragmentDensityMapOffsetEndInfoQCOM-fragmentDensityMapAttachment-06504\", \"If VkSubpassDescription::fragmentDensityMapAttachment is not is not VK_ATTACHMENT_UNUSED and was not created with VK_IMAGE_CREATE_FRAGMENT_DENSITY_MAP_OFFSET_BIT_QCOM, fragmentDensityOffsetCount must equal 0\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((ici.flags & VK_IMAGE_CREATE_FRAGMENT_DENSITY_MAP_OFFSET_BIT_QCOM) == 0) {\n    skip |= LogError(\"VUID-VkSubpassFragmentDensityMapOffsetEndInfoQCOM-fragmentDensityMapAttachment-06504\",\n                     objlist, error_obj.location,\n                     \"Fragment density map attachment %\" PRIu32\n                     \" is not created with\"\n                     \" VK_IMAGE_CREATE_FRAGMENT_DENSITY_MAP_OFFSET_BIT_QCOM and fragmentDensityOffsetCount\"\n                     \" is %\" PRIu32 \" but must be 0 due to missing fragmentDensityOffset feature bit.\",\n                     i, fdm_offset_info->fragmentDensityOffsetCount);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkSubpassFragmentDensityMapOffsetEndInfoQCOM-pColorAttachments-06507\", \"If any element of VkSubpassDescription::pColorAttachments is not is not VK_ATTACHMENT_UNUSED and was not created with VK_IMAGE_CREATE_FRAGMENT_DENSITY_MAP_OFFSET_BIT_QCOM, fragmentDensityOffsetCount must equal 0\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((attachment != VK_ATTACHMENT_UNUSED) && (attachment == i) &&\n    const LogObjectList objlist(commandBuffer, rp_state.Handle(), view_state->Handle());\n    skip |= LogError(\"VUID-VkSubpassFragmentDensityMapOffsetEndInfoQCOM-pColorAttachments-06507\", objlist,\n                     error_obj.location,\n                     \"pColorAttachments[%\" PRIu32\n                     \"] is not created with\"\n                     \" VK_IMAGE_CREATE_FRAGMENT_DENSITY_MAP_OFFSET_BIT_QCOM and fragmentDensityOffsetCount\"\n                     \" is %\" PRIu32 \" but must be 0 due to missing fragmentDensityOffset feature bit.\",\n                     i, fdm_offset_info->fragmentDensityOffsetCount);\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdEndRenderPass-None-07004\", \"If vkCmdBeginQuery* was called within a subpass of the render pass, the corresponding vkCmdEndQuery* must have been called subsequently within the same subpass\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "vuid = use_rp2 ? \"VUID-vkCmdEndRenderPass2-None-07005\" : \"VUID-vkCmdEndRenderPass-None-07004\";\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkDeviceGroupRenderPassBeginInfo-offset-06167\", \"The offset.y member of any element of pDeviceRenderAreas must be greater than or equal to 0\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "skip |= LogError(\"VUID-VkDeviceGroupRenderPassBeginInfo-offset-06166\", commandBuffer,\n                 group_loc.dot(Field::offset).dot(Field::x), \"is %\" PRId32 \" (offset can't be negative).\", offset_x);\nskip |= LogError(\"VUID-VkDeviceGroupRenderPassBeginInfo-offset-06167\", commandBuffer,\n                 group_loc.dot(Field::offset).dot(Field::y), \"is %\" PRId32 \" (offset can't be negative).\", offset_y);\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkRenderPassBeginInfo-pNext-02852\", \"If the pNext chain does not contain VkDeviceGroupRenderPassBeginInfo or its deviceRenderAreaCount member is equal to 0, renderArea.offset.x + renderArea.extent.width must be less than or equal to VkFramebufferCreateInfo::width the framebuffer was created with\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (x_adjusted_extent > static_cast<int64_t>(framebuffer_info->width)) {\n    const LogObjectList objlist(begin_info.renderPass, framebuffer_state->Handle());\n    skip |= LogError(\"VUID-VkRenderPassBeginInfo-pNext-02852\", objlist, render_area_loc,\n                     \"offset.x (%\" PRId32 \") + extent.width (%\" PRId32 \") is greater than framebuffer width (%\" PRId32 \").\",\n                     begin_info.renderArea.offset.x, begin_info.renderArea.extent.width, framebuffer_info->width);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkRenderPassBeginInfo-framebuffer-04627\", \"If framebuffer was created with a VkFramebufferCreateInfo::flags value that included VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT, each element of the pAttachments member of a VkRenderPassAttachmentBeginInfo structure included in the pNext chain must be a VkImageView with an inherited usage equal to the usage member of the corresponding element of VkFramebufferAttachmentsCreateInfo::pAttachmentImageInfos used to create framebuffer\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (image_create_info->usage == image_view_state->inherited_usage) {\n    skip |= LogError(\"VUID-VkRenderPassBeginInfo-framebuffer-04627\", objlist, attachment_loc.dot(Field::usage),\n                     \"is (%s), but the VkFramebuffer was created with \"\n                     \"vkFramebufferAttachmentsCreateInfo::pAttachmentImageInfos[%\" PRIu32 \"].usage = %s.\",\n                     string_VkImageUsageFlags(image_create_info->usage).c_str(), i,\n                     string_VkImageUsageFlags(framebuffer_attachment_image_info->usage).c_str());\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkRenderPassBeginInfo-framebuffer-03214\", \"If framebuffer was created with a VkFramebufferCreateInfo::flags value that included VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT, each element of the pAttachments member of a VkRenderPassAttachmentBeginInfo structure included in the pNext chain must be a VkImageView of an image created with a value of VkImageFormatListCreateInfo::viewFormatCount equal to the viewFormatCount member of the corresponding element of VkFramebufferAttachmentsCreateInfo::pAttachmentImageInfos used to create framebuffer\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (image_format_list_create_info->viewFormatCount != framebuffer_attachment_image_info->viewFormatCount) {\n        LogError(\"VUID-VkRenderPassBeginInfo-framebuffer-03214\", objlist, attachment_loc,\n                 \"internal VkImage was created with a VkImageFormatListCreateInfo::viewFormatCount of %\" PRIu32\n                 \" but VkFramebufferAttachmentsCreateInfo::pAttachments[%\" PRIu32 \"].viewFormatCount is %\" PRIu32 \".\",\n                 image_format_list_create_info->viewFormatCount, i, framebuffer_attachment_image_info->viewFormatCount);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkRenderPassAttachmentBeginInfo-pAttachments-03218\", \"Each element of pAttachments must only specify a single mip level\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (subresource_range.levelCount != 1) {\n    skip |= LogError(\"VUID-VkRenderPassAttachmentBeginInfo-pAttachments-03218\", objlist, attachment_loc,\n                     \"was created with multiple mip levels (%\" PRIu32 \").\", subresource_range.levelCount);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkRenderPassCreateInfo2-attachment-03051\", \"If the attachment member of any element of pInputAttachments, pColorAttachments, pResolveAttachments or pDepthStencilAttachment, or any element of pPreserveAttachments in any element of pSubpasses is not VK_ATTACHMENT_UNUSED, then it must be less than attachmentCount\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (attachment >= attachment_count) {\n        use_rp2 ? \"VUID-VkRenderPassCreateInfo2-attachment-03051\" : \"VUID-VkRenderPassCreateInfo-attachment-00834\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkSubpassDescription2-pPreserveAttachments-03074\", \"Each element of pPreserveAttachments must not also be an element of any other member of the subpass description\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "skip |= LogError(vuid, device, loc, \"uses attachment %\" PRIu32 \" as both %s and %s attachment.\", attachment,\nvuid = use_rp2 ? \"VUID-VkSubpassDescription2-pPreserveAttachments-03074\"\n               : \"VUID-VkSubpassDescription-pPreserveAttachments-00854\";\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkAttachmentReference-separateDepthStencilLayouts-03313\", \"If the separateDepthStencilLayouts feature is not enabled, and attachment is not VK_ATTACHMENT_UNUSED, layout must not be VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL, VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL, VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL, or VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL,\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!enabled_features.separateDepthStencilLayouts) {\n    vuid = (use_rp2) ? \"VUID-VkAttachmentReference2-separateDepthStencilLayouts-03313\"\n                     : \"VUID-VkAttachmentReference-separateDepthStencilLayouts-03313\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkAttachmentReference-attachmentFeedbackLoopLayout-07311\", \"If the attachmentFeedbackLoopLayout feature is not enabled, layout must not be VK_IMAGE_LAYOUT_ATTACHMENT_FEEDBACK_LOOP_OPTIMAL_EXT\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!enabled_features.attachmentFeedbackLoopLayout) {\n    vuid = (use_rp2) ? \"VUID-VkAttachmentReference2-attachmentFeedbackLoopLayout-07311\"\n                     : \"VUID-VkAttachmentReference-attachmentFeedbackLoopLayout-07311\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkSubpassDescription2-attachment-02801\", \"If the attachment member of any element of pInputAttachments is not VK_ATTACHMENT_UNUSED, then the aspectMask member must not include VK_IMAGE_ASPECT_METADATA_BIT\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (aspect_mask & VK_IMAGE_ASPECT_METADATA_BIT) {\n    const char *vuid = use_rp2 ? \"VUID-VkSubpassDescription2-attachment-02801\"\n                               : \"VUID-VkInputAttachmentAspectReference-aspectMask-01964\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkSubpassDescription2-attachment-06912\", \"If the attachment member of an element of pInputAttachments is not VK_ATTACHMENT_UNUSED, its layout member must not be VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL or VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (IsValueIn(attachment_layout,\n        use_rp2 ? \"VUID-VkSubpassDescription2-attachment-06912\" : \"VUID-VkSubpassDescription-attachment-06912\";\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkRenderPassFragmentDensityMapCreateInfoEXT-fragmentDensityMapAttachment-02548\", \"If fragmentDensityMapAttachment is not VK_ATTACHMENT_UNUSED, fragmentDensityMapAttachment must not be an element of VkSubpassDescription::pInputAttachments, VkSubpassDescription::pColorAttachments, VkSubpassDescription::pResolveAttachments, VkSubpassDescription::pDepthStencilAttachment, or VkSubpassDescription::pPreserveAttachments for any subpass\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((fdm_attachment_index != VK_ATTACHMENT_UNUSED) && (attachment_index == fdm_attachment_index)) {\n    skip |= LogError(\"VUID-VkRenderPassFragmentDensityMapCreateInfoEXT-fragmentDensityMapAttachment-02548\", device,\n                     input_loc,\n                     \"is also referenced by \"\n                     \"VkRenderPassFragmentDensityMapCreateInfoEXT::fragmentDensityMapAttachment\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkRenderPassCreateInfo-pNext-01963\", \"If the pNext chain includes a VkRenderPassInputAttachmentAspectCreateInfo structure, for any element of the pInputAttachments member of any element of pSubpasses where the attachment member is not VK_ATTACHMENT_UNUSED, the aspectMask member of the corresponding element of VkRenderPassInputAttachmentAspectCreateInfo::pAspectReferences must only include aspects that are present in images of the format specified by the element of pAttachments at attachment\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "use_rp2 ? \"VUID-VkRenderPassCreateInfo2-attachment-02525\" : \"VUID-VkRenderPassCreateInfo-pNext-01963\";\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkSubpassDescription-pInputAttachments-02647\", \"All attachments in pInputAttachments that are not VK_ATTACHMENT_UNUSED must have image formats whose potential format features contain at least VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT or VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!enabled_features.linearColorAttachment) {\n    const char *vuid = use_rp2 ? \"VUID-VkSubpassDescription2-pInputAttachments-02897\"\n                               : \"VUID-VkSubpassDescription-pInputAttachments-02647\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkSubpassDescription-attachment-00853\", \"Each element of pPreserveAttachments must not be VK_ATTACHMENT_UNUSED\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (attachment == VK_ATTACHMENT_UNUSED) {\n        use_rp2 ? \"VUID-VkSubpassDescription2-attachment-03073\" : \"VUID-VkSubpassDescription-attachment-00853\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkSubpassDescription2-attachment-06917\", \"If the attachment member of an element of pResolveAttachments is not VK_ATTACHMENT_UNUSED, its layout member must not be VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL or VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (IsValueIn(attachment_layout, {VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL,\n        use_rp2 ? \"VUID-VkSubpassDescription2-attachment-06917\" : \"VUID-VkSubpassDescription-attachment-06917\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkSubpassDescription2-pResolveAttachments-03067\", \"If pResolveAttachments is not NULL, each resolve attachment that is not VK_ATTACHMENT_UNUSED must have a sample count of VK_SAMPLE_COUNT_1_BIT\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (pCreateInfo->pAttachments[attachment_ref.attachment].samples != VK_SAMPLE_COUNT_1_BIT) {\n    const char *vuid = use_rp2 ? \"VUID-VkSubpassDescription2-pResolveAttachments-03067\"\n                               : \"VUID-VkSubpassDescription-pResolveAttachments-00849\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkSubpassDescription-linearColorAttachment-06498\", \"If the linearColorAttachment feature is enabled and the image is created with VK_IMAGE_TILING_LINEAR, all attachments in pResolveAttachments that are not VK_ATTACHMENT_UNUSED must have image formats whose potential format features must contain VK_FORMAT_FEATURE_2_LINEAR_COLOR_ATTACHMENT_BIT_NV\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "const char *vuid = use_rp2 ? \"VUID-VkSubpassDescription2-linearColorAttachment-06501\"\n                           : \"VUID-VkSubpassDescription-linearColorAttachment-06498\";\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkSubpassDescription2-attachment-06251\", \"If the attachment member of pDepthStencilAttachment is not VK_ATTACHMENT_UNUSED and its pNext chain includes a VkAttachmentReferenceStencilLayout structure, the layout member of pDepthStencilAttachment must not be VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL or VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (vku::FindStructInPNextChain<VkAttachmentReferenceStencilLayout>(subpass.pDepthStencilAttachment->pNext)) {\n    const char *vuid = \"VUID-VkSubpassDescription2-attachment-06251\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkSubpassDescriptionDepthStencilResolve-pNext-06874\", \"If the pNext chain of VkSubpassDescription2 includes a VkMultisampledRenderToSingleSampledInfoEXT structure whose multisampledRenderToSingleSampledEnable field is VK_TRUE, and pDepthStencilAttachment is not NULL, does not have the value VK_ATTACHMENT_UNUSED, and has a VkFormat that has a depth component, then the value of depthResolveMode must be one of the bits set in VkPhysicalDeviceDepthStencilResolveProperties::supportedDepthResolveModes or VK_RESOLVE_MODE_NONE\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "\"VUID-VkSubpassDescriptionDepthStencilResolve-pNext-06874\", device,\nsubpass_loc.pNext(Struct::VkSubpassDescriptionDepthStencilResolve, Field::depthResolveMode),\n\"(%s) is not supported in supportedDepthResolveModes (%s), and %s is %s, and \"\n\"VkMultisampledRenderToSingleSampledInfoEXT::multisampledRenderToSingleSampled was set to \"\n\"VK_TRUE.\",\nstring_VkResolveModeFlagBits(subpass_depth_stencil_resolve->depthResolveMode),\nstring_VkResolveModeFlags(phys_dev_props_core12.supportedDepthResolveModes).c_str(),\nattachment_loc.dot(Field::format).Fields().c_str(), string_VkFormat(attachment_format));\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkRenderPassCreateInfo2-attachment-06246\", \"If the attachment member of the pDepthStencilAttachment member of an element of pSubpasses is not VK_ATTACHMENT_UNUSED and the layout member of that same structure is either VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL or VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL, then the element of pAttachments with an index equal to attachment must not have a format that includes only a stencil component\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (vkuFormatIsStencilOnly(attachment_format)) {\n    skip |= LogError(\"VUID-VkRenderPassCreateInfo2-attachment-06246\", device, attachment_loc.dot(Field::format),\n                     \"(%s) only has a stencil component (referenced by %s).\",\n                     string_VkFormat(attachment_format), ds_loc.Fields().c_str());\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkSubpassDescription2-attachment-06916\", \"If the attachment member of an element of pColorAttachments is not VK_ATTACHMENT_UNUSED, its layout member must not be VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL or VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (IsValueIn(attachment_layout, {VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL,\n        use_rp2 ? \"VUID-VkSubpassDescription2-attachment-06916\" : \"VUID-VkSubpassDescription-attachment-06916\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkSubpassDescription2-pNext-06870\", \"If the pNext chain includes a VkMultisampledRenderToSingleSampledInfoEXT structure with multisampledRenderToSingleSampledEnable equal to VK_TRUE, then all attachments in pColorAttachments and pDepthStencilAttachment that are not VK_ATTACHMENT_UNUSED must have a sample count that is either VK_SAMPLE_COUNT_1_BIT or equal to VkMultisampledRenderToSingleSampledInfoEXT::rasterizationSamples\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (current_sample_count != VK_SAMPLE_COUNT_1_BIT &&\n    skip |= LogError(\"VUID-VkSubpassDescription2-pNext-06870\", device,\n                     create_info_loc.pNext(Struct::VkMultisampledRenderToSingleSampledInfoEXT,\n                                           Field::rasterizationSamples),\n                     \"(%s) doesn't match %s (%s) (referenced by %s).\",\n                     string_VkSampleCountFlagBits(ms_render_to_single_sample->rasterizationSamples),\n                     attachment_loc.dot(Field::samples).Fields().c_str(),\n                     string_VkSampleCountFlagBits(current_sample_count), color_loc.Fields().c_str());\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkSubpassDescription2-externalFormatResolve-09338\", \"If externalFormatResolve is not enabled and pResolveAttachments is not NULL, for each resolve attachment that is not VK_ATTACHMENT_UNUSED, the corresponding color attachment must not have a sample count of VK_SAMPLE_COUNT_1_BIT\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (subpass_performs_resolve && current_sample_count == VK_SAMPLE_COUNT_1_BIT &&\n    !enabled_features.externalFormatResolve) {\n    const char *vuid = use_rp2 ? \"VUID-VkSubpassDescription2-externalFormatResolve-09338\"\n                               : \"VUID-VkSubpassDescription-pResolveAttachments-00848\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkSubpassDescription2-pColorAttachments-02898\", \"All attachments in pColorAttachments that are not VK_ATTACHMENT_UNUSED must have image formats whose potential format features contain VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!enabled_features.linearColorAttachment) {\n    const char *vuid = use_rp2 ? \"VUID-VkSubpassDescription2-pColorAttachments-02898\"\n                               : \"VUID-VkSubpassDescription-pColorAttachments-02648\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkSubpassDescription2-nullColorAttachmentWithExternalFormatResolve-09337\", \"If the nullColorAttachmentWithExternalFormatResolve property is VK_TRUE and pResolveAttachments is not NULL, for each resolve attachment that has a format of VK_FORMAT_UNDEFINED, the corresponding color attachment must have the value VK_ATTACHMENT_UNUSED\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (android_external_format_resolve_null_color_attachment_prop) {\n    skip |= LogError(\"VUID-VkSubpassDescription2-nullColorAttachmentWithExternalFormatResolve-09337\",\n                     device, resolve_loc.dot(Field::attachment),\n                     \"is %\" PRIu32 \", pAttachments[%\" PRIu32\n                     \"].format is VK_FORMAT_UNDEFINED, nullColorAttachmentWithExternalFormatResolve is \"\n                     \"VK_TRUE, but %s is %\" PRIu32 \".\",\n                     resolve_attachment_index, resolve_attachment_index,\n                     color_loc.dot(Field::attachment).Fields().c_str(), attachment_index);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkSubpassDescription2-externalFormatResolve-09348\", \"If externalFormatResolve is enabled, pResolveAttachments is not NULL, and any element of pResolveAttachments is not VK_ATTACHMENT_UNUSED and has a format of VK_FORMAT_UNDEFINED, elements of pInputAttachments referencing either a color attachment or resolve attachment used in this subpass must not include VK_IMAGE_ASPECT_PLANE_i_BIT for any index i in its aspectMask\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "skip |= LogError(\"VUID-VkSubpassDescription2-externalFormatResolve-09348\", device,\n                 color_loc.dot(Field::attachment),\n                 \"is %\" PRIu32 \" (reference also by pInputAttachments[%\" PRIu32\n                 \"]), but the resolve aspectMask is %s.\",\n                 attachment_index, k, string_VkImageAspectFlags(attachment_ref.aspectMask).c_str());\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkSubpassDescription2-externalFormatResolve-09339\", \"If externalFormatResolve is not enabled, each element of pResolveAttachments must have the same VkFormat as its corresponding color attachment\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (color_desc.format != resolve_desc.format) {\n    const char *vuid = use_rp2 ? \"VUID-VkSubpassDescription2-externalFormatResolve-09339\"\n                               : \"VUID-VkSubpassDescription-pResolveAttachments-00850\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkSubpassDependency2-dependencyFlags-03092\", \"If dependencyFlags does not include VK_DEPENDENCY_VIEW_LOCAL_BIT, viewOffset must be 0\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "skip |= LogError(\"VUID-VkRenderPassCreateInfo2-viewMask-03059\", device, dependencies_loc,\n} else if (use_rp2 && !(dependency.dependencyFlags & VK_DEPENDENCY_VIEW_LOCAL_BIT) && dependency.viewOffset != 0) {\nskip |= LogError(\"VUID-VkSubpassDependency2-dependencyFlags-03092\", device, dependencies_loc,\n                 \"specifies the VK_DEPENDENCY_VIEW_LOCAL_BIT, but also specifies a view offset of %\" PRIu32 \".\",\n                 dependency.viewOffset);\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkSubpassDependency-dependencyFlags-02521\", \"If dependencyFlags includes VK_DEPENDENCY_VIEW_LOCAL_BIT, dstSubpass must not be equal to VK_SUBPASS_EXTERNAL\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (dependency.srcSubpass == VK_SUBPASS_EXTERNAL) {\n    vuid = \"VUID-VkSubpassDependency-dependencyFlags-02520\";\n    vuid = \"VUID-VkSubpassDependency-dependencyFlags-02521\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkRenderPassCreateInfo-pNext-01930\", \"If the pNext chain includes a VkRenderPassMultiviewCreateInfo structure, for each non-zero element of pViewOffsets, the srcSubpass and dstSubpass members of pDependencies at the same index must not be equal\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (dependency.viewOffset != 0) {\n    vuid = use_rp2 ? \"VUID-VkSubpassDependency2-viewOffset-02530\" : \"VUID-VkRenderPassCreateInfo-pNext-01930\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkSubpassDependency2-srcSubpass-06810\", \"If srcSubpass is equal to dstSubpass and srcStageMask includes a framebuffer-space stage, dstStageMask must only contain framebuffer-space stages\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "dependency.srcSubpass, pCreateInfo->pSubpasses[dependency.srcSubpass].viewMask);\nvuid = use_rp2 ? \"VUID-VkSubpassDependency2-srcSubpass-06810\" : \"VUID-VkSubpassDependency-srcSubpass-06809\";\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkSubpassDescription2-multiview-06558\", \"If the multiview feature is not enabled, viewMask must be 0\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!enabled_features.multiview) {\n    skip |= LogError(\"VUID-VkSubpassDescription2-multiview-06558\", device, subpass_loc.dot(Field::viewMask),\n                     \"is %\" PRIu32 \", but multiview feature is not enabled.\", subpass.viewMask);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkRenderPassCreateInfo2-viewMask-03058\", \"The VkSubpassDescription2::viewMask member of all elements of pSubpasses must either all be 0, or all not be 0\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (view_mask_non_zero && view_mask_zero) {\n    skip |= LogError(\"VUID-VkRenderPassCreateInfo2-viewMask-03058\", device, error_obj.location,\n                     \"Some view masks are non-zero whilst others are zero.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkRenderPassCreateInfo-fragmentDensityMapAttachment-06471\", \"If the pNext chain includes a VkRenderPassFragmentDensityMapCreateInfoEXT structure and the fragmentDensityMapAttachment member is not VK_ATTACHMENT_UNUSED, then attachment must be less than attachmentCount\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (fragment_density_map_info->fragmentDensityMapAttachment.attachment >= pCreateInfo->attachmentCount) {\n    vuid = use_rp2 ? \"VUID-VkRenderPassCreateInfo2-fragmentDensityMapAttachment-06472\"\n                   : \"VUID-VkRenderPassCreateInfo-fragmentDensityMapAttachment-06471\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkRenderPassCreateInfo-pNext-01929\", \"If the pNext chain includes a VkRenderPassMultiviewCreateInfo structure, if its dependencyCount member is not zero, it must be equal to dependencyCount\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "skip |= LogError(\"VUID-VkRenderPassCreateInfo-pNext-01929\", device, error_obj.location,\n                 \"Dependency count is %\" PRIu32 \" but multiview info has a dependency count of %\" PRIu32 \".\",\n                 pCreateInfo->dependencyCount, multiview_info->dependencyCount);\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkRenderPassCreateInfo-pNext-02512\", \"If the pNext chain includes a VkRenderPassMultiviewCreateInfo structure, for any element of pDependencies with a dependencyFlags member that does not include VK_DEPENDENCY_VIEW_LOCAL_BIT, the corresponding element of the pViewOffsets member of that VkRenderPassMultiviewCreateInfo instance must be 0\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (i < multiview_info->dependencyCount && multiview_info->pViewOffsets[i] != 0) {\n    skip |= LogError(\"VUID-VkRenderPassCreateInfo-pNext-02512\", device,\n                     error_obj.location.dot(Field::pDependencies, i).dot(Field::dependencyFlags),\n                     \"does not have VK_DEPENDENCY_VIEW_LOCAL_BIT bit set, but the corresponding \"\n                     \"VkRenderPassMultiviewCreateInfo::pViewOffsets[%\" PRIu32 \"] is %\" PRId32 \".\",\n                     i, multiview_info->pViewOffsets[i]);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkRenderPassCreateInfo2-pSubpasses-06473\", \"If the pSubpasses pNext chain includes a VkSubpassDescriptionDepthStencilResolve structure and the pDepthStencilResolveAttachment member is not NULL and does not have the value VK_ATTACHMENT_UNUSED, then attachment must be less than attachmentCount\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (resolve_attachment >= pCreateInfo->attachmentCount) {\n        LogError(\"VUID-VkRenderPassCreateInfo2-pSubpasses-06473\", device, ds_resolve_loc,\n                 \"must be less than attachmentCount %\" PRIu32 \" of for this render pass.\", pCreateInfo->attachmentCount);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkSubpassDescriptionDepthStencilResolve-pDepthStencilResolveAttachment-03178\", \"If pDepthStencilResolveAttachment is not NULL and does not have the value VK_ATTACHMENT_UNUSED, depthResolveMode and stencilResolveMode must not both be VK_RESOLVE_MODE_NONE\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (resolve_has_depth && !resolve_has_stencil && resolve->depthResolveMode == VK_RESOLVE_MODE_NONE) {\n    skip |= LogError(\"VUID-VkSubpassDescriptionDepthStencilResolve-pDepthStencilResolveAttachment-03178\", device,\n                     ds_resolve_loc,\n                     \"is not NULL, but the depth resolve mode is VK_RESOLVE_MODE_NONE (stencil resolve mode is \"\n                     \"ignored due to format not having stencil component).\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkSubpassDescriptionDepthStencilResolve-pDepthStencilResolveAttachment-03179\", \"If pDepthStencilResolveAttachment is not NULL and does not have the value VK_ATTACHMENT_UNUSED, pDepthStencilAttachment must not have a sample count of VK_SAMPLE_COUNT_1_BIT\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (pCreateInfo->pAttachments[ds_attachment].samples == VK_SAMPLE_COUNT_1_BIT) {\n        LogError(\"VUID-VkSubpassDescriptionDepthStencilResolve-pDepthStencilResolveAttachment-03179\", device,\n                 ds_resolve_loc, \"is not NULL, however pDepthStencilAttachment has sample count=VK_SAMPLE_COUNT_1_BIT.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkRenderPassCreateInfo2-flags-04521\", \"If flags includes VK_RENDER_PASS_CREATE_TRANSFORM_BIT_QCOM, an element of pSubpasses includes an instance of VkFragmentShadingRateAttachmentInfoKHR in its pNext chain, and the pFragmentShadingRateAttachment member of that structure is not equal to NULL, the attachment member of pFragmentShadingRateAttachment must be VK_ATTACHMENT_UNUSED\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((pCreateInfo->flags & VK_RENDER_PASS_CREATE_TRANSFORM_BIT_QCOM) != 0) {\n        LogError(\"VUID-VkRenderPassCreateInfo2-flags-04521\", device, fragment_loc.dot(Field::attachment),\n                 \"is not VK_ATTACHMENT_UNUSED, but render pass includes VK_RENDER_PASS_CREATE_TRANSFORM_BIT_QCOM\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkFragmentShadingRateAttachmentInfoKHR-pFragmentShadingRateAttachment-04526\", \"If pFragmentShadingRateAttachment is not NULL and its attachment member is not VK_ATTACHMENT_UNUSED, shadingRateAttachmentTexelSize.width must be less than or equal to maxFragmentShadingRateAttachmentTexelSize.width\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (texel_size.width >\n        LogError(\"VUID-VkFragmentShadingRateAttachmentInfoKHR-pFragmentShadingRateAttachment-04526\", device,\n                 texel_loc.dot(Field::width),\n                 \"(%\" PRIu32 \") is higher than the advertised maximum width %\" PRIu32 \".\", texel_size.width,\n                 phys_dev_ext_props.fragment_shading_rate_props.maxFragmentShadingRateAttachmentTexelSize.width);\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkFragmentShadingRateAttachmentInfoKHR-pFragmentShadingRateAttachment-04532\", \"If pFragmentShadingRateAttachment is not NULL and its attachment member is not VK_ATTACHMENT_UNUSED, the quotient of shadingRateAttachmentTexelSize.height and shadingRateAttachmentTexelSize.width must be less than or equal to maxFragmentShadingRateAttachmentTexelSizeAspectRatio\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (inverse_aspect_ratio >\n        \"VUID-VkFragmentShadingRateAttachmentInfoKHR-pFragmentShadingRateAttachment-04532\", device, texel_loc,\n        \"has a texel size of %\" PRIu32 \" by %\" PRIu32 \", which has an inverse aspect ratio of %\" PRIu32\n        \", which is higher than the advertised maximum aspect ratio %\" PRIu32 \".\",\n        texel_size.width, texel_size.height, inverse_aspect_ratio,\n        phys_dev_ext_props.fragment_shading_rate_props.maxFragmentShadingRateAttachmentTexelSizeAspectRatio);\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkRenderPassCreateInfo2-pAttachments-04585\", \"If any element of pAttachments is used as a fragment shading rate attachment in any subpass, it must not be used as any other attachment in the render pass\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (depth_stencil_resolve_attachment->pDepthStencilResolveAttachment->attachment == attachment_description) {\n        \"VUID-VkRenderPassCreateInfo2-pAttachments-04585\", device,\n        subpass_loc\n            .pNext(Struct::VkSubpassDescriptionDepthStencilResolve, Field::pDepthStencilResolveAttachment)\n            .dot(Field::attachment),\n        \"is also used in pAttachments[%\" PRIu32 \"] as a fragment shading rate attachment in subpass(es) %s\",\n        attachment_description, fsr_attachment_subpasses_string.c_str());\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkRenderingAttachmentInfo-imageView-06130\", \"If imageView is not VK_NULL_HANDLE and has an integer color format, resolveMode must be VK_RESOLVE_MODE_NONE or VK_RESOLVE_MODE_SAMPLE_ZERO_BIT\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((vkuFormatIsSINT(image_view_format) || vkuFormatIsUINT(image_view_format)) && vkuFormatIsColor(image_view_format) &&\n    !(attachment_info.resolveMode == VK_RESOLVE_MODE_NONE || attachment_info.resolveMode == VK_RESOLVE_MODE_SAMPLE_ZERO_BIT)) {\n    const LogObjectList objlist(commandBuffer, attachment_info.imageView);\n    skip |= LogError(\"VUID-VkRenderingAttachmentInfo-imageView-06130\", objlist, attachment_loc.dot(Field::resolveMode),\n                     \"(%s) must be VK_RESOLVE_MODE_NONE or VK_RESOLVE_MODE_SAMPLE_ZERO_BIT for integer formats (%s)\",\n                     string_VkResolveModeFlags(attachment_info.resolveMode).c_str(), string_VkFormat(image_view_format));\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkRenderingAttachmentInfo-imageView-06863\", \"If imageView is not VK_NULL_HANDLE, resolveMode is not VK_RESOLVE_MODE_NONE, the pNext chain of VkRenderingInfo includes a VkMultisampledRenderToSingleSampledInfoEXT structure with the multisampledRenderToSingleSampledEnable field equal to VK_TRUE, and imageView has a sample count of VK_SAMPLE_COUNT_1_BIT, resolveImageView must be VK_NULL_HANDLE\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "const LogObjectList objlist(commandBuffer, attachment_info.resolveImageView);\n    \"VUID-VkRenderingAttachmentInfo-imageView-06863\", objlist, attachment_loc.dot(Field::resolveMode),\n    \"is %s and VkMultisampledRenderToSingleSampledInfoEXT::multisampledRenderToSingleSampledEnable is VK_TRUE, and \"\n    \"%s.imageView has a sample count of VK_SAMPLE_COUNT_1_BIT, and resolveImageView (%s) is not VK_NULL_HANDLE.\",\n    string_VkResolveModeFlags(attachment_info.resolveMode).c_str(),\n    attachment_loc.dot(Field::resolveMode).Fields().c_str(), FormatHandle(attachment_info.resolveImageView).c_str());\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkRenderingAttachmentInfo-imageView-06139\", \"If imageView is not VK_NULL_HANDLE and resolveMode is not VK_RESOLVE_MODE_NONE, resolveImageLayout must not be VK_IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (attachment_info.resolveImageLayout == VK_IMAGE_LAYOUT_FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR) {\n                           ? \"VUID-VkRenderingAttachmentInfo-imageView-06144\"\n                           : \"VUID-VkRenderingAttachmentInfo-imageView-06139\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkRenderingAttachmentInfo-imageView-06137\", \"If imageView is not VK_NULL_HANDLE and resolveMode is not VK_RESOLVE_MODE_NONE, resolveImageLayout must not be VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL or VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (((attachment_info.resolveImageLayout == VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL) ||\n    skip |= LogError(\"VUID-VkRenderingAttachmentInfo-imageView-06137\", commandBuffer,\n                     attachment_loc.dot(Field::resolveImageLayout), \"is %s.\",\n                     string_VkImageLayout(attachment_info.resolveImageLayout));\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkRenderingFragmentDensityMapAttachmentInfoEXT-imageView-06158\", \"If imageView is not VK_NULL_HANDLE, it must have been created with VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((fragment_density_map_view_state->inherited_usage & VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT) == 0) {\n    const LogObjectList objlist(commandBuffer, fragment_density_map_attachment_info->imageView);\n    skip |= LogError(\"VUID-VkRenderingFragmentDensityMapAttachmentInfoEXT-imageView-06158\", objlist, view_loc,\n                     \"usage (%s) does not include VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT.\",\n                     string_VkImageUsageFlags(fragment_density_map_view_state->inherited_usage).c_str());\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkRenderingInfo-imageView-09486\", \"If the imageView member of a VkRenderingFragmentDensityMapAttachmentInfoEXT structure included in the pNext chain is not VK_NULL_HANDLE, it must have been created with the identity swizzle\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!IsIdentitySwizzle(components)) {\n    const LogObjectList objlist(commandBuffer, fragment_density_map_view_state->Handle());\n    skip |= LogError(\"VUID-VkRenderingInfo-imageView-09486\", objlist, view_loc,\n                     \"has a non-identiy swizzle component, here are the actual swizzle values:\\n\"\n                     \"r swizzle = %s\\n\"\n                     \"g swizzle = %s\\n\"\n                     \"b swizzle = %s\\n\"\n                     \"a swizzle = %s\\n\",\n                     string_VkComponentSwizzle(components.r), string_VkComponentSwizzle(components.g),\n                     string_VkComponentSwizzle(components.b), string_VkComponentSwizzle(components.a));\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkRenderingFragmentShadingRateAttachmentInfoKHR-imageView-06148\", \"If imageView is not VK_NULL_HANDLE, it must have been created with VK_IMAGE_USAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((view_state->inherited_usage & VK_IMAGE_USAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR) == 0) {\n    skip |= LogError(\"VUID-VkRenderingFragmentShadingRateAttachmentInfoKHR-imageView-06148\", objlist,\n                     rendering_info_loc.pNext(Struct::VkRenderingFragmentShadingRateAttachmentInfoKHR, Field::imageView),\n                     \"was not created with VK_IMAGE_USAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkRenderingInfo-pNext-06122\", \"If maintenance7 is not enabled or the robustFragmentShadingRateAttachmentAccess limit is VK_FALSE or the imageView member of a VkRenderingFragmentShadingRateAttachmentInfoKHR structure was created with VkImageSubresourceRange::baseMipLevel greater than 0, the pNext chain contains a VkDeviceGroupRenderPassBeginInfo structure, its deviceRenderAreaCount member is not 0, and the imageView member of a VkRenderingFragmentShadingRateAttachmentInfoKHR structure included in the pNext chain is not VK_NULL_HANDLE, imageView must have a height greater than or equal to \\\\(\\\\left\\\\lceil{\\\\frac{pDeviceRenderAreas_{y}+pDeviceRenderAreas_{height}}{shadingRateAttachmentTexelSize_{height}}}\\\\right\\\\rceil\\\\) for each element of pDeviceRenderAreas\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (image_state->create_info.extent.height <\n        \"VUID-VkRenderingInfo-pNext-06122\", objlist,\n        rendering_info_loc.pNext(Struct::VkRenderingFragmentShadingRateAttachmentInfoKHR, Field::imageView),\n        \"height (%\" PRIu32 \") must not be less than (VkDeviceGroupRenderPassBeginInfo::pDeviceRenderAreas[%\" PRIu32\n        \"].offset.y (%\" PRId32 \") + VkDeviceGroupRenderPassBeginInfo::pDeviceRenderAreas[%\" PRIu32\n        \"].extent.height (%\" PRIu32\n        \") ) / shadingRateAttachmentTexelSize.height \"\n        \"(%\" PRIu32 \").\",\n        image_state->create_info.extent.height, deviceRenderAreaIndex, offset_y, deviceRenderAreaIndex, height,\n        fsr_attachment_info.shadingRateAttachmentTexelSize.height);\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkRenderingInfo-pNext-06083\", \"If the pNext chain contains VkDeviceGroupRenderPassBeginInfo, the width of the imageView member of any element of pColorAttachments, pDepthAttachment, or pStencilAttachment that is not VK_NULL_HANDLE must be greater than or equal to the sum of the offset.x and extent.width members of each element of pDeviceRenderAreas\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (image_state->create_info.extent.width < offset_x + width) {\n    const LogObjectList objlist(commandBuffer, image_view_state->Handle(), image_state->Handle());\n    skip |= LogError(\"VUID-VkRenderingInfo-pNext-06083\", objlist,\n                     rendering_info_loc.dot(Field::pColorAttachments, j).dot(Field::imageView),\n                     \"width (%\" PRIu32\n                     \") must be greater than or equal to\"\n                     \"renderArea.offset.x (%\" PRId32 \") + renderArea.extent.width (%\" PRIu32 \").\",\n                     image_state->create_info.extent.width, offset_x, width);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkRenderingInfo-pNext-06084\", \"If the pNext chain contains VkDeviceGroupRenderPassBeginInfo, the height of the imageView member of any element of pColorAttachments, pDepthAttachment, or pStencilAttachment that is not VK_NULL_HANDLE must be greater than or equal to the sum of the offset.y and extent.height members of each element of pDeviceRenderAreas\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (image_state->create_info.extent.height < offset_y + height) {\n    const LogObjectList objlist(commandBuffer, stencil_view_state->Handle(), image_state->Handle());\n    skip |= LogError(\"VUID-VkRenderingInfo-pNext-06084\", objlist,\n                     rendering_info_loc.dot(Field::pStencilAttachment).dot(Field::imageView),\n                     \"height (%\" PRIu32\n                     \") must be greater than or equal to\"\n                     \"renderArea.offset.y (%\" PRId32 \") + renderArea.extent.height(%\" PRIu32 \").\",\n                     image_state->create_info.extent.height, offset_y, height);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkRenderingInfo-multisampledRenderToSingleSampled-06857\", \"imageView members of pDepthAttachment, pStencilAttachment, and elements of pColorAttachments that are not VK_NULL_HANDLE must have been created with the same sampleCount , if none of the following are enabled: The VK_AMD_mixed_attachment_samples extension The VK_NV_framebuffer_mixed_samples extension The multisampledRenderToSingleSampled feature,\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (first_sample_count_attachment != image_view->samples) {\n    skip |= LogError(\"VUID-VkRenderingInfo-multisampledRenderToSingleSampled-06857\", objlist,\n                     rendering_info_loc.dot(Field::pDepthAttachment).dot(Field::imageView),\n                     \"has sample count %s, whereas first used color attachment ref has sample count %\" PRIu32 \".\",\n                     string_VkSampleCountFlagBits(image_view->samples), (first_sample_count_attachment));\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkRenderingInfo-None-08995\", \"If VkDeviceGroupRenderPassBeginInfo::deviceRenderAreaCount is 0, renderArea.extent.height must be greater than 0\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "skip |= LogError(\"VUID-VkRenderingInfo-None-08994\", commandBuffer,\nskip |= LogError(\"VUID-VkRenderingInfo-None-08995\", commandBuffer,\n                 rendering_info_loc.dot(Field::renderArea).dot(Field::extent).dot(Field::height), \"is zero.\");\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkRenderingInfo-pDepthAttachment-06105\", \"If pDepthAttachment or pStencilAttachment are both not NULL, pDepthAttachment->imageView and pStencilAttachment->imageView are both not VK_NULL_HANDLE, VkPhysicalDeviceDepthStencilResolveProperties::independentResolve is VK_FALSE, and the resolveMode of neither structure is VK_RESOLVE_MODE_NONE, the resolveMode of both structures must be the same value\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "(pRenderingInfo->pDepthAttachment->resolveMode != VK_RESOLVE_MODE_NONE) &&\n(pRenderingInfo->pStencilAttachment->resolveMode != pRenderingInfo->pDepthAttachment->resolveMode)) {\nskip |= LogError(\"VUID-VkRenderingInfo-pDepthAttachment-06105\", commandBuffer, rendering_info_loc,\n                 \"values of pDepthAttachment->resolveMode (%s) and pStencilAttachment->resolveMode (%s) must \"\n                 \"be identical, or one of them must be VK_RESOLVE_MODE_NONE.\",\n                 string_VkResolveModeFlagBits(pRenderingInfo->pDepthAttachment->resolveMode),\n                 string_VkResolveModeFlagBits(pRenderingInfo->pStencilAttachment->resolveMode));\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkRenderingInfo-colorAttachmentCount-09320\", \"If colorAttachmentCount is not 1, the resolveMode member of any element of pColorAttachments must not be VK_RESOLVE_MODE_EXTERNAL_FORMAT_DOWNSAMPLE_ANDROID\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (pRenderingInfo->colorAttachmentCount != 1) {\n        LogError(\"VUID-VkRenderingInfo-colorAttachmentCount-09320\", commandBuffer, color_loc.dot(Field::resolveMode),\n                 \"is VK_RESOLVE_MODE_EXTERNAL_FORMAT_DOWNSAMPLE_ANDROID and colorAttachmentCount is %\" PRIu32 \".\",\n                 pRenderingInfo->colorAttachmentCount);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkRenderingAttachmentInfo-resolveMode-09326\", \"If resolveMode is VK_RESOLVE_MODE_EXTERNAL_FORMAT_DOWNSAMPLE_ANDROID, resolveImageView must have been created with an external format specified by VkExternalFormatANDROID\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!resolve_view_state->image_state->HasAHBFormat()) {\n    skip |= LogError(\"VUID-VkRenderingAttachmentInfo-resolveMode-09326\", commandBuffer,\n                     color_loc.dot(Field::resolveImageView), \"was not created with an external format.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkRenderingInfo-colorAttachmentCount-09480\", \"If colorAttachmentCount is not 0, and there is an element of pColorAttachments with either its resolveMode member set to VK_RESOLVE_MODE_EXTERNAL_FORMAT_DOWNSAMPLE_ANDROID, or its imageView member not set to VK_NULL_HANDLE and its resolveMode member not set to VK_RESOLVE_MODE_NONE, the resolveImageView member of that element of pColorAttachments must have been created with the identity swizzle\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!IsIdentitySwizzle(components)) {\n    const LogObjectList objlist(commandBuffer, resolve_view_state->Handle());\n        LogError(\"VUID-VkRenderingInfo-colorAttachmentCount-09480\", objlist, color_loc.dot(Field::resolveImageView),\n                 \"has a non-identiy swizzle component, here are the actual swizzle values:\\n\"\n                 \"r swizzle = %s\\n\"\n                 \"g swizzle = %s\\n\"\n                 \"b swizzle = %s\\n\"\n                 \"a swizzle = %s\\n\",\n                 string_VkComponentSwizzle(components.r), string_VkComponentSwizzle(components.g),\n                 string_VkComponentSwizzle(components.b), string_VkComponentSwizzle(components.a));\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkRenderingInfo-pDepthAttachment-09318\", \"pDepthAttachment->resolveMode must not be VK_RESOLVE_MODE_EXTERNAL_FORMAT_DOWNSAMPLE_ANDROID\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (depth_attachment_info.resolveMode == VK_RESOLVE_MODE_EXTERNAL_FORMAT_DOWNSAMPLE_ANDROID) {\n    skip |= LogError(\"VUID-VkRenderingInfo-pDepthAttachment-09318\", commandBuffer,\n                     rendering_info_loc.dot(Field::pDepthAttachment).dot(Field::resolveMode),\n                     \"is VK_RESOLVE_MODE_EXTERNAL_FORMAT_DOWNSAMPLE_ANDROID.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkRenderingInfo-pStencilAttachment-09483\", \"If pStencilAttachment is not NULL and pStencilAttachment->imageView is not VK_NULL_HANDLE, pStencilAttachment->imageView must have been created with the identity swizzle\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!IsIdentitySwizzle(components)) {\n    const LogObjectList objlist(commandBuffer, stencil_view_state->Handle());\n    skip |= LogError(\"VUID-VkRenderingInfo-pStencilAttachment-09483\", objlist,\n                     rendering_info_loc.dot(Field::pStencilAttachment).dot(Field::imageView),\n                     \"has a non-identiy swizzle component, here are the actual swizzle values:\\n\"\n                     \"r swizzle = %s\\n\"\n                     \"g swizzle = %s\\n\"\n                     \"b swizzle = %s\\n\"\n                     \"a swizzle = %s\\n\",\n                     string_VkComponentSwizzle(components.r), string_VkComponentSwizzle(components.g),\n                     string_VkComponentSwizzle(components.b), string_VkComponentSwizzle(components.a));\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdEndRendering-None-06161\", \"The current render pass instance must have been begun with vkCmdBeginRendering\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!cb_state->activeRenderPass->UsesDynamicRendering()) {\n    skip |= LogError(\"VUID-vkCmdEndRendering-None-06161\", commandBuffer, error_obj.location,\n                     \"in a render pass instance that was not begun with vkCmdBeginRendering().\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkMultisampledRenderToSingleSampledInfoEXT-pNext-06880\", \"If added to the pNext chain of VkRenderingInfo, each imageView member of any element of VkRenderingInfo::pColorAttachments, VkRenderingInfo::pDepthAttachment, or VkRenderingInfo::pStencilAttachment that is not VK_NULL_HANDLE must have a format that supports the sample count specified in rasterizationSamples\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!image_state->image_format_properties.sampleCounts) {\n    if (GetPhysicalDeviceImageFormatProperties(*image_state, \"VUID-VkMultisampledRenderToSingleSampledInfoEXT-pNext-06880\",\n                                               attachment_loc))\n        return true;\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdNextSubpass2-None-02350\", \"This command must not be recorded when transform feedback is active\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (cb_state->transform_feedback_active) {\n    vuid = use_rp2 ? \"VUID-vkCmdNextSubpass2-None-02350\" : \"VUID-vkCmdNextSubpass-None-02349\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkFramebufferAttachmentImageInfo-pNext-pNext\", \"pNext must be NULL\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (attachment_image_info->pNext != nullptr) {\n    skip |= LogError(\"VUID-VkFramebufferAttachmentImageInfo-pNext-pNext\", device,\n                     attachment_image_info_loc.dot(Field::pNext), \"is not NULL.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkFramebufferCreateInfo-pAttachments-00881\", \"If flags does not include VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT, each element of pAttachments must have been created with a samples value that matches the samples value specified by the corresponding VkAttachmentDescription in renderPass\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (ici.samples != rpci.pAttachments[i].samples) {\n    LogObjectList objlist(create_info.renderPass, image_views[i], ivci.image);\n    skip |= LogError(\"VUID-VkFramebufferCreateInfo-pAttachments-00881\", objlist, attachment_loc,\n                     \"has %s samples that do not match the %s samples used by the corresponding attachment for %s.\",\n                     string_VkSampleCountFlagBits(ici.samples), string_VkSampleCountFlagBits(rpci.pAttachments[i].samples),\n                     FormatHandle(create_info.renderPass).c_str());\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkFramebufferCreateInfo-flags-04537\", \"If flags does not include VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT, and renderPass was specified with non-zero view masks, each element of pAttachments that is used as a fragment shading rate attachment by renderPass must have a layerCount that is either 1, or greater than the index of the most significant bit set in any of those view masks\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (static_cast<int32_t>(subresource_range.layerCount) <= highest_view_bit &&\n    LogObjectList objlist(create_info.renderPass, image_views[i], ivci.image);\n    skip |= LogError(\"VUID-VkFramebufferCreateInfo-flags-04537\", objlist, attachment_loc,\n                     \"has a layer count (%\" PRIu32\n                     \") less than or equal to the highest bit in the view mask (%i) of subpass %\" PRIu32 \".\",\n                     subresource_range.layerCount, highest_view_bit, j);\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkFramebufferCreateInfo-pAttachments-02555\", \"If flags does not include VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT, an element of pAttachments that is referenced by fragmentDensityMapAttachment must have a width at least as large as the ceiling of width/maxFragmentDensityTexelSize.width\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (mip_width < ceiling_width) {\n    LogObjectList objlist(create_info.renderPass, image_views[i], ivci.image);\n    skip |= LogError(\"VUID-VkFramebufferCreateInfo-pAttachments-02555\", objlist, attachment_loc,\n                     \"mip level %\" PRIu32\n                     \" has width \"\n                     \"smaller than the corresponding the ceiling of framebuffer width / \"\n                     \"maxFragmentDensityTexelSize.width \"\n                     \"Here are the respective dimensions for attachment #%\" PRIu32\n                     \", the ceiling value:\\n \"\n                     \"attachment #%\" PRIu32\n                     \", framebuffer:\\n\"\n                     \"width: %\" PRIu32 \", the ceiling value: %\" PRIu32 \"\\n\",\n                     subresource_range.baseMipLevel, i, i, mip_width, ceiling_width);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkFramebufferCreateInfo-flags-04534\", \"If flags does not include VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT, each element of pAttachments that is used as an input, color, resolve, or depth/stencil attachment by renderPass must have been created with a VkImageCreateInfo::extent.height greater than or equal to height\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (mip_height < create_info.height) {\n    LogObjectList objlist(create_info.renderPass, image_views[i], ivci.image);\n    skip |= LogError(\"VUID-VkFramebufferCreateInfo-flags-04534\", objlist, attachment_loc,\n                     \"mip level %\" PRIu32 \" has height (%\" PRIu32\n                     \") smaller than the corresponding framebuffer height (%\" PRIu32 \").\",\n                     mip_level, mip_height, create_info.height);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkFramebufferCreateInfo-flags-04113\", \"If flags does not include VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT, each element of pAttachments must have been created with VkImageViewCreateInfo::viewType not equal to VK_IMAGE_VIEW_TYPE_3D\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (ivci.viewType == VK_IMAGE_VIEW_TYPE_3D) {\n    LogObjectList objlist(create_info.renderPass, image_views[i]);\n    skip |= LogError(\"VUID-VkFramebufferCreateInfo-flags-04113\", objlist, attachment_loc,\n                     \"has an image view type of VK_IMAGE_VIEW_TYPE_3D.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkFramebufferCreateInfo-flags-03196\", \"If flags includes VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT, the width member of any element of the pAttachmentImageInfos member of a VkFramebufferAttachmentsCreateInfo structure in the pNext chain that is referenced by VkRenderPassFragmentDensityMapCreateInfoEXT::fragmentDensityMapAttachment in renderPass must be greater than or equal to the ceiling of width/maxFragmentDensityTexelSize.width\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (aii.width < ceiling_width) {\n    LogObjectList objlist(create_info.renderPass);\n    skip |= LogError(\"VUID-VkFramebufferCreateInfo-flags-03196\", objlist, attachment_loc,\n                     \"is used as a fragment density map attachment in subpass %\" PRIu32\n                     \", but the quotient of the framebuffer width (%\" PRIu32\n                     \") and the allowed maximum fragment density texel width (%\" PRIu32\n                     \") is greater than the corresponding fragment density attachment \"\n                     \"width (%\" PRIu32 \").\",\n                     j, create_info.width, maxFragmentDensityTexelSize.width, aii.width);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkFramebufferCreateInfo-flags-04545\", \"If flags includes VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT, the layerCount member of any element of the pAttachmentImageInfos member of a VkFramebufferAttachmentsCreateInfo structure in the pNext chain that is used as a fragment shading rate attachment must be either 1, or greater than or equal to layers\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (aii.layerCount != 1 && aii.layerCount < create_info.layers) {\n    skip |= LogError(\"VUID-VkFramebufferCreateInfo-flags-04545\", create_info.renderPass, attachment_loc,\n                     \"has a layer count (%\" PRIu32 \") smaller than the corresponding framebuffer layer count (%\" PRIu32\n                     \").\",\n                     aii.layerCount, create_info.layers);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkFramebufferCreateInfo-flags-03203\", \"If flags includes VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT, the usage member of any element of the pAttachmentImageInfos member of a VkFramebufferAttachmentsCreateInfo structure included in the pNext chain that refers to an attachment used as a depth/stencil resolve attachment by renderPass must include VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (depth_stencil_resolve != nullptr) {\n                       VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT, \"VUID-VkFramebufferCreateInfo-flags-03203\",\n                       create_info_loc);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkFramebufferCreateInfo-renderPass-03198\", \"If multiview is enabled for renderPass and flags includes VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT, the layerCount member of any element of the pAttachmentImageInfos member of a VkFramebufferAttachmentsCreateInfo structure included in the pNext chain used as an input, color, resolve, or depth/stencil attachment in renderPass must be greater than the maximum bit index set in the view mask in the subpasses in which it is used in renderPass\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (layer_count <= highest_view_bit) {\n        \"VUID-VkFramebufferCreateInfo-renderPass-03198\", create_info.renderPass,\n        create_info_loc\n            .pNext(Struct::VkFramebufferAttachmentsCreateInfo, Field::pAttachmentImageInfos, attachment_index)\n            .dot(Field::layerCount),\n        \"is %\" PRId32 \", but the view mask for subpass %\" PRIu32\n        \" in renderPass (%s) \"\n        \"includes layer %i, with that attachment specified as a depth/stencil attachment.\",\n        layer_count, i, FormatHandle(create_info.renderPass).c_str(), highest_view_bit);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkFramebufferCreateInfo-pAttachments-02634\", \"If flags does not include VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT, each element of pAttachments that is used as a depth/stencil resolve attachment by renderPass must have been created with a usage value including VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "\"VUID-VkFramebufferCreateInfo-pAttachments-02634\", create_info_loc);\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkRenderingAttachmentLocationInfoKHR-pColorAttachmentLocations-09513\", \"Elements of pColorAttachmentLocations that are not VK_ATTACHMENT_UNUSED must each be unique\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (unique.find(location) != unique.end()) {\n    skip |= LogError(\"VUID-VkRenderingAttachmentLocationInfoKHR-pColorAttachmentLocations-09513\", objlist, loc,\n                     \"= %\" PRIu32 \" have same value as pColorAttachmentLocations[%\" PRIu32 \"] = %\" PRIu32, location,\n                     unique[location], location);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdSetRenderingAttachmentLocationsKHR-pLocationInfo-09510\", \"pLocationInfo->colorAttachmentCount must be equal to the value of VkRenderingInfo::colorAttachmentCount used to begin the current render pass instance\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (pLocationInfo->colorAttachmentCount != rp_state.dynamic_rendering_begin_rendering_info.colorAttachmentCount) {\n    const LogObjectList objlist(commandBuffer, rp_state.VkHandle());\n    skip |= LogError(\"VUID-vkCmdSetRenderingAttachmentLocationsKHR-pLocationInfo-09510\", objlist,\n                     error_obj.location.dot(Field::pLocationInfo).dot(Field::colorAttachmentCount),\n                     \"= %\" PRIu32 \" is not equal to count specified in VkRenderingInfo (%\" PRIu32 \").\",\n                     pLocationInfo->colorAttachmentCount, rp_state.dynamic_rendering_begin_rendering_info.colorAttachmentCount);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkRenderingInputAttachmentIndexInfoKHR-pColorAttachmentInputIndices-09523\", \"Elements of pColorAttachmentInputIndices that are not VK_ATTACHMENT_UNUSED must not take the same value as the content of pDepthInputAttachmentIndex\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (index_info.pDepthInputAttachmentIndex && *index_info.pDepthInputAttachmentIndex != VK_ATTACHMENT_UNUSED &&\n    const Location loc = loc_info.dot(Struct::VkRenderingInputAttachmentIndexInfoKHR, Field::pDepthInputAttachmentIndex, 0);\n    skip |= LogError(\"VUID-VkRenderingInputAttachmentIndexInfoKHR-pColorAttachmentInputIndices-09523\", objlist, loc,\n                     \"= %\" PRIu32 \" have same value as in pColorAttachmentInputIndices[%\" PRIu32 \"] = %\" PRIu32,\n                     *index_info.pDepthInputAttachmentIndex, unique[*index_info.pDepthInputAttachmentIndex],\n                     index_info.pColorAttachmentInputIndices[unique[*index_info.pDepthInputAttachmentIndex]]);\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdSetRenderingInputAttachmentIndicesKHR-pInputAttachmentIndexInfo-09517\", \"pInputAttachmentIndexInfo->colorAttachmentCount must be equal to the value of VkRenderingInfo::colorAttachmentCount used to begin the current render pass instance\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "const LogObjectList objlist(commandBuffer, rp_state.VkHandle());\nconst Location loc = error_obj.location.dot(Struct::VkRenderingInputAttachmentIndexInfoKHR, Field::colorAttachmentCount);\nskip |= LogError(\"VUID-vkCmdSetRenderingInputAttachmentIndicesKHR-pInputAttachmentIndexInfo-09517\", objlist, loc,\n                 \"= %\" PRIu32 \" is not equal to the attachment count the render pass being begun (%\" PRIu32 \")\",\n                 pLocationInfo->colorAttachmentCount, rp_state.create_info.attachmentCount);\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkGraphicsPipelineCreateInfo-pVertexInputState-09198\", \"If the pipeline is being created with vertex input state and pVertexInputState is not dynamic, and VkVertexInputAttributeDescription::format has a 64-bit component, then all Input variables at the corresponding Location in the Vertex Execution Model OpEntryPoint must not use components that are not present in the format\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (attribute_components < input_components) {\n        \"VUID-VkGraphicsPipelineCreateInfo-pVertexInputState-09198\", module_state.handle(),\n        vi_loc.dot(Field::pVertexAttributeDescriptions, location_it.second.attribute_index).dot(Field::format),\n        \"(%s) is a %\" PRIu32 \"-wide 64-bit format, but at location %\" PRIu32 \" the vertex shader input is %\" PRIu32\n        \"-wide 64-bit type (%s). (64-bit vertex input don't have default values and require \"\n        \"components to match what is used in the shader)\",\n        string_VkFormat(attribute_format), attribute_components, location, input_components,\n        module_state.DescribeType(var_base_type_id).c_str());\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkGraphicsPipelineCreateInfo-pStages-00738\", \"If the pipeline requires pre-rasterization shader state and pStages includes a geometry shader stage, and does not include any tessellation shader stages, its shader code must contain an OpExecutionMode instruction specifying an input primitive type that is compatible with the primitive topology specified in pInputAssembly\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "skip |= LogError(\"VUID-VkGraphicsPipelineCreateInfo-pStages-00738\", module_state.handle(), loc,\n                 \"SPIR-V (Geometry stage) expects input topology %s, but pipeline was created with primitive topology %s.\",\n                 string_VkPrimitiveTopology(geom_topology), string_VkPrimitiveTopology(topology));\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-RuntimeSpirv-Location-06272\", \"The sum of Location and the number of locations the variable it decorates consumes must be less than or equal to the value for the matching Execution Model defined in Shader Input and Output Locations\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (max_input_slot.slot >= limits.maxTessellationEvaluationInputComponents) {\n    skip |= LogError(\"VUID-RuntimeSpirv-Location-06272\", module_state.handle(), loc,\n                     \"SPIR-V (Tessellation evaluation stage) input interface variable (%s) \"\n                     \"exceeds component limit maxTessellationEvaluationInputComponents (%\" PRIu32 \").\",\n                     max_input_slot.Describe().c_str(), limits.maxTessellationEvaluationInputComponents);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-RuntimeSpirv-Location-06272\", \"The sum of Location and the number of locations the variable it decorates consumes must be less than or equal to the value for the matching Execution Model defined in Shader Input and Output Locations\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (max_output_slot.Location() >= limits.maxFragmentOutputAttachments) {\n        LogError(\"VUID-RuntimeSpirv-Location-06272\", module_state.handle(), loc,\n                 \"SPIR-V (Fragment stage) output interface variable at Location %\" PRIu32\n                 \" \"\n                 \"exceeds the limit maxFragmentOutputAttachments (%\" PRIu32 \") (note: Location are zero index based).\",\n                 max_output_slot.Location(), limits.maxFragmentOutputAttachments);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-RuntimeSpirv-MeshEXT-07115\", \"For mesh shaders using the MeshEXT Execution Model the OutputVertices OpExecutionMode must be less than or equal to VkPhysicalDeviceMeshShaderPropertiesEXT::maxMeshOutputVertices\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (num_vertices > phys_dev_ext_props.mesh_shader_props_ext.maxMeshOutputVertices) {\n    skip |= LogError(\"VUID-RuntimeSpirv-MeshEXT-07115\", module_state.handle(), loc,\n                     \"SPIR-V (Mesh stage) output vertices count exceeds the \"\n                     \"maxMeshOutputVertices of %\" PRIu32 \" by %\" PRIu32 \".\",\n                     phys_dev_ext_props.mesh_shader_props_ext.maxMeshOutputVertices,\n                     num_vertices - phys_dev_ext_props.mesh_shader_props_ext.maxMeshOutputVertices);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-RuntimeSpirv-OpVariable-08746\", \"Any OpVariable, Block-decorated OpTypeStruct, or Block-decorated OpTypeStruct members shared between the OpEntryPoint of two shader stages must have matching decorations as defined in interface matching\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "const LogObjectList objlist(producer.handle(), consumer.handle());\nskip |= LogError(\"VUID-RuntimeSpirv-OpVariable-08746\", objlist, create_info_loc,\n                 \"(SPIR-V Interface) Mismatch in BuiltIn blocks:\\n %s\", msg.str().c_str());\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkGraphicsPipelineCreateInfo-pStages-00734\", \"If the pipeline requires pre-rasterization shader state and pStages includes tessellation shader stages, the shader code of at least one stage must contain an OpExecutionMode instruction specifying the output patch size in the pipeline\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (tesc_patch_size == vvl::kU32Max && tese_patch_size == vvl::kU32Max) {\n    const LogObjectList objlist(tesc_module_state.handle(), tese_module_state.handle());\n    skip |= LogError(\"VUID-VkGraphicsPipelineCreateInfo-pStages-00734\", objlist, create_info_loc,\n                     \"Output patch size is not specified in either of tessellation stages\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkShaderCreateInfoEXT-stage-08422\", \"If the meshShader feature is not enabled, stage must not be VK_SHADER_STAGE_MESH_BIT_EXT\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (enabled_features.meshShader == VK_FALSE) {\n    skip |= LogError(\"VUID-VkShaderCreateInfoEXT-stage-08422\", device, create_info_loc.dot(Field::stage),\n                     \"is VK_SHADER_STAGE_MESH_BIT_EXT, but the meshShader feature was not enabled.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkShaderCreateInfoEXT-nextStage-08428\", \"If the tessellationShader feature is not enabled, nextStage must not include VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT or VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (enabled_features.tessellationShader == VK_FALSE &&\n    (create_info.nextStage == VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT ||\n     create_info.nextStage == VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT)) {\n    skip |= LogError(\"VUID-VkShaderCreateInfoEXT-nextStage-08428\", device, create_info_loc.dot(Field::nextStage),\n                     \"is %s, but tessellationShader feature was not enabled.\",\n                     string_VkShaderStageFlags(create_info.nextStage).c_str());\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkShaderCreateInfoEXT-nextStage-08431\", \"If stage is VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT, nextStage must not include any bits other than VK_SHADER_STAGE_GEOMETRY_BIT and VK_SHADER_STAGE_FRAGMENT_BIT\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((createInfo.nextStage & ~(VK_SHADER_STAGE_GEOMETRY_BIT | VK_SHADER_STAGE_FRAGMENT_BIT)) != 0) {\n    skip |= LogError(\"VUID-VkShaderCreateInfoEXT-nextStage-08431\", device, create_info_loc.dot(Field::stage),\n                     \"is VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT, but nextStage is %s.\",\n                     string_VkShaderStageFlags(createInfo.nextStage).c_str());\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkShaderCreateInfoEXT-nextStage-08435\", \"If stage is VK_SHADER_STAGE_TASK_BIT_EXT, nextStage must not include any bits other than VK_SHADER_STAGE_MESH_BIT_EXT\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (create_info.stage == VK_SHADER_STAGE_TASK_BIT_EXT && (create_info.nextStage & ~VK_SHADER_STAGE_MESH_BIT_EXT) > 0) {\n    skip |= LogError(\"VUID-VkShaderCreateInfoEXT-nextStage-08435\", device, create_info_loc.dot(Field::stage),\n                     \"is VK_SHADER_STAGE_TASK_BIT_EXT, but nextStage is %s.\",\n                     string_VkShaderStageFlags(create_info.nextStage).c_str());\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkShaderCreateInfoEXT-flags-09405\", \"If flags includes VK_SHADER_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT, the computeFullSubgroups feature must be enabled\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((create_info.flags & VK_SHADER_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT) != 0 &&\n        \"VUID-VkShaderCreateInfoEXT-flags-09405\", device, create_info_loc.dot(Field::flags),\n        \"contains VK_SHADER_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT, but computeFullSubgroups feature is not enabled.\");\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCreateShadersEXT-pCreateInfos-08411\", \"The codeType member of all elements of pCreateInfos whose flags member includes VK_SHADER_CREATE_LINK_STAGE_BIT_EXT must be the same\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (linked_spirv_index != invalid && linked_binary_index != invalid) {\n    skip |= LogError(\"VUID-vkCreateShadersEXT-pCreateInfos-08411\", device, loc.dot(Field::pCreateInfos, linked_spirv_index),\n                     \"is a linked shader with codeType VK_SHADER_CODE_TYPE_SPIRV_EXT, but pCreateInfos[%\" PRIu32\n                     \"] is a linked shader with codeType VK_SHADER_CODE_TYPE_BINARY_EXT.\",\n                     linked_binary_index);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkShaderCreateInfoEXT-codeType-08874\", \"If codeType is VK_SHADER_CODE_TYPE_SPIRV_EXT, and stage is VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT, pCode must contain an OpExecutionMode instruction specifying the spacing of segments on the edges of tessellated primitives\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (stage_state.entrypoint->execution_mode.tessellation_spacing == 0) {\n    skip |= LogError(\"VUID-VkShaderCreateInfoEXT-codeType-08874\", device, create_info_loc.dot(Field::stage),\n                     \"is VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT, but spacing is not specified.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCreateShadersEXT-pCreateInfos-08870\", \"If pCreateInfos contains elements with both VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT and VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT, both elements' flags include VK_SHADER_CREATE_LINK_STAGE_BIT_EXT, both elements' codeType is VK_SHADER_CODE_TYPE_SPIRV_EXT, and the VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT stage's pCode contains an OpExecutionMode instruction specifying the spacing of segments on the edges of tessellated primitives, it must match the segment spacing specified in the VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT stage\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (tesc_linked_spacing != 0 && tese_linked_spacing != 0 && tesc_linked_spacing != tese_linked_spacing) {\n    skip |= LogError(\"VUID-vkCreateShadersEXT-pCreateInfos-08870\", device, error_obj.location,\n                     \"The spacing specified in tessellation control shader (%s) does not match the spacing in \"\n                     \"tessellation evaluation shader (%s).\",\n                     string_SpvExecutionMode(tesc_linked_spacing), string_SpvExecutionMode(tese_linked_spacing));\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdBindShadersEXT-pShaders-08474\", \"If the tessellationShader feature is not enabled, and pStages contains VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT or VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT, and pShaders is not NULL, the same index or indices in pShaders must be VK_NULL_HANDLE\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "LogError(\"VUID-vkCmdBindShadersEXT-pShaders-08474\", commandBuffer, stage_loc,\n         \"is %s and pShaders[%\" PRIu32 \"] is not VK_NULL_HANDLE, but tessellationShader feature was not enabled.\",\n         string_VkShaderStageFlagBits(stage), i);\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdBindShadersEXT-pShaders-08490\", \"If the taskShader feature is not enabled, and pStages contains VK_SHADER_STAGE_TASK_BIT_EXT, and pShaders is not NULL, the same index in pShaders must be VK_NULL_HANDLE\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (stage == VK_SHADER_STAGE_TASK_BIT_EXT && enabled_features.taskShader == VK_FALSE && shader != VK_NULL_HANDLE) {\n    skip |= LogError(\"VUID-vkCmdBindShadersEXT-pShaders-08490\", commandBuffer, stage_loc,\n                     \"is %s and pShaders[%\" PRIu32 \"] is not VK_NULL_HANDLE, but taskShader feature was not enabled.\",\n                     string_VkShaderStageFlagBits(stage), i);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdBindShadersEXT-pStages-08468\", \"pStages must not contain VK_SHADER_STAGE_CLUSTER_CULLING_BIT_HUAWEI\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (stage == VK_SHADER_STAGE_CLUSTER_CULLING_BIT_HUAWEI) {\n    skip |= LogError(\"VUID-vkCmdBindShadersEXT-pStages-08468\", commandBuffer, stage_loc, \"is %s.\",\n                     string_VkShaderStageFlagBits(stage));\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkGraphicsPipelineCreateInfo-renderPass-06038\", \"If renderPass is not VK_NULL_HANDLE and the pipeline is being created with fragment shader state the fragment shader must not read from any input attachment that is defined as VK_ATTACHMENT_UNUSED in subpass\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!input_attachments) {\n    const LogObjectList objlist(module_state.handle(), rp_state->Handle());\n    skip |= LogError(\"VUID-VkGraphicsPipelineCreateInfo-renderPass-06038\", objlist, loc,\n                     \"SPIR-V consumes input attachment index %\" PRIu32 \" but pSubpasses[%\" PRIu32\n                     \"].pInputAttachments is NULL.\",\n                     input_attachment_index, subpass);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkComputePipelineCreateInfo-layout-07987\", \"If a push constant block is declared in a shader, a push constant range in layout must match the shader stage\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "vuid = \"VUID-VkGraphicsPipelineCreateInfo-layout-07987\";\nvuid = \"VUID-VkComputePipelineCreateInfo-layout-07987\";\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-RuntimeSpirv-None-06275\", \"shaderSubgroupExtendedTypes must be enabled for group operations to use 8-bit integer, 16-bit integer, 64-bit integer, 16-bit floating-point, and vectors of these types\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!enabled_features.shaderSubgroupExtendedTypes) {\n        \"VUID-RuntimeSpirv-None-06275\", module_state.handle(), loc,\n        \"VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures::shaderSubgroupExtendedTypes was not enabled\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-RuntimeSpirv-OpTypeCooperativeMatrixNV-06322\", \"OpTypeCooperativeMatrixNV and OpCooperativeMatrix* instructions must not be used in shader stages not included in VkPhysicalDeviceCooperativeMatrixPropertiesNV::cooperativeMatrixSupportedStages\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!(entrypoint.stage & phys_dev_ext_props.cooperative_matrix_props.cooperativeMatrixSupportedStages)) {\n        \"VUID-RuntimeSpirv-OpTypeCooperativeMatrixNV-06322\", module_state.handle(), loc,\n        \"SPIR-V contains OpTypeCooperativeMatrixNV used in shader stage %s but is not in cooperativeMatrixSupportedStages \"\n        \"(%s)\",\n        string_VkShaderStageFlagBits(entrypoint.stage),\n        string_VkShaderStageFlags(phys_dev_ext_props.cooperative_matrix_props.cooperativeMatrixSupportedStages).c_str());\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-RuntimeSpirv-OpCooperativeMatrixMulAddKHR-10060\", \"For OpCooperativeMatrixMulAddKHR, the operands must match a supported VkCooperativeMatrixPropertiesKHR\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (r.is_signed_int && ((flags & spv::CooperativeMatrixOperandsMatrixResultSignedComponentsKHRMask) == 0)) {\n    skip |= LogError(\"VUID-RuntimeSpirv-OpCooperativeMatrixMulAddKHR-10060\", module_state.handle(), loc,\n                     \"SPIR-V (%s) Component type of matrix Result is signed integer type, but \"\n                     \"MatrixResultSignedComponents flag is not \"\n                     \"present in flags (%s).\",\n                     string_VkShaderStageFlagBits(entrypoint.stage),\n                     string_SpvCooperativeMatrixOperands(flags).c_str());\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-RuntimeSpirv-OpCooperativeMatrixMulAddKHR-10060\", \"For OpCooperativeMatrixMulAddKHR, the operands must match a supported VkCooperativeMatrixPropertiesKHR\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "skip |= LogError(\"VUID-RuntimeSpirv-OpCooperativeMatrixMulAddKHR-10060\", module_state.handle(), loc,\n                 \"SPIR-V (%s) instruction\\n%s (%s)\\ndoesn't match a supported matrix \"\n                 \"VkCooperativeMatrixPropertiesKHR for B type\\n%s\",\n                 string_VkShaderStageFlagBits(entrypoint.stage), insn.Describe().c_str(),\n                 b.Describe().c_str(), print_properties().c_str());\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-RuntimeSpirv-OpTypeCooperativeMatrixMulAddNV-10059\", \"For OpTypeCooperativeMatrixMulAddNV, the operands must match a supported VkCooperativeMatrixPropertiesNV, such that: The type of A must have Rows match VkCooperativeMatrixPropertiesNV::MSize, Columns match VkCooperativeMatrixPropertiesNV::KSize, and ComponentType match VkCooperativeMatrixPropertiesNV::AType. The type of B must have Rows match VkCooperativeMatrixPropertiesNV::KSize, Columns match VkCooperativeMatrixPropertiesNV::NSize, and ComponentType match VkCooperativeMatrixPropertiesNV::BType. The type of C must have Rows match VkCooperativeMatrixPropertiesNV::MSize, Columns match VkCooperativeMatrixPropertiesNV::NSize, and ComponentType match VkCooperativeMatrixPropertiesNV::CType. The type of Result must have Rows match VkCooperativeMatrixPropertiesNV::MSize, Columns match VkCooperativeMatrixPropertiesNV::NSize, and ComponentType match VkCooperativeMatrixPropertiesNV::DType. The scope of all cooperative matrix operands must be VkScopeNV::VK_SCOPE_SUBGROUP_NV. If ComponentType of A, B, C, or Result is a signed integral type, the Signedness operand of the OpTypeInt must be 1. If ComponentType of A, B, C, or Result is an unsigned integral type, the Signedness operand of the OpTypeInt must be 0.\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!valid_a) {\n        \"VUID-RuntimeSpirv-OpTypeCooperativeMatrixMulAddNV-10059\", module_state.handle(), loc,\n        \"SPIR-V (%s) OpCooperativeMatrixMulAddNV (result id = %u) operands don't match a supported matrix \"\n        \"VkCooperativeMatrixPropertiesNV for A type (%s).\",\n        string_VkShaderStageFlagBits(entrypoint.stage), insn.Word(2), a.Describe().c_str());\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-RuntimeSpirv-shaderFloat16VectorAtomics-09581\", \"shaderFloat16VectorAtomics, must be enabled for 16-bit floating-point, 2- and 4-component vector atomic operations to be supported\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!valid_16_float_vector) {\n    skip |= LogError(\"VUID-RuntimeSpirv-shaderFloat16VectorAtomics-09581\", module_state.handle(), loc,\n                     \"SPIR-V is using 16-bit float vector atomics operations\\n%s\\nwith %s storage class, but \"\n                     \"shaderFloat16VectorAtomics was not enabled.\",\n                     atomic_def->Describe().c_str(), string_SpvStorageClass(atomic.storage_class));\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-RuntimeSpirv-None-06337\", \"shaderBufferFloat16Atomics, or shaderBufferFloat16AtomicAdd, or shaderBufferFloat16AtomicMinMax, or shaderSharedFloat16Atomics, or shaderSharedFloat16AtomicAdd, or shaderSharedFloat16AtomicMinMax must be enabled for 16-bit floating-point atomic operations\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((atomic.bit_width == 16) && (enabled_features.shaderBufferFloat16AtomicAdd == VK_FALSE)) {\n    skip |= LogError(\"VUID-RuntimeSpirv-None-06337\", module_state.handle(), loc,\n                     \"SPIR-V is using 16-bit float atomics for add operations\\n%s\\nwith \"\n                     \"StorageBuffer storage class, but shaderBufferFloat16AtomicAdd was not enabled.\",\n                     atomic_def->Describe().c_str());\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-RuntimeSpirv-None-06337\", \"shaderBufferFloat16Atomics, or shaderBufferFloat16AtomicAdd, or shaderBufferFloat16AtomicMinMax, or shaderSharedFloat16Atomics, or shaderSharedFloat16AtomicAdd, or shaderSharedFloat16AtomicMinMax must be enabled for 16-bit floating-point atomic operations\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "\"VUID-RuntimeSpirv-None-06337\", module_state.handle(), loc,\n\"SPIR-V is using 16-bit float atomics operations\\n%s\\n but none of the required features were enabled.\",\natomic_def->Describe().c_str());\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-RuntimeSpirv-None-06338\", \"shaderBufferFloat32Atomics, or shaderBufferFloat32AtomicAdd, or shaderSharedFloat32Atomics, or shaderSharedFloat32AtomicAdd, or shaderImageFloat32Atomics, or shaderImageFloat32AtomicAdd or shaderBufferFloat32AtomicMinMax, or shaderSharedFloat32AtomicMinMax, or shaderImageFloat32AtomicMinMax must be enabled for 32-bit floating-point atomic operations\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "skip |= LogError(\"VUID-RuntimeSpirv-None-06338\", module_state.handle(), loc,\n                 \"SPIR-V is using 32-bit float atomics for add operations\\n%s\\nwith Workgroup \"\n                 \"storage class, but shaderSharedFloat32AtomicAdd was not enabled.\",\n                 atomic_def->Describe().c_str());\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-RuntimeSpirv-None-06339\", \"shaderBufferFloat64Atomics, or shaderBufferFloat64AtomicAdd, or shaderSharedFloat64Atomics, or shaderSharedFloat64AtomicAdd, or shaderBufferFloat64AtomicMinMax, or shaderSharedFloat64AtomicMinMax, must be enabled for 64-bit floating-point atomic operations\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "skip |= LogError(\"VUID-RuntimeSpirv-None-06339\", module_state.handle(), loc,\n                 \"SPIR-V is using 64-bit float atomics for min/max operations\\n%s\\nwith \"\n                 \"StorageBuffer storage class, but shaderBufferFloat64AtomicMinMax was not enabled.\",\n                 atomic_def->Describe().c_str());\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-RuntimeSpirv-None-06339\", \"shaderBufferFloat64Atomics, or shaderBufferFloat64AtomicAdd, or shaderSharedFloat64Atomics, or shaderSharedFloat64AtomicAdd, or shaderBufferFloat64AtomicMinMax, or shaderSharedFloat64AtomicMinMax, must be enabled for 64-bit floating-point atomic operations\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "\"VUID-RuntimeSpirv-None-06339\", module_state.handle(), loc,\n\"SPIR-V is using 64-bit float atomics operations\\n%s\\n but snone of the required features were enabled.\",\natomic_def->Describe().c_str());\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-RuntimeSpirv-shaderSignedZeroInfNanPreserveFloat64-06295\", \"If shaderSignedZeroInfNanPreserveFloat64 is VK_FALSE, then SignedZeroInfNanPreserve for 64-bit floating-point type must not be used\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "!phys_dev_props_core12.shaderSignedZeroInfNanPreserveFloat64) {\nskip |= LogError(\"VUID-RuntimeSpirv-shaderSignedZeroInfNanPreserveFloat64-06295\", module_state.handle(), loc,\n          \"SPIR-V requires SignedZeroInfNanPreserve for bit width 64 but it is not enabled on the device.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-RuntimeSpirv-shaderDenormFlushToZeroFloat32-06300\", \"If shaderDenormFlushToZeroFloat32 is VK_FALSE, then DenormFlushToZero for 32-bit floating-point type must not be used\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "skip |= LogError(\"VUID-RuntimeSpirv-shaderDenormFlushToZeroFloat16-06299\", module_state.handle(), loc,\n} else if (has_denorm_flush_to_zero_width_32 && !phys_dev_props_core12.shaderDenormFlushToZeroFloat32) {\nskip |= LogError(\"VUID-RuntimeSpirv-shaderDenormFlushToZeroFloat32-06300\", module_state.handle(), loc,\n                 \"SPIR-V requires DenormFlushToZero for bit width 32 but it is not enabled on the device.\");\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-RuntimeSpirv-shaderRoundingModeRTZFloat16-06305\", \"If shaderRoundingModeRTZFloat16 is VK_FALSE, then RoundingModeRTZ for 16-bit floating-point type must not be used\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (has_rounding_mode_rtz_width_16 && !phys_dev_props_core12.shaderRoundingModeRTZFloat16) {\n    skip |= LogError(\"VUID-RuntimeSpirv-shaderRoundingModeRTZFloat16-06305\", module_state.handle(), loc,\n                     \"SPIR-V requires RoundingModeRTZ for bit width 16 but it is not enabled on the device.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-RuntimeSpirv-shaderSignedZeroInfNanPreserveFloat64-09563\", \"If shaderSignedZeroInfNanPreserveFloat64 is VK_FALSE then any FPFastMathDefault execution mode with a type of 64-bit float must include the NSZ, NotInf, and NotNaN flags\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "} else if (bit_width == 64 && !phys_dev_props_core12.shaderSignedZeroInfNanPreserveFloat64) {\n    skip |= LogError(\"VUID-RuntimeSpirv-shaderSignedZeroInfNanPreserveFloat64-09563\", module_state.handle(), loc,\n                     \"shaderSignedZeroInfNanPreserveFloat64 is false, but FPFastMathDefault is setting 64-bit floats \"\n                     \"with modes 0x%\" PRIx32 \".\",\n                     fast_math_mode->GetConstantValue());\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-RuntimeSpirv-LocalSizeId-06434\", \"If Execution Mode LocalSizeId is used, maintenance4 must be enabled\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!IsExtEnabled(device_extensions.vk_khr_maintenance4)) {\n    skip |= LogError(\"VUID-RuntimeSpirv-LocalSizeId-06434\", module_state.handle(), loc,\n                     \"SPIR-V OpExecutionMode LocalSizeId is used but maintenance4 extension is not enabled and used \"\n                     \"Vulkan api version is 1.2 or less.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkShaderCreateInfoEXT-pCode-08455\", \"If codeType is VK_SHADER_CODE_TYPE_SPIRV_EXT, and stage is VK_SHADER_STAGE_GEOMETRY_BIT, the identified entry point must have an OpExecutionMode instruction specifying an invocation count that is greater than 0 and less than or equal to VkPhysicalDeviceLimits::maxGeometryShaderInvocations\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (invocations == 0 || invocations > phys_dev_props.limits.maxGeometryShaderInvocations) {\n        pipeline ? \"VUID-VkPipelineShaderStageCreateInfo-stage-00715\" : \"VUID-VkShaderCreateInfoEXT-pCode-08455\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkGraphicsPipelineCreateInfo-TessellationEvaluation-07724\", \"If the pipeline is being created with a TessellationEvaluation Execution Model, no Geometry Execution Model, uses the PointMode Execution Mode, and shaderTessellationAndGeometryPointSize is not enabled, a PointSize decorated variable must not be written to\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "LogError(\"VUID-VkGraphicsPipelineCreateInfo-TessellationEvaluation-07724\", module_state.handle(), loc,\n         \"SPIR-V (Tessellation Evaluation stage) PointSize is written to, shaderTessellationAndGeometryPointSize \"\n         \"was not enabled (gl_PointSize must NOT be written and a default of 1.0 is assumed).\");\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-RuntimeSpirv-XfbStride-06313\", \"The XFB Stride value to XfbStride must be less than or equal to VkPhysicalDeviceTransformFeedbackPropertiesEXT::maxTransformFeedbackBufferDataStride\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (stride > phys_dev_ext_props.transform_feedback_props.maxTransformFeedbackBufferDataStride) {\n    skip |= LogError(\"VUID-RuntimeSpirv-XfbStride-06313\", module_state.handle(), loc,\n                     \"SPIR-V uses transform feedback with xfb_stride (%\" PRIu32\n                     \") greater than maxTransformFeedbackBufferDataStride (%\" PRIu32 \").\",\n                     stride, phys_dev_ext_props.transform_feedback_props.maxTransformFeedbackBufferDataStride);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-RuntimeSpirv-maxMeshSharedMemorySize-08754\", \"The sum of size in bytes for variables and padding in the Workgroup Storage Class in the MeshEXT Execution Model must be less than or equal to maxMeshSharedMemorySize\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (total_workgroup_shared_memory > phys_dev_ext_props.mesh_shader_props_ext.maxMeshSharedMemorySize) {\n    skip |= LogError(\"VUID-RuntimeSpirv-maxMeshSharedMemorySize-08754\", module_state.handle(), loc,\n                     \"SPIR-V uses %\" PRIu32\n                     \" bytes of shared memory, which is more than maxMeshSharedMemorySize (%\" PRIu32 \").\",\n                     total_workgroup_shared_memory, phys_dev_ext_props.mesh_shader_props_ext.maxMeshSharedMemorySize);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-RuntimeSpirv-storagePushConstant8-06330\", \"If storagePushConstant8 is VK_FALSE, then objects containing an 8-bit integer element must not have Storage Class of PushConstant\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!enabled_features.storagePushConstant8 && storage_class == spv::StorageClassPushConstant) {\n    skip |= LogError(\"VUID-RuntimeSpirv-storagePushConstant8-06330\", module_state.handle(), loc,\n                     \"SPIR-V contains an 8-bit \"\n                     \"OpVariable with PushConstant Storage Class, but storagePushConstant8 was not enabled.\\n%s\\n\",\n                     insn->Describe().c_str());\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-RuntimeSpirv-NonWritable-06340\", \"If fragmentStoresAndAtomics is not enabled, then all storage image, storage texel buffer, and storage buffer variables in the fragment stage must be decorated with the NonWritable decoration\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!enabled_features.fragmentStoresAndAtomics) {\n    skip |= LogError(\"VUID-RuntimeSpirv-NonWritable-06340\", module_state.handle(), loc,\n                     \"SPIR-V (VK_SHADER_STAGE_FRAGMENT_BIT) uses descriptor %s (type %s) which is not \"\n                     \"marked with NonWritable, but fragmentStoresAndAtomics was not enabled.\",\n                     variable.DescribeDescriptor().c_str(),\n                     string_DescriptorTypeSet(descriptor_type_set).c_str());\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-RuntimeSpirv-OpEmitStreamVertex-06310\", \"The Stream value to OpEmitStreamVertex and OpEndStreamPrimitive must be less than VkPhysicalDeviceTransformFeedbackPropertiesEXT::maxTransformFeedbackStreams\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (stream >= phys_dev_ext_props.transform_feedback_props.maxTransformFeedbackStreams) {\n    skip |= LogError(\"VUID-RuntimeSpirv-OpEmitStreamVertex-06310\", module_state.handle(), loc,\n                     \"SPIR-V uses transform feedback stream\\n%s\\nwith index %\" PRIu32\n                     \", which is not less than maxTransformFeedbackStreams (%\" PRIu32 \").\",\n                     insn->Describe().c_str(), stream,\n                     phys_dev_ext_props.transform_feedback_props.maxTransformFeedbackStreams);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-RuntimeSpirv-OpImageSample-06436\", \"If an OpImageSample* or OpImageFetch* operation has an image operand of ConstOffset then the offset value must be less than or equal to maxTexelOffset\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "skip |= LogError(\"VUID-RuntimeSpirv-OpImageSample-06436\", module_state.handle(), loc,\n                 \"SPIR-V uses\\n%s\\nwith offset (%\" PRIu32\n                 \") greater than VkPhysicalDeviceLimits::maxTexelOffset (%\" PRIu32 \").\",\n                 insn.Describe().c_str(), offset, phys_dev_props.limits.maxTexelOffset);\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkGraphicsPipelineCreateInfo-pStages-08711\", \"If pStages includes a fragment shader stage, VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE is not set in VkPipelineDynamicStateCreateInfo::pDynamicStates, and the fragment shader declares the EarlyFragmentTests execution mode and uses OpDepthAttachmentReadEXT, the depthWriteEnable member of VkPipelineDepthStencilStateCreateInfo must be VK_FALSE\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (mode_early_fragment_test && write_enabled) {\n    skip |= LogError(\"VUID-VkGraphicsPipelineCreateInfo-pStages-08711\", module_state.handle(), loc,\n                     \"SPIR-V (Fragment stage) contains OpDepthAttachmentReadEXT, and depthWriteEnable is not false.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-RuntimeSpirv-shaderTileImageColorReadAccess-08728\", \"If shaderTileImageColorReadAccess is not enabled, OpColorAttachmentReadEXT operation must not be used\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (module_state.static_data_.has_shader_tile_image_color_read && !enabled_features.shaderTileImageColorReadAccess) {\n    skip |= LogError(\"VUID-RuntimeSpirv-shaderTileImageColorReadAccess-08728\", module_state.handle(), loc,\n                     \"shaderTileImageColorReadAccess was not enabled\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkSpecializationMapEntry-constantID-00776\", \"For a constantID specialization constant declared in a shader, size must match the byte size of the constantID. If the specialization constant is of type boolean, size must be the byte size of VkBool32\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "skip |= LogError(\"VUID-VkSpecializationMapEntry-constantID-00776\", device, loc,\n                 \"specialization constant (ID = %\" PRIu32 \", entry = %\" PRIu32\n                 \") has invalid size %zu in %s. Expected size is %\" PRIu32 \" from shader definition.\",\n                 map_entry.constantID, spec_id, map_entry.size, FormatHandle(module_state.handle()).c_str(),\n                 spec_const_size);\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkGraphicsPipelineCreateInfo-renderPass-06061\", \"If the dynamicRenderingLocalRead feature is not enabled, the pipeline requires fragment shader state, and renderPass is VK_NULL_HANDLE, fragment shaders in pStages must not include the InputAttachment capability\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (stage == VK_SHADER_STAGE_FRAGMENT_BIT && pipeline->GraphicsCreateInfo().renderPass == VK_NULL_HANDLE &&\n    skip |= LogError(\"VUID-VkGraphicsPipelineCreateInfo-renderPass-06061\", device, loc,\n                     \"is being created with fragment shader state and renderPass = VK_NULL_HANDLE, but fragment \"\n                     \"shader includes InputAttachment capability.\");\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkShaderModuleCreateInfo-codeSize-08735\", \"If pCode is a pointer to SPIR-V code, codeSize must be a multiple of 4\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "} else if (SafeModulo(create_info.codeSize, 4) != 0) {\n    skip |= LogError(\"VUID-VkShaderModuleCreateInfo-codeSize-08735\", device, create_info_loc.dot(Field::codeSize),\n                     \"(%zu) must be a multiple of 4.\", create_info.codeSize);\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkPipelineShaderStageCreateInfo-pNext-02756\", \"If a VkPipelineShaderStageRequiredSubgroupSizeCreateInfo structure is included in the pNext chain and stage is VK_SHADER_STAGE_COMPUTE_BIT, VK_SHADER_STAGE_MESH_BIT_EXT, or VK_SHADER_STAGE_TASK_BIT_EXT, the local workgroup size of the shader must be less than or equal to the product of VkPipelineShaderStageRequiredSubgroupSizeCreateInfo::requiredSubgroupSize and maxComputeWorkgroupSubgroups\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((invocations > required_subgroup_size * phys_dev_ext_props.subgroup_size_control_props.maxComputeWorkgroupSubgroups)) {\n    skip |= LogError(\"VUID-VkPipelineShaderStageCreateInfo-pNext-02756\", module_state.handle(), loc,\n                     \"SPIR-V Local workgroup size (%\" PRIu32 \", %\" PRIu32 \", %\" PRIu32\n                     \") is greater than requiredSubgroupSize (%\" PRIu32 \") * maxComputeWorkgroupSubgroups (%\" PRIu32 \").\",\n                     local_size_x, local_size_y, local_size_z, required_subgroup_size,\n                     phys_dev_ext_props.subgroup_size_control_props.maxComputeWorkgroupSubgroups);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-RuntimeSpirv-x-06429\", \"In compute shaders using the GLCompute Execution Model the x size in LocalSize or LocalSizeId must be less than or equal to VkPhysicalDeviceLimits::maxComputeWorkGroupSize[0]\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (local_size_x > phys_dev_props.limits.maxComputeWorkGroupSize[0]) {\n    skip |= LogError(\"VUID-RuntimeSpirv-x-06429\", module_state.handle(), loc,\n                     \"SPIR-V LocalSize X (%\" PRIu32 \") exceeds device limit maxComputeWorkGroupSize[0] (%\" PRIu32 \").\",\n                     local_size_x, phys_dev_props.limits.maxComputeWorkGroupSize[0]);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkShaderCreateInfoEXT-flags-08416\", \"If flags includes both VK_SHADER_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT and VK_SHADER_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT, the local workgroup size in the X dimension of the shader must be a multiple of maxSubgroupSize\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (SafeModulo(local_size_x, phys_dev_ext_props.subgroup_size_control_props.maxSubgroupSize) != 0) {\n        \"VUID-VkShaderCreateInfoEXT-flags-08416\", module_state.handle(), loc.dot(Field::flags),\n        \"(%s) but local workgroup size X dimension (%\" PRIu32\n        \") is not a multiple of VkPhysicalDeviceSubgroupSizeControlPropertiesEXT::maxSubgroupSize (%\" PRIu32 \").\",\n        string_VkPipelineShaderStageCreateFlags(stage_state.shader_object_create_info->flags).c_str(), local_size_x,\n        phys_dev_ext_props.subgroup_size_control_props.maxSubgroupSize);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-RuntimeSpirv-TaskEXT-07294\", \"In task shaders using the TaskEXT Execution Model the product of x size, y size, and z size in LocalSize or LocalSizeId must be less than or equal to VkPhysicalDeviceMeshShaderPropertiesEXT::maxTaskWorkGroupInvocations\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "x_vuid = \"VUID-RuntimeSpirv-TaskEXT-07291\";\ny_vuid = \"VUID-RuntimeSpirv-TaskEXT-07292\";\nz_vuid = \"VUID-RuntimeSpirv-TaskEXT-07293\";\nworkgroup_size_vuid = \"VUID-RuntimeSpirv-TaskEXT-07294\";\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkVideoInlineQueryInfoKHR-queryPool-08372\", \"If queryPool is not VK_NULL_HANDLE, then firstQuery must be less than the number of queries in queryPool\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (query_info.firstQuery >= query_pool_state.create_info.queryCount) {\n    skip |= LogError(\"VUID-VkVideoInlineQueryInfoKHR-queryPool-08372\", query_pool_state.Handle(), loc.dot(Field::firstQuery),\n                     \"(%u) is greater than or equal to the number of queries (%u) in %s.\", query_info.firstQuery,\n                     query_pool_state.create_info.queryCount, FormatHandle(query_pool_state).c_str());\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkVideoEncodeRateControlInfoKHR-rateControlMode-08244\", \"If rateControlMode is not VK_VIDEO_ENCODE_RATE_CONTROL_MODE_DEFAULT_KHR, then it must specify one of the bits included in VkVideoEncodeCapabilitiesKHR::rateControlModes, as returned by vkGetPhysicalDeviceVideoCapabilitiesKHR for the used video profile\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((profile_caps.encode.rateControlModes & rc_info.rateControlMode) == 0) {\n    const LogObjectList objlist(cmdbuf, vs_state.Handle());\n        LogError(\"VUID-VkVideoEncodeRateControlInfoKHR-rateControlMode-08244\", objlist,\n                 rc_info_loc.dot(Field::rateControlMode), \"(%s) is not supported by the video profile %s was created with.\",\n                 string_VkVideoEncodeRateControlModeFlagBitsKHR(rc_info.rateControlMode), FormatHandle(vs_state).c_str());\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkVideoEncodeH264RateControlInfoKHR-flags-08282\", \"If flags contains VK_VIDEO_ENCODE_H264_RATE_CONTROL_REFERENCE_PATTERN_FLAT_BIT_KHR, then it must not also contain VK_VIDEO_ENCODE_H264_RATE_CONTROL_REFERENCE_PATTERN_DYADIC_BIT_KHR\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (rc_info_h264->flags & VK_VIDEO_ENCODE_H264_RATE_CONTROL_REFERENCE_PATTERN_FLAT_BIT_KHR &&\n    rc_info_h264->flags & VK_VIDEO_ENCODE_H264_RATE_CONTROL_REFERENCE_PATTERN_DYADIC_BIT_KHR) {\n    skip |= LogError(\"VUID-VkVideoEncodeH264RateControlInfoKHR-flags-08282\", cmdbuf, rc_info_h264_loc.dot(Field::flags),\n                     \"(%s) indicates conflicting reference patterns.\",\n                     string_VkVideoEncodeH264RateControlFlagsKHR(rc_info_h264->flags).c_str());\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkVideoEncodeH265RateControlInfoKHR-flags-08291\", \"If VkVideoEncodeH265CapabilitiesKHR::flags, as returned by vkGetPhysicalDeviceVideoCapabilitiesKHR for the used video profile, does not include VK_VIDEO_ENCODE_H265_CAPABILITY_HRD_COMPLIANCE_BIT_KHR, then flags must not contain VK_VIDEO_ENCODE_H265_RATE_CONTROL_ATTEMPT_HRD_COMPLIANCE_BIT_KHR\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (rc_info_h265->flags & VK_VIDEO_ENCODE_H265_RATE_CONTROL_ATTEMPT_HRD_COMPLIANCE_BIT_KHR &&\n    (profile_caps.encode_h265.flags & VK_VIDEO_ENCODE_H265_CAPABILITY_HRD_COMPLIANCE_BIT_KHR) == 0) {\n    const LogObjectList objlist(cmdbuf, vs_state.Handle());\n    skip |= LogError(\"VUID-VkVideoEncodeH265RateControlInfoKHR-flags-08291\", objlist, rc_info_h265_loc.dot(Field::flags),\n                     \"includes VK_VIDEO_ENCODE_H265_RATE_CONTROL_ATTEMPT_HRD_COMPLIANCE_BIT_KHR but HRD compliance \"\n                     \"is not supported by the H.265 encode profile %s was created with.\",\n                     FormatHandle(vs_state).c_str());\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkVideoEncodeH265RateControlInfoKHR-consecutiveBFrameCount-08296\", \"If consecutiveBFrameCount is not 0, then it must be less than gopFrameCount\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (rc_info_h265->consecutiveBFrameCount != 0 && rc_info_h265->consecutiveBFrameCount >= rc_info_h265->gopFrameCount) {\n        LogError(\"VUID-VkVideoEncodeH265RateControlInfoKHR-consecutiveBFrameCount-08296\", cmdbuf,\n                 rc_info_h265_loc.dot(Field::consecutiveBFrameCount),\n                 \"(%u) is greater than or equal to the GOP size specified in %s (%u).\", rc_info_h265->consecutiveBFrameCount,\n                 rc_info_h265_loc.dot(Field::gopFrameCount).Fields().c_str(), rc_info_h265->gopFrameCount);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkVideoEncodeRateControlInfoKHR-rateControlMode-08278\", \"If rateControlMode is VK_VIDEO_ENCODE_RATE_CONTROL_MODE_VBR_BIT_KHR, then for each element of pLayers, its averageBitrate member must be less than or equal to its maxBitrate member\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (rc_info.rateControlMode == VK_VIDEO_ENCODE_RATE_CONTROL_MODE_VBR_BIT_KHR &&\n        LogError(\"VUID-VkVideoEncodeRateControlInfoKHR-rateControlMode-08278\", cmdbuf, rc_info_loc.dot(Field::rateControlMode),\n                 \"is VK_VIDEO_ENCODE_RATE_CONTROL_MODE_VBR_BIT_KHR but averageBitrate (%\" PRIu64\n                 \") is greater than maxBitrate (%\" PRIu64 \") in %s.\",\n                 rc_layer_info.averageBitrate, rc_layer_info.maxBitrate, rc_layer_info_loc.Fields().c_str());\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkVideoEncodeH264RateControlLayerInfoKHR-useMinQp-08288\", \"If useMinQp is VK_TRUE and VkVideoEncodeH264CapabilitiesKHR::flags, as returned by vkGetPhysicalDeviceVideoCapabilitiesKHR for the used video profile, does not include VK_VIDEO_ENCODE_H264_CAPABILITY_PER_PICTURE_TYPE_MIN_MAX_QP_BIT_KHR, then the qpI, qpP, and qpB members of minQp must all specify the same value\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "cmdbuf, vs_state, *rc_layer_info_h264, \"VUID-VkVideoEncodeH264RateControlLayerInfoKHR-useMinQp-08286\",\n\"VUID-VkVideoEncodeH264RateControlLayerInfoKHR-useMaxQp-08287\", profile_caps.encode_h264.minQp,\nprofile_caps.encode_h264.maxQp, \"VUID-VkVideoEncodeH264RateControlLayerInfoKHR-useMinQp-08288\",\n\"VUID-VkVideoEncodeH264RateControlLayerInfoKHR-useMaxQp-08289\",\nprofile_caps.encode_h264.flags & VK_VIDEO_ENCODE_H264_CAPABILITY_PER_PICTURE_TYPE_MIN_MAX_QP_BIT_KHR,\n\"VUID-VkVideoEncodeH264RateControlLayerInfoKHR-useMinQp-08374\", rc_layer_info_h264_loc);\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkVideoEncodeH265RateControlLayerInfoKHR-useMinQp-08299\", \"If useMinQp is VK_TRUE and VkVideoEncodeH265CapabilitiesKHR::flags, as returned by vkGetPhysicalDeviceVideoCapabilitiesKHR for the used video profile, does not include VK_VIDEO_ENCODE_H265_CAPABILITY_PER_PICTURE_TYPE_MIN_MAX_QP_BIT_KHR, then the qpI, qpP, and qpB members of minQp must all specify the same value\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "cmdbuf, vs_state, *rc_layer_info_h265, \"VUID-VkVideoEncodeH265RateControlLayerInfoKHR-useMinQp-08297\",\n\"VUID-VkVideoEncodeH265RateControlLayerInfoKHR-useMaxQp-08298\", profile_caps.encode_h265.minQp,\nprofile_caps.encode_h265.maxQp, \"VUID-VkVideoEncodeH265RateControlLayerInfoKHR-useMinQp-08299\",\n\"VUID-VkVideoEncodeH265RateControlLayerInfoKHR-useMaxQp-08300\",\nprofile_caps.encode_h265.flags & VK_VIDEO_ENCODE_H265_CAPABILITY_PER_PICTURE_TYPE_MIN_MAX_QP_BIT_KHR,\n\"VUID-VkVideoEncodeH265RateControlLayerInfoKHR-useMinQp-08375\", rc_layer_info_h265_loc);\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkVideoProfileInfoKHR-lumaBitDepth-07014\", \"lumaBitDepth must have a single bit set\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (GetBitSetCount(profile->lumaBitDepth) != 1) {\n    skip |= LogError(\"VUID-VkVideoProfileInfoKHR-lumaBitDepth-07014\", object, loc.dot(Field::lumaBitDepth),\n                     \"must have a single bit set.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkVideoProfileInfoKHR-videoCodecOperation-07181\", \"If videoCodecOperation is VK_VIDEO_CODEC_OPERATION_ENCODE_H264_BIT_KHR, then the pNext chain must include a VkVideoEncodeH264ProfileInfoKHR structure\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (encode_h264 == nullptr) {\n    skip |= LogError(\"VUID-VkVideoProfileInfoKHR-videoCodecOperation-07181\", object, loc.dot(Field::pNext),\n                     profile_pnext_msg, \"VkVideoEncodeH264ProfileInfoKHR\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkVideoDecodeH264SessionParametersAddInfoKHR-None-04826\", \"The pair constructed from the seq_parameter_set_id and pic_parameter_set_id members of each StdVideoH264PictureParameterSet structure specified in the elements of pStdPPSs must be unique within pStdPPSs\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!keys.emplace(key).second) {\n    skip |= LogError(\"VUID-VkVideoDecodeH264SessionParametersAddInfoKHR-None-04826\", device, loc.dot(Field::pStdPPSs),\n                     \"keys are not unique.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkVideoSessionParametersCreateInfoKHR-videoSession-07208\", \"If videoSession was created with the video codec operation VK_VIDEO_CODEC_OPERATION_DECODE_H265_BIT_KHR, then the number of elements of spsAddList must be less than or equal to the maxStdSPSCount specified in the VkVideoDecodeH265SessionParametersCreateInfoKHR structure included in the pNext chain\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (keys.size() > create_info->maxStdSPSCount) {\n    skip |= LogError(\"VUID-VkVideoSessionParametersCreateInfoKHR-videoSession-07208\", device, loc.function,\n                     \"number of H.265 SPS entries to add (%zu) is larger than \"\n                     \"VkVideoDecodeH265SessionParametersCreateInfoKHR::maxStdSPSCount (%u).\",\n                     keys.size(), create_info->maxStdSPSCount);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkVideoEncodeH264SessionParametersAddInfoKHR-None-04838\", \"The pair constructed from the seq_parameter_set_id and pic_parameter_set_id members of each StdVideoH264PictureParameterSet structure specified in the elements of pStdPPSs must be unique within pStdPPSs\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!keys.emplace(key).second) {\n    skip |= LogError(\"VUID-VkVideoEncodeH264SessionParametersAddInfoKHR-None-04838\", device, loc.dot(Field::pStdPPSs),\n                     \"keys are not unique.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkVideoSessionParametersCreateInfoKHR-videoSession-04842\", \"If videoSession was created with the video codec operation VK_VIDEO_CODEC_OPERATION_ENCODE_H265_BIT_KHR, then the number of elements of spsAddList must be less than or equal to the maxStdSPSCount specified in the VkVideoEncodeH265SessionParametersCreateInfoKHR structure included in the pNext chain\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (keys.size() > create_info->maxStdSPSCount) {\n    skip |= LogError(\"VUID-VkVideoSessionParametersCreateInfoKHR-videoSession-04842\", device, loc.function,\n                     \"number of H.265 SPS entries to add (%zu) is larger than \"\n                     \"VkVideoEncodeH265SessionParametersCreateInfoKHR::maxStdSPSCount (%u).\",\n                     keys.size(), create_info->maxStdSPSCount);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkVideoSessionParametersCreateInfoKHR-videoSession-08320\", \"If videoSession was created with the video codec operation VK_VIDEO_CODEC_OPERATION_ENCODE_H265_BIT_KHR, then num_tile_rows_minus1 must be less than VkVideoEncodeH265CapabilitiesKHR::maxTiles.height, as returned by vkGetPhysicalDeviceVideoCapabilitiesKHR for the video profile videoSession was created with, for each element of ppsAddList\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (create_info) {\n    vuid = \"VUID-VkVideoSessionParametersCreateInfoKHR-videoSession-08320\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdDecodeVideoKHR-None-07258\", \"If the bound video session was created with the video codec operation VK_VIDEO_CODEC_OPERATION_DECODE_H264_BIT_KHR but was not created with interlaced frame support, then the decode output picture must represent a frame\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!interlaced_frame_support && std_picture_info->flags.field_pic_flag) {\n    const LogObjectList objlist(cb_state.Handle(), vs_state.Handle());\n    skip |= LogError(\"VUID-vkCmdDecodeVideoKHR-None-07258\", objlist, loc.function,\n                     \"decode output picture is a field but the bound video session \"\n                     \"%s was not created with interlaced frame support.\",\n                     FormatHandle(vs_state).c_str());\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdDecodeVideoKHR-pDecodeInfo-07259\", \"If the bound video session was created with the video codec operation VK_VIDEO_CODEC_OPERATION_DECODE_H264_BIT_KHR but was not created with interlaced frame support, and pDecodeInfo->pSetupReferenceSlot is not NULL, then the reconstructed picture must represent a frame\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!interlaced_frame_support && !picture_id.IsFrame()) {\n    const LogObjectList objlist(cb_state.Handle(), vs_state.Handle());\n    skip |= LogError(\"VUID-vkCmdDecodeVideoKHR-pDecodeInfo-07259\", objlist, loc.function,\n                     \"reconstructed picture is a field but the bound \"\n                     \"video session %s was not created with interlaced frame support.\",\n                     FormatHandle(vs_state).c_str());\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdDecodeVideoKHR-pDecodeInfo-07260\", \"If the bound video session was created with the video codec operation VK_VIDEO_CODEC_OPERATION_DECODE_H264_BIT_KHR but was not created with interlaced frame support, then each active reference picture corresponding to the elements of pDecodeInfo->pReferenceSlots must represent a frame\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!interlaced_frame_support && !picture_id.IsFrame()) {\n    const LogObjectList objlist(cb_state.Handle(), vs_state.Handle());\n    skip |= LogError(\"VUID-vkCmdDecodeVideoKHR-pDecodeInfo-07260\", objlist, loc.function,\n                     \"reference picture specified in \"\n                     \"pDecodeInfo->pReferenceSlots[%u] is a field but the bound \"\n                     \"video session %s was not created with interlaced frame support.\",\n                     i, FormatHandle(vs_state).c_str());\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdDecodeVideoKHR-StdVideoH265PictureParameterSet-07162\", \"If the bound video session was created with the video codec operation VK_VIDEO_CODEC_OPERATION_DECODE_H265_BIT_KHR, then the bound video session parameters object must contain a StdVideoH265PictureParameterSet entry with sps_video_parameter_set_id, pps_seq_parameter_set_id, and pps_pic_parameter_set_id matching StdVideoDecodeH265PictureInfo::sps_video_parameter_set_id, StdVideoDecodeH265PictureInfo::pps_seq_parameter_set_id, and StdVideoDecodeH265PictureInfo::pps_pic_parameter_set_id, respectively, that are provided in the pStdPictureInfo member of the VkVideoDecodeH265PictureInfoKHR structure included in the pNext chain of pDecodeInfo\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (session_params.GetH265PPS(std_picture_info->sps_video_parameter_set_id, std_picture_info->pps_seq_parameter_set_id,\n    const LogObjectList objlist(cb_state.Handle(), vsp_state.Handle());\n    skip |= LogError(\"VUID-vkCmdDecodeVideoKHR-StdVideoH265PictureParameterSet-07162\", objlist, loc.function,\n                     \"no H.265 SPS with sps_video_parameter_set_id = %u, \"\n                     \"pps_seq_parameter_set_id = %u, and pps_pic_parameter_set_id = %u exists in \"\n                     \"the bound video session parameters object %s.\",\n                     std_picture_info->sps_video_parameter_set_id, std_picture_info->pps_seq_parameter_set_id,\n                     std_picture_info->pps_pic_parameter_set_id, FormatHandle(vsp_state).c_str());\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdDecodeVideoKHR-pNext-09255\", \"If the bound video session was created with the video codec operation VK_VIDEO_CODEC_OPERATION_DECODE_AV1_BIT_KHR, then the pNext chain of each element of pDecodeInfo->pReferenceSlots must include a VkVideoDecodeAV1DpbSlotInfoKHR structure\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!dpb_slot_info) {\n    skip |= LogError(\"VUID-vkCmdDecodeVideoKHR-pNext-09255\", cb_state.Handle(),\n                     loc.dot(Field::pReferenceSlots, i).dot(Field::pNext), pnext_msg, \"VkVideoDecodeAV1DpbSlotInfoKHR\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdDecodeVideoKHR-frameHeaderOffset-09251\", \"If the bound video session was created with the video codec operation VK_VIDEO_CODEC_OPERATION_DECODE_AV1_BIT_KHR, then the frameHeaderOffset member of the VkVideoDecodeAV1PictureInfoKHR structure included in the pNext chain of pDecodeInfo must be less than the minimum of pDecodeInfo->srcBufferRange\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (picture_info->frameHeaderOffset >= decode_info.srcBufferRange) {\n    skip |= LogError(\"VUID-vkCmdDecodeVideoKHR-frameHeaderOffset-09251\", cb_state.Handle(),\n                     loc.pNext(Struct::VkVideoDecodeAV1PictureInfoKHR, Field::frameHeaderOffset),\n                     \"(%u) is greater than or equal to pDecodeInfo->srcBufferRange (%\" PRIu64 \").\",\n                     picture_info->frameHeaderOffset, decode_info.srcBufferRange);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdEncodeVideoKHR-maxBPictureL0ReferenceCount-08341\", \"If the bound video session was created with the video codec operation VK_VIDEO_CODEC_OPERATION_ENCODE_H264_BIT_KHR and VkVideoEncodeH264CapabilitiesKHR::maxBPictureL0ReferenceCount and VkVideoEncodeH264CapabilitiesKHR::maxL1ReferenceCount are both zero, as returned by vkGetPhysicalDeviceVideoCapabilitiesKHR for the video profile the bound video session was created with, then h264PictureType and each element of h264L0PictureTypes and h264L1PictureTypes must not be STD_VIDEO_H264_PICTURE_TYPE_B\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (profile_caps.encode_h264.maxBPictureL0ReferenceCount == 0 && profile_caps.encode_h264.maxL1ReferenceCount == 0 &&\n    skip |= LogError(\"VUID-vkCmdEncodeVideoKHR-maxBPictureL0ReferenceCount-08341\", vs_state.Handle(), loc,\n                     \"%s is STD_VIDEO_H264_PICTURE_TYPE_B but B pictures \"\n                     \"are not supported by the H.264 encode profile %s was created with.\",\n                     where, FormatHandle(vs_state).c_str());\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkVideoEncodeH264PictureInfoKHR-naluSliceEntryCount-08301\", \"naluSliceEntryCount must be between 1 and VkVideoEncodeH264CapabilitiesKHR::maxSliceCount, inclusive, as returned by vkGetPhysicalDeviceVideoCapabilitiesKHR for the used video profile\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (picture_info->naluSliceEntryCount > profile_caps.encode_h264.maxSliceCount) {\n    const LogObjectList objlist(cb_state.Handle(), vs_state.Handle());\n        LogError(\"VUID-VkVideoEncodeH264PictureInfoKHR-naluSliceEntryCount-08301\", objlist, slice_count_loc,\n                 \"(%u) exceeds the VkVideoEncodeH264CapabilitiesKHR::maxSliceCount (%u) limit \"\n                 \"supported by the H.264 encode profile %s was created with.\",\n                 picture_info->naluSliceEntryCount, profile_caps.encode_h264.maxSliceCount, FormatHandle(vs_state).c_str());\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkVideoEncodeH264PictureInfoKHR-flags-08314\", \"If VkVideoEncodeH264CapabilitiesKHR::flags, as returned by vkGetPhysicalDeviceVideoCapabilitiesKHR for the used video profile, does not include VK_VIDEO_ENCODE_H264_CAPABILITY_PREDICTION_WEIGHT_TABLE_GENERATED_BIT_KHR and the slice corresponding to any element of pNaluSliceEntries uses explicit weighted sample prediction, then VkVideoEncodeH264NaluSliceInfoKHR::pStdSliceHeader->pWeightTable must not be NULL for that element of pNaluSliceEntries\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (std_slice_header->pWeightTable == nullptr && weighted_pred_error_msg != nullptr) {\n    const LogObjectList objlist(cb_state.Handle(), vs_state.Handle());\n    skip |= LogError(\"VUID-VkVideoEncodeH264PictureInfoKHR-flags-08314\", objlist, loc.function,\n                     \"%s, and pWeightTable is NULL in %s but \"\n                     \"VK_VIDEO_ENCODE_H264_CAPABILITY_PREDICTION_WEIGHT_TABLE_GENERATED_BIT_KHR \"\n                     \"is not supported by the H.264 encode profile %s was created with.\",\n                     weighted_pred_error_msg, slice_info_loc.dot(Field::pStdSliceHeader).Fields().c_str(),\n                     FormatHandle(vs_state).c_str());\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdEncodeVideoKHR-pNext-08339\", \"If the bound video session was created with the video codec operation VK_VIDEO_CODEC_OPERATION_ENCODE_H264_BIT_KHR, the pNext chain of pEncodeInfo includes a VkVideoEncodeH264PictureInfoKHR structure, and VkVideoEncodeH264PictureInfoKHR::pStdPictureInfo->pRefLists is not NULL, then each element of the RefPicList0 and RefPicList1 array members of the StdVideoEncodeH264ReferenceListsInfo structure pointed to by VkVideoEncodeH264PictureInfoKHR::pStdPictureInfo->pRefLists must either be STD_VIDEO_H264_NO_REFERENCE_PICTURE or must equal the slotIndex member of one of the elements of pEncodeInfo->pReferenceSlots\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "skip |= LogError(\"VUID-vkCmdEncodeVideoKHR-pNext-08339\", cb_state.Handle(), loc.function,\n                 \"%s->pRefLists->RefPicList1[%u] (%u) does not match \"\n                 \"the slotIndex member of any element of pEncodeInfo->pReferenceSlots.\",\n                 loc.pNext(Struct::VkVideoEncodeH264PictureInfoKHR, Field::pStdPictureInfo).Fields().c_str(), i,\n                 ref_list_entry);\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdEncodeVideoKHR-pNext-08225\", \"If the bound video session was created with the video codec operation VK_VIDEO_CODEC_OPERATION_ENCODE_H264_BIT_KHR, then the pNext chain of pEncodeInfo must include a VkVideoEncodeH264PictureInfoKHR structure\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "skip |= LogError(\"VUID-vkCmdEncodeVideoKHR-pNext-08225\", cb_state.Handle(), loc.dot(Field::pNext), pnext_msg,\n                 \"VkVideoEncodeH264PictureInfoKHR\");\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdEncodeVideoKHR-StdVideoH265VideoParameterSet-08231\", \"If the bound video session was created with the video codec operation VK_VIDEO_CODEC_OPERATION_ENCODE_H265_BIT_KHR, then the bound video session parameters object must contain a StdVideoH265VideoParameterSet entry with vps_video_parameter_set_id matching StdVideoEncodeH265PictureInfo::sps_video_parameter_set_id that is provided in the pStdPictureInfo member of the VkVideoEncodeH265PictureInfoKHR structure included in the pNext chain of pEncodeInfo\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (std_vps == nullptr) {\n    const LogObjectList objlist(cb_state.Handle(), vsp_state.Handle());\n    skip |= LogError(\"VUID-vkCmdEncodeVideoKHR-StdVideoH265VideoParameterSet-08231\", objlist, loc.function,\n                     \"no H.265 VPS with sps_video_parameter_set_id = %u \"\n                     \"exists in the bound video session parameters object %s.\",\n                     std_picture_info->sps_video_parameter_set_id, FormatHandle(vsp_state).c_str());\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdEncodeVideoKHR-naluSliceSegmentEntryCount-08313\", \"If the bound video session was created with the video codec operation VK_VIDEO_CODEC_OPERATION_ENCODE_H265_BIT_KHR and VkVideoEncodeH265CapabilitiesKHR::flags does not include VK_VIDEO_ENCODE_H265_CAPABILITY_ROW_UNALIGNED_SLICE_SEGMENT_BIT_KHR, as returned by vkGetPhysicalDeviceVideoCapabilitiesKHR for the video profile the bound video session was created with, then the naluSliceSegmentEntryCount member of the VkVideoEncodeH265PictureInfoKHR structure included in the pNext chain of pEncodeInfo must be less than or equal to minCodingBlockExtent.height\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (picture_info->naluSliceSegmentEntryCount > min_coding_block_extent.height) {\n    const LogObjectList objlist(cb_state.Handle(), vs_state.Handle());\n    skip |= LogError(\"VUID-vkCmdEncodeVideoKHR-naluSliceSegmentEntryCount-08313\", objlist, slice_seg_count_loc,\n                     \"(%u) is greater than the number of CTB rows (minCodingBlockExtent.height = %u) that can \"\n                     \"be coded for the encode input picture specified in pEncodeInfo->srcPictureResource \"\n                     \"(codedExtent = {%s}) assuming the maximum CTB size (%s) supported by the \"\n                     \"H.265 encode profile %s was created with.\",\n                     picture_info->naluSliceSegmentEntryCount, min_coding_block_extent.height,\n                     string_VkExtent2D(encode_info.srcPictureResource.codedExtent).c_str(),\n                     string_VkExtent2D(max_coding_block_size).c_str(), FormatHandle(vs_state).c_str());\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkVideoEncodeH265PictureInfoKHR-flags-08316\", \"If VkVideoEncodeH265CapabilitiesKHR::flags, as returned by vkGetPhysicalDeviceVideoCapabilitiesKHR for the used video profile, does not include VK_VIDEO_ENCODE_H265_CAPABILITY_PREDICTION_WEIGHT_TABLE_GENERATED_BIT_KHR and the slice segment corresponding to any element of pNaluSliceSegmentEntries uses explicit weighted sample prediction, then VkVideoEncodeH265NaluSliceSegmentInfoKHR::pStdSliceSegmentHeader->pWeightTable must not be NULL for that element of pNaluSliceSegmentEntries\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (std_slice_segment_header->pWeightTable == nullptr && weighted_pred_error_msg != nullptr) {\n    const LogObjectList objlist(cb_state.Handle(), vs_state.Handle());\n        LogError(\"VUID-VkVideoEncodeH265PictureInfoKHR-flags-08316\", objlist, loc.function,\n                 \"%s, and pWeightTable is NULL in %s but \"\n                 \"VK_VIDEO_ENCODE_H265_CAPABILITY_PREDICTION_WEIGHT_TABLE_GENERATED_BIT_KHR \"\n                 \"is not supported by the H.265 encode profile %s was created with.\",\n                 weighted_pred_error_msg, slice_seg_info_loc.dot(Field::pStdSliceSegmentHeader).Fields().c_str(),\n                 FormatHandle(vs_state).c_str());\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdEncodeVideoKHR-pNext-08344\", \"If the bound video session was created with the video codec operation VK_VIDEO_CODEC_OPERATION_ENCODE_H265_BIT_KHR, the pNext chain of pEncodeInfo includes a VkVideoEncodeH265PictureInfoKHR structure, and VkVideoEncodeH265PictureInfoKHR::pStdPictureInfo->pRefLists is not NULL, then each element of the RefPicList0 and RefPicList1 array members of the StdVideoEncodeH265ReferenceListsInfo structure pointed to by VkVideoEncodeH265PictureInfoKHR::pStdPictureInfo->pRefLists must either be STD_VIDEO_H265_NO_REFERENCE_PICTURE or must equal the slotIndex member of one of the elements of pEncodeInfo->pReferenceSlots\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "skip |= LogError(\"VUID-vkCmdEncodeVideoKHR-pNext-08344\", cb_state.Handle(), loc.function,\n                 \"%s->pRefLists->RefPicList1[%u] (%u) does not match \"\n                 \"the slotIndex member of any element of pEncodeInfo->pReferenceSlots.\",\n                 loc.pNext(Struct::VkVideoEncodeH265PictureInfoKHR, Field::pStdPictureInfo).Fields().c_str(), i,\n                 ref_list_entry);\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdDecodeVideoKHR-activeReferencePictureCount-07150\", \"activeReferencePictureCount must be less than or equal to the VkVideoSessionCreateInfoKHR::maxActiveReferencePictures specified when the bound video session was created\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (active_reference_picture_count > vs_state.create_info.maxActiveReferencePictures) {\n    const LogObjectList objlist(cb_state.Handle(), vs_state.Handle());\n    skip |= LogError(\"VUID-vkCmdDecodeVideoKHR-activeReferencePictureCount-07150\", objlist, loc,\n                     \"more active reference pictures (%u) were specified than \"\n                     \"the maxActiveReferencePictures (%u) the bound video session %s was created with.\",\n                     active_reference_picture_count, vs_state.create_info.maxActiveReferencePictures,\n                     FormatHandle(vs_state).c_str());\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdEncodeVideoKHR-dpbFrameUseCount-08221\", \"All elements of dpbFrameUseCount must be less than or equal to 1\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (dpb_frame_use_count[i] > 1) {\n    skip |= LogError(\"VUID-vkCmdEncodeVideoKHR-dpbFrameUseCount-08221\", cb_state.Handle(), loc,\n                     \"frame in DPB slot %u is referred to multiple times across \"\n                     \"pEncodeInfo->pSetupReferenceSlot and the elements of pEncodeInfo->pReferenceSlots.\",\n                     i);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkGetPhysicalDeviceVideoCapabilitiesKHR-pVideoProfile-07188\", \"If pVideoProfile->videoCodecOperation is VK_VIDEO_CODEC_OPERATION_ENCODE_H265_BIT_KHR, then the pNext chain of pCapabilities must include a VkVideoEncodeH265CapabilitiesKHR structure\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!vku::FindStructInPNextChain<VkVideoEncodeH265CapabilitiesKHR>(pCapabilities->pNext)) {\n    skip |= LogError(\"VUID-vkGetPhysicalDeviceVideoCapabilitiesKHR-pVideoProfile-07188\", physicalDevice, caps_loc,\n                     caps_pnext_msg, \"VkVideoEncodeH265CapabilitiesKHR\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR-qualityLevel-08261\", \"qualityLevel must be less than VkVideoEncodeCapabilitiesKHR::maxQualityLevels, as returned by vkGetPhysicalDeviceVideoCapabilitiesKHR for the video profile specified in pVideoProfile\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (profile_desc.IsEncode() && pQualityLevelInfo->qualityLevel >= profile_caps.encode.maxQualityLevels) {\n    skip |= LogError(\"VUID-VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR-qualityLevel-08261\", physicalDevice,\n                     quality_level_info_loc.dot(Field::qualityLevel),\n                     \"(%u) must be smaller than the VkVideoEncodeCapabilitiesKHR::maxQualityLevels (%u) limit \"\n                     \"supported by the specified video profile.\",\n                     pQualityLevelInfo->qualityLevel, profile_caps.encode.maxQualityLevels);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkVideoSessionCreateInfoKHR-flags-08371\", \"If flags includes VK_VIDEO_SESSION_CREATE_INLINE_QUERIES_BIT_KHR, then videoMaintenance1 must be enabled\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (pCreateInfo->flags & VK_VIDEO_SESSION_CREATE_INLINE_QUERIES_BIT_KHR && !enabled_features.videoMaintenance1) {\n    skip |= LogError(\"VUID-VkVideoSessionCreateInfoKHR-flags-08371\", device, create_info_loc.dot(Field::flags),\n                     \"has VK_VIDEO_SESSION_CREATE_INLINE_QUERIES_BIT_KHR set but \"\n                     \"the videoMaintenance1 device feature is not enabled.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkVideoSessionCreateInfoKHR-referencePictureFormat-04852\", \"If pVideoProfile->videoCodecOperation specifies a decode operation and maxActiveReferencePictures is greater than 0, then referencePictureFormat must be one of the supported decode DPB formats, as returned by vkGetPhysicalDeviceVideoFormatPropertiesKHR in VkVideoFormatPropertiesKHR::format when called with the imageUsage member of its pVideoFormatInfo parameter containing VK_IMAGE_USAGE_VIDEO_DECODE_DPB_BIT_KHR, and with a VkVideoProfileListInfoKHR structure specified in the pNext chain of its pVideoFormatInfo parameter whose pProfiles member contains an element matching pVideoProfile\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (profile_desc.IsDecode() && pCreateInfo->maxActiveReferencePictures > 0 &&\n    !IsVideoFormatSupported(pCreateInfo->referencePictureFormat, VK_IMAGE_USAGE_VIDEO_DECODE_DPB_BIT_KHR,\n    skip |= LogError(\"VUID-VkVideoSessionCreateInfoKHR-referencePictureFormat-04852\", device,\n                     create_info_loc.dot(Field::referencePictureFormat),\n                     \"(%s) is not a supported \"\n                     \"decode DPB format for the video profile specified in pCreateInfo->pVideoProfile.\",\n                     string_VkFormat(pCreateInfo->referencePictureFormat));\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkVideoSessionCreateInfoKHR-pStdHeaderVersion-07191\", \"pStdHeaderVersion->specVersion must be less than or equal to VkVideoCapabilitiesKHR::stdHeaderVersion.specVersion, as returned by vkGetPhysicalDeviceVideoCapabilitiesKHR for the video profile specified by pVideoProfile\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (pCreateInfo->pStdHeaderVersion->specVersion > profile_caps.base.stdHeaderVersion.specVersion) {\n    skip |= LogError(\"VUID-VkVideoSessionCreateInfoKHR-pStdHeaderVersion-07191\", device,\n                     create_info_loc.dot(Field::pStdHeaderVersion).dot(Field::specVersion),\n                     \"(0x%08x) is larger than the supported version (0x%08x).\", pCreateInfo->pStdHeaderVersion->specVersion,\n                     profile_caps.base.stdHeaderVersion.specVersion);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkBindVideoSessionMemoryKHR-memoryBindIndex-07196\", \"The memoryBindIndex member of each element of pBindSessionMemoryInfos must be unique within pBindSessionMemoryInfos\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (memory_bind_indices.find(mem_bind_index) != memory_bind_indices.end()) {\n    skip |= LogError(\"VUID-vkBindVideoSessionMemoryKHR-memoryBindIndex-07196\", videoSession,\n                     error_obj.location.dot(Field::pBindSessionMemoryInfos, i).dot(Field::memoryBindIndex),\n                     \"%u is not unique.\", mem_bind_index);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkBindVideoSessionMemoryKHR-pBindSessionMemoryInfos-07200\", \"If an element of pBindSessionMemoryInfos has a corresponding VkMemoryRequirements structure, then the memorySize member of that element of pBindSessionMemoryInfos must equal the size member of the corresponding VkMemoryRequirements structure\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (bind_info.memorySize != mem_binding_info->requirements.size) {\n    skip |= LogError(\"VUID-vkBindVideoSessionMemoryKHR-pBindSessionMemoryInfos-07200\", videoSession,\n                     error_obj.location.dot(Field::pBindSessionMemoryInfos, i).dot(Field::memorySize),\n                     \"(%\" PRIuLEAST64 \") does not equal the required size (%\" PRIuLEAST64\n                     \") for the memory binding index %u of %s.\",\n                     bind_info.memorySize, mem_binding_info->requirements.size, bind_info.memoryBindIndex,\n                     FormatHandle(videoSession).c_str());\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkVideoSessionParametersCreateInfoKHR-videoSession-07206\", \"If videoSession was created with the video codec operation VK_VIDEO_CODEC_OPERATION_DECODE_H265_BIT_KHR, then the pNext chain must include a VkVideoDecodeH265SessionParametersCreateInfoKHR structure\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "LogError(\"VUID-VkVideoSessionParametersCreateInfoKHR-videoSession-07206\", device,\n         create_info_loc.dot(Field::pNext), pnext_chain_msg, \"VkVideoDecodeH265SessionParametersCreateInfoKHR\");\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkVideoEncodeQualityLevelInfoKHR-qualityLevel-08311\", \"qualityLevel must be less than VkVideoEncodeCapabilitiesKHR::maxQualityLevels, as returned by vkGetPhysicalDeviceVideoCapabilitiesKHR for the used video profile\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (encode_quality_level >= max_quality_levels) {\n    skip |= LogError(\"VUID-VkVideoEncodeQualityLevelInfoKHR-qualityLevel-08311\", pCreateInfo->videoSession,\n                     create_info_loc.pNext(Struct::VkVideoEncodeQualityLevelInfoKHR, Field::qualityLevel),\n                     \"(%u) must be smaller than the maxQualityLevels (%u) supported by the video \"\n                     \"profile %s was created with.\",\n                     encode_quality_level, max_quality_levels, FormatHandle(pCreateInfo->videoSession).c_str());\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkUpdateVideoSessionParametersKHR-videoSessionParameters-07217\", \"If videoSessionParameters was created with the video codec operation VK_VIDEO_CODEC_OPERATION_DECODE_H264_BIT_KHR, then the number of StdVideoH264SequenceParameterSet entries already stored in it plus the value of the stdSPSCount member of the VkVideoDecodeH264SessionParametersAddInfoKHR structure included in the pUpdateInfo->pNext chain must be less than or equal to the VkVideoDecodeH264SessionParametersCreateInfoKHR::maxStdSPSCount videoSessionParameters was created with\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (add_info->stdSPSCount + vsp_data->h264.sps.size() > vsp_data->h264.sps_capacity) {\n    skip |= LogError(\"VUID-vkUpdateVideoSessionParametersKHR-videoSessionParameters-07217\", videoSessionParameters,\n                     error_obj.location,\n                     \"number of H.264 SPS entries to add \"\n                     \"(%u) plus the already used capacity (%zu) is greater than the maximum H.264 \"\n                     \"SPS capacity (%u) the %s was created with.\",\n                     add_info->stdSPSCount, vsp_data->h264.sps.size(), vsp_data->h264.sps_capacity,\n                     FormatHandle(videoSessionParameters).c_str());\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkUpdateVideoSessionParametersKHR-videoSessionParameters-07222\", \"If videoSessionParameters was created with the video codec operation VK_VIDEO_CODEC_OPERATION_DECODE_H265_BIT_KHR and the pNext chain of pUpdateInfo includes a VkVideoDecodeH265SessionParametersAddInfoKHR structure, then videoSessionParameters must not already contain a StdVideoH265SequenceParameterSet entry with both sps_video_parameter_set_id and sps_seq_parameter_set_id matching any of the elements of VkVideoDecodeH265SessionParametersAddInfoKHR::pStdSPSs\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (vsp_data.GetH265SPS(add_info->pStdSPSs[i].sps_video_parameter_set_id,\n        LogError(\"VUID-vkUpdateVideoSessionParametersKHR-videoSessionParameters-07222\", videoSessionParameters,\n                 error_obj.location,\n                 \"H.265 SPS with key \"\n                 \"(VPS ID = %u, SPS ID = %u) already exists in %s.\",\n                 add_info->pStdSPSs[i].sps_video_parameter_set_id,\n                 add_info->pStdSPSs[i].sps_seq_parameter_set_id, FormatHandle(videoSessionParameters).c_str());\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkUpdateVideoSessionParametersKHR-videoSessionParameters-07226\", \"If videoSessionParameters was created with the video codec operation VK_VIDEO_CODEC_OPERATION_ENCODE_H264_BIT_KHR and the pNext chain of pUpdateInfo includes a VkVideoEncodeH264SessionParametersAddInfoKHR structure, then videoSessionParameters must not already contain a StdVideoH264SequenceParameterSet entry with seq_parameter_set_id matching any of the elements of VkVideoEncodeH264SessionParametersAddInfoKHR::pStdSPSs\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (vsp_data.GetH264SPS(add_info->pStdSPSs[i].seq_parameter_set_id)) {\n    skip |= LogError(\"VUID-vkUpdateVideoSessionParametersKHR-videoSessionParameters-07226\",\n                     videoSessionParameters, error_obj.location,\n                     \"H.264 SPS with key \"\n                     \"(SPS ID = %u) already exists in %s.\",\n                     add_info->pStdSPSs[i].seq_parameter_set_id, FormatHandle(videoSessionParameters).c_str());\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkUpdateVideoSessionParametersKHR-videoSessionParameters-06443\", \"If videoSessionParameters was created with the video codec operation VK_VIDEO_CODEC_OPERATION_ENCODE_H265_BIT_KHR, then the number of StdVideoH265VideoParameterSet entries already stored in it plus the value of the stdVPSCount member of the VkVideoEncodeH265SessionParametersAddInfoKHR structure included in the pUpdateInfo->pNext chain must be less than or equal to the VkVideoEncodeH265SessionParametersCreateInfoKHR::maxStdVPSCount videoSessionParameters was created with\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (add_info->stdVPSCount + vsp_data->h265.vps.size() > vsp_data->h265.vps_capacity) {\n    skip |= LogError(\"VUID-vkUpdateVideoSessionParametersKHR-videoSessionParameters-06443\", videoSessionParameters,\n                     error_obj.location,\n                     \"number of H.265 VPS entries to add \"\n                     \"(%u) plus the already used capacity (%zu) is greater than the maximum H.265 \"\n                     \"VPS capacity (%u) the %s was created with.\",\n                     add_info->stdVPSCount, vsp_data->h265.vps.size(), vsp_data->h265.vps_capacity,\n                     FormatHandle(videoSessionParameters).c_str());\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkDestroyVideoSessionParametersKHR-videoSessionParameters-07212\", \"All submitted commands that refer to videoSessionParameters must have completed execution\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (auto video_session_parameters_state = Get<vvl::VideoSessionParameters>(videoSessionParameters)) {\n                                   \"VUID-vkDestroyVideoSessionParametersKHR-videoSessionParameters-07212\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkVideoEncodeH265SessionParametersGetInfoKHR-writeStdVPS-08290\", \"At least one of writeStdVPS, writeStdSPS, and writeStdPPS must be VK_TRUE\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!h265_info->writeStdVPS && !h265_info->writeStdSPS && !h265_info->writeStdPPS) {\n    skip |= LogError(\"VUID-VkVideoEncodeH265SessionParametersGetInfoKHR-writeStdVPS-08290\",\n                     pVideoSessionParametersInfo->videoSessionParameters, h265_info_loc,\n                     \"must have at least one of writeStdVPS, writeStdSPS, and writeStdPPS set to VK_TRUE.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkGetEncodedVideoSessionParametersKHR-pVideoSessionParametersInfo-08359\", \"pVideoSessionParametersInfo->videoSessionParameters must have been created with an encode operation\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "skip |= LogError(\"VUID-vkGetEncodedVideoSessionParametersKHR-pVideoSessionParametersInfo-08359\",\n                 pVideoSessionParametersInfo->videoSessionParameters, params_info_loc.dot(Field::videoSessionParameters),\n                 \"(%s) was not created with an encode operation.\",\n                 FormatHandle(pVideoSessionParametersInfo->videoSessionParameters).c_str());\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdBeginVideoCodingKHR-commandBuffer-07234\", \"If commandBuffer is a protected command buffer and protectedNoFault is not supported, then pBeginInfo->videoSession must have been created with VK_VIDEO_SESSION_CREATE_PROTECTED_CONTENT_BIT_KHR\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((!phys_dev_props_core11.protectedNoFault) && (cb_state->unprotected == false) &&\n    const LogObjectList objlist(commandBuffer, pBeginInfo->videoSession);\n    skip |= LogError(\"VUID-vkCmdBeginVideoCodingKHR-commandBuffer-07234\", objlist, error_obj.location.dot(Field::commandBuffer),\n                     \"%s is protected while %s was created without \"\n                     \"VK_VIDEO_SESSION_CREATE_PROTECTED_CONTENT_BIT_KHR.\",\n                     FormatHandle(commandBuffer).c_str(), FormatHandle(pBeginInfo->videoSession).c_str());\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdBeginVideoCodingKHR-commandBuffer-07236\", \"If commandBuffer is a protected command buffer protectedNoFault is not supported, and the pPictureResource member of any element of pBeginInfo->pReferenceSlots is not NULL, then pPictureResource->imageViewBinding for that element must specify an image view created from a protected image\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "\"VUID-vkCmdBeginVideoCodingKHR-commandBuffer-07235\", where);\n  \"VUID-vkCmdBeginVideoCodingKHR-commandBuffer-07236\", where);\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkVideoBeginCodingInfoKHR-pPictureResource-07238\", \"Each video picture resource corresponding to any non-NULL pPictureResource member specified in the elements of pReferenceSlots must be unique within pReferenceSlots\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!resources_unique) {\n    const LogObjectList objlist(commandBuffer, pBeginInfo->videoSession);\n    skip |= LogError(\"VUID-VkVideoBeginCodingInfoKHR-pPictureResource-07238\", objlist, error_obj.location,\n                     \"more than one element of pBeginInfo->pReferenceSlots \"\n                     \"refers to the same video picture resource.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkVideoBeginCodingInfoKHR-videoSession-09261\", \"If videoSession was created with the video codec operation VK_VIDEO_CODEC_OPERATION_DECODE_AV1_BIT_KHR, then videoSessionParameters must not be VK_NULL_HANDLE\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "codec_op_requires_params_vuid = \"VUID-VkVideoBeginCodingInfoKHR-videoSession-09261\";\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdBeginVideoCodingKHR-slotIndex-07239\", \"If the slotIndex member of any element of pBeginInfo->pReferenceSlots is not negative, then it must specify the index of a DPB slot that is in the active state in pBeginInfo->videoSession at the time the command is executed on the device\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!dev_state.IsSlotActive(slot.index)) {\n    skip |= dev_data.LogError(\"VUID-vkCmdBeginVideoCodingKHR-slotIndex-07239\", vs_state->Handle(), loc,\n                              \"DPB slot index %d is not active in %s.\", slot.index,\n                              dev_data.FormatHandle(*vs_state).c_str());\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdControlVideoCodingKHR-pCodingControlInfo-08243\", \"If the bound video session was not created with an encode operation, then pCodingControlInfo->flags must not include VK_VIDEO_CODING_CONTROL_ENCODE_RATE_CONTROL_BIT_KHR or VK_VIDEO_CODING_CONTROL_ENCODE_QUALITY_LEVEL_BIT_KHR\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "const LogObjectList objlist(commandBuffer, vs_state->Handle());\nskip |= LogError(\"VUID-vkCmdControlVideoCodingKHR-pCodingControlInfo-08243\", objlist,\n                 control_info_loc.dot(Field::flags), flags_require_encode_msg,\n                 \"VK_VIDEO_CODING_CONTROL_ENCODE_QUALITY_LEVEL_BIT_KHR\", FormatHandle(*vs_state).c_str());\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdDecodeVideoKHR-commandBuffer-07137\", \"If commandBuffer is a protected command buffer and protectedNoFault is not supported, then pDecodeInfo->srcBuffer must be a protected buffer\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "\"VUID-vkCmdDecodeVideoKHR-commandBuffer-07136\", where);\n  \"VUID-vkCmdDecodeVideoKHR-commandBuffer-07137\", where);\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkVideoDecodeInfoKHR-srcBufferRange-07167\", \"srcBufferRange must be less than or equal to the size of srcBuffer minus srcBufferOffset\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (pDecodeInfo->srcBufferOffset + pDecodeInfo->srcBufferRange > buffer_state->create_info.size) {\n    const LogObjectList objlist(commandBuffer, vs_state->Handle(), pDecodeInfo->srcBuffer);\n    skip |= LogError(\"VUID-VkVideoDecodeInfoKHR-srcBufferRange-07167\", objlist, decode_info_loc.dot(Field::srcBufferOffset),\n                     \"(%\" PRIu64 \") plus pDecodeInfo->srcBufferRange (%\" PRIu64\n                     \") must be less than or equal to the size (%\" PRIu64 \") of pDecodeInfo->srcBuffer (%s).\",\n                     pDecodeInfo->srcBufferOffset, pDecodeInfo->srcBufferRange, buffer_state->create_info.size,\n                     FormatHandle(pDecodeInfo->srcBuffer).c_str());\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdDecodeVideoKHR-pDecodeInfo-07173\", \"If pDecodeInfo->pSetupReferenceSlot is not NULL, then pDecodeInfo->pSetupReferenceSlot->pPictureResource->codedOffset must be an integer multiple of codedOffsetGranularity\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (setup_resource) {\n                                         \"VUID-vkCmdDecodeVideoKHR-pDecodeInfo-07173\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdDecodeVideoKHR-pDecodeInfo-07145\", \"pDecodeInfo->dstPictureResource.codedExtent must be between minCodedExtent and maxCodedExtent, inclusive, the bound video session was created with\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "auto dst_resource = vvl::VideoPictureResource(*this, pDecodeInfo->dstPictureResource);\n                                 \"VUID-vkCmdDecodeVideoKHR-pDecodeInfo-07144\", \"VUID-vkCmdDecodeVideoKHR-pDecodeInfo-07145\");\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdDecodeVideoKHR-pDecodeInfo-07146\", \"pDecodeInfo->dstPictureResource.imageViewBinding must have been created with VK_IMAGE_USAGE_VIDEO_DECODE_DST_BIT_KHR\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((supported_usage & VK_IMAGE_USAGE_VIDEO_DECODE_DST_BIT_KHR) == 0) {\n    const LogObjectList objlist(commandBuffer, vs_state->Handle(), dst_resource.image_view_state->Handle(),\n    skip |= LogError(\"VUID-vkCmdDecodeVideoKHR-pDecodeInfo-07146\", objlist,\n                     decode_info_loc.dot(Field::dstPictureResource).dot(Field::imageViewBinding),\n                     \"(%s created from %s) was not created with VK_IMAGE_USAGE_VIDEO_DECODE_DST_BIT_KHR \"\n                     \"thus it cannot be used as a decode output picture with the bound video session %s \"\n                     \"that was created with a decode operation.\",\n                     FormatHandle(dst_resource.image_view_state->Handle()).c_str(),\n                     FormatHandle(dst_resource.image_state->Handle()).c_str(), FormatHandle(*vs_state).c_str());\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdDecodeVideoKHR-slotIndex-07256\", \"The slotIndex member of each element of pDecodeInfo->pReferenceSlots must be less than the VkVideoSessionCreateInfoKHR::maxDpbSlots specified when the bound video session was created\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "pDecodeInfo->pReferenceSlots[i].slotIndex);\n} else if ((uint32_t)pDecodeInfo->pReferenceSlots[i].slotIndex >= vs_state->create_info.maxDpbSlots) {\nconst LogObjectList objlist(commandBuffer, vs_state->Handle());\nskip |= LogError(\"VUID-vkCmdDecodeVideoKHR-slotIndex-07256\", objlist,\ndecode_info_loc.dot(Field::pReferenceSlots, i).dot(Field::slotIndex),\n\"(%d) must be smaller than the maxDpbSlots (%u) the bound video session %s \"\n\"was created with.\",\npDecodeInfo->pReferenceSlots[i].slotIndex, vs_state->create_info.maxDpbSlots,\nFormatHandle(*vs_state).c_str());\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkVideoDecodeInfoKHR-pPictureResource-07172\", \"The pPictureResource member of each element of pReferenceSlots must not be NULL\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "\"VUID-vkCmdDecodeVideoKHR-pPictureResource-07255\", &hit_error);\nskip |= LogError(\"VUID-VkVideoDecodeInfoKHR-pPictureResource-07172\", commandBuffer,\ndecode_info_loc.dot(Field::pReferenceSlots, i).dot(Field::pPictureResource), \"is NULL.\");\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdDecodeVideoKHR-queryPool-08368\", \"If the bound video session was created with VK_VIDEO_SESSION_CREATE_INLINE_QUERIES_BIT_KHR, then the queryPool specified in the VkVideoInlineQueryInfoKHR structure included in the pNext chain of pDecodeInfo must have been created with a VkVideoProfileInfoKHR structure included in the pNext chain of VkQueryPoolCreateInfo identical to the one specified in VkVideoSessionCreateInfoKHR::pVideoProfile the bound video session was created with\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (vs_state->profile != query_pool_state->supported_video_profile) {\n    const LogObjectList objlist(commandBuffer, inline_query_info->queryPool, vs_state->Handle());\n    skip |= LogError(\"VUID-vkCmdDecodeVideoKHR-queryPool-08368\", objlist,\n                     decode_info_loc.pNext(Struct::VkVideoInlineQueryInfoKHR, Field::queryPool),\n                     \"video profile %s that was created with does not \"\n                     \"match the video profile of the bound video session %s.\",\n                     FormatHandle(*query_pool_state).c_str(), FormatHandle(*vs_state).c_str());\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdDecodeVideoKHR-pDecodeInfo-07268\", \"If the bound video session was created with the video codec operation VK_VIDEO_CODEC_OPERATION_DECODE_H264_BIT_KHR and an active reference picture corresponding to any element of pDecodeInfo->pReferenceSlots represents a bottom field, then the DPB slot index of the bound video session specified by the slotIndex member of that element must be currently associated with a bottom field picture matching the video picture resource specified by the pPictureResource member of the same element at the time the command is executed on the device\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (slot.picture_id.ContainsBottomField() &&\n    !dev_state.IsSlotPicture(slot.index, vvl::VideoPictureID::BottomField(), slot.resource)) {\n    skip |= log_picture_kind_error(slot, \"VUID-vkCmdDecodeVideoKHR-pDecodeInfo-07268\", \"bottom field\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdEncodeVideoKHR-commandBuffer-08203\", \"If commandBuffer is a protected command buffer and protectedNoFault is not supported, then pEncodeInfo->dstBuffer must be a protected buffer\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "\"VUID-vkCmdEncodeVideoKHR-commandBuffer-08202\", where);\n  \"VUID-vkCmdEncodeVideoKHR-commandBuffer-08203\", where);\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkVideoEncodeInfoKHR-dstBufferRange-08238\", \"dstBufferRange must be less than or equal to the size of dstBuffer minus dstBufferOffset\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (pEncodeInfo->dstBufferOffset + pEncodeInfo->dstBufferRange > buffer_state->create_info.size) {\n    const LogObjectList objlist(commandBuffer, vs_state->Handle(), pEncodeInfo->dstBuffer);\n    skip |= LogError(\"VUID-VkVideoEncodeInfoKHR-dstBufferRange-08238\", objlist, encode_info_loc.dot(Field::dstBufferOffset),\n                     \"(%\" PRIu64 \") plus pEncodeInfo->dstBufferRange (%\" PRIu64\n                     \") must be less than or equal to the size (%\" PRIu64 \") of pEncodeInfo->dstBuffer (%s).\",\n                     pEncodeInfo->dstBufferOffset, pEncodeInfo->dstBufferRange, buffer_state->create_info.size,\n                     FormatHandle(pEncodeInfo->dstBuffer).c_str());\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdEncodeVideoKHR-pEncodeInfo-08214\", \"If pEncodeInfo->pSetupReferenceSlot is not NULL, then pEncodeInfo->pSetupReferenceSlot->pPictureResource->codedOffset must be an integer multiple of codedOffsetGranularity\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (setup_resource) {\n                                         \"VUID-vkCmdEncodeVideoKHR-pEncodeInfo-08214\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdEncodeVideoKHR-pEncodeInfo-08209\", \"pEncodeInfo->srcPictureResource.codedExtent must be between minCodedExtent and maxCodedExtent, inclusive, the bound video session was created with\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "auto src_resource = vvl::VideoPictureResource(*this, pEncodeInfo->srcPictureResource);\n                                 \"VUID-vkCmdEncodeVideoKHR-pEncodeInfo-08208\", \"VUID-vkCmdEncodeVideoKHR-pEncodeInfo-08209\");\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdEncodeVideoKHR-pEncodeInfo-08210\", \"pEncodeInfo->srcPictureResource.imageViewBinding must have been created with VK_IMAGE_USAGE_VIDEO_ENCODE_SRC_BIT_KHR\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((supported_usage & VK_IMAGE_USAGE_VIDEO_ENCODE_SRC_BIT_KHR) == 0) {\n    const LogObjectList objlist(commandBuffer, vs_state->Handle(), src_resource.image_view_state->Handle(),\n    skip |= LogError(\"VUID-vkCmdEncodeVideoKHR-pEncodeInfo-08210\", objlist,\n                     encode_info_loc.dot(Field::srcPictureResource).dot(Field::imageViewBinding),\n                     \"(%s created from %s) was not created with VK_IMAGE_USAGE_VIDEO_ENCODE_SRC_BIT_KHR \"\n                     \"thus it cannot be used as an encode input picture with the bound video session %s \"\n                     \"that was created with an encode operation.\",\n                     FormatHandle(src_resource.image_view_state->Handle()).c_str(),\n                     FormatHandle(src_resource.image_state->Handle()).c_str(), FormatHandle(*vs_state).c_str());\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdEncodeVideoKHR-pPictureResource-08219\", \"The pPictureResource member of each element of pEncodeInfo->pReferenceSlots must match one of the bound reference picture resource associated with the DPB slot index specified in the slotIndex member of that element\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "skip |= LogError(\"VUID-vkCmdEncodeVideoKHR-pPictureResource-08219\", commandBuffer, error_obj.location,\n                 \"the bound video picture resource specified in \"\n                 \"pEncodeInfo->pReferenceSlots[%u].pPictureResource is not currently \"\n                 \"associated with the DPB slot index specifed in \"\n                 \"pEncodeInfo->pReferenceSlots[%u].slotIndex (%d).\",\n                 i, i, pEncodeInfo->pReferenceSlots[i].slotIndex);\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdEncodeVideoKHR-opCount-07174\", \"For each active query, the active query index corresponding to the query type of that query plus opCount must be less than or equal to the last activatable query index corresponding to the query type of that query plus one\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (query.active_query_index + op_count > query.last_activatable_query_index + 1) {\n    skip |= LogError(\"VUID-vkCmdEncodeVideoKHR-opCount-07174\", commandBuffer, error_obj.location,\n                     \"not enough activatable queries for query type %s \"\n                     \"with opCount %u, active query index %u, and last activatable query index %u.\",\n                     string_VkQueryType(query_pool_state->create_info.queryType), op_count, query.active_query_index,\n                     query.last_activatable_query_index);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdEncodeVideoKHR-None-07012\", \"The bound video session must not be in uninitialized state at the time the command is executed on the device\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!vs_state) return;\nconst Location loc = record_obj.location;\nEnqueueVerifyVideoSessionInitialized(*cb_state, *vs_state, loc, \"VUID-vkCmdEncodeVideoKHR-None-07012\");\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkSwapchainCreateInfoKHR-pNext-07781\", \"If a VkSwapchainPresentScalingCreateInfoEXT structure was not included in the pNext chain, or it is included and VkSwapchainPresentScalingCreateInfoEXT::scalingBehavior is zero then imageExtent must be between minImageExtent and maxImageExtent, inclusive, where minImageExtent and maxImageExtent are members of the VkSurfaceCapabilitiesKHR structure returned by vkGetPhysicalDeviceSurfaceCapabilitiesKHR for the surface\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "// TODO - Combine VUs with other same VUID\n    \"VUID-VkSwapchainCreateInfoKHR-pNext-07781\", device, create_info_loc.dot(Field::imageExtent),\n    \"(%s), which is outside the bounds returned by \"\n    \"vkGetPhysicalDeviceSurfaceCapabilitiesKHR(): currentExtent = (%s), minImageExtent = (%s), \"\n    \"maxImageExtent = (%s).\",\n    string_VkExtent2D(create_info.imageExtent).c_str(), string_VkExtent2D(surface_caps.currentExtent).c_str(),\n    string_VkExtent2D(surface_caps.minImageExtent).c_str(), string_VkExtent2D(surface_caps.maxImageExtent).c_str());\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkSwapchainPresentScalingCreateInfoEXT-presentGravityY-07769\", \"presentGravityY must not have more than one bit set\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (GetBitSetCount(pres_scale_ci->presentGravityY) > 1) {\n    if (LogError(\"VUID-VkSwapchainPresentScalingCreateInfoEXT-presentGravityY-07769\", device,\n                 create_info_loc.pNext(Struct::VkSwapchainPresentScalingCreateInfoEXT, Field::presentGravityY),\n                 \"(%s) must not have more than one bit set.\",\n                 string_VkPresentGravityFlagsEXT(pres_scale_ci->presentGravityY).c_str())) {\n        skip |= true;\n    }\n}\nASSERT_AND_RETURN_SKIP(surface_state);\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkSwapchainPresentScalingCreateInfoEXT-scalingBehavior-07771\", \"If the swapchain is created with VkSwapchainPresentModesCreateInfoEXT, scalingBehavior must be a valid scaling method for the surface as returned in VkSurfacePresentScalingCapabilitiesEXT::supportedPresentScaling, given each present mode in VkSwapchainPresentModesCreateInfoEXT::pPresentModes in VkSurfacePresentModeEXT\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((scaling_caps.supportedPresentScaling != 0) &&\n    (scaling_caps.supportedPresentScaling & pres_scale_ci->scalingBehavior) == 0) {\n    if (LogError(\"VUID-VkSwapchainPresentScalingCreateInfoEXT-scalingBehavior-07771\", device,\n                 create_info_loc.pNext(Struct::VkSwapchainPresentScalingCreateInfoEXT, Field::scalingBehavior),\n                 \"(%s) is not a valid present scaling benavior as returned in \"\n                 \"VkSurfacePresentScalingCapabilitiesEXT::supportedPresentScaling for %s (%s).\",\n                 string_VkPresentScalingFlagsEXT(pres_scale_ci->scalingBehavior).c_str(),\n                 present_mode_loc.Fields().c_str(),\n                 string_VkPresentScalingFlagsEXT(scaling_caps.supportedPresentScaling).c_str())) {\n        skip |= true;\n    }\n}\nif ((scaling_caps.supportedPresentGravityX != 0) &&\n    (scaling_caps.supportedPresentGravityX & pres_scale_ci->presentGravityX) == 0) {\n    if (LogError(\"VUID-VkSwapchainPresentScalingCreateInfoEXT-presentGravityX-07773\", device,\n                 create_info_loc.pNext(Struct::VkSwapchainPresentScalingCreateInfoEXT, Field::presentGravityX),\n                 \"(%s) is not a valid x-axis present gravity as returned in \"\n                 \"VkSurfacePresentScalingCapabilitiesEXT::supportedPresentGravityX for %s (%s).\",\n                 string_VkPresentGravityFlagsEXT(pres_scale_ci->presentGravityX).c_str(),\n                 present_mode_loc.Fields().c_str(),\n                 string_VkPresentGravityFlagsEXT(scaling_caps.supportedPresentGravityX).c_str())) {\n        skip |= true;\n    }\n}\nif ((scaling_caps.supportedPresentGravityY != 0) &&\n    (scaling_caps.supportedPresentGravityY & pres_scale_ci->presentGravityY) == 0) {\n    if (LogError(\"VUID-VkSwapchainPresentScalingCreateInfoEXT-presentGravityY-07775\", device,\n                 create_info_loc.pNext(Struct::VkSwapchainPresentScalingCreateInfoEXT, Field::presentGravityY),\n                 \"(%s) is not a valid y-axis present gravity as returned in \"\n                 \"VkSurfacePresentScalingCapabilitiesEXT::supportedPresentGravityY for %s (%s).\",\n                 string_VkPresentGravityFlagsEXT(pres_scale_ci->presentGravityY).c_str(),\n                 present_mode_loc.Fields().c_str(),\n                 string_VkPresentGravityFlagsEXT(scaling_caps.supportedPresentGravityY).c_str())) {\n        skip |= true;\n    }\n}\n}\n}\n}\nreturn skip;\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkSwapchainCreateInfoKHR-oldSwapchain-01933\", \"If oldSwapchain is not VK_NULL_HANDLE, oldSwapchain must be a non-retired swapchain associated with native window referred to by surface\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (old_swapchain_state->retired) {\n    if (LogError(\"VUID-VkSwapchainCreateInfoKHR-oldSwapchain-01933\", create_info.oldSwapchain,\n                 create_info_loc.dot(Field::oldSwapchain), \"is retired\")) {\n        return true;\n    }\n}\n}\nif ((create_info.imageExtent.width == 0) || (create_info.imageExtent.height == 0)) {\nif (LogError(\"VUID-VkSwapchainCreateInfoKHR-imageExtent-01689\", device, create_info_loc.dot(Field::imageExtent),\n             \"(%s) is invalid.\", string_VkExtent2D(create_info.imageExtent).c_str())) {\n    return true;\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkSwapchainCreateInfoKHR-preTransform-01279\", \"preTransform must be one of the bits present in the supportedTransforms member of the VkSurfaceCapabilitiesKHR structure returned by vkGetPhysicalDeviceSurfaceCapabilitiesKHR for the surface\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "return LogError(\"VUID-VkSwapchainCreateInfoKHR-preTransform-01279\", device, create_info_loc.dot(Field::preTransform),\n                \"is not supported, support values are:\\n%s.\", ss.str().c_str());\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkSwapchainCreateInfoKHR-flags-03187\", \"If flags contains VK_SWAPCHAIN_CREATE_PROTECTED_BIT_KHR, then VkSurfaceProtectedCapabilitiesKHR::supportsProtected must be VK_TRUE in the VkSurfaceProtectedCapabilitiesKHR structure returned by vkGetPhysicalDeviceSurfaceCapabilities2KHR for surface\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (log_error) {\n    if (LogError(\"VUID-VkSwapchainCreateInfoKHR-flags-03187\", device, create_info_loc.dot(Field::flags),\n                 \"contains VK_SWAPCHAIN_CREATE_PROTECTED_BIT_KHR but the surface \"\n                 \"capabilities does not have VkSurfaceProtectedCapabilitiesKHR.supportsProtected set to VK_TRUE.\")) {\n        return true;\n    }\n}\n}\n// Validate pCreateInfo values with the results of vkGetPhysicalDeviceSurfaceFormats2KHR():\n{\n// Validate pCreateInfo->imageFormat against VkSurfaceFormatKHR::format:\nbool found_format = false;\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkSwapchainCreateInfoKHR-imageUsage-01384\", \"If presentMode is VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR or VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR, imageUsage must be a subset of the supported usage flags present in the sharedPresentSupportedUsageFlags member of the VkSharedPresentSurfaceCapabilitiesKHR structure returned by vkGetPhysicalDeviceSurfaceCapabilities2KHR for surface\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (image_usage != (image_usage & shared_present_capabilities.sharedPresentSupportedUsageFlags)) {\n    if (LogError(\"VUID-VkSwapchainCreateInfoKHR-imageUsage-01384\", device, create_info_loc.dot(Field::imageUsage),\n                 \"(%s), but the supported flag bits for %s present mode are %s.\",\n                 string_VkImageUsageFlags(image_usage).c_str(), string_VkPresentModeKHR(create_info.presentMode),\n                 string_VkImageUsageFlags(shared_present_capabilities.sharedPresentSupportedUsageFlags).c_str())) {\n        return true;\n    }\n}\n}\nif ((create_info.imageSharingMode == VK_SHARING_MODE_CONCURRENT) && create_info.pQueueFamilyIndices) {\nbool skip1 = ValidatePhysicalDeviceQueueFamilies(create_info.queueFamilyIndexCount, create_info.pQueueFamilyIndices,\n                                                 create_info_loc, \"VUID-VkSwapchainCreateInfoKHR-imageSharingMode-01428\");\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkSwapchainCreateInfoKHR-imageFormat-01778\", \"The implied image creation parameters of the swapchain must be supported as reported by vkGetPhysicalDeviceImageFormatProperties\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "} else if ((image_usage & VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT) &&\n    if (LogError(\"VUID-VkSwapchainCreateInfoKHR-imageFormat-01778\", device, create_info_loc.dot(Field::imageFormat),\n                 \"%s with tiling VK_IMAGE_TILING_OPTIMAL does not support usage that includes \"\n                 \"VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT.\",\n                 string_VkFormat(create_info.imageFormat))) {\n        return true;\n    }\n} else if ((image_usage & VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT) &&\n           !(tiling_features & VK_FORMAT_FEATURE_2_DEPTH_STENCIL_ATTACHMENT_BIT_KHR)) {\n    if (LogError(\"VUID-VkSwapchainCreateInfoKHR-imageFormat-01778\", device, create_info_loc.dot(Field::imageFormat),\n                 \"%s with tiling VK_IMAGE_TILING_OPTIMAL does not support usage that includes \"\n                 \"VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT.\",\n                 string_VkFormat(create_info.imageFormat))) {\n        return true;\n    }\n} else if ((image_usage & VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT) &&\n           !(tiling_features &\n             (VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BIT_KHR | VK_FORMAT_FEATURE_2_DEPTH_STENCIL_ATTACHMENT_BIT_KHR))) {\n    if (LogError(\"VUID-VkSwapchainCreateInfoKHR-imageFormat-01778\", device, create_info_loc.dot(Field::imageFormat),\n                 \"%s with tiling VK_IMAGE_TILING_OPTIMAL does not support usage that includes \"\n                 \"VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT or VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT.\",\n                 string_VkFormat(create_info.imageFormat))) {\n        return true;\n    }\n}\nconst VkImageCreateInfo image_create_info = GetSwapchainImpliedImageCreateInfo(create_info);\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkSwapchainCreateInfoKHR-imageFormat-01778\", \"The implied image creation parameters of the swapchain must be supported as reported by vkGetPhysicalDeviceImageFormatProperties\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((create_info.imageExtent.width > image_properties.maxExtent.width) ||\n    (create_info.imageExtent.height > image_properties.maxExtent.height)) {\n    if (LogError(\"VUID-VkSwapchainCreateInfoKHR-imageFormat-01778\", device, create_info_loc.dot(Field::imageExtent),\n                 \"(%s), which is bigger than max extent (%s)\"\n                 \"returned by vkGetPhysicalDeviceImageFormatProperties(): \"\n                 \"for imageFormat %s with tiling VK_IMAGE_TILING_OPTIMAL.\",\n                 string_VkExtent2D(create_info.imageExtent).c_str(), string_VkExtent3D(image_properties.maxExtent).c_str(),\n                 string_VkFormat(create_info.imageFormat))) {\n        return true;\n    }\n}\nif ((create_info.flags & VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR) && physical_device_count == 1) {\n    if (LogError(\"VUID-VkSwapchainCreateInfoKHR-physicalDeviceCount-01429\", device, create_info_loc.dot(Field::flags),\n                 \"containing VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR\"\n                 \"but logical device was created with VkDeviceGroupDeviceCreateInfo::physicalDeviceCount equal to 1.\"\n                 \"The logical device may have been created without explicitly using VkDeviceGroupDeviceCreateInfo, or with\"\n                 \"VkDeviceGroupDeviceCreateInfo::physicalDeviceCount equal to zero. \"\n                 \"It is equivalent to using VkDeviceGroupDeviceCreateInfo with \"\n                 \"VkDeviceGroupDeviceCreateInfo::physicalDeviceCount equal to 1.\")) {\n        return true;\n    }\n}\nconst auto image_compression_control = vku::FindStructInPNextChain<VkImageCompressionControlEXT>(create_info.pNext);\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkPresentInfoKHR-pImageIndices-01430\", \"Each element of pImageIndices must be the index of a presentable image acquired from the swapchain specified by the corresponding element of the pSwapchains array, and the presented image subresource must be in the VK_IMAGE_LAYOUT_PRESENT_SRC_KHR or VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR layout at the time the operation is executed on a VkDevice\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "pPresentInfo->pImageIndices[i], static_cast<uint32_t>(swapchain_data->images.size()));\n} else if (!swapchain_data->images[pPresentInfo->pImageIndices[i]].acquired) {\nassert(swapchain_data->images[pPresentInfo->pImageIndices[i]].image_state);\nskip |= LogError(\"VUID-VkPresentInfoKHR-pImageIndices-01430\", pPresentInfo->pSwapchains[i], swapchain_loc,\n\"image at index %\" PRIu32 \" was not acquired from the swapchain.\", pPresentInfo->pImageIndices[i]);\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkRectLayerKHR-offset-04864\", \"The sum of offset and extent, after being transformed according to the preTransform member of the VkSwapchainCreateInfoKHR structure, must be no greater than the imageExtent member of the VkSwapchainCreateInfoKHR structure passed to vkCreateSwapchainKHR\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((rect.offset.y + rect.extent.height) > swapchain_data->create_info.imageExtent.height) {\n    skip |= LogError(\"VUID-VkRectLayerKHR-offset-04864\", pPresentInfo->pSwapchains[i], rect_loc,\n                     \"sum of offset.y (%\" PRId32 \") and extent.height (%\" PRIu32\n                     \") after applying preTransform (%s) is greater \"\n                     \"than the corresponding swapchain's imageExtent.height (%\" PRIu32 \").\",\n                     rect.offset.y, rect.extent.height,\n                     string_VkSurfaceTransformFlagBitsKHR(swapchain_data->create_info.preTransform),\n                     swapchain_data->create_info.imageExtent.height);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkPresentIdKHR-presentIds-04999\", \"Each presentIds entry must be greater than any previous presentIds entry passed for the associated pSwapchains entry\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((present_id_info->pPresentIds[i] != 0) &&\n    (present_id_info->pPresentIds[i] <= swapchain_state->max_present_id)) {\n    skip |= LogError(\"VUID-VkPresentIdKHR-presentIds-04999\", pPresentInfo->pSwapchains[i],\n                     present_info_loc.pNext(Struct::VkPresentIdKHR, Field::pPresentIds, i),\n                     \"%\" PRIu64 \" and the largest presentId sent for this swapchain is %\" PRIu64\n                     \". Each presentIds entry must be greater than any previous presentIds entry passed for the \"\n                     \"associated pSwapchains entry\",\n                     present_id_info->pPresentIds[i], swapchain_state->max_present_id);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkSwapchainPresentModeInfoEXT-pPresentModes-07761\", \"Each entry in pPresentModes must be a presentation mode specified in VkSwapchainPresentModesCreateInfoEXT::pPresentModes when creating the entry's corresponding swapchain\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!found_match) {\n    skip |= LogError(\"VUID-VkSwapchainPresentModeInfoEXT-pPresentModes-07761\", pPresentInfo->pSwapchains[i],\n                     present_info_loc.pNext(Struct::VkSwapchainPresentModeInfoEXT, Field::presentMode),\n                     \"(%s) that was not specified in a VkSwapchainPresentModesCreateInfoEXT \"\n                     \"structure extending VkCreateSwapchainsKHR.\",\n                     string_VkPresentModeKHR(present_mode));\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkAcquireNextImageInfoKHR-semaphore-01288\", \"If semaphore is not VK_NULL_HANDLE, it must be unsignaled\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!semaphore_state->CanBinaryBeSignaled()) {\n        version_2 ? \"VUID-VkAcquireNextImageInfoKHR-semaphore-01288\" : \"VUID-vkAcquireNextImageKHR-semaphore-01286\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkAcquireNextImageKHR-fence-01287\", \"If fence is not VK_NULL_HANDLE, fence must be unsignaled\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (auto fence_state = Get<vvl::Fence>(fence)) {\n    const LogObjectList objlist(device, fence);\n    skip |= ValidateFenceForSubmit(*fence_state, \"VUID-vkAcquireNextImageKHR-fence-01287\",\n                                   \"VUID-vkAcquireNextImageKHR-fence-01287\", objlist, loc);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkAcquireNextImageKHR-semaphore-03265\", \"semaphore must have a VkSemaphoreType of VK_SEMAPHORE_TYPE_BINARY\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "VkSemaphore semaphore, VkFence fence, uint32_t *pImageIndex,\nreturn ValidateAcquireNextImage(device, swapchain, timeout, semaphore, fence, error_obj.location,\n\"VUID-vkAcquireNextImageKHR-semaphore-03265\");\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkWaitForPresentKHR-swapchain-04997\", \"swapchain must not be in the retired state\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (swapchain_state->retired) {\n    skip |= LogError(\"VUID-vkWaitForPresentKHR-swapchain-04997\", swapchain, error_obj.location,\n                     \"called with a retired swapchain.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkGetPhysicalDeviceXlibPresentationSupportKHR-queueFamilyIndex-01315\", \"queueFamilyIndex must be less than pQueueFamilyPropertyCount returned by vkGetPhysicalDeviceQueueFamilyProperties for the given physicalDevice\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "return ValidateQueueFamilyIndex(*pd_state, queueFamilyIndex,\n                                \"VUID-vkGetPhysicalDeviceXlibPresentationSupportKHR-queueFamilyIndex-01315\",\n                                error_obj.location.dot(Field::queueFamilyIndex));\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkDisplaySurfaceCreateInfoKHR-width-01256\", \"The width and height members of imageExtent must be less than or equal to VkPhysicalDeviceLimits::maxImageDimension2D\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (height >= device_properties.limits.maxImageDimension2D) {\n    skip |= LogError(\"VUID-VkDisplaySurfaceCreateInfoKHR-width-01256\", display_mode,\n                     create_info_loc.dot(Field::imageExtent).dot(Field::height),\n                     \"(%\" PRIu32 \") exceeds device limit maxImageDimension2D (%\" PRIu32 \").\", height,\n                     device_properties.limits.maxImageDimension2D);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkAcquireFullScreenExclusiveModeEXT-swapchain-02676\", \"swapchain must not currently have exclusive full-screen access\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (swapchain_state->exclusive_full_screen_access) {\n    skip |= LogError(\"VUID-vkAcquireFullScreenExclusiveModeEXT-swapchain-02676\", device, error_obj.location,\n                     \"swapchain %s already has exclusive full-screen access.\", FormatHandle(swapchain).c_str());\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkGetPhysicalDeviceSurfacePresentModes2EXT-pSurfaceInfo-06522\", \"If pSurfaceInfo->surface is not VK_NULL_HANDLE, pSurfaceInfo->surface must be supported by physicalDevice, as reported by vkGetPhysicalDeviceSurfaceSupportKHR or an equivalent platform-specific mechanism\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "skip |= ValidatePhysicalDeviceSurfaceSupport(physicalDevice, pSurfaceInfo->surface,\n                                             \"VUID-vkGetPhysicalDeviceSurfacePresentModes2EXT-pSurfaceInfo-06522\",\n                                             error_obj.location);\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkGetPhysicalDeviceSurfaceCapabilities2KHR-pSurfaceInfo-06522\", \"If pSurfaceInfo->surface is not VK_NULL_HANDLE, pSurfaceInfo->surface must be supported by physicalDevice, as reported by vkGetPhysicalDeviceSurfaceSupportKHR or an equivalent platform-specific mechanism\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "skip |= ValidatePhysicalDeviceSurfaceSupport(physicalDevice, pSurfaceInfo->surface,\n                                             \"VUID-vkGetPhysicalDeviceSurfaceCapabilities2KHR-pSurfaceInfo-06522\",\n                                             error_obj.location);\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkGetPhysicalDeviceSurfaceFormatsKHR-surface-06525\", \"If surface is not VK_NULL_HANDLE, surface must be supported by physicalDevice, as reported by vkGetPhysicalDeviceSurfaceSupportKHR or an equivalent platform-specific mechanism\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "bool skip = false;\nskip |= ValidatePhysicalDeviceSurfaceSupport(physicalDevice, surface, \"VUID-vkGetPhysicalDeviceSurfaceFormatsKHR-surface-06525\",\n                                             error_obj.location);\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkSamplerYcbcrConversionCreateInfo-format-01650\", \"The potential format features of the sampler Y'CBCR conversion must support VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT or VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (((format_features & VK_FORMAT_FEATURE_2_MIDPOINT_CHROMA_SAMPLES_BIT_KHR) == 0) &&\n    skip |= LogError(\"VUID-VkSamplerYcbcrConversionCreateInfo-format-01650\", device, create_info_loc.dot(Field::format),\n                     \"(%s) does not support either VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT or \"\n                     \"VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT\",\n                     string_VkFormat(conversion_format));\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkSamplerYcbcrConversionCreateInfo-forceExplicitReconstruction-01656\", \"If the potential format features of the sampler Y'CBCR conversion do not support VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT forceExplicitReconstruction must be VK_FALSE\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (((format_features & VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR) ==\n    (pCreateInfo->forceExplicitReconstruction == VK_TRUE)) {\n    skip |= LogError(\"VUID-VkSamplerYcbcrConversionCreateInfo-forceExplicitReconstruction-01656\", device,\n                     create_info_loc.dot(Field::format),\n                     \"(%s) does not support \"\n                     \"VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT so \"\n                     \"forceExplicitReconstruction must be VK_FALSE\",\n                     string_VkFormat(conversion_format));\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkSamplerCustomBorderColorCreateInfoEXT-format-04015\", \"If the sampler is used to sample an image view of VK_FORMAT_B4G4R4A4_UNORM_PACK16, VK_FORMAT_B5G6R5_UNORM_PACK16, VK_FORMAT_A1B5G5R5_UNORM_PACK16_KHR, or VK_FORMAT_B5G5R5A1_UNORM_PACK16 format then format must not be VK_FORMAT_UNDEFINED\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "const LogObjectList objlist(set, sampler_state->Handle(), image_view_state->Handle());\nreturn dev_state.LogError(\"VUID-VkSamplerCustomBorderColorCreateInfoEXT-format-04015\", objlist, loc,\n                          \"the descriptor %s has %s which has a custom border color with format = \"\n                          \"VK_FORMAT_UNDEFINED and is used to sample an image \"\n                          \"view %s with format %s\",\n                          DescribeDescriptor(binding_info, index).c_str(),\n                          FormatHandle(sampler_state->Handle()).c_str(),\n                          FormatHandle(image_view_state->Handle()).c_str(), string_VkFormat(image_view_format));\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkShaderCreateInfoEXT-pCode-08736\", \"If codeType is VK_SHADER_CODE_TYPE_SPIRV_EXT, pCode must point to valid SPIR-V code, formatted and packed as described by the Khronos SPIR-V Specification\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "\"VUID-VkMemoryToImageCopyEXT-pHostPointer-09061\", \"VUID-VkImageToMemoryCopyEXT-pHostPointer-09066\"\n\"VUID-VkShaderModuleCreateInfo-pCode-08736\", \"VUID-VkShaderCreateInfoEXT-pCode-08736\",\n\"VUID-VkShaderModuleCreateInfo-pCode-08738\", \"VUID-VkShaderCreateInfoEXT-pCode-08738\",\n// These are checked already in VUID-vkGetPrivateData-objectType-04018 and VUID-vkSetPrivateData-objectHandle-04016\n\"VUID-vkGetPrivateData-device-parameter\",\n\"VUID-vkSetPrivateData-device-parameter\",\n// These ask if pData is a certain size, but no way to validate a pointer to memory is a certain size.\n// There is already another implicit VU checking if pData is not null.\n\"VUID-vkGetBufferOpaqueCaptureDescriptorDataEXT-pData-08073\",\n\"VUID-vkGetImageOpaqueCaptureDescriptorDataEXT-pData-08077\",\n\"VUID-vkGetImageViewOpaqueCaptureDescriptorDataEXT-pData-08081\",\n\"VUID-vkGetSamplerOpaqueCaptureDescriptorDataEXT-pData-08085\",\n\"VUID-vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT-pData-08089\",\n// These would need to be checked by the loader as it uses these to call into the layers/drivers\n\"VUID-vkEnumerateInstanceVersion-pApiVersion-parameter\",\n\"VUID-vkEnumerateDeviceExtensionProperties-pPropertyCount-parameter\",\n\"VUID-vkEnumerateDeviceLayerProperties-pPropertyCount-parameter\",\n\"VUID-vkEnumerateInstanceLayerProperties-pPropertyCount-parameter\",\n\"VUID-vkEnumerateInstanceExtensionProperties-pPropertyCount-parameter\",\n// Caches are called between application runs so there is no way for a layer to track this information\n\"VUID-VkPipelineCacheCreateInfo-initialDataSize-00768\",\n\"VUID-VkPipelineCacheCreateInfo-initialDataSize-00769\",\n\"VUID-VkValidationCacheCreateInfoEXT-initialDataSize-01534\",\n\"VUID-VkValidationCacheCreateInfoEXT-initialDataSize-01535\",\n// The header data returned from vkGetPipelineCacheData is the driver's responsibility to make correct.\n// There is CTS for this, and not within the scope of the Validation Layers to check\n\"VUID-VkPipelineCacheHeaderVersionOne-headerSize-04967\",\n\"VUID-VkPipelineCacheHeaderVersionOne-headerVersion-04968\",\n\"VUID-VkPipelineCacheHeaderVersionOne-headerSize-08990\",\n// These implicit VUs ask to check for a valid structure that has no sType,\n// there is nothing that can actually be validated\n//\n// VkImageSubresourceLayers\n\"VUID-VkImageBlit-dstSubresource-parameter\",\n\"VUID-VkImageBlit-srcSubresource-parameter\",\n\"VUID-VkImageBlit2-dstSubresource-parameter\",\n\"VUID-VkImageBlit2-srcSubresource-parameter\",\n\"VUID-VkImageCopy-dstSubresource-parameter\",\n\"VUID-VkImageCopy-srcSubresource-parameter\",\n\"VUID-VkImageCopy2-dstSubresource-parameter\",\n\"VUID-VkImageCopy2-srcSubresource-parameter\",\n\"VUID-VkImageResolve-dstSubresource-parameter\",\n\"VUID-VkImageResolve-srcSubresource-parameter\",\n\"VUID-VkImageResolve2-dstSubresource-parameter\",\n\"VUID-VkImageResolve2-srcSubresource-parameter\",\n\"VUID-VkBufferImageCopy-imageSubresource-parameter\",\n\"VUID-VkBufferImageCopy2-imageSubresource-parameter\",\n\"VUID-VkMemoryToImageCopyEXT-imageSubresource-parameter\",\n\"VUID-VkImageToMemoryCopyEXT-imageSubresource-parameter\",\n\"VUID-VkCopyMemoryToImageIndirectCommandNV-imageSubresource-parameter\",\n// VkImageSubresourceRange\n\"VUID-VkImageMemoryBarrier-subresourceRange-parameter\",\n\"VUID-VkImageMemoryBarrier2-subresourceRange-parameter\",\n\"VUID-VkHostImageLayoutTransitionInfoEXT-subresourceRange-parameter\",\n\"VUID-VkImageViewCreateInfo-subresourceRange-parameter\",\n// VkImageSubresource\n\"VUID-VkImageSubresource2KHR-imageSubresource-parameter\",\n\"VUID-VkSparseImageMemoryBind-subresource-parameter\",\n// VkStencilOpState\n\"VUID-VkPipelineDepthStencilStateCreateInfo-front-parameter\",\n\"VUID-VkPipelineDepthStencilStateCreateInfo-back-parameter\",\n// VkClearValue\n\"VUID-VkRenderingAttachmentInfo-clearValue-parameter\",\n// VkComponentMapping\n\"VUID-VkImageViewCreateInfo-components-parameter\",\n\"VUID-VkSamplerYcbcrConversionCreateInfo-components-parameter\",\n\"VUID-VkSamplerBorderColorComponentMappingCreateInfoEXT-components-parameter\",\n// VkAttachmentReference\n\"VUID-VkRenderPassFragmentDensityMapCreateInfoEXT-fragmentDensityMapAttachment-parameter\",\n// VkVideoEncodeH264QpKHR and VkVideoEncodeH264FrameSizeKHR\n\"VUID-VkVideoEncodeH264RateControlLayerInfoKHR-maxFrameSize-parameter\",\n\"VUID-VkVideoEncodeH264RateControlLayerInfoKHR-maxQp-parameter\",\n\"VUID-VkVideoEncodeH264RateControlLayerInfoKHR-minQp-parameter\",\n// VkVideoEncodeH265QpKHR and VkVideoEncodeH265FrameSizeKHR\n\"VUID-VkVideoEncodeH265RateControlLayerInfoKHR-maxFrameSize-parameter\",\n\"VUID-VkVideoEncodeH265RateControlLayerInfoKHR-maxQp-parameter\",\n\"VUID-VkVideoEncodeH265RateControlLayerInfoKHR-minQp-parameter\",\n// VkVideoPictureResourceInfoKHR\n\"VUID-VkVideoDecodeInfoKHR-dstPictureResource-parameter\",\n\"VUID-VkVideoEncodeInfoKHR-srcPictureResource-parameter\",\n// When:\n//   Struct A has a pointer field to Struct B\n//   Struct B has a non-pointer field to Struct C\n// you get a situation where Struct B has a VU that is not hit because we validate it in Struct C\n\"VUID-VkAttachmentSampleLocationsEXT-sampleLocationsInfo-parameter\",              // VUID-VkSampleLocationsInfoEXT-sType-sType\n\"VUID-VkSubpassSampleLocationsEXT-sampleLocationsInfo-parameter\",                 // VUID-VkSampleLocationsInfoEXT-sType-sType\n\"VUID-VkPipelineSampleLocationsStateCreateInfoEXT-sampleLocationsInfo-parameter\", // VUID-VkSampleLocationsInfoEXT-sType-sType\n\"VUID-VkComputePipelineCreateInfo-stage-parameter\", // VUID-VkPipelineShaderStageCreateInfo-sType-sType\n// Not possible as described in https://gitlab.khronos.org/vulkan/vulkan/-/merge_requests/6324\n\"VUID-VkGraphicsPipelineCreateInfo-pTessellationState-09023\",\n\"VUID-VkGraphicsPipelineCreateInfo-pViewportState-09025\",\n\"VUID-VkGraphicsPipelineCreateInfo-pMultisampleState-09027\",\n\"VUID-VkGraphicsPipelineCreateInfo-pDepthStencilState-09029\",\n\"VUID-VkGraphicsPipelineCreateInfo-pInputAssemblyState-09032\",\n\"VUID-VkGraphicsPipelineCreateInfo-pDepthStencilState-09034\",\n\"VUID-VkGraphicsPipelineCreateInfo-pDepthStencilState-09036\",\n\"VUID-VkGraphicsPipelineCreateInfo-pColorBlendState-09038\",\n\"VUID-VkGraphicsPipelineCreateInfo-pRasterizationState-09039\",\n\"VUID-VkGraphicsPipelineCreateInfo-pRasterizationState-09040\",\n// another variation of it\n\"VUID-vkGetDeviceFaultInfoEXT-pFaultCounts-07337\",\n\"VUID-vkGetDeviceFaultInfoEXT-pFaultCounts-07338\",\n\"VUID-vkGetDeviceFaultInfoEXT-pFaultCounts-07339\",\n\"VUID-VkRenderingInputAttachmentIndexInfoKHR-pDepthInputAttachmentIndex-parameter\",\n\"VUID-VkRenderingInputAttachmentIndexInfoKHR-pStencilInputAttachmentIndex-parameter\"\n// These VUs have \"is not NULL it must be a pointer to a valid pointer to valid structure\" language\n// There is no actual way to validate thsese\n// https://gitlab.khronos.org/vulkan/vulkan/-/issues/3718\n\"VUID-VkDescriptorGetInfoEXT-pUniformTexelBuffer-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pStorageTexelBuffer-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pUniformBuffer-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pStorageBuffer-parameter\",\n// These occur in stateless validation when a pointer member is optional and the length member is also optional\n\"VUID-VkPipelineColorBlendStateCreateInfo-pAttachments-parameter\",\n\"VUID-VkSubpassDescription-pResolveAttachments-parameter\",\n\"VUID-VkTimelineSemaphoreSubmitInfo-pWaitSemaphoreValues-parameter\",\n\"VUID-VkTimelineSemaphoreSubmitInfo-pSignalSemaphoreValues-parameter\",\n\"VUID-VkVideoEncodeH264SessionParametersAddInfoKHR-pStdSPSs-parameter\",\n\"VUID-VkVideoEncodeH264SessionParametersAddInfoKHR-pStdPPSs-parameter\",\n\"VUID-VkVideoEncodeH265SessionParametersAddInfoKHR-pStdVPSs-parameter\",\n\"VUID-VkVideoEncodeH265SessionParametersAddInfoKHR-pStdSPSs-parameter\",\n\"VUID-VkVideoEncodeH265SessionParametersAddInfoKHR-pStdPPSs-parameter\",\n\"VUID-VkD3D12FenceSubmitInfoKHR-pWaitSemaphoreValues-parameter\",\n\"VUID-VkD3D12FenceSubmitInfoKHR-pSignalSemaphoreValues-parameter\",\n\"VUID-VkPresentRegionKHR-pRectangles-parameter\",\n\"VUID-VkBindDescriptorSetsInfoKHR-pDynamicOffsets-parameter\",\n\"VUID-VkPhysicalDeviceHostImageCopyPropertiesEXT-pCopySrcLayouts-parameter\",\n\"VUID-VkPhysicalDeviceHostImageCopyPropertiesEXT-pCopyDstLayouts-parameter\",\n\"VUID-VkSurfacePresentModeCompatibilityEXT-pPresentModes-parameter\",\n\"VUID-VkFrameBoundaryEXT-pImages-parameter\",\n\"VUID-VkFrameBoundaryEXT-pBuffers-parameter\",\n\"VUID-VkFrameBoundaryEXT-pTag-parameter\",\n\"VUID-VkMicromapBuildInfoEXT-pUsageCounts-parameter\",\n\"VUID-VkMicromapBuildInfoEXT-ppUsageCounts-parameter\",\n\"VUID-VkAccelerationStructureTrianglesOpacityMicromapEXT-pUsageCounts-parameter\",\n\"VUID-VkAccelerationStructureTrianglesOpacityMicromapEXT-ppUsageCounts-parameter\",\n\"VUID-VkAccelerationStructureTrianglesDisplacementMicromapNV-pUsageCounts-parameter\",\n\"VUID-VkAccelerationStructureTrianglesDisplacementMicromapNV-ppUsageCounts-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pSetLayouts-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pPushConstantRanges-parameter\",\n\"VUID-VkLatencySurfaceCapabilitiesNV-pPresentModes-parameter\",\n\"VUID-vkCmdBeginTransformFeedbackEXT-pCounterBufferOffsets-parameter\",\n\"VUID-vkCmdEndTransformFeedbackEXT-pCounterBufferOffsets-parameter\",\n\"VUID-vkCmdBindVertexBuffers2-pSizes-parameter\",\n\"VUID-vkCmdBindVertexBuffers2-pStrides-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pSampledImage-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pSampler-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pStorageImage-parameter\",\n\"VUID-vkGetAccelerationStructureBuildSizesKHR-pMaxPrimitiveCounts-parameter\",\n\"VUID-vkCmdDrawMultiIndexedEXT-pVertexOffset-parameter\",\n\"VUID-VkDisplayModeCreateInfoKHR-parameters-parameter\",\n// These occur in stateless validation when a pointer member is optional and the length member is null\n\"VUID-VkDeviceCreateInfo-pEnabledFeatures-parameter\",\n\"VUID-VkPipelineShaderStageCreateInfo-pSpecializationInfo-parameter\",\n\"VUID-VkSubpassDescription-pDepthStencilAttachment-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pSpecializationInfo-parameter\",\n\"VUID-VkExportFenceWin32HandleInfoKHR-pAttributes-parameter\",\n\"VUID-VkExportSemaphoreWin32HandleInfoKHR-pAttributes-parameter\",\n\"VUID-VkExportMemoryWin32HandleInfoKHR-pAttributes-parameter\",\n\"VUID-VkExportMemoryWin32HandleInfoNV-pAttributes-parameter\",\n\"VUID-vkEnumerateDeviceExtensionProperties-pProperties-parameter\",\n\"VUID-vkEnumerateDeviceLayerProperties-pProperties-parameter\",\n\"VUID-vkEnumerateInstanceExtensionProperties-pProperties-parameter\",\n\"VUID-vkEnumerateInstanceLayerProperties-pProperties-parameter\",\n// Checking for null-terminated UTF-8 string\n\"VUID-VkApplicationInfo-pApplicationName-parameter\",\n\"VUID-VkApplicationInfo-pEngineName-parameter\",\n\"VUID-VkDebugUtilsObjectNameInfoEXT-pObjectName-parameter\",\n\"VUID-VkDebugUtilsMessengerCallbackDataEXT-pMessageIdName-parameter\",\n\"VUID-VkPipelineShaderStageNodeCreateInfoAMDX-pName-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pName-parameter\",\n\"VUID-vkGetDeviceProcAddr-pName-parameter\",\n\"VUID-vkGetInstanceProcAddr-pName-parameter\",\n\"VUID-vkEnumerateDeviceExtensionProperties-pLayerName-parameter\",\n\"VUID-vkEnumerateInstanceExtensionProperties-pLayerName-parameter\",\n// Can't validate a VkAllocationCallbacks structure\n\"VUID-vkCreateAccelerationStructureKHR-pAllocator-parameter\",\n\"VUID-vkCreateAccelerationStructureNV-pAllocator-parameter\",\n\"VUID-vkCreateAndroidSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateBuffer-pAllocator-parameter\",\n\"VUID-vkCreateBufferCollectionFUCHSIA-pAllocator-parameter\",\n\"VUID-vkCreateBufferView-pAllocator-parameter\",\n\"VUID-vkCreateCommandPool-pAllocator-parameter\",\n\"VUID-vkCreateComputePipelines-pAllocator-parameter\",\n\"VUID-vkCreateCuFunctionNVX-pAllocator-parameter\",\n\"VUID-vkCreateCuModuleNVX-pAllocator-parameter\",\n\"VUID-vkCreateCudaFunctionNV-pAllocator-parameter\",\n\"VUID-vkCreateCudaModuleNV-pAllocator-parameter\",\n\"VUID-vkCreateDebugReportCallbackEXT-pAllocator-parameter\",\n\"VUID-vkCreateDebugUtilsMessengerEXT-pAllocator-parameter\",\n\"VUID-vkCreateDeferredOperationKHR-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorPool-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorSetLayout-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorUpdateTemplate-pAllocator-parameter\",\n\"VUID-vkCreateDevice-pAllocator-parameter\",\n\"VUID-vkCreateDirectFBSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateDisplayModeKHR-pAllocator-parameter\",\n\"VUID-vkCreateDisplayPlaneSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateEvent-pAllocator-parameter\",\n\"VUID-vkCreateExecutionGraphPipelinesAMDX-pAllocator-parameter\",\n\"VUID-vkCreateFence-pAllocator-parameter\",\n\"VUID-vkCreateFramebuffer-pAllocator-parameter\",\n\"VUID-vkCreateGraphicsPipelines-pAllocator-parameter\",\n\"VUID-vkCreateHeadlessSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateIOSSurfaceMVK-pAllocator-parameter\",\n\"VUID-vkCreateImage-pAllocator-parameter\",\n\"VUID-vkCreateImagePipeSurfaceFUCHSIA-pAllocator-parameter\",\n\"VUID-vkCreateImageView-pAllocator-parameter\",\n\"VUID-vkCreateIndirectCommandsLayoutNV-pAllocator-parameter\",\n\"VUID-vkCreateInstance-pAllocator-parameter\",\n\"VUID-vkCreateMacOSSurfaceMVK-pAllocator-parameter\",\n\"VUID-vkCreateMetalSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateMicromapEXT-pAllocator-parameter\",\n\"VUID-vkCreateOpticalFlowSessionNV-pAllocator-parameter\",\n\"VUID-vkCreatePipelineCache-pAllocator-parameter\",\n\"VUID-vkCreatePipelineLayout-pAllocator-parameter\",\n\"VUID-vkCreatePrivateDataSlot-pAllocator-parameter\",\n\"VUID-vkCreateQueryPool-pAllocator-parameter\",\n\"VUID-vkCreateRayTracingPipelinesKHR-pAllocator-parameter\",\n\"VUID-vkCreateRayTracingPipelinesNV-pAllocator-parameter\",\n\"VUID-vkCreateRenderPass-pAllocator-parameter\",\n\"VUID-vkCreateRenderPass2-pAllocator-parameter\",\n\"VUID-vkCreateSampler-pAllocator-parameter\",\n\"VUID-vkCreateSamplerYcbcrConversion-pAllocator-parameter\",\n\"VUID-vkCreateScreenSurfaceQNX-pAllocator-parameter\",\n\"VUID-vkCreateSemaphore-pAllocator-parameter\",\n\"VUID-vkCreateShaderModule-pAllocator-parameter\",\n\"VUID-vkCreateShadersEXT-pAllocator-parameter\",\n\"VUID-vkCreateSharedSwapchainsKHR-pAllocator-parameter\",\n\"VUID-vkCreateStreamDescriptorSurfaceGGP-pAllocator-parameter\",\n\"VUID-vkCreateSwapchainKHR-pAllocator-parameter\",\n\"VUID-vkCreateValidationCacheEXT-pAllocator-parameter\",\n\"VUID-vkCreateViSurfaceNN-pAllocator-parameter\",\n\"VUID-vkCreateVideoSessionKHR-pAllocator-parameter\",\n\"VUID-vkCreateVideoSessionParametersKHR-pAllocator-parameter\",\n\"VUID-vkCreateWaylandSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateWin32SurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateXcbSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateXlibSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkDestroyAccelerationStructureKHR-pAllocator-parameter\",\n\"VUID-vkDestroyAccelerationStructureNV-pAllocator-parameter\",\n\"VUID-vkDestroyBuffer-pAllocator-parameter\",\n\"VUID-vkDestroyBufferCollectionFUCHSIA-pAllocator-parameter\",\n\"VUID-vkDestroyBufferView-pAllocator-parameter\",\n\"VUID-vkDestroyCommandPool-pAllocator-parameter\",\n\"VUID-vkDestroyCuFunctionNVX-pAllocator-parameter\",\n\"VUID-vkDestroyCuModuleNVX-pAllocator-parameter\",\n\"VUID-vkDestroyCudaFunctionNV-pAllocator-parameter\",\n\"VUID-vkDestroyCudaModuleNV-pAllocator-parameter\",\n\"VUID-vkDestroyDebugReportCallbackEXT-pAllocator-parameter\",\n\"VUID-vkDestroyDebugUtilsMessengerEXT-pAllocator-parameter\",\n\"VUID-vkDestroyDeferredOperationKHR-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorPool-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorSetLayout-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorUpdateTemplate-pAllocator-parameter\",\n\"VUID-vkDestroyDevice-pAllocator-parameter\",\n\"VUID-vkDestroyEvent-pAllocator-parameter\",\n\"VUID-vkDestroyFence-pAllocator-parameter\",\n\"VUID-vkDestroyFramebuffer-pAllocator-parameter\",\n\"VUID-vkDestroyImage-pAllocator-parameter\",\n\"VUID-vkDestroyImageView-pAllocator-parameter\",\n\"VUID-vkDestroyIndirectCommandsLayoutNV-pAllocator-parameter\",\n\"VUID-vkDestroyInstance-pAllocator-parameter\",\n\"VUID-vkDestroyMicromapEXT-pAllocator-parameter\",\n\"VUID-vkDestroyOpticalFlowSessionNV-pAllocator-parameter\",\n\"VUID-vkDestroyPipeline-pAllocator-parameter\",\n\"VUID-vkDestroyPipelineCache-pAllocator-parameter\",\n\"VUID-vkDestroyPipelineLayout-pAllocator-parameter\",\n\"VUID-vkDestroyPrivateDataSlot-pAllocator-parameter\",\n\"VUID-vkDestroyQueryPool-pAllocator-parameter\",\n\"VUID-vkDestroyRenderPass-pAllocator-parameter\",\n\"VUID-vkDestroySampler-pAllocator-parameter\",\n\"VUID-vkDestroySamplerYcbcrConversion-pAllocator-parameter\",\n\"VUID-vkDestroySemaphore-pAllocator-parameter\",\n\"VUID-vkDestroyShaderEXT-pAllocator-parameter\",\n\"VUID-vkDestroyShaderModule-pAllocator-parameter\",\n\"VUID-vkDestroySurfaceKHR-pAllocator-parameter\",\n\"VUID-vkDestroySwapchainKHR-pAllocator-parameter\",\n\"VUID-vkDestroyValidationCacheEXT-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionKHR-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionParametersKHR-pAllocator-parameter\",\n\"VUID-vkFreeMemory-pAllocator-parameter\",\n\"VUID-vkRegisterDeviceEventEXT-pAllocator-parameter\",\n\"VUID-vkRegisterDisplayEventEXT-pAllocator-parameter\",\n\"VUID-vkAllocateMemory-pAllocator-parameter\",\n};\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkGetPrivateData-objectType-04018\", \"objectHandle must be device or a child of device\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (IsInstanceVkObjectType(objectType) || objectType == VK_OBJECT_TYPE_UNKNOWN) {\n    skip |= LogError(\"VUID-vkGetPrivateData-objectType-04018\", device, error_obj.location.dot(Field::objectType), \"is %s.\",\n                     string_VkObjectType(objectType));\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkSetPrivateData-objectHandle-04016\", \"objectHandle must be device or a child of device\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (HandleToUint64(device) != objectHandle) {\n    skip |= LogError(\"VUID-vkSetPrivateData-objectHandle-04016\", device, error_obj.location.dot(Field::objectType),\n                     \"is VK_OBJECT_TYPE_DEVICE but objectHandle (0x%\" PRIx64 \") != device (%s).\", objectHandle,\n                     FormatHandle(device).c_str());\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkGetImageOpaqueCaptureDescriptorDataEXT-pData-08077\", \"pData must point to a buffer that is at least VkPhysicalDeviceDescriptorBufferPropertiesEXT::imageCaptureReplayDescriptorDataSize bytes in size\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "// These ask if pData is a certain size, but no way to validate a pointer to memory is a certain size.\n// There is already another implicit VU checking if pData is not null.\n\"VUID-vkGetBufferOpaqueCaptureDescriptorDataEXT-pData-08073\",\n\"VUID-vkGetImageOpaqueCaptureDescriptorDataEXT-pData-08077\",\n\"VUID-vkGetImageViewOpaqueCaptureDescriptorDataEXT-pData-08081\",\n\"VUID-vkGetSamplerOpaqueCaptureDescriptorDataEXT-pData-08085\",\n\"VUID-vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT-pData-08089\",\n// These would need to be checked by the loader as it uses these to call into the layers/drivers\n\"VUID-vkEnumerateInstanceVersion-pApiVersion-parameter\",\n\"VUID-vkEnumerateDeviceExtensionProperties-pPropertyCount-parameter\",\n\"VUID-vkEnumerateDeviceLayerProperties-pPropertyCount-parameter\",\n\"VUID-vkEnumerateInstanceLayerProperties-pPropertyCount-parameter\",\n\"VUID-vkEnumerateInstanceExtensionProperties-pPropertyCount-parameter\",\n// Caches are called between application runs so there is no way for a layer to track this information\n\"VUID-VkPipelineCacheCreateInfo-initialDataSize-00768\",\n\"VUID-VkPipelineCacheCreateInfo-initialDataSize-00769\",\n\"VUID-VkValidationCacheCreateInfoEXT-initialDataSize-01534\",\n\"VUID-VkValidationCacheCreateInfoEXT-initialDataSize-01535\",\n// The header data returned from vkGetPipelineCacheData is the driver's responsibility to make correct.\n// There is CTS for this, and not within the scope of the Validation Layers to check\n\"VUID-VkPipelineCacheHeaderVersionOne-headerSize-04967\",\n\"VUID-VkPipelineCacheHeaderVersionOne-headerVersion-04968\",\n\"VUID-VkPipelineCacheHeaderVersionOne-headerSize-08990\",\n// These implicit VUs ask to check for a valid structure that has no sType,\n// there is nothing that can actually be validated\n//\n// VkImageSubresourceLayers\n\"VUID-VkImageBlit-dstSubresource-parameter\",\n\"VUID-VkImageBlit-srcSubresource-parameter\",\n\"VUID-VkImageBlit2-dstSubresource-parameter\",\n\"VUID-VkImageBlit2-srcSubresource-parameter\",\n\"VUID-VkImageCopy-dstSubresource-parameter\",\n\"VUID-VkImageCopy-srcSubresource-parameter\",\n\"VUID-VkImageCopy2-dstSubresource-parameter\",\n\"VUID-VkImageCopy2-srcSubresource-parameter\",\n\"VUID-VkImageResolve-dstSubresource-parameter\",\n\"VUID-VkImageResolve-srcSubresource-parameter\",\n\"VUID-VkImageResolve2-dstSubresource-parameter\",\n\"VUID-VkImageResolve2-srcSubresource-parameter\",\n\"VUID-VkBufferImageCopy-imageSubresource-parameter\",\n\"VUID-VkBufferImageCopy2-imageSubresource-parameter\",\n\"VUID-VkMemoryToImageCopyEXT-imageSubresource-parameter\",\n\"VUID-VkImageToMemoryCopyEXT-imageSubresource-parameter\",\n\"VUID-VkCopyMemoryToImageIndirectCommandNV-imageSubresource-parameter\",\n// VkImageSubresourceRange\n\"VUID-VkImageMemoryBarrier-subresourceRange-parameter\",\n\"VUID-VkImageMemoryBarrier2-subresourceRange-parameter\",\n\"VUID-VkHostImageLayoutTransitionInfoEXT-subresourceRange-parameter\",\n\"VUID-VkImageViewCreateInfo-subresourceRange-parameter\",\n// VkImageSubresource\n\"VUID-VkImageSubresource2KHR-imageSubresource-parameter\",\n\"VUID-VkSparseImageMemoryBind-subresource-parameter\",\n// VkStencilOpState\n\"VUID-VkPipelineDepthStencilStateCreateInfo-front-parameter\",\n\"VUID-VkPipelineDepthStencilStateCreateInfo-back-parameter\",\n// VkClearValue\n\"VUID-VkRenderingAttachmentInfo-clearValue-parameter\",\n// VkComponentMapping\n\"VUID-VkImageViewCreateInfo-components-parameter\",\n\"VUID-VkSamplerYcbcrConversionCreateInfo-components-parameter\",\n\"VUID-VkSamplerBorderColorComponentMappingCreateInfoEXT-components-parameter\",\n// VkAttachmentReference\n\"VUID-VkRenderPassFragmentDensityMapCreateInfoEXT-fragmentDensityMapAttachment-parameter\",\n// VkVideoEncodeH264QpKHR and VkVideoEncodeH264FrameSizeKHR\n\"VUID-VkVideoEncodeH264RateControlLayerInfoKHR-maxFrameSize-parameter\",\n\"VUID-VkVideoEncodeH264RateControlLayerInfoKHR-maxQp-parameter\",\n\"VUID-VkVideoEncodeH264RateControlLayerInfoKHR-minQp-parameter\",\n// VkVideoEncodeH265QpKHR and VkVideoEncodeH265FrameSizeKHR\n\"VUID-VkVideoEncodeH265RateControlLayerInfoKHR-maxFrameSize-parameter\",\n\"VUID-VkVideoEncodeH265RateControlLayerInfoKHR-maxQp-parameter\",\n\"VUID-VkVideoEncodeH265RateControlLayerInfoKHR-minQp-parameter\",\n// VkVideoPictureResourceInfoKHR\n\"VUID-VkVideoDecodeInfoKHR-dstPictureResource-parameter\",\n\"VUID-VkVideoEncodeInfoKHR-srcPictureResource-parameter\",\n// When:\n//   Struct A has a pointer field to Struct B\n//   Struct B has a non-pointer field to Struct C\n// you get a situation where Struct B has a VU that is not hit because we validate it in Struct C\n\"VUID-VkAttachmentSampleLocationsEXT-sampleLocationsInfo-parameter\",              // VUID-VkSampleLocationsInfoEXT-sType-sType\n\"VUID-VkSubpassSampleLocationsEXT-sampleLocationsInfo-parameter\",                 // VUID-VkSampleLocationsInfoEXT-sType-sType\n\"VUID-VkPipelineSampleLocationsStateCreateInfoEXT-sampleLocationsInfo-parameter\", // VUID-VkSampleLocationsInfoEXT-sType-sType\n\"VUID-VkComputePipelineCreateInfo-stage-parameter\", // VUID-VkPipelineShaderStageCreateInfo-sType-sType\n// Not possible as described in https://gitlab.khronos.org/vulkan/vulkan/-/merge_requests/6324\n\"VUID-VkGraphicsPipelineCreateInfo-pTessellationState-09023\",\n\"VUID-VkGraphicsPipelineCreateInfo-pViewportState-09025\",\n\"VUID-VkGraphicsPipelineCreateInfo-pMultisampleState-09027\",\n\"VUID-VkGraphicsPipelineCreateInfo-pDepthStencilState-09029\",\n\"VUID-VkGraphicsPipelineCreateInfo-pInputAssemblyState-09032\",\n\"VUID-VkGraphicsPipelineCreateInfo-pDepthStencilState-09034\",\n\"VUID-VkGraphicsPipelineCreateInfo-pDepthStencilState-09036\",\n\"VUID-VkGraphicsPipelineCreateInfo-pColorBlendState-09038\",\n\"VUID-VkGraphicsPipelineCreateInfo-pRasterizationState-09039\",\n\"VUID-VkGraphicsPipelineCreateInfo-pRasterizationState-09040\",\n// another variation of it\n\"VUID-vkGetDeviceFaultInfoEXT-pFaultCounts-07337\",\n\"VUID-vkGetDeviceFaultInfoEXT-pFaultCounts-07338\",\n\"VUID-vkGetDeviceFaultInfoEXT-pFaultCounts-07339\",\n\"VUID-VkRenderingInputAttachmentIndexInfoKHR-pDepthInputAttachmentIndex-parameter\",\n\"VUID-VkRenderingInputAttachmentIndexInfoKHR-pStencilInputAttachmentIndex-parameter\"\n// These VUs have \"is not NULL it must be a pointer to a valid pointer to valid structure\" language\n// There is no actual way to validate thsese\n// https://gitlab.khronos.org/vulkan/vulkan/-/issues/3718\n\"VUID-VkDescriptorGetInfoEXT-pUniformTexelBuffer-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pStorageTexelBuffer-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pUniformBuffer-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pStorageBuffer-parameter\",\n// These occur in stateless validation when a pointer member is optional and the length member is also optional\n\"VUID-VkPipelineColorBlendStateCreateInfo-pAttachments-parameter\",\n\"VUID-VkSubpassDescription-pResolveAttachments-parameter\",\n\"VUID-VkTimelineSemaphoreSubmitInfo-pWaitSemaphoreValues-parameter\",\n\"VUID-VkTimelineSemaphoreSubmitInfo-pSignalSemaphoreValues-parameter\",\n\"VUID-VkVideoEncodeH264SessionParametersAddInfoKHR-pStdSPSs-parameter\",\n\"VUID-VkVideoEncodeH264SessionParametersAddInfoKHR-pStdPPSs-parameter\",\n\"VUID-VkVideoEncodeH265SessionParametersAddInfoKHR-pStdVPSs-parameter\",\n\"VUID-VkVideoEncodeH265SessionParametersAddInfoKHR-pStdSPSs-parameter\",\n\"VUID-VkVideoEncodeH265SessionParametersAddInfoKHR-pStdPPSs-parameter\",\n\"VUID-VkD3D12FenceSubmitInfoKHR-pWaitSemaphoreValues-parameter\",\n\"VUID-VkD3D12FenceSubmitInfoKHR-pSignalSemaphoreValues-parameter\",\n\"VUID-VkPresentRegionKHR-pRectangles-parameter\",\n\"VUID-VkBindDescriptorSetsInfoKHR-pDynamicOffsets-parameter\",\n\"VUID-VkPhysicalDeviceHostImageCopyPropertiesEXT-pCopySrcLayouts-parameter\",\n\"VUID-VkPhysicalDeviceHostImageCopyPropertiesEXT-pCopyDstLayouts-parameter\",\n\"VUID-VkSurfacePresentModeCompatibilityEXT-pPresentModes-parameter\",\n\"VUID-VkFrameBoundaryEXT-pImages-parameter\",\n\"VUID-VkFrameBoundaryEXT-pBuffers-parameter\",\n\"VUID-VkFrameBoundaryEXT-pTag-parameter\",\n\"VUID-VkMicromapBuildInfoEXT-pUsageCounts-parameter\",\n\"VUID-VkMicromapBuildInfoEXT-ppUsageCounts-parameter\",\n\"VUID-VkAccelerationStructureTrianglesOpacityMicromapEXT-pUsageCounts-parameter\",\n\"VUID-VkAccelerationStructureTrianglesOpacityMicromapEXT-ppUsageCounts-parameter\",\n\"VUID-VkAccelerationStructureTrianglesDisplacementMicromapNV-pUsageCounts-parameter\",\n\"VUID-VkAccelerationStructureTrianglesDisplacementMicromapNV-ppUsageCounts-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pSetLayouts-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pPushConstantRanges-parameter\",\n\"VUID-VkLatencySurfaceCapabilitiesNV-pPresentModes-parameter\",\n\"VUID-vkCmdBeginTransformFeedbackEXT-pCounterBufferOffsets-parameter\",\n\"VUID-vkCmdEndTransformFeedbackEXT-pCounterBufferOffsets-parameter\",\n\"VUID-vkCmdBindVertexBuffers2-pSizes-parameter\",\n\"VUID-vkCmdBindVertexBuffers2-pStrides-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pSampledImage-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pSampler-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pStorageImage-parameter\",\n\"VUID-vkGetAccelerationStructureBuildSizesKHR-pMaxPrimitiveCounts-parameter\",\n\"VUID-vkCmdDrawMultiIndexedEXT-pVertexOffset-parameter\",\n\"VUID-VkDisplayModeCreateInfoKHR-parameters-parameter\",\n// These occur in stateless validation when a pointer member is optional and the length member is null\n\"VUID-VkDeviceCreateInfo-pEnabledFeatures-parameter\",\n\"VUID-VkPipelineShaderStageCreateInfo-pSpecializationInfo-parameter\",\n\"VUID-VkSubpassDescription-pDepthStencilAttachment-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pSpecializationInfo-parameter\",\n\"VUID-VkExportFenceWin32HandleInfoKHR-pAttributes-parameter\",\n\"VUID-VkExportSemaphoreWin32HandleInfoKHR-pAttributes-parameter\",\n\"VUID-VkExportMemoryWin32HandleInfoKHR-pAttributes-parameter\",\n\"VUID-VkExportMemoryWin32HandleInfoNV-pAttributes-parameter\",\n\"VUID-vkEnumerateDeviceExtensionProperties-pProperties-parameter\",\n\"VUID-vkEnumerateDeviceLayerProperties-pProperties-parameter\",\n\"VUID-vkEnumerateInstanceExtensionProperties-pProperties-parameter\",\n\"VUID-vkEnumerateInstanceLayerProperties-pProperties-parameter\",\n// Checking for null-terminated UTF-8 string\n\"VUID-VkApplicationInfo-pApplicationName-parameter\",\n\"VUID-VkApplicationInfo-pEngineName-parameter\",\n\"VUID-VkDebugUtilsObjectNameInfoEXT-pObjectName-parameter\",\n\"VUID-VkDebugUtilsMessengerCallbackDataEXT-pMessageIdName-parameter\",\n\"VUID-VkPipelineShaderStageNodeCreateInfoAMDX-pName-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pName-parameter\",\n\"VUID-vkGetDeviceProcAddr-pName-parameter\",\n\"VUID-vkGetInstanceProcAddr-pName-parameter\",\n\"VUID-vkEnumerateDeviceExtensionProperties-pLayerName-parameter\",\n\"VUID-vkEnumerateInstanceExtensionProperties-pLayerName-parameter\",\n// Can't validate a VkAllocationCallbacks structure\n\"VUID-vkCreateAccelerationStructureKHR-pAllocator-parameter\",\n\"VUID-vkCreateAccelerationStructureNV-pAllocator-parameter\",\n\"VUID-vkCreateAndroidSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateBuffer-pAllocator-parameter\",\n\"VUID-vkCreateBufferCollectionFUCHSIA-pAllocator-parameter\",\n\"VUID-vkCreateBufferView-pAllocator-parameter\",\n\"VUID-vkCreateCommandPool-pAllocator-parameter\",\n\"VUID-vkCreateComputePipelines-pAllocator-parameter\",\n\"VUID-vkCreateCuFunctionNVX-pAllocator-parameter\",\n\"VUID-vkCreateCuModuleNVX-pAllocator-parameter\",\n\"VUID-vkCreateCudaFunctionNV-pAllocator-parameter\",\n\"VUID-vkCreateCudaModuleNV-pAllocator-parameter\",\n\"VUID-vkCreateDebugReportCallbackEXT-pAllocator-parameter\",\n\"VUID-vkCreateDebugUtilsMessengerEXT-pAllocator-parameter\",\n\"VUID-vkCreateDeferredOperationKHR-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorPool-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorSetLayout-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorUpdateTemplate-pAllocator-parameter\",\n\"VUID-vkCreateDevice-pAllocator-parameter\",\n\"VUID-vkCreateDirectFBSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateDisplayModeKHR-pAllocator-parameter\",\n\"VUID-vkCreateDisplayPlaneSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateEvent-pAllocator-parameter\",\n\"VUID-vkCreateExecutionGraphPipelinesAMDX-pAllocator-parameter\",\n\"VUID-vkCreateFence-pAllocator-parameter\",\n\"VUID-vkCreateFramebuffer-pAllocator-parameter\",\n\"VUID-vkCreateGraphicsPipelines-pAllocator-parameter\",\n\"VUID-vkCreateHeadlessSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateIOSSurfaceMVK-pAllocator-parameter\",\n\"VUID-vkCreateImage-pAllocator-parameter\",\n\"VUID-vkCreateImagePipeSurfaceFUCHSIA-pAllocator-parameter\",\n\"VUID-vkCreateImageView-pAllocator-parameter\",\n\"VUID-vkCreateIndirectCommandsLayoutNV-pAllocator-parameter\",\n\"VUID-vkCreateInstance-pAllocator-parameter\",\n\"VUID-vkCreateMacOSSurfaceMVK-pAllocator-parameter\",\n\"VUID-vkCreateMetalSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateMicromapEXT-pAllocator-parameter\",\n\"VUID-vkCreateOpticalFlowSessionNV-pAllocator-parameter\",\n\"VUID-vkCreatePipelineCache-pAllocator-parameter\",\n\"VUID-vkCreatePipelineLayout-pAllocator-parameter\",\n\"VUID-vkCreatePrivateDataSlot-pAllocator-parameter\",\n\"VUID-vkCreateQueryPool-pAllocator-parameter\",\n\"VUID-vkCreateRayTracingPipelinesKHR-pAllocator-parameter\",\n\"VUID-vkCreateRayTracingPipelinesNV-pAllocator-parameter\",\n\"VUID-vkCreateRenderPass-pAllocator-parameter\",\n\"VUID-vkCreateRenderPass2-pAllocator-parameter\",\n\"VUID-vkCreateSampler-pAllocator-parameter\",\n\"VUID-vkCreateSamplerYcbcrConversion-pAllocator-parameter\",\n\"VUID-vkCreateScreenSurfaceQNX-pAllocator-parameter\",\n\"VUID-vkCreateSemaphore-pAllocator-parameter\",\n\"VUID-vkCreateShaderModule-pAllocator-parameter\",\n\"VUID-vkCreateShadersEXT-pAllocator-parameter\",\n\"VUID-vkCreateSharedSwapchainsKHR-pAllocator-parameter\",\n\"VUID-vkCreateStreamDescriptorSurfaceGGP-pAllocator-parameter\",\n\"VUID-vkCreateSwapchainKHR-pAllocator-parameter\",\n\"VUID-vkCreateValidationCacheEXT-pAllocator-parameter\",\n\"VUID-vkCreateViSurfaceNN-pAllocator-parameter\",\n\"VUID-vkCreateVideoSessionKHR-pAllocator-parameter\",\n\"VUID-vkCreateVideoSessionParametersKHR-pAllocator-parameter\",\n\"VUID-vkCreateWaylandSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateWin32SurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateXcbSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateXlibSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkDestroyAccelerationStructureKHR-pAllocator-parameter\",\n\"VUID-vkDestroyAccelerationStructureNV-pAllocator-parameter\",\n\"VUID-vkDestroyBuffer-pAllocator-parameter\",\n\"VUID-vkDestroyBufferCollectionFUCHSIA-pAllocator-parameter\",\n\"VUID-vkDestroyBufferView-pAllocator-parameter\",\n\"VUID-vkDestroyCommandPool-pAllocator-parameter\",\n\"VUID-vkDestroyCuFunctionNVX-pAllocator-parameter\",\n\"VUID-vkDestroyCuModuleNVX-pAllocator-parameter\",\n\"VUID-vkDestroyCudaFunctionNV-pAllocator-parameter\",\n\"VUID-vkDestroyCudaModuleNV-pAllocator-parameter\",\n\"VUID-vkDestroyDebugReportCallbackEXT-pAllocator-parameter\",\n\"VUID-vkDestroyDebugUtilsMessengerEXT-pAllocator-parameter\",\n\"VUID-vkDestroyDeferredOperationKHR-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorPool-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorSetLayout-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorUpdateTemplate-pAllocator-parameter\",\n\"VUID-vkDestroyDevice-pAllocator-parameter\",\n\"VUID-vkDestroyEvent-pAllocator-parameter\",\n\"VUID-vkDestroyFence-pAllocator-parameter\",\n\"VUID-vkDestroyFramebuffer-pAllocator-parameter\",\n\"VUID-vkDestroyImage-pAllocator-parameter\",\n\"VUID-vkDestroyImageView-pAllocator-parameter\",\n\"VUID-vkDestroyIndirectCommandsLayoutNV-pAllocator-parameter\",\n\"VUID-vkDestroyInstance-pAllocator-parameter\",\n\"VUID-vkDestroyMicromapEXT-pAllocator-parameter\",\n\"VUID-vkDestroyOpticalFlowSessionNV-pAllocator-parameter\",\n\"VUID-vkDestroyPipeline-pAllocator-parameter\",\n\"VUID-vkDestroyPipelineCache-pAllocator-parameter\",\n\"VUID-vkDestroyPipelineLayout-pAllocator-parameter\",\n\"VUID-vkDestroyPrivateDataSlot-pAllocator-parameter\",\n\"VUID-vkDestroyQueryPool-pAllocator-parameter\",\n\"VUID-vkDestroyRenderPass-pAllocator-parameter\",\n\"VUID-vkDestroySampler-pAllocator-parameter\",\n\"VUID-vkDestroySamplerYcbcrConversion-pAllocator-parameter\",\n\"VUID-vkDestroySemaphore-pAllocator-parameter\",\n\"VUID-vkDestroyShaderEXT-pAllocator-parameter\",\n\"VUID-vkDestroyShaderModule-pAllocator-parameter\",\n\"VUID-vkDestroySurfaceKHR-pAllocator-parameter\",\n\"VUID-vkDestroySwapchainKHR-pAllocator-parameter\",\n\"VUID-vkDestroyValidationCacheEXT-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionKHR-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionParametersKHR-pAllocator-parameter\",\n\"VUID-vkFreeMemory-pAllocator-parameter\",\n\"VUID-vkRegisterDeviceEventEXT-pAllocator-parameter\",\n\"VUID-vkRegisterDisplayEventEXT-pAllocator-parameter\",\n\"VUID-vkAllocateMemory-pAllocator-parameter\",\n};\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkEnumerateDeviceExtensionProperties-pPropertyCount-parameter\", \"pPropertyCount must be a valid pointer to a uint32_t value\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "\"VUID-vkEnumerateInstanceVersion-pApiVersion-parameter\",\n\"VUID-vkEnumerateDeviceExtensionProperties-pPropertyCount-parameter\",\n\"VUID-vkEnumerateDeviceLayerProperties-pPropertyCount-parameter\",\n\"VUID-vkEnumerateInstanceLayerProperties-pPropertyCount-parameter\",\n\"VUID-vkEnumerateInstanceExtensionProperties-pPropertyCount-parameter\",\n// Caches are called between application runs so there is no way for a layer to track this information\n\"VUID-VkPipelineCacheCreateInfo-initialDataSize-00768\",\n\"VUID-VkPipelineCacheCreateInfo-initialDataSize-00769\",\n\"VUID-VkValidationCacheCreateInfoEXT-initialDataSize-01534\",\n\"VUID-VkValidationCacheCreateInfoEXT-initialDataSize-01535\",\n// The header data returned from vkGetPipelineCacheData is the driver's responsibility to make correct.\n// There is CTS for this, and not within the scope of the Validation Layers to check\n\"VUID-VkPipelineCacheHeaderVersionOne-headerSize-04967\",\n\"VUID-VkPipelineCacheHeaderVersionOne-headerVersion-04968\",\n\"VUID-VkPipelineCacheHeaderVersionOne-headerSize-08990\",\n// These implicit VUs ask to check for a valid structure that has no sType,\n// there is nothing that can actually be validated\n//\n// VkImageSubresourceLayers\n\"VUID-VkImageBlit-dstSubresource-parameter\",\n\"VUID-VkImageBlit-srcSubresource-parameter\",\n\"VUID-VkImageBlit2-dstSubresource-parameter\",\n\"VUID-VkImageBlit2-srcSubresource-parameter\",\n\"VUID-VkImageCopy-dstSubresource-parameter\",\n\"VUID-VkImageCopy-srcSubresource-parameter\",\n\"VUID-VkImageCopy2-dstSubresource-parameter\",\n\"VUID-VkImageCopy2-srcSubresource-parameter\",\n\"VUID-VkImageResolve-dstSubresource-parameter\",\n\"VUID-VkImageResolve-srcSubresource-parameter\",\n\"VUID-VkImageResolve2-dstSubresource-parameter\",\n\"VUID-VkImageResolve2-srcSubresource-parameter\",\n\"VUID-VkBufferImageCopy-imageSubresource-parameter\",\n\"VUID-VkBufferImageCopy2-imageSubresource-parameter\",\n\"VUID-VkMemoryToImageCopyEXT-imageSubresource-parameter\",\n\"VUID-VkImageToMemoryCopyEXT-imageSubresource-parameter\",\n\"VUID-VkCopyMemoryToImageIndirectCommandNV-imageSubresource-parameter\",\n// VkImageSubresourceRange\n\"VUID-VkImageMemoryBarrier-subresourceRange-parameter\",\n\"VUID-VkImageMemoryBarrier2-subresourceRange-parameter\",\n\"VUID-VkHostImageLayoutTransitionInfoEXT-subresourceRange-parameter\",\n\"VUID-VkImageViewCreateInfo-subresourceRange-parameter\",\n// VkImageSubresource\n\"VUID-VkImageSubresource2KHR-imageSubresource-parameter\",\n\"VUID-VkSparseImageMemoryBind-subresource-parameter\",\n// VkStencilOpState\n\"VUID-VkPipelineDepthStencilStateCreateInfo-front-parameter\",\n\"VUID-VkPipelineDepthStencilStateCreateInfo-back-parameter\",\n// VkClearValue\n\"VUID-VkRenderingAttachmentInfo-clearValue-parameter\",\n// VkComponentMapping\n\"VUID-VkImageViewCreateInfo-components-parameter\",\n\"VUID-VkSamplerYcbcrConversionCreateInfo-components-parameter\",\n\"VUID-VkSamplerBorderColorComponentMappingCreateInfoEXT-components-parameter\",\n// VkAttachmentReference\n\"VUID-VkRenderPassFragmentDensityMapCreateInfoEXT-fragmentDensityMapAttachment-parameter\",\n// VkVideoEncodeH264QpKHR and VkVideoEncodeH264FrameSizeKHR\n\"VUID-VkVideoEncodeH264RateControlLayerInfoKHR-maxFrameSize-parameter\",\n\"VUID-VkVideoEncodeH264RateControlLayerInfoKHR-maxQp-parameter\",\n\"VUID-VkVideoEncodeH264RateControlLayerInfoKHR-minQp-parameter\",\n// VkVideoEncodeH265QpKHR and VkVideoEncodeH265FrameSizeKHR\n\"VUID-VkVideoEncodeH265RateControlLayerInfoKHR-maxFrameSize-parameter\",\n\"VUID-VkVideoEncodeH265RateControlLayerInfoKHR-maxQp-parameter\",\n\"VUID-VkVideoEncodeH265RateControlLayerInfoKHR-minQp-parameter\",\n// VkVideoPictureResourceInfoKHR\n\"VUID-VkVideoDecodeInfoKHR-dstPictureResource-parameter\",\n\"VUID-VkVideoEncodeInfoKHR-srcPictureResource-parameter\",\n// When:\n//   Struct A has a pointer field to Struct B\n//   Struct B has a non-pointer field to Struct C\n// you get a situation where Struct B has a VU that is not hit because we validate it in Struct C\n\"VUID-VkAttachmentSampleLocationsEXT-sampleLocationsInfo-parameter\",              // VUID-VkSampleLocationsInfoEXT-sType-sType\n\"VUID-VkSubpassSampleLocationsEXT-sampleLocationsInfo-parameter\",                 // VUID-VkSampleLocationsInfoEXT-sType-sType\n\"VUID-VkPipelineSampleLocationsStateCreateInfoEXT-sampleLocationsInfo-parameter\", // VUID-VkSampleLocationsInfoEXT-sType-sType\n\"VUID-VkComputePipelineCreateInfo-stage-parameter\", // VUID-VkPipelineShaderStageCreateInfo-sType-sType\n// Not possible as described in https://gitlab.khronos.org/vulkan/vulkan/-/merge_requests/6324\n\"VUID-VkGraphicsPipelineCreateInfo-pTessellationState-09023\",\n\"VUID-VkGraphicsPipelineCreateInfo-pViewportState-09025\",\n\"VUID-VkGraphicsPipelineCreateInfo-pMultisampleState-09027\",\n\"VUID-VkGraphicsPipelineCreateInfo-pDepthStencilState-09029\",\n\"VUID-VkGraphicsPipelineCreateInfo-pInputAssemblyState-09032\",\n\"VUID-VkGraphicsPipelineCreateInfo-pDepthStencilState-09034\",\n\"VUID-VkGraphicsPipelineCreateInfo-pDepthStencilState-09036\",\n\"VUID-VkGraphicsPipelineCreateInfo-pColorBlendState-09038\",\n\"VUID-VkGraphicsPipelineCreateInfo-pRasterizationState-09039\",\n\"VUID-VkGraphicsPipelineCreateInfo-pRasterizationState-09040\",\n// another variation of it\n\"VUID-vkGetDeviceFaultInfoEXT-pFaultCounts-07337\",\n\"VUID-vkGetDeviceFaultInfoEXT-pFaultCounts-07338\",\n\"VUID-vkGetDeviceFaultInfoEXT-pFaultCounts-07339\",\n\"VUID-VkRenderingInputAttachmentIndexInfoKHR-pDepthInputAttachmentIndex-parameter\",\n\"VUID-VkRenderingInputAttachmentIndexInfoKHR-pStencilInputAttachmentIndex-parameter\"\n// These VUs have \"is not NULL it must be a pointer to a valid pointer to valid structure\" language\n// There is no actual way to validate thsese\n// https://gitlab.khronos.org/vulkan/vulkan/-/issues/3718\n\"VUID-VkDescriptorGetInfoEXT-pUniformTexelBuffer-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pStorageTexelBuffer-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pUniformBuffer-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pStorageBuffer-parameter\",\n// These occur in stateless validation when a pointer member is optional and the length member is also optional\n\"VUID-VkPipelineColorBlendStateCreateInfo-pAttachments-parameter\",\n\"VUID-VkSubpassDescription-pResolveAttachments-parameter\",\n\"VUID-VkTimelineSemaphoreSubmitInfo-pWaitSemaphoreValues-parameter\",\n\"VUID-VkTimelineSemaphoreSubmitInfo-pSignalSemaphoreValues-parameter\",\n\"VUID-VkVideoEncodeH264SessionParametersAddInfoKHR-pStdSPSs-parameter\",\n\"VUID-VkVideoEncodeH264SessionParametersAddInfoKHR-pStdPPSs-parameter\",\n\"VUID-VkVideoEncodeH265SessionParametersAddInfoKHR-pStdVPSs-parameter\",\n\"VUID-VkVideoEncodeH265SessionParametersAddInfoKHR-pStdSPSs-parameter\",\n\"VUID-VkVideoEncodeH265SessionParametersAddInfoKHR-pStdPPSs-parameter\",\n\"VUID-VkD3D12FenceSubmitInfoKHR-pWaitSemaphoreValues-parameter\",\n\"VUID-VkD3D12FenceSubmitInfoKHR-pSignalSemaphoreValues-parameter\",\n\"VUID-VkPresentRegionKHR-pRectangles-parameter\",\n\"VUID-VkBindDescriptorSetsInfoKHR-pDynamicOffsets-parameter\",\n\"VUID-VkPhysicalDeviceHostImageCopyPropertiesEXT-pCopySrcLayouts-parameter\",\n\"VUID-VkPhysicalDeviceHostImageCopyPropertiesEXT-pCopyDstLayouts-parameter\",\n\"VUID-VkSurfacePresentModeCompatibilityEXT-pPresentModes-parameter\",\n\"VUID-VkFrameBoundaryEXT-pImages-parameter\",\n\"VUID-VkFrameBoundaryEXT-pBuffers-parameter\",\n\"VUID-VkFrameBoundaryEXT-pTag-parameter\",\n\"VUID-VkMicromapBuildInfoEXT-pUsageCounts-parameter\",\n\"VUID-VkMicromapBuildInfoEXT-ppUsageCounts-parameter\",\n\"VUID-VkAccelerationStructureTrianglesOpacityMicromapEXT-pUsageCounts-parameter\",\n\"VUID-VkAccelerationStructureTrianglesOpacityMicromapEXT-ppUsageCounts-parameter\",\n\"VUID-VkAccelerationStructureTrianglesDisplacementMicromapNV-pUsageCounts-parameter\",\n\"VUID-VkAccelerationStructureTrianglesDisplacementMicromapNV-ppUsageCounts-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pSetLayouts-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pPushConstantRanges-parameter\",\n\"VUID-VkLatencySurfaceCapabilitiesNV-pPresentModes-parameter\",\n\"VUID-vkCmdBeginTransformFeedbackEXT-pCounterBufferOffsets-parameter\",\n\"VUID-vkCmdEndTransformFeedbackEXT-pCounterBufferOffsets-parameter\",\n\"VUID-vkCmdBindVertexBuffers2-pSizes-parameter\",\n\"VUID-vkCmdBindVertexBuffers2-pStrides-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pSampledImage-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pSampler-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pStorageImage-parameter\",\n\"VUID-vkGetAccelerationStructureBuildSizesKHR-pMaxPrimitiveCounts-parameter\",\n\"VUID-vkCmdDrawMultiIndexedEXT-pVertexOffset-parameter\",\n\"VUID-VkDisplayModeCreateInfoKHR-parameters-parameter\",\n// These occur in stateless validation when a pointer member is optional and the length member is null\n\"VUID-VkDeviceCreateInfo-pEnabledFeatures-parameter\",\n\"VUID-VkPipelineShaderStageCreateInfo-pSpecializationInfo-parameter\",\n\"VUID-VkSubpassDescription-pDepthStencilAttachment-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pSpecializationInfo-parameter\",\n\"VUID-VkExportFenceWin32HandleInfoKHR-pAttributes-parameter\",\n\"VUID-VkExportSemaphoreWin32HandleInfoKHR-pAttributes-parameter\",\n\"VUID-VkExportMemoryWin32HandleInfoKHR-pAttributes-parameter\",\n\"VUID-VkExportMemoryWin32HandleInfoNV-pAttributes-parameter\",\n\"VUID-vkEnumerateDeviceExtensionProperties-pProperties-parameter\",\n\"VUID-vkEnumerateDeviceLayerProperties-pProperties-parameter\",\n\"VUID-vkEnumerateInstanceExtensionProperties-pProperties-parameter\",\n\"VUID-vkEnumerateInstanceLayerProperties-pProperties-parameter\",\n// Checking for null-terminated UTF-8 string\n\"VUID-VkApplicationInfo-pApplicationName-parameter\",\n\"VUID-VkApplicationInfo-pEngineName-parameter\",\n\"VUID-VkDebugUtilsObjectNameInfoEXT-pObjectName-parameter\",\n\"VUID-VkDebugUtilsMessengerCallbackDataEXT-pMessageIdName-parameter\",\n\"VUID-VkPipelineShaderStageNodeCreateInfoAMDX-pName-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pName-parameter\",\n\"VUID-vkGetDeviceProcAddr-pName-parameter\",\n\"VUID-vkGetInstanceProcAddr-pName-parameter\",\n\"VUID-vkEnumerateDeviceExtensionProperties-pLayerName-parameter\",\n\"VUID-vkEnumerateInstanceExtensionProperties-pLayerName-parameter\",\n// Can't validate a VkAllocationCallbacks structure\n\"VUID-vkCreateAccelerationStructureKHR-pAllocator-parameter\",\n\"VUID-vkCreateAccelerationStructureNV-pAllocator-parameter\",\n\"VUID-vkCreateAndroidSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateBuffer-pAllocator-parameter\",\n\"VUID-vkCreateBufferCollectionFUCHSIA-pAllocator-parameter\",\n\"VUID-vkCreateBufferView-pAllocator-parameter\",\n\"VUID-vkCreateCommandPool-pAllocator-parameter\",\n\"VUID-vkCreateComputePipelines-pAllocator-parameter\",\n\"VUID-vkCreateCuFunctionNVX-pAllocator-parameter\",\n\"VUID-vkCreateCuModuleNVX-pAllocator-parameter\",\n\"VUID-vkCreateCudaFunctionNV-pAllocator-parameter\",\n\"VUID-vkCreateCudaModuleNV-pAllocator-parameter\",\n\"VUID-vkCreateDebugReportCallbackEXT-pAllocator-parameter\",\n\"VUID-vkCreateDebugUtilsMessengerEXT-pAllocator-parameter\",\n\"VUID-vkCreateDeferredOperationKHR-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorPool-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorSetLayout-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorUpdateTemplate-pAllocator-parameter\",\n\"VUID-vkCreateDevice-pAllocator-parameter\",\n\"VUID-vkCreateDirectFBSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateDisplayModeKHR-pAllocator-parameter\",\n\"VUID-vkCreateDisplayPlaneSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateEvent-pAllocator-parameter\",\n\"VUID-vkCreateExecutionGraphPipelinesAMDX-pAllocator-parameter\",\n\"VUID-vkCreateFence-pAllocator-parameter\",\n\"VUID-vkCreateFramebuffer-pAllocator-parameter\",\n\"VUID-vkCreateGraphicsPipelines-pAllocator-parameter\",\n\"VUID-vkCreateHeadlessSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateIOSSurfaceMVK-pAllocator-parameter\",\n\"VUID-vkCreateImage-pAllocator-parameter\",\n\"VUID-vkCreateImagePipeSurfaceFUCHSIA-pAllocator-parameter\",\n\"VUID-vkCreateImageView-pAllocator-parameter\",\n\"VUID-vkCreateIndirectCommandsLayoutNV-pAllocator-parameter\",\n\"VUID-vkCreateInstance-pAllocator-parameter\",\n\"VUID-vkCreateMacOSSurfaceMVK-pAllocator-parameter\",\n\"VUID-vkCreateMetalSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateMicromapEXT-pAllocator-parameter\",\n\"VUID-vkCreateOpticalFlowSessionNV-pAllocator-parameter\",\n\"VUID-vkCreatePipelineCache-pAllocator-parameter\",\n\"VUID-vkCreatePipelineLayout-pAllocator-parameter\",\n\"VUID-vkCreatePrivateDataSlot-pAllocator-parameter\",\n\"VUID-vkCreateQueryPool-pAllocator-parameter\",\n\"VUID-vkCreateRayTracingPipelinesKHR-pAllocator-parameter\",\n\"VUID-vkCreateRayTracingPipelinesNV-pAllocator-parameter\",\n\"VUID-vkCreateRenderPass-pAllocator-parameter\",\n\"VUID-vkCreateRenderPass2-pAllocator-parameter\",\n\"VUID-vkCreateSampler-pAllocator-parameter\",\n\"VUID-vkCreateSamplerYcbcrConversion-pAllocator-parameter\",\n\"VUID-vkCreateScreenSurfaceQNX-pAllocator-parameter\",\n\"VUID-vkCreateSemaphore-pAllocator-parameter\",\n\"VUID-vkCreateShaderModule-pAllocator-parameter\",\n\"VUID-vkCreateShadersEXT-pAllocator-parameter\",\n\"VUID-vkCreateSharedSwapchainsKHR-pAllocator-parameter\",\n\"VUID-vkCreateStreamDescriptorSurfaceGGP-pAllocator-parameter\",\n\"VUID-vkCreateSwapchainKHR-pAllocator-parameter\",\n\"VUID-vkCreateValidationCacheEXT-pAllocator-parameter\",\n\"VUID-vkCreateViSurfaceNN-pAllocator-parameter\",\n\"VUID-vkCreateVideoSessionKHR-pAllocator-parameter\",\n\"VUID-vkCreateVideoSessionParametersKHR-pAllocator-parameter\",\n\"VUID-vkCreateWaylandSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateWin32SurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateXcbSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateXlibSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkDestroyAccelerationStructureKHR-pAllocator-parameter\",\n\"VUID-vkDestroyAccelerationStructureNV-pAllocator-parameter\",\n\"VUID-vkDestroyBuffer-pAllocator-parameter\",\n\"VUID-vkDestroyBufferCollectionFUCHSIA-pAllocator-parameter\",\n\"VUID-vkDestroyBufferView-pAllocator-parameter\",\n\"VUID-vkDestroyCommandPool-pAllocator-parameter\",\n\"VUID-vkDestroyCuFunctionNVX-pAllocator-parameter\",\n\"VUID-vkDestroyCuModuleNVX-pAllocator-parameter\",\n\"VUID-vkDestroyCudaFunctionNV-pAllocator-parameter\",\n\"VUID-vkDestroyCudaModuleNV-pAllocator-parameter\",\n\"VUID-vkDestroyDebugReportCallbackEXT-pAllocator-parameter\",\n\"VUID-vkDestroyDebugUtilsMessengerEXT-pAllocator-parameter\",\n\"VUID-vkDestroyDeferredOperationKHR-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorPool-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorSetLayout-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorUpdateTemplate-pAllocator-parameter\",\n\"VUID-vkDestroyDevice-pAllocator-parameter\",\n\"VUID-vkDestroyEvent-pAllocator-parameter\",\n\"VUID-vkDestroyFence-pAllocator-parameter\",\n\"VUID-vkDestroyFramebuffer-pAllocator-parameter\",\n\"VUID-vkDestroyImage-pAllocator-parameter\",\n\"VUID-vkDestroyImageView-pAllocator-parameter\",\n\"VUID-vkDestroyIndirectCommandsLayoutNV-pAllocator-parameter\",\n\"VUID-vkDestroyInstance-pAllocator-parameter\",\n\"VUID-vkDestroyMicromapEXT-pAllocator-parameter\",\n\"VUID-vkDestroyOpticalFlowSessionNV-pAllocator-parameter\",\n\"VUID-vkDestroyPipeline-pAllocator-parameter\",\n\"VUID-vkDestroyPipelineCache-pAllocator-parameter\",\n\"VUID-vkDestroyPipelineLayout-pAllocator-parameter\",\n\"VUID-vkDestroyPrivateDataSlot-pAllocator-parameter\",\n\"VUID-vkDestroyQueryPool-pAllocator-parameter\",\n\"VUID-vkDestroyRenderPass-pAllocator-parameter\",\n\"VUID-vkDestroySampler-pAllocator-parameter\",\n\"VUID-vkDestroySamplerYcbcrConversion-pAllocator-parameter\",\n\"VUID-vkDestroySemaphore-pAllocator-parameter\",\n\"VUID-vkDestroyShaderEXT-pAllocator-parameter\",\n\"VUID-vkDestroyShaderModule-pAllocator-parameter\",\n\"VUID-vkDestroySurfaceKHR-pAllocator-parameter\",\n\"VUID-vkDestroySwapchainKHR-pAllocator-parameter\",\n\"VUID-vkDestroyValidationCacheEXT-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionKHR-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionParametersKHR-pAllocator-parameter\",\n\"VUID-vkFreeMemory-pAllocator-parameter\",\n\"VUID-vkRegisterDeviceEventEXT-pAllocator-parameter\",\n\"VUID-vkRegisterDisplayEventEXT-pAllocator-parameter\",\n\"VUID-vkAllocateMemory-pAllocator-parameter\",\n};\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkPipelineCacheCreateInfo-initialDataSize-00769\", \"If initialDataSize is not 0, pInitialData must have been retrieved from a previous call to vkGetPipelineCacheData\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "\"VUID-VkPipelineCacheCreateInfo-initialDataSize-00768\",\n\"VUID-VkPipelineCacheCreateInfo-initialDataSize-00769\",\n\"VUID-VkValidationCacheCreateInfoEXT-initialDataSize-01534\",\n\"VUID-VkValidationCacheCreateInfoEXT-initialDataSize-01535\",\n// The header data returned from vkGetPipelineCacheData is the driver's responsibility to make correct.\n// There is CTS for this, and not within the scope of the Validation Layers to check\n\"VUID-VkPipelineCacheHeaderVersionOne-headerSize-04967\",\n\"VUID-VkPipelineCacheHeaderVersionOne-headerVersion-04968\",\n\"VUID-VkPipelineCacheHeaderVersionOne-headerSize-08990\",\n// These implicit VUs ask to check for a valid structure that has no sType,\n// there is nothing that can actually be validated\n//\n// VkImageSubresourceLayers\n\"VUID-VkImageBlit-dstSubresource-parameter\",\n\"VUID-VkImageBlit-srcSubresource-parameter\",\n\"VUID-VkImageBlit2-dstSubresource-parameter\",\n\"VUID-VkImageBlit2-srcSubresource-parameter\",\n\"VUID-VkImageCopy-dstSubresource-parameter\",\n\"VUID-VkImageCopy-srcSubresource-parameter\",\n\"VUID-VkImageCopy2-dstSubresource-parameter\",\n\"VUID-VkImageCopy2-srcSubresource-parameter\",\n\"VUID-VkImageResolve-dstSubresource-parameter\",\n\"VUID-VkImageResolve-srcSubresource-parameter\",\n\"VUID-VkImageResolve2-dstSubresource-parameter\",\n\"VUID-VkImageResolve2-srcSubresource-parameter\",\n\"VUID-VkBufferImageCopy-imageSubresource-parameter\",\n\"VUID-VkBufferImageCopy2-imageSubresource-parameter\",\n\"VUID-VkMemoryToImageCopyEXT-imageSubresource-parameter\",\n\"VUID-VkImageToMemoryCopyEXT-imageSubresource-parameter\",\n\"VUID-VkCopyMemoryToImageIndirectCommandNV-imageSubresource-parameter\",\n// VkImageSubresourceRange\n\"VUID-VkImageMemoryBarrier-subresourceRange-parameter\",\n\"VUID-VkImageMemoryBarrier2-subresourceRange-parameter\",\n\"VUID-VkHostImageLayoutTransitionInfoEXT-subresourceRange-parameter\",\n\"VUID-VkImageViewCreateInfo-subresourceRange-parameter\",\n// VkImageSubresource\n\"VUID-VkImageSubresource2KHR-imageSubresource-parameter\",\n\"VUID-VkSparseImageMemoryBind-subresource-parameter\",\n// VkStencilOpState\n\"VUID-VkPipelineDepthStencilStateCreateInfo-front-parameter\",\n\"VUID-VkPipelineDepthStencilStateCreateInfo-back-parameter\",\n// VkClearValue\n\"VUID-VkRenderingAttachmentInfo-clearValue-parameter\",\n// VkComponentMapping\n\"VUID-VkImageViewCreateInfo-components-parameter\",\n\"VUID-VkSamplerYcbcrConversionCreateInfo-components-parameter\",\n\"VUID-VkSamplerBorderColorComponentMappingCreateInfoEXT-components-parameter\",\n// VkAttachmentReference\n\"VUID-VkRenderPassFragmentDensityMapCreateInfoEXT-fragmentDensityMapAttachment-parameter\",\n// VkVideoEncodeH264QpKHR and VkVideoEncodeH264FrameSizeKHR\n\"VUID-VkVideoEncodeH264RateControlLayerInfoKHR-maxFrameSize-parameter\",\n\"VUID-VkVideoEncodeH264RateControlLayerInfoKHR-maxQp-parameter\",\n\"VUID-VkVideoEncodeH264RateControlLayerInfoKHR-minQp-parameter\",\n// VkVideoEncodeH265QpKHR and VkVideoEncodeH265FrameSizeKHR\n\"VUID-VkVideoEncodeH265RateControlLayerInfoKHR-maxFrameSize-parameter\",\n\"VUID-VkVideoEncodeH265RateControlLayerInfoKHR-maxQp-parameter\",\n\"VUID-VkVideoEncodeH265RateControlLayerInfoKHR-minQp-parameter\",\n// VkVideoPictureResourceInfoKHR\n\"VUID-VkVideoDecodeInfoKHR-dstPictureResource-parameter\",\n\"VUID-VkVideoEncodeInfoKHR-srcPictureResource-parameter\",\n// When:\n//   Struct A has a pointer field to Struct B\n//   Struct B has a non-pointer field to Struct C\n// you get a situation where Struct B has a VU that is not hit because we validate it in Struct C\n\"VUID-VkAttachmentSampleLocationsEXT-sampleLocationsInfo-parameter\",              // VUID-VkSampleLocationsInfoEXT-sType-sType\n\"VUID-VkSubpassSampleLocationsEXT-sampleLocationsInfo-parameter\",                 // VUID-VkSampleLocationsInfoEXT-sType-sType\n\"VUID-VkPipelineSampleLocationsStateCreateInfoEXT-sampleLocationsInfo-parameter\", // VUID-VkSampleLocationsInfoEXT-sType-sType\n\"VUID-VkComputePipelineCreateInfo-stage-parameter\", // VUID-VkPipelineShaderStageCreateInfo-sType-sType\n// Not possible as described in https://gitlab.khronos.org/vulkan/vulkan/-/merge_requests/6324\n\"VUID-VkGraphicsPipelineCreateInfo-pTessellationState-09023\",\n\"VUID-VkGraphicsPipelineCreateInfo-pViewportState-09025\",\n\"VUID-VkGraphicsPipelineCreateInfo-pMultisampleState-09027\",\n\"VUID-VkGraphicsPipelineCreateInfo-pDepthStencilState-09029\",\n\"VUID-VkGraphicsPipelineCreateInfo-pInputAssemblyState-09032\",\n\"VUID-VkGraphicsPipelineCreateInfo-pDepthStencilState-09034\",\n\"VUID-VkGraphicsPipelineCreateInfo-pDepthStencilState-09036\",\n\"VUID-VkGraphicsPipelineCreateInfo-pColorBlendState-09038\",\n\"VUID-VkGraphicsPipelineCreateInfo-pRasterizationState-09039\",\n\"VUID-VkGraphicsPipelineCreateInfo-pRasterizationState-09040\",\n// another variation of it\n\"VUID-vkGetDeviceFaultInfoEXT-pFaultCounts-07337\",\n\"VUID-vkGetDeviceFaultInfoEXT-pFaultCounts-07338\",\n\"VUID-vkGetDeviceFaultInfoEXT-pFaultCounts-07339\",\n\"VUID-VkRenderingInputAttachmentIndexInfoKHR-pDepthInputAttachmentIndex-parameter\",\n\"VUID-VkRenderingInputAttachmentIndexInfoKHR-pStencilInputAttachmentIndex-parameter\"\n// These VUs have \"is not NULL it must be a pointer to a valid pointer to valid structure\" language\n// There is no actual way to validate thsese\n// https://gitlab.khronos.org/vulkan/vulkan/-/issues/3718\n\"VUID-VkDescriptorGetInfoEXT-pUniformTexelBuffer-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pStorageTexelBuffer-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pUniformBuffer-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pStorageBuffer-parameter\",\n// These occur in stateless validation when a pointer member is optional and the length member is also optional\n\"VUID-VkPipelineColorBlendStateCreateInfo-pAttachments-parameter\",\n\"VUID-VkSubpassDescription-pResolveAttachments-parameter\",\n\"VUID-VkTimelineSemaphoreSubmitInfo-pWaitSemaphoreValues-parameter\",\n\"VUID-VkTimelineSemaphoreSubmitInfo-pSignalSemaphoreValues-parameter\",\n\"VUID-VkVideoEncodeH264SessionParametersAddInfoKHR-pStdSPSs-parameter\",\n\"VUID-VkVideoEncodeH264SessionParametersAddInfoKHR-pStdPPSs-parameter\",\n\"VUID-VkVideoEncodeH265SessionParametersAddInfoKHR-pStdVPSs-parameter\",\n\"VUID-VkVideoEncodeH265SessionParametersAddInfoKHR-pStdSPSs-parameter\",\n\"VUID-VkVideoEncodeH265SessionParametersAddInfoKHR-pStdPPSs-parameter\",\n\"VUID-VkD3D12FenceSubmitInfoKHR-pWaitSemaphoreValues-parameter\",\n\"VUID-VkD3D12FenceSubmitInfoKHR-pSignalSemaphoreValues-parameter\",\n\"VUID-VkPresentRegionKHR-pRectangles-parameter\",\n\"VUID-VkBindDescriptorSetsInfoKHR-pDynamicOffsets-parameter\",\n\"VUID-VkPhysicalDeviceHostImageCopyPropertiesEXT-pCopySrcLayouts-parameter\",\n\"VUID-VkPhysicalDeviceHostImageCopyPropertiesEXT-pCopyDstLayouts-parameter\",\n\"VUID-VkSurfacePresentModeCompatibilityEXT-pPresentModes-parameter\",\n\"VUID-VkFrameBoundaryEXT-pImages-parameter\",\n\"VUID-VkFrameBoundaryEXT-pBuffers-parameter\",\n\"VUID-VkFrameBoundaryEXT-pTag-parameter\",\n\"VUID-VkMicromapBuildInfoEXT-pUsageCounts-parameter\",\n\"VUID-VkMicromapBuildInfoEXT-ppUsageCounts-parameter\",\n\"VUID-VkAccelerationStructureTrianglesOpacityMicromapEXT-pUsageCounts-parameter\",\n\"VUID-VkAccelerationStructureTrianglesOpacityMicromapEXT-ppUsageCounts-parameter\",\n\"VUID-VkAccelerationStructureTrianglesDisplacementMicromapNV-pUsageCounts-parameter\",\n\"VUID-VkAccelerationStructureTrianglesDisplacementMicromapNV-ppUsageCounts-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pSetLayouts-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pPushConstantRanges-parameter\",\n\"VUID-VkLatencySurfaceCapabilitiesNV-pPresentModes-parameter\",\n\"VUID-vkCmdBeginTransformFeedbackEXT-pCounterBufferOffsets-parameter\",\n\"VUID-vkCmdEndTransformFeedbackEXT-pCounterBufferOffsets-parameter\",\n\"VUID-vkCmdBindVertexBuffers2-pSizes-parameter\",\n\"VUID-vkCmdBindVertexBuffers2-pStrides-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pSampledImage-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pSampler-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pStorageImage-parameter\",\n\"VUID-vkGetAccelerationStructureBuildSizesKHR-pMaxPrimitiveCounts-parameter\",\n\"VUID-vkCmdDrawMultiIndexedEXT-pVertexOffset-parameter\",\n\"VUID-VkDisplayModeCreateInfoKHR-parameters-parameter\",\n// These occur in stateless validation when a pointer member is optional and the length member is null\n\"VUID-VkDeviceCreateInfo-pEnabledFeatures-parameter\",\n\"VUID-VkPipelineShaderStageCreateInfo-pSpecializationInfo-parameter\",\n\"VUID-VkSubpassDescription-pDepthStencilAttachment-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pSpecializationInfo-parameter\",\n\"VUID-VkExportFenceWin32HandleInfoKHR-pAttributes-parameter\",\n\"VUID-VkExportSemaphoreWin32HandleInfoKHR-pAttributes-parameter\",\n\"VUID-VkExportMemoryWin32HandleInfoKHR-pAttributes-parameter\",\n\"VUID-VkExportMemoryWin32HandleInfoNV-pAttributes-parameter\",\n\"VUID-vkEnumerateDeviceExtensionProperties-pProperties-parameter\",\n\"VUID-vkEnumerateDeviceLayerProperties-pProperties-parameter\",\n\"VUID-vkEnumerateInstanceExtensionProperties-pProperties-parameter\",\n\"VUID-vkEnumerateInstanceLayerProperties-pProperties-parameter\",\n// Checking for null-terminated UTF-8 string\n\"VUID-VkApplicationInfo-pApplicationName-parameter\",\n\"VUID-VkApplicationInfo-pEngineName-parameter\",\n\"VUID-VkDebugUtilsObjectNameInfoEXT-pObjectName-parameter\",\n\"VUID-VkDebugUtilsMessengerCallbackDataEXT-pMessageIdName-parameter\",\n\"VUID-VkPipelineShaderStageNodeCreateInfoAMDX-pName-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pName-parameter\",\n\"VUID-vkGetDeviceProcAddr-pName-parameter\",\n\"VUID-vkGetInstanceProcAddr-pName-parameter\",\n\"VUID-vkEnumerateDeviceExtensionProperties-pLayerName-parameter\",\n\"VUID-vkEnumerateInstanceExtensionProperties-pLayerName-parameter\",\n// Can't validate a VkAllocationCallbacks structure\n\"VUID-vkCreateAccelerationStructureKHR-pAllocator-parameter\",\n\"VUID-vkCreateAccelerationStructureNV-pAllocator-parameter\",\n\"VUID-vkCreateAndroidSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateBuffer-pAllocator-parameter\",\n\"VUID-vkCreateBufferCollectionFUCHSIA-pAllocator-parameter\",\n\"VUID-vkCreateBufferView-pAllocator-parameter\",\n\"VUID-vkCreateCommandPool-pAllocator-parameter\",\n\"VUID-vkCreateComputePipelines-pAllocator-parameter\",\n\"VUID-vkCreateCuFunctionNVX-pAllocator-parameter\",\n\"VUID-vkCreateCuModuleNVX-pAllocator-parameter\",\n\"VUID-vkCreateCudaFunctionNV-pAllocator-parameter\",\n\"VUID-vkCreateCudaModuleNV-pAllocator-parameter\",\n\"VUID-vkCreateDebugReportCallbackEXT-pAllocator-parameter\",\n\"VUID-vkCreateDebugUtilsMessengerEXT-pAllocator-parameter\",\n\"VUID-vkCreateDeferredOperationKHR-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorPool-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorSetLayout-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorUpdateTemplate-pAllocator-parameter\",\n\"VUID-vkCreateDevice-pAllocator-parameter\",\n\"VUID-vkCreateDirectFBSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateDisplayModeKHR-pAllocator-parameter\",\n\"VUID-vkCreateDisplayPlaneSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateEvent-pAllocator-parameter\",\n\"VUID-vkCreateExecutionGraphPipelinesAMDX-pAllocator-parameter\",\n\"VUID-vkCreateFence-pAllocator-parameter\",\n\"VUID-vkCreateFramebuffer-pAllocator-parameter\",\n\"VUID-vkCreateGraphicsPipelines-pAllocator-parameter\",\n\"VUID-vkCreateHeadlessSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateIOSSurfaceMVK-pAllocator-parameter\",\n\"VUID-vkCreateImage-pAllocator-parameter\",\n\"VUID-vkCreateImagePipeSurfaceFUCHSIA-pAllocator-parameter\",\n\"VUID-vkCreateImageView-pAllocator-parameter\",\n\"VUID-vkCreateIndirectCommandsLayoutNV-pAllocator-parameter\",\n\"VUID-vkCreateInstance-pAllocator-parameter\",\n\"VUID-vkCreateMacOSSurfaceMVK-pAllocator-parameter\",\n\"VUID-vkCreateMetalSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateMicromapEXT-pAllocator-parameter\",\n\"VUID-vkCreateOpticalFlowSessionNV-pAllocator-parameter\",\n\"VUID-vkCreatePipelineCache-pAllocator-parameter\",\n\"VUID-vkCreatePipelineLayout-pAllocator-parameter\",\n\"VUID-vkCreatePrivateDataSlot-pAllocator-parameter\",\n\"VUID-vkCreateQueryPool-pAllocator-parameter\",\n\"VUID-vkCreateRayTracingPipelinesKHR-pAllocator-parameter\",\n\"VUID-vkCreateRayTracingPipelinesNV-pAllocator-parameter\",\n\"VUID-vkCreateRenderPass-pAllocator-parameter\",\n\"VUID-vkCreateRenderPass2-pAllocator-parameter\",\n\"VUID-vkCreateSampler-pAllocator-parameter\",\n\"VUID-vkCreateSamplerYcbcrConversion-pAllocator-parameter\",\n\"VUID-vkCreateScreenSurfaceQNX-pAllocator-parameter\",\n\"VUID-vkCreateSemaphore-pAllocator-parameter\",\n\"VUID-vkCreateShaderModule-pAllocator-parameter\",\n\"VUID-vkCreateShadersEXT-pAllocator-parameter\",\n\"VUID-vkCreateSharedSwapchainsKHR-pAllocator-parameter\",\n\"VUID-vkCreateStreamDescriptorSurfaceGGP-pAllocator-parameter\",\n\"VUID-vkCreateSwapchainKHR-pAllocator-parameter\",\n\"VUID-vkCreateValidationCacheEXT-pAllocator-parameter\",\n\"VUID-vkCreateViSurfaceNN-pAllocator-parameter\",\n\"VUID-vkCreateVideoSessionKHR-pAllocator-parameter\",\n\"VUID-vkCreateVideoSessionParametersKHR-pAllocator-parameter\",\n\"VUID-vkCreateWaylandSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateWin32SurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateXcbSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateXlibSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkDestroyAccelerationStructureKHR-pAllocator-parameter\",\n\"VUID-vkDestroyAccelerationStructureNV-pAllocator-parameter\",\n\"VUID-vkDestroyBuffer-pAllocator-parameter\",\n\"VUID-vkDestroyBufferCollectionFUCHSIA-pAllocator-parameter\",\n\"VUID-vkDestroyBufferView-pAllocator-parameter\",\n\"VUID-vkDestroyCommandPool-pAllocator-parameter\",\n\"VUID-vkDestroyCuFunctionNVX-pAllocator-parameter\",\n\"VUID-vkDestroyCuModuleNVX-pAllocator-parameter\",\n\"VUID-vkDestroyCudaFunctionNV-pAllocator-parameter\",\n\"VUID-vkDestroyCudaModuleNV-pAllocator-parameter\",\n\"VUID-vkDestroyDebugReportCallbackEXT-pAllocator-parameter\",\n\"VUID-vkDestroyDebugUtilsMessengerEXT-pAllocator-parameter\",\n\"VUID-vkDestroyDeferredOperationKHR-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorPool-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorSetLayout-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorUpdateTemplate-pAllocator-parameter\",\n\"VUID-vkDestroyDevice-pAllocator-parameter\",\n\"VUID-vkDestroyEvent-pAllocator-parameter\",\n\"VUID-vkDestroyFence-pAllocator-parameter\",\n\"VUID-vkDestroyFramebuffer-pAllocator-parameter\",\n\"VUID-vkDestroyImage-pAllocator-parameter\",\n\"VUID-vkDestroyImageView-pAllocator-parameter\",\n\"VUID-vkDestroyIndirectCommandsLayoutNV-pAllocator-parameter\",\n\"VUID-vkDestroyInstance-pAllocator-parameter\",\n\"VUID-vkDestroyMicromapEXT-pAllocator-parameter\",\n\"VUID-vkDestroyOpticalFlowSessionNV-pAllocator-parameter\",\n\"VUID-vkDestroyPipeline-pAllocator-parameter\",\n\"VUID-vkDestroyPipelineCache-pAllocator-parameter\",\n\"VUID-vkDestroyPipelineLayout-pAllocator-parameter\",\n\"VUID-vkDestroyPrivateDataSlot-pAllocator-parameter\",\n\"VUID-vkDestroyQueryPool-pAllocator-parameter\",\n\"VUID-vkDestroyRenderPass-pAllocator-parameter\",\n\"VUID-vkDestroySampler-pAllocator-parameter\",\n\"VUID-vkDestroySamplerYcbcrConversion-pAllocator-parameter\",\n\"VUID-vkDestroySemaphore-pAllocator-parameter\",\n\"VUID-vkDestroyShaderEXT-pAllocator-parameter\",\n\"VUID-vkDestroyShaderModule-pAllocator-parameter\",\n\"VUID-vkDestroySurfaceKHR-pAllocator-parameter\",\n\"VUID-vkDestroySwapchainKHR-pAllocator-parameter\",\n\"VUID-vkDestroyValidationCacheEXT-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionKHR-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionParametersKHR-pAllocator-parameter\",\n\"VUID-vkFreeMemory-pAllocator-parameter\",\n\"VUID-vkRegisterDeviceEventEXT-pAllocator-parameter\",\n\"VUID-vkRegisterDisplayEventEXT-pAllocator-parameter\",\n\"VUID-vkAllocateMemory-pAllocator-parameter\",\n};\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkPipelineCacheHeaderVersionOne-headerSize-08990\", \"headerSize must not exceed the size of the pipeline cache\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "\"VUID-VkPipelineCacheHeaderVersionOne-headerSize-04967\",\n\"VUID-VkPipelineCacheHeaderVersionOne-headerVersion-04968\",\n\"VUID-VkPipelineCacheHeaderVersionOne-headerSize-08990\",\n// These implicit VUs ask to check for a valid structure that has no sType,\n// there is nothing that can actually be validated\n//\n// VkImageSubresourceLayers\n\"VUID-VkImageBlit-dstSubresource-parameter\",\n\"VUID-VkImageBlit-srcSubresource-parameter\",\n\"VUID-VkImageBlit2-dstSubresource-parameter\",\n\"VUID-VkImageBlit2-srcSubresource-parameter\",\n\"VUID-VkImageCopy-dstSubresource-parameter\",\n\"VUID-VkImageCopy-srcSubresource-parameter\",\n\"VUID-VkImageCopy2-dstSubresource-parameter\",\n\"VUID-VkImageCopy2-srcSubresource-parameter\",\n\"VUID-VkImageResolve-dstSubresource-parameter\",\n\"VUID-VkImageResolve-srcSubresource-parameter\",\n\"VUID-VkImageResolve2-dstSubresource-parameter\",\n\"VUID-VkImageResolve2-srcSubresource-parameter\",\n\"VUID-VkBufferImageCopy-imageSubresource-parameter\",\n\"VUID-VkBufferImageCopy2-imageSubresource-parameter\",\n\"VUID-VkMemoryToImageCopyEXT-imageSubresource-parameter\",\n\"VUID-VkImageToMemoryCopyEXT-imageSubresource-parameter\",\n\"VUID-VkCopyMemoryToImageIndirectCommandNV-imageSubresource-parameter\",\n// VkImageSubresourceRange\n\"VUID-VkImageMemoryBarrier-subresourceRange-parameter\",\n\"VUID-VkImageMemoryBarrier2-subresourceRange-parameter\",\n\"VUID-VkHostImageLayoutTransitionInfoEXT-subresourceRange-parameter\",\n\"VUID-VkImageViewCreateInfo-subresourceRange-parameter\",\n// VkImageSubresource\n\"VUID-VkImageSubresource2KHR-imageSubresource-parameter\",\n\"VUID-VkSparseImageMemoryBind-subresource-parameter\",\n// VkStencilOpState\n\"VUID-VkPipelineDepthStencilStateCreateInfo-front-parameter\",\n\"VUID-VkPipelineDepthStencilStateCreateInfo-back-parameter\",\n// VkClearValue\n\"VUID-VkRenderingAttachmentInfo-clearValue-parameter\",\n// VkComponentMapping\n\"VUID-VkImageViewCreateInfo-components-parameter\",\n\"VUID-VkSamplerYcbcrConversionCreateInfo-components-parameter\",\n\"VUID-VkSamplerBorderColorComponentMappingCreateInfoEXT-components-parameter\",\n// VkAttachmentReference\n\"VUID-VkRenderPassFragmentDensityMapCreateInfoEXT-fragmentDensityMapAttachment-parameter\",\n// VkVideoEncodeH264QpKHR and VkVideoEncodeH264FrameSizeKHR\n\"VUID-VkVideoEncodeH264RateControlLayerInfoKHR-maxFrameSize-parameter\",\n\"VUID-VkVideoEncodeH264RateControlLayerInfoKHR-maxQp-parameter\",\n\"VUID-VkVideoEncodeH264RateControlLayerInfoKHR-minQp-parameter\",\n// VkVideoEncodeH265QpKHR and VkVideoEncodeH265FrameSizeKHR\n\"VUID-VkVideoEncodeH265RateControlLayerInfoKHR-maxFrameSize-parameter\",\n\"VUID-VkVideoEncodeH265RateControlLayerInfoKHR-maxQp-parameter\",\n\"VUID-VkVideoEncodeH265RateControlLayerInfoKHR-minQp-parameter\",\n// VkVideoPictureResourceInfoKHR\n\"VUID-VkVideoDecodeInfoKHR-dstPictureResource-parameter\",\n\"VUID-VkVideoEncodeInfoKHR-srcPictureResource-parameter\",\n// When:\n//   Struct A has a pointer field to Struct B\n//   Struct B has a non-pointer field to Struct C\n// you get a situation where Struct B has a VU that is not hit because we validate it in Struct C\n\"VUID-VkAttachmentSampleLocationsEXT-sampleLocationsInfo-parameter\",              // VUID-VkSampleLocationsInfoEXT-sType-sType\n\"VUID-VkSubpassSampleLocationsEXT-sampleLocationsInfo-parameter\",                 // VUID-VkSampleLocationsInfoEXT-sType-sType\n\"VUID-VkPipelineSampleLocationsStateCreateInfoEXT-sampleLocationsInfo-parameter\", // VUID-VkSampleLocationsInfoEXT-sType-sType\n\"VUID-VkComputePipelineCreateInfo-stage-parameter\", // VUID-VkPipelineShaderStageCreateInfo-sType-sType\n// Not possible as described in https://gitlab.khronos.org/vulkan/vulkan/-/merge_requests/6324\n\"VUID-VkGraphicsPipelineCreateInfo-pTessellationState-09023\",\n\"VUID-VkGraphicsPipelineCreateInfo-pViewportState-09025\",\n\"VUID-VkGraphicsPipelineCreateInfo-pMultisampleState-09027\",\n\"VUID-VkGraphicsPipelineCreateInfo-pDepthStencilState-09029\",\n\"VUID-VkGraphicsPipelineCreateInfo-pInputAssemblyState-09032\",\n\"VUID-VkGraphicsPipelineCreateInfo-pDepthStencilState-09034\",\n\"VUID-VkGraphicsPipelineCreateInfo-pDepthStencilState-09036\",\n\"VUID-VkGraphicsPipelineCreateInfo-pColorBlendState-09038\",\n\"VUID-VkGraphicsPipelineCreateInfo-pRasterizationState-09039\",\n\"VUID-VkGraphicsPipelineCreateInfo-pRasterizationState-09040\",\n// another variation of it\n\"VUID-vkGetDeviceFaultInfoEXT-pFaultCounts-07337\",\n\"VUID-vkGetDeviceFaultInfoEXT-pFaultCounts-07338\",\n\"VUID-vkGetDeviceFaultInfoEXT-pFaultCounts-07339\",\n\"VUID-VkRenderingInputAttachmentIndexInfoKHR-pDepthInputAttachmentIndex-parameter\",\n\"VUID-VkRenderingInputAttachmentIndexInfoKHR-pStencilInputAttachmentIndex-parameter\"\n// These VUs have \"is not NULL it must be a pointer to a valid pointer to valid structure\" language\n// There is no actual way to validate thsese\n// https://gitlab.khronos.org/vulkan/vulkan/-/issues/3718\n\"VUID-VkDescriptorGetInfoEXT-pUniformTexelBuffer-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pStorageTexelBuffer-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pUniformBuffer-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pStorageBuffer-parameter\",\n// These occur in stateless validation when a pointer member is optional and the length member is also optional\n\"VUID-VkPipelineColorBlendStateCreateInfo-pAttachments-parameter\",\n\"VUID-VkSubpassDescription-pResolveAttachments-parameter\",\n\"VUID-VkTimelineSemaphoreSubmitInfo-pWaitSemaphoreValues-parameter\",\n\"VUID-VkTimelineSemaphoreSubmitInfo-pSignalSemaphoreValues-parameter\",\n\"VUID-VkVideoEncodeH264SessionParametersAddInfoKHR-pStdSPSs-parameter\",\n\"VUID-VkVideoEncodeH264SessionParametersAddInfoKHR-pStdPPSs-parameter\",\n\"VUID-VkVideoEncodeH265SessionParametersAddInfoKHR-pStdVPSs-parameter\",\n\"VUID-VkVideoEncodeH265SessionParametersAddInfoKHR-pStdSPSs-parameter\",\n\"VUID-VkVideoEncodeH265SessionParametersAddInfoKHR-pStdPPSs-parameter\",\n\"VUID-VkD3D12FenceSubmitInfoKHR-pWaitSemaphoreValues-parameter\",\n\"VUID-VkD3D12FenceSubmitInfoKHR-pSignalSemaphoreValues-parameter\",\n\"VUID-VkPresentRegionKHR-pRectangles-parameter\",\n\"VUID-VkBindDescriptorSetsInfoKHR-pDynamicOffsets-parameter\",\n\"VUID-VkPhysicalDeviceHostImageCopyPropertiesEXT-pCopySrcLayouts-parameter\",\n\"VUID-VkPhysicalDeviceHostImageCopyPropertiesEXT-pCopyDstLayouts-parameter\",\n\"VUID-VkSurfacePresentModeCompatibilityEXT-pPresentModes-parameter\",\n\"VUID-VkFrameBoundaryEXT-pImages-parameter\",\n\"VUID-VkFrameBoundaryEXT-pBuffers-parameter\",\n\"VUID-VkFrameBoundaryEXT-pTag-parameter\",\n\"VUID-VkMicromapBuildInfoEXT-pUsageCounts-parameter\",\n\"VUID-VkMicromapBuildInfoEXT-ppUsageCounts-parameter\",\n\"VUID-VkAccelerationStructureTrianglesOpacityMicromapEXT-pUsageCounts-parameter\",\n\"VUID-VkAccelerationStructureTrianglesOpacityMicromapEXT-ppUsageCounts-parameter\",\n\"VUID-VkAccelerationStructureTrianglesDisplacementMicromapNV-pUsageCounts-parameter\",\n\"VUID-VkAccelerationStructureTrianglesDisplacementMicromapNV-ppUsageCounts-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pSetLayouts-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pPushConstantRanges-parameter\",\n\"VUID-VkLatencySurfaceCapabilitiesNV-pPresentModes-parameter\",\n\"VUID-vkCmdBeginTransformFeedbackEXT-pCounterBufferOffsets-parameter\",\n\"VUID-vkCmdEndTransformFeedbackEXT-pCounterBufferOffsets-parameter\",\n\"VUID-vkCmdBindVertexBuffers2-pSizes-parameter\",\n\"VUID-vkCmdBindVertexBuffers2-pStrides-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pSampledImage-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pSampler-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pStorageImage-parameter\",\n\"VUID-vkGetAccelerationStructureBuildSizesKHR-pMaxPrimitiveCounts-parameter\",\n\"VUID-vkCmdDrawMultiIndexedEXT-pVertexOffset-parameter\",\n\"VUID-VkDisplayModeCreateInfoKHR-parameters-parameter\",\n// These occur in stateless validation when a pointer member is optional and the length member is null\n\"VUID-VkDeviceCreateInfo-pEnabledFeatures-parameter\",\n\"VUID-VkPipelineShaderStageCreateInfo-pSpecializationInfo-parameter\",\n\"VUID-VkSubpassDescription-pDepthStencilAttachment-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pSpecializationInfo-parameter\",\n\"VUID-VkExportFenceWin32HandleInfoKHR-pAttributes-parameter\",\n\"VUID-VkExportSemaphoreWin32HandleInfoKHR-pAttributes-parameter\",\n\"VUID-VkExportMemoryWin32HandleInfoKHR-pAttributes-parameter\",\n\"VUID-VkExportMemoryWin32HandleInfoNV-pAttributes-parameter\",\n\"VUID-vkEnumerateDeviceExtensionProperties-pProperties-parameter\",\n\"VUID-vkEnumerateDeviceLayerProperties-pProperties-parameter\",\n\"VUID-vkEnumerateInstanceExtensionProperties-pProperties-parameter\",\n\"VUID-vkEnumerateInstanceLayerProperties-pProperties-parameter\",\n// Checking for null-terminated UTF-8 string\n\"VUID-VkApplicationInfo-pApplicationName-parameter\",\n\"VUID-VkApplicationInfo-pEngineName-parameter\",\n\"VUID-VkDebugUtilsObjectNameInfoEXT-pObjectName-parameter\",\n\"VUID-VkDebugUtilsMessengerCallbackDataEXT-pMessageIdName-parameter\",\n\"VUID-VkPipelineShaderStageNodeCreateInfoAMDX-pName-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pName-parameter\",\n\"VUID-vkGetDeviceProcAddr-pName-parameter\",\n\"VUID-vkGetInstanceProcAddr-pName-parameter\",\n\"VUID-vkEnumerateDeviceExtensionProperties-pLayerName-parameter\",\n\"VUID-vkEnumerateInstanceExtensionProperties-pLayerName-parameter\",\n// Can't validate a VkAllocationCallbacks structure\n\"VUID-vkCreateAccelerationStructureKHR-pAllocator-parameter\",\n\"VUID-vkCreateAccelerationStructureNV-pAllocator-parameter\",\n\"VUID-vkCreateAndroidSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateBuffer-pAllocator-parameter\",\n\"VUID-vkCreateBufferCollectionFUCHSIA-pAllocator-parameter\",\n\"VUID-vkCreateBufferView-pAllocator-parameter\",\n\"VUID-vkCreateCommandPool-pAllocator-parameter\",\n\"VUID-vkCreateComputePipelines-pAllocator-parameter\",\n\"VUID-vkCreateCuFunctionNVX-pAllocator-parameter\",\n\"VUID-vkCreateCuModuleNVX-pAllocator-parameter\",\n\"VUID-vkCreateCudaFunctionNV-pAllocator-parameter\",\n\"VUID-vkCreateCudaModuleNV-pAllocator-parameter\",\n\"VUID-vkCreateDebugReportCallbackEXT-pAllocator-parameter\",\n\"VUID-vkCreateDebugUtilsMessengerEXT-pAllocator-parameter\",\n\"VUID-vkCreateDeferredOperationKHR-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorPool-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorSetLayout-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorUpdateTemplate-pAllocator-parameter\",\n\"VUID-vkCreateDevice-pAllocator-parameter\",\n\"VUID-vkCreateDirectFBSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateDisplayModeKHR-pAllocator-parameter\",\n\"VUID-vkCreateDisplayPlaneSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateEvent-pAllocator-parameter\",\n\"VUID-vkCreateExecutionGraphPipelinesAMDX-pAllocator-parameter\",\n\"VUID-vkCreateFence-pAllocator-parameter\",\n\"VUID-vkCreateFramebuffer-pAllocator-parameter\",\n\"VUID-vkCreateGraphicsPipelines-pAllocator-parameter\",\n\"VUID-vkCreateHeadlessSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateIOSSurfaceMVK-pAllocator-parameter\",\n\"VUID-vkCreateImage-pAllocator-parameter\",\n\"VUID-vkCreateImagePipeSurfaceFUCHSIA-pAllocator-parameter\",\n\"VUID-vkCreateImageView-pAllocator-parameter\",\n\"VUID-vkCreateIndirectCommandsLayoutNV-pAllocator-parameter\",\n\"VUID-vkCreateInstance-pAllocator-parameter\",\n\"VUID-vkCreateMacOSSurfaceMVK-pAllocator-parameter\",\n\"VUID-vkCreateMetalSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateMicromapEXT-pAllocator-parameter\",\n\"VUID-vkCreateOpticalFlowSessionNV-pAllocator-parameter\",\n\"VUID-vkCreatePipelineCache-pAllocator-parameter\",\n\"VUID-vkCreatePipelineLayout-pAllocator-parameter\",\n\"VUID-vkCreatePrivateDataSlot-pAllocator-parameter\",\n\"VUID-vkCreateQueryPool-pAllocator-parameter\",\n\"VUID-vkCreateRayTracingPipelinesKHR-pAllocator-parameter\",\n\"VUID-vkCreateRayTracingPipelinesNV-pAllocator-parameter\",\n\"VUID-vkCreateRenderPass-pAllocator-parameter\",\n\"VUID-vkCreateRenderPass2-pAllocator-parameter\",\n\"VUID-vkCreateSampler-pAllocator-parameter\",\n\"VUID-vkCreateSamplerYcbcrConversion-pAllocator-parameter\",\n\"VUID-vkCreateScreenSurfaceQNX-pAllocator-parameter\",\n\"VUID-vkCreateSemaphore-pAllocator-parameter\",\n\"VUID-vkCreateShaderModule-pAllocator-parameter\",\n\"VUID-vkCreateShadersEXT-pAllocator-parameter\",\n\"VUID-vkCreateSharedSwapchainsKHR-pAllocator-parameter\",\n\"VUID-vkCreateStreamDescriptorSurfaceGGP-pAllocator-parameter\",\n\"VUID-vkCreateSwapchainKHR-pAllocator-parameter\",\n\"VUID-vkCreateValidationCacheEXT-pAllocator-parameter\",\n\"VUID-vkCreateViSurfaceNN-pAllocator-parameter\",\n\"VUID-vkCreateVideoSessionKHR-pAllocator-parameter\",\n\"VUID-vkCreateVideoSessionParametersKHR-pAllocator-parameter\",\n\"VUID-vkCreateWaylandSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateWin32SurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateXcbSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateXlibSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkDestroyAccelerationStructureKHR-pAllocator-parameter\",\n\"VUID-vkDestroyAccelerationStructureNV-pAllocator-parameter\",\n\"VUID-vkDestroyBuffer-pAllocator-parameter\",\n\"VUID-vkDestroyBufferCollectionFUCHSIA-pAllocator-parameter\",\n\"VUID-vkDestroyBufferView-pAllocator-parameter\",\n\"VUID-vkDestroyCommandPool-pAllocator-parameter\",\n\"VUID-vkDestroyCuFunctionNVX-pAllocator-parameter\",\n\"VUID-vkDestroyCuModuleNVX-pAllocator-parameter\",\n\"VUID-vkDestroyCudaFunctionNV-pAllocator-parameter\",\n\"VUID-vkDestroyCudaModuleNV-pAllocator-parameter\",\n\"VUID-vkDestroyDebugReportCallbackEXT-pAllocator-parameter\",\n\"VUID-vkDestroyDebugUtilsMessengerEXT-pAllocator-parameter\",\n\"VUID-vkDestroyDeferredOperationKHR-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorPool-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorSetLayout-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorUpdateTemplate-pAllocator-parameter\",\n\"VUID-vkDestroyDevice-pAllocator-parameter\",\n\"VUID-vkDestroyEvent-pAllocator-parameter\",\n\"VUID-vkDestroyFence-pAllocator-parameter\",\n\"VUID-vkDestroyFramebuffer-pAllocator-parameter\",\n\"VUID-vkDestroyImage-pAllocator-parameter\",\n\"VUID-vkDestroyImageView-pAllocator-parameter\",\n\"VUID-vkDestroyIndirectCommandsLayoutNV-pAllocator-parameter\",\n\"VUID-vkDestroyInstance-pAllocator-parameter\",\n\"VUID-vkDestroyMicromapEXT-pAllocator-parameter\",\n\"VUID-vkDestroyOpticalFlowSessionNV-pAllocator-parameter\",\n\"VUID-vkDestroyPipeline-pAllocator-parameter\",\n\"VUID-vkDestroyPipelineCache-pAllocator-parameter\",\n\"VUID-vkDestroyPipelineLayout-pAllocator-parameter\",\n\"VUID-vkDestroyPrivateDataSlot-pAllocator-parameter\",\n\"VUID-vkDestroyQueryPool-pAllocator-parameter\",\n\"VUID-vkDestroyRenderPass-pAllocator-parameter\",\n\"VUID-vkDestroySampler-pAllocator-parameter\",\n\"VUID-vkDestroySamplerYcbcrConversion-pAllocator-parameter\",\n\"VUID-vkDestroySemaphore-pAllocator-parameter\",\n\"VUID-vkDestroyShaderEXT-pAllocator-parameter\",\n\"VUID-vkDestroyShaderModule-pAllocator-parameter\",\n\"VUID-vkDestroySurfaceKHR-pAllocator-parameter\",\n\"VUID-vkDestroySwapchainKHR-pAllocator-parameter\",\n\"VUID-vkDestroyValidationCacheEXT-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionKHR-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionParametersKHR-pAllocator-parameter\",\n\"VUID-vkFreeMemory-pAllocator-parameter\",\n\"VUID-vkRegisterDeviceEventEXT-pAllocator-parameter\",\n\"VUID-vkRegisterDisplayEventEXT-pAllocator-parameter\",\n\"VUID-vkAllocateMemory-pAllocator-parameter\",\n};\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkImageCopy-dstSubresource-parameter\", \"dstSubresource must be a valid VkImageSubresourceLayers structure\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "\"VUID-VkImageBlit-srcSubresource-parameter\",\n\"VUID-VkImageBlit2-dstSubresource-parameter\",\n\"VUID-VkImageBlit2-srcSubresource-parameter\",\n\"VUID-VkImageCopy-dstSubresource-parameter\",\n\"VUID-VkImageCopy-srcSubresource-parameter\",\n\"VUID-VkImageCopy2-dstSubresource-parameter\",\n\"VUID-VkImageCopy2-srcSubresource-parameter\",\n\"VUID-VkImageResolve-dstSubresource-parameter\",\n\"VUID-VkImageResolve-srcSubresource-parameter\",\n\"VUID-VkImageResolve2-dstSubresource-parameter\",\n\"VUID-VkImageResolve2-srcSubresource-parameter\",\n\"VUID-VkBufferImageCopy-imageSubresource-parameter\",\n\"VUID-VkBufferImageCopy2-imageSubresource-parameter\",\n\"VUID-VkMemoryToImageCopyEXT-imageSubresource-parameter\",\n\"VUID-VkImageToMemoryCopyEXT-imageSubresource-parameter\",\n\"VUID-VkCopyMemoryToImageIndirectCommandNV-imageSubresource-parameter\",\n// VkImageSubresourceRange\n\"VUID-VkImageMemoryBarrier-subresourceRange-parameter\",\n\"VUID-VkImageMemoryBarrier2-subresourceRange-parameter\",\n\"VUID-VkHostImageLayoutTransitionInfoEXT-subresourceRange-parameter\",\n\"VUID-VkImageViewCreateInfo-subresourceRange-parameter\",\n// VkImageSubresource\n\"VUID-VkImageSubresource2KHR-imageSubresource-parameter\",\n\"VUID-VkSparseImageMemoryBind-subresource-parameter\",\n// VkStencilOpState\n\"VUID-VkPipelineDepthStencilStateCreateInfo-front-parameter\",\n\"VUID-VkPipelineDepthStencilStateCreateInfo-back-parameter\",\n// VkClearValue\n\"VUID-VkRenderingAttachmentInfo-clearValue-parameter\",\n// VkComponentMapping\n\"VUID-VkImageViewCreateInfo-components-parameter\",\n\"VUID-VkSamplerYcbcrConversionCreateInfo-components-parameter\",\n\"VUID-VkSamplerBorderColorComponentMappingCreateInfoEXT-components-parameter\",\n// VkAttachmentReference\n\"VUID-VkRenderPassFragmentDensityMapCreateInfoEXT-fragmentDensityMapAttachment-parameter\",\n// VkVideoEncodeH264QpKHR and VkVideoEncodeH264FrameSizeKHR\n\"VUID-VkVideoEncodeH264RateControlLayerInfoKHR-maxFrameSize-parameter\",\n\"VUID-VkVideoEncodeH264RateControlLayerInfoKHR-maxQp-parameter\",\n\"VUID-VkVideoEncodeH264RateControlLayerInfoKHR-minQp-parameter\",\n// VkVideoEncodeH265QpKHR and VkVideoEncodeH265FrameSizeKHR\n\"VUID-VkVideoEncodeH265RateControlLayerInfoKHR-maxFrameSize-parameter\",\n\"VUID-VkVideoEncodeH265RateControlLayerInfoKHR-maxQp-parameter\",\n\"VUID-VkVideoEncodeH265RateControlLayerInfoKHR-minQp-parameter\",\n// VkVideoPictureResourceInfoKHR\n\"VUID-VkVideoDecodeInfoKHR-dstPictureResource-parameter\",\n\"VUID-VkVideoEncodeInfoKHR-srcPictureResource-parameter\",\n// When:\n//   Struct A has a pointer field to Struct B\n//   Struct B has a non-pointer field to Struct C\n// you get a situation where Struct B has a VU that is not hit because we validate it in Struct C\n\"VUID-VkAttachmentSampleLocationsEXT-sampleLocationsInfo-parameter\",              // VUID-VkSampleLocationsInfoEXT-sType-sType\n\"VUID-VkSubpassSampleLocationsEXT-sampleLocationsInfo-parameter\",                 // VUID-VkSampleLocationsInfoEXT-sType-sType\n\"VUID-VkPipelineSampleLocationsStateCreateInfoEXT-sampleLocationsInfo-parameter\", // VUID-VkSampleLocationsInfoEXT-sType-sType\n\"VUID-VkComputePipelineCreateInfo-stage-parameter\", // VUID-VkPipelineShaderStageCreateInfo-sType-sType\n// Not possible as described in https://gitlab.khronos.org/vulkan/vulkan/-/merge_requests/6324\n\"VUID-VkGraphicsPipelineCreateInfo-pTessellationState-09023\",\n\"VUID-VkGraphicsPipelineCreateInfo-pViewportState-09025\",\n\"VUID-VkGraphicsPipelineCreateInfo-pMultisampleState-09027\",\n\"VUID-VkGraphicsPipelineCreateInfo-pDepthStencilState-09029\",\n\"VUID-VkGraphicsPipelineCreateInfo-pInputAssemblyState-09032\",\n\"VUID-VkGraphicsPipelineCreateInfo-pDepthStencilState-09034\",\n\"VUID-VkGraphicsPipelineCreateInfo-pDepthStencilState-09036\",\n\"VUID-VkGraphicsPipelineCreateInfo-pColorBlendState-09038\",\n\"VUID-VkGraphicsPipelineCreateInfo-pRasterizationState-09039\",\n\"VUID-VkGraphicsPipelineCreateInfo-pRasterizationState-09040\",\n// another variation of it\n\"VUID-vkGetDeviceFaultInfoEXT-pFaultCounts-07337\",\n\"VUID-vkGetDeviceFaultInfoEXT-pFaultCounts-07338\",\n\"VUID-vkGetDeviceFaultInfoEXT-pFaultCounts-07339\",\n\"VUID-VkRenderingInputAttachmentIndexInfoKHR-pDepthInputAttachmentIndex-parameter\",\n\"VUID-VkRenderingInputAttachmentIndexInfoKHR-pStencilInputAttachmentIndex-parameter\"\n// These VUs have \"is not NULL it must be a pointer to a valid pointer to valid structure\" language\n// There is no actual way to validate thsese\n// https://gitlab.khronos.org/vulkan/vulkan/-/issues/3718\n\"VUID-VkDescriptorGetInfoEXT-pUniformTexelBuffer-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pStorageTexelBuffer-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pUniformBuffer-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pStorageBuffer-parameter\",\n// These occur in stateless validation when a pointer member is optional and the length member is also optional\n\"VUID-VkPipelineColorBlendStateCreateInfo-pAttachments-parameter\",\n\"VUID-VkSubpassDescription-pResolveAttachments-parameter\",\n\"VUID-VkTimelineSemaphoreSubmitInfo-pWaitSemaphoreValues-parameter\",\n\"VUID-VkTimelineSemaphoreSubmitInfo-pSignalSemaphoreValues-parameter\",\n\"VUID-VkVideoEncodeH264SessionParametersAddInfoKHR-pStdSPSs-parameter\",\n\"VUID-VkVideoEncodeH264SessionParametersAddInfoKHR-pStdPPSs-parameter\",\n\"VUID-VkVideoEncodeH265SessionParametersAddInfoKHR-pStdVPSs-parameter\",\n\"VUID-VkVideoEncodeH265SessionParametersAddInfoKHR-pStdSPSs-parameter\",\n\"VUID-VkVideoEncodeH265SessionParametersAddInfoKHR-pStdPPSs-parameter\",\n\"VUID-VkD3D12FenceSubmitInfoKHR-pWaitSemaphoreValues-parameter\",\n\"VUID-VkD3D12FenceSubmitInfoKHR-pSignalSemaphoreValues-parameter\",\n\"VUID-VkPresentRegionKHR-pRectangles-parameter\",\n\"VUID-VkBindDescriptorSetsInfoKHR-pDynamicOffsets-parameter\",\n\"VUID-VkPhysicalDeviceHostImageCopyPropertiesEXT-pCopySrcLayouts-parameter\",\n\"VUID-VkPhysicalDeviceHostImageCopyPropertiesEXT-pCopyDstLayouts-parameter\",\n\"VUID-VkSurfacePresentModeCompatibilityEXT-pPresentModes-parameter\",\n\"VUID-VkFrameBoundaryEXT-pImages-parameter\",\n\"VUID-VkFrameBoundaryEXT-pBuffers-parameter\",\n\"VUID-VkFrameBoundaryEXT-pTag-parameter\",\n\"VUID-VkMicromapBuildInfoEXT-pUsageCounts-parameter\",\n\"VUID-VkMicromapBuildInfoEXT-ppUsageCounts-parameter\",\n\"VUID-VkAccelerationStructureTrianglesOpacityMicromapEXT-pUsageCounts-parameter\",\n\"VUID-VkAccelerationStructureTrianglesOpacityMicromapEXT-ppUsageCounts-parameter\",\n\"VUID-VkAccelerationStructureTrianglesDisplacementMicromapNV-pUsageCounts-parameter\",\n\"VUID-VkAccelerationStructureTrianglesDisplacementMicromapNV-ppUsageCounts-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pSetLayouts-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pPushConstantRanges-parameter\",\n\"VUID-VkLatencySurfaceCapabilitiesNV-pPresentModes-parameter\",\n\"VUID-vkCmdBeginTransformFeedbackEXT-pCounterBufferOffsets-parameter\",\n\"VUID-vkCmdEndTransformFeedbackEXT-pCounterBufferOffsets-parameter\",\n\"VUID-vkCmdBindVertexBuffers2-pSizes-parameter\",\n\"VUID-vkCmdBindVertexBuffers2-pStrides-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pSampledImage-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pSampler-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pStorageImage-parameter\",\n\"VUID-vkGetAccelerationStructureBuildSizesKHR-pMaxPrimitiveCounts-parameter\",\n\"VUID-vkCmdDrawMultiIndexedEXT-pVertexOffset-parameter\",\n\"VUID-VkDisplayModeCreateInfoKHR-parameters-parameter\",\n// These occur in stateless validation when a pointer member is optional and the length member is null\n\"VUID-VkDeviceCreateInfo-pEnabledFeatures-parameter\",\n\"VUID-VkPipelineShaderStageCreateInfo-pSpecializationInfo-parameter\",\n\"VUID-VkSubpassDescription-pDepthStencilAttachment-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pSpecializationInfo-parameter\",\n\"VUID-VkExportFenceWin32HandleInfoKHR-pAttributes-parameter\",\n\"VUID-VkExportSemaphoreWin32HandleInfoKHR-pAttributes-parameter\",\n\"VUID-VkExportMemoryWin32HandleInfoKHR-pAttributes-parameter\",\n\"VUID-VkExportMemoryWin32HandleInfoNV-pAttributes-parameter\",\n\"VUID-vkEnumerateDeviceExtensionProperties-pProperties-parameter\",\n\"VUID-vkEnumerateDeviceLayerProperties-pProperties-parameter\",\n\"VUID-vkEnumerateInstanceExtensionProperties-pProperties-parameter\",\n\"VUID-vkEnumerateInstanceLayerProperties-pProperties-parameter\",\n// Checking for null-terminated UTF-8 string\n\"VUID-VkApplicationInfo-pApplicationName-parameter\",\n\"VUID-VkApplicationInfo-pEngineName-parameter\",\n\"VUID-VkDebugUtilsObjectNameInfoEXT-pObjectName-parameter\",\n\"VUID-VkDebugUtilsMessengerCallbackDataEXT-pMessageIdName-parameter\",\n\"VUID-VkPipelineShaderStageNodeCreateInfoAMDX-pName-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pName-parameter\",\n\"VUID-vkGetDeviceProcAddr-pName-parameter\",\n\"VUID-vkGetInstanceProcAddr-pName-parameter\",\n\"VUID-vkEnumerateDeviceExtensionProperties-pLayerName-parameter\",\n\"VUID-vkEnumerateInstanceExtensionProperties-pLayerName-parameter\",\n// Can't validate a VkAllocationCallbacks structure\n\"VUID-vkCreateAccelerationStructureKHR-pAllocator-parameter\",\n\"VUID-vkCreateAccelerationStructureNV-pAllocator-parameter\",\n\"VUID-vkCreateAndroidSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateBuffer-pAllocator-parameter\",\n\"VUID-vkCreateBufferCollectionFUCHSIA-pAllocator-parameter\",\n\"VUID-vkCreateBufferView-pAllocator-parameter\",\n\"VUID-vkCreateCommandPool-pAllocator-parameter\",\n\"VUID-vkCreateComputePipelines-pAllocator-parameter\",\n\"VUID-vkCreateCuFunctionNVX-pAllocator-parameter\",\n\"VUID-vkCreateCuModuleNVX-pAllocator-parameter\",\n\"VUID-vkCreateCudaFunctionNV-pAllocator-parameter\",\n\"VUID-vkCreateCudaModuleNV-pAllocator-parameter\",\n\"VUID-vkCreateDebugReportCallbackEXT-pAllocator-parameter\",\n\"VUID-vkCreateDebugUtilsMessengerEXT-pAllocator-parameter\",\n\"VUID-vkCreateDeferredOperationKHR-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorPool-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorSetLayout-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorUpdateTemplate-pAllocator-parameter\",\n\"VUID-vkCreateDevice-pAllocator-parameter\",\n\"VUID-vkCreateDirectFBSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateDisplayModeKHR-pAllocator-parameter\",\n\"VUID-vkCreateDisplayPlaneSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateEvent-pAllocator-parameter\",\n\"VUID-vkCreateExecutionGraphPipelinesAMDX-pAllocator-parameter\",\n\"VUID-vkCreateFence-pAllocator-parameter\",\n\"VUID-vkCreateFramebuffer-pAllocator-parameter\",\n\"VUID-vkCreateGraphicsPipelines-pAllocator-parameter\",\n\"VUID-vkCreateHeadlessSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateIOSSurfaceMVK-pAllocator-parameter\",\n\"VUID-vkCreateImage-pAllocator-parameter\",\n\"VUID-vkCreateImagePipeSurfaceFUCHSIA-pAllocator-parameter\",\n\"VUID-vkCreateImageView-pAllocator-parameter\",\n\"VUID-vkCreateIndirectCommandsLayoutNV-pAllocator-parameter\",\n\"VUID-vkCreateInstance-pAllocator-parameter\",\n\"VUID-vkCreateMacOSSurfaceMVK-pAllocator-parameter\",\n\"VUID-vkCreateMetalSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateMicromapEXT-pAllocator-parameter\",\n\"VUID-vkCreateOpticalFlowSessionNV-pAllocator-parameter\",\n\"VUID-vkCreatePipelineCache-pAllocator-parameter\",\n\"VUID-vkCreatePipelineLayout-pAllocator-parameter\",\n\"VUID-vkCreatePrivateDataSlot-pAllocator-parameter\",\n\"VUID-vkCreateQueryPool-pAllocator-parameter\",\n\"VUID-vkCreateRayTracingPipelinesKHR-pAllocator-parameter\",\n\"VUID-vkCreateRayTracingPipelinesNV-pAllocator-parameter\",\n\"VUID-vkCreateRenderPass-pAllocator-parameter\",\n\"VUID-vkCreateRenderPass2-pAllocator-parameter\",\n\"VUID-vkCreateSampler-pAllocator-parameter\",\n\"VUID-vkCreateSamplerYcbcrConversion-pAllocator-parameter\",\n\"VUID-vkCreateScreenSurfaceQNX-pAllocator-parameter\",\n\"VUID-vkCreateSemaphore-pAllocator-parameter\",\n\"VUID-vkCreateShaderModule-pAllocator-parameter\",\n\"VUID-vkCreateShadersEXT-pAllocator-parameter\",\n\"VUID-vkCreateSharedSwapchainsKHR-pAllocator-parameter\",\n\"VUID-vkCreateStreamDescriptorSurfaceGGP-pAllocator-parameter\",\n\"VUID-vkCreateSwapchainKHR-pAllocator-parameter\",\n\"VUID-vkCreateValidationCacheEXT-pAllocator-parameter\",\n\"VUID-vkCreateViSurfaceNN-pAllocator-parameter\",\n\"VUID-vkCreateVideoSessionKHR-pAllocator-parameter\",\n\"VUID-vkCreateVideoSessionParametersKHR-pAllocator-parameter\",\n\"VUID-vkCreateWaylandSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateWin32SurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateXcbSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateXlibSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkDestroyAccelerationStructureKHR-pAllocator-parameter\",\n\"VUID-vkDestroyAccelerationStructureNV-pAllocator-parameter\",\n\"VUID-vkDestroyBuffer-pAllocator-parameter\",\n\"VUID-vkDestroyBufferCollectionFUCHSIA-pAllocator-parameter\",\n\"VUID-vkDestroyBufferView-pAllocator-parameter\",\n\"VUID-vkDestroyCommandPool-pAllocator-parameter\",\n\"VUID-vkDestroyCuFunctionNVX-pAllocator-parameter\",\n\"VUID-vkDestroyCuModuleNVX-pAllocator-parameter\",\n\"VUID-vkDestroyCudaFunctionNV-pAllocator-parameter\",\n\"VUID-vkDestroyCudaModuleNV-pAllocator-parameter\",\n\"VUID-vkDestroyDebugReportCallbackEXT-pAllocator-parameter\",\n\"VUID-vkDestroyDebugUtilsMessengerEXT-pAllocator-parameter\",\n\"VUID-vkDestroyDeferredOperationKHR-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorPool-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorSetLayout-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorUpdateTemplate-pAllocator-parameter\",\n\"VUID-vkDestroyDevice-pAllocator-parameter\",\n\"VUID-vkDestroyEvent-pAllocator-parameter\",\n\"VUID-vkDestroyFence-pAllocator-parameter\",\n\"VUID-vkDestroyFramebuffer-pAllocator-parameter\",\n\"VUID-vkDestroyImage-pAllocator-parameter\",\n\"VUID-vkDestroyImageView-pAllocator-parameter\",\n\"VUID-vkDestroyIndirectCommandsLayoutNV-pAllocator-parameter\",\n\"VUID-vkDestroyInstance-pAllocator-parameter\",\n\"VUID-vkDestroyMicromapEXT-pAllocator-parameter\",\n\"VUID-vkDestroyOpticalFlowSessionNV-pAllocator-parameter\",\n\"VUID-vkDestroyPipeline-pAllocator-parameter\",\n\"VUID-vkDestroyPipelineCache-pAllocator-parameter\",\n\"VUID-vkDestroyPipelineLayout-pAllocator-parameter\",\n\"VUID-vkDestroyPrivateDataSlot-pAllocator-parameter\",\n\"VUID-vkDestroyQueryPool-pAllocator-parameter\",\n\"VUID-vkDestroyRenderPass-pAllocator-parameter\",\n\"VUID-vkDestroySampler-pAllocator-parameter\",\n\"VUID-vkDestroySamplerYcbcrConversion-pAllocator-parameter\",\n\"VUID-vkDestroySemaphore-pAllocator-parameter\",\n\"VUID-vkDestroyShaderEXT-pAllocator-parameter\",\n\"VUID-vkDestroyShaderModule-pAllocator-parameter\",\n\"VUID-vkDestroySurfaceKHR-pAllocator-parameter\",\n\"VUID-vkDestroySwapchainKHR-pAllocator-parameter\",\n\"VUID-vkDestroyValidationCacheEXT-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionKHR-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionParametersKHR-pAllocator-parameter\",\n\"VUID-vkFreeMemory-pAllocator-parameter\",\n\"VUID-vkRegisterDeviceEventEXT-pAllocator-parameter\",\n\"VUID-vkRegisterDisplayEventEXT-pAllocator-parameter\",\n\"VUID-vkAllocateMemory-pAllocator-parameter\",\n};\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkImageResolve-srcSubresource-parameter\", \"srcSubresource must be a valid VkImageSubresourceLayers structure\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "\"VUID-VkImageCopy2-dstSubresource-parameter\",\n\"VUID-VkImageCopy2-srcSubresource-parameter\",\n\"VUID-VkImageResolve-dstSubresource-parameter\",\n\"VUID-VkImageResolve-srcSubresource-parameter\",\n\"VUID-VkImageResolve2-dstSubresource-parameter\",\n\"VUID-VkImageResolve2-srcSubresource-parameter\",\n\"VUID-VkBufferImageCopy-imageSubresource-parameter\",\n\"VUID-VkBufferImageCopy2-imageSubresource-parameter\",\n\"VUID-VkMemoryToImageCopyEXT-imageSubresource-parameter\",\n\"VUID-VkImageToMemoryCopyEXT-imageSubresource-parameter\",\n\"VUID-VkCopyMemoryToImageIndirectCommandNV-imageSubresource-parameter\",\n// VkImageSubresourceRange\n\"VUID-VkImageMemoryBarrier-subresourceRange-parameter\",\n\"VUID-VkImageMemoryBarrier2-subresourceRange-parameter\",\n\"VUID-VkHostImageLayoutTransitionInfoEXT-subresourceRange-parameter\",\n\"VUID-VkImageViewCreateInfo-subresourceRange-parameter\",\n// VkImageSubresource\n\"VUID-VkImageSubresource2KHR-imageSubresource-parameter\",\n\"VUID-VkSparseImageMemoryBind-subresource-parameter\",\n// VkStencilOpState\n\"VUID-VkPipelineDepthStencilStateCreateInfo-front-parameter\",\n\"VUID-VkPipelineDepthStencilStateCreateInfo-back-parameter\",\n// VkClearValue\n\"VUID-VkRenderingAttachmentInfo-clearValue-parameter\",\n// VkComponentMapping\n\"VUID-VkImageViewCreateInfo-components-parameter\",\n\"VUID-VkSamplerYcbcrConversionCreateInfo-components-parameter\",\n\"VUID-VkSamplerBorderColorComponentMappingCreateInfoEXT-components-parameter\",\n// VkAttachmentReference\n\"VUID-VkRenderPassFragmentDensityMapCreateInfoEXT-fragmentDensityMapAttachment-parameter\",\n// VkVideoEncodeH264QpKHR and VkVideoEncodeH264FrameSizeKHR\n\"VUID-VkVideoEncodeH264RateControlLayerInfoKHR-maxFrameSize-parameter\",\n\"VUID-VkVideoEncodeH264RateControlLayerInfoKHR-maxQp-parameter\",\n\"VUID-VkVideoEncodeH264RateControlLayerInfoKHR-minQp-parameter\",\n// VkVideoEncodeH265QpKHR and VkVideoEncodeH265FrameSizeKHR\n\"VUID-VkVideoEncodeH265RateControlLayerInfoKHR-maxFrameSize-parameter\",\n\"VUID-VkVideoEncodeH265RateControlLayerInfoKHR-maxQp-parameter\",\n\"VUID-VkVideoEncodeH265RateControlLayerInfoKHR-minQp-parameter\",\n// VkVideoPictureResourceInfoKHR\n\"VUID-VkVideoDecodeInfoKHR-dstPictureResource-parameter\",\n\"VUID-VkVideoEncodeInfoKHR-srcPictureResource-parameter\",\n// When:\n//   Struct A has a pointer field to Struct B\n//   Struct B has a non-pointer field to Struct C\n// you get a situation where Struct B has a VU that is not hit because we validate it in Struct C\n\"VUID-VkAttachmentSampleLocationsEXT-sampleLocationsInfo-parameter\",              // VUID-VkSampleLocationsInfoEXT-sType-sType\n\"VUID-VkSubpassSampleLocationsEXT-sampleLocationsInfo-parameter\",                 // VUID-VkSampleLocationsInfoEXT-sType-sType\n\"VUID-VkPipelineSampleLocationsStateCreateInfoEXT-sampleLocationsInfo-parameter\", // VUID-VkSampleLocationsInfoEXT-sType-sType\n\"VUID-VkComputePipelineCreateInfo-stage-parameter\", // VUID-VkPipelineShaderStageCreateInfo-sType-sType\n// Not possible as described in https://gitlab.khronos.org/vulkan/vulkan/-/merge_requests/6324\n\"VUID-VkGraphicsPipelineCreateInfo-pTessellationState-09023\",\n\"VUID-VkGraphicsPipelineCreateInfo-pViewportState-09025\",\n\"VUID-VkGraphicsPipelineCreateInfo-pMultisampleState-09027\",\n\"VUID-VkGraphicsPipelineCreateInfo-pDepthStencilState-09029\",\n\"VUID-VkGraphicsPipelineCreateInfo-pInputAssemblyState-09032\",\n\"VUID-VkGraphicsPipelineCreateInfo-pDepthStencilState-09034\",\n\"VUID-VkGraphicsPipelineCreateInfo-pDepthStencilState-09036\",\n\"VUID-VkGraphicsPipelineCreateInfo-pColorBlendState-09038\",\n\"VUID-VkGraphicsPipelineCreateInfo-pRasterizationState-09039\",\n\"VUID-VkGraphicsPipelineCreateInfo-pRasterizationState-09040\",\n// another variation of it\n\"VUID-vkGetDeviceFaultInfoEXT-pFaultCounts-07337\",\n\"VUID-vkGetDeviceFaultInfoEXT-pFaultCounts-07338\",\n\"VUID-vkGetDeviceFaultInfoEXT-pFaultCounts-07339\",\n\"VUID-VkRenderingInputAttachmentIndexInfoKHR-pDepthInputAttachmentIndex-parameter\",\n\"VUID-VkRenderingInputAttachmentIndexInfoKHR-pStencilInputAttachmentIndex-parameter\"\n// These VUs have \"is not NULL it must be a pointer to a valid pointer to valid structure\" language\n// There is no actual way to validate thsese\n// https://gitlab.khronos.org/vulkan/vulkan/-/issues/3718\n\"VUID-VkDescriptorGetInfoEXT-pUniformTexelBuffer-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pStorageTexelBuffer-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pUniformBuffer-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pStorageBuffer-parameter\",\n// These occur in stateless validation when a pointer member is optional and the length member is also optional\n\"VUID-VkPipelineColorBlendStateCreateInfo-pAttachments-parameter\",\n\"VUID-VkSubpassDescription-pResolveAttachments-parameter\",\n\"VUID-VkTimelineSemaphoreSubmitInfo-pWaitSemaphoreValues-parameter\",\n\"VUID-VkTimelineSemaphoreSubmitInfo-pSignalSemaphoreValues-parameter\",\n\"VUID-VkVideoEncodeH264SessionParametersAddInfoKHR-pStdSPSs-parameter\",\n\"VUID-VkVideoEncodeH264SessionParametersAddInfoKHR-pStdPPSs-parameter\",\n\"VUID-VkVideoEncodeH265SessionParametersAddInfoKHR-pStdVPSs-parameter\",\n\"VUID-VkVideoEncodeH265SessionParametersAddInfoKHR-pStdSPSs-parameter\",\n\"VUID-VkVideoEncodeH265SessionParametersAddInfoKHR-pStdPPSs-parameter\",\n\"VUID-VkD3D12FenceSubmitInfoKHR-pWaitSemaphoreValues-parameter\",\n\"VUID-VkD3D12FenceSubmitInfoKHR-pSignalSemaphoreValues-parameter\",\n\"VUID-VkPresentRegionKHR-pRectangles-parameter\",\n\"VUID-VkBindDescriptorSetsInfoKHR-pDynamicOffsets-parameter\",\n\"VUID-VkPhysicalDeviceHostImageCopyPropertiesEXT-pCopySrcLayouts-parameter\",\n\"VUID-VkPhysicalDeviceHostImageCopyPropertiesEXT-pCopyDstLayouts-parameter\",\n\"VUID-VkSurfacePresentModeCompatibilityEXT-pPresentModes-parameter\",\n\"VUID-VkFrameBoundaryEXT-pImages-parameter\",\n\"VUID-VkFrameBoundaryEXT-pBuffers-parameter\",\n\"VUID-VkFrameBoundaryEXT-pTag-parameter\",\n\"VUID-VkMicromapBuildInfoEXT-pUsageCounts-parameter\",\n\"VUID-VkMicromapBuildInfoEXT-ppUsageCounts-parameter\",\n\"VUID-VkAccelerationStructureTrianglesOpacityMicromapEXT-pUsageCounts-parameter\",\n\"VUID-VkAccelerationStructureTrianglesOpacityMicromapEXT-ppUsageCounts-parameter\",\n\"VUID-VkAccelerationStructureTrianglesDisplacementMicromapNV-pUsageCounts-parameter\",\n\"VUID-VkAccelerationStructureTrianglesDisplacementMicromapNV-ppUsageCounts-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pSetLayouts-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pPushConstantRanges-parameter\",\n\"VUID-VkLatencySurfaceCapabilitiesNV-pPresentModes-parameter\",\n\"VUID-vkCmdBeginTransformFeedbackEXT-pCounterBufferOffsets-parameter\",\n\"VUID-vkCmdEndTransformFeedbackEXT-pCounterBufferOffsets-parameter\",\n\"VUID-vkCmdBindVertexBuffers2-pSizes-parameter\",\n\"VUID-vkCmdBindVertexBuffers2-pStrides-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pSampledImage-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pSampler-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pStorageImage-parameter\",\n\"VUID-vkGetAccelerationStructureBuildSizesKHR-pMaxPrimitiveCounts-parameter\",\n\"VUID-vkCmdDrawMultiIndexedEXT-pVertexOffset-parameter\",\n\"VUID-VkDisplayModeCreateInfoKHR-parameters-parameter\",\n// These occur in stateless validation when a pointer member is optional and the length member is null\n\"VUID-VkDeviceCreateInfo-pEnabledFeatures-parameter\",\n\"VUID-VkPipelineShaderStageCreateInfo-pSpecializationInfo-parameter\",\n\"VUID-VkSubpassDescription-pDepthStencilAttachment-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pSpecializationInfo-parameter\",\n\"VUID-VkExportFenceWin32HandleInfoKHR-pAttributes-parameter\",\n\"VUID-VkExportSemaphoreWin32HandleInfoKHR-pAttributes-parameter\",\n\"VUID-VkExportMemoryWin32HandleInfoKHR-pAttributes-parameter\",\n\"VUID-VkExportMemoryWin32HandleInfoNV-pAttributes-parameter\",\n\"VUID-vkEnumerateDeviceExtensionProperties-pProperties-parameter\",\n\"VUID-vkEnumerateDeviceLayerProperties-pProperties-parameter\",\n\"VUID-vkEnumerateInstanceExtensionProperties-pProperties-parameter\",\n\"VUID-vkEnumerateInstanceLayerProperties-pProperties-parameter\",\n// Checking for null-terminated UTF-8 string\n\"VUID-VkApplicationInfo-pApplicationName-parameter\",\n\"VUID-VkApplicationInfo-pEngineName-parameter\",\n\"VUID-VkDebugUtilsObjectNameInfoEXT-pObjectName-parameter\",\n\"VUID-VkDebugUtilsMessengerCallbackDataEXT-pMessageIdName-parameter\",\n\"VUID-VkPipelineShaderStageNodeCreateInfoAMDX-pName-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pName-parameter\",\n\"VUID-vkGetDeviceProcAddr-pName-parameter\",\n\"VUID-vkGetInstanceProcAddr-pName-parameter\",\n\"VUID-vkEnumerateDeviceExtensionProperties-pLayerName-parameter\",\n\"VUID-vkEnumerateInstanceExtensionProperties-pLayerName-parameter\",\n// Can't validate a VkAllocationCallbacks structure\n\"VUID-vkCreateAccelerationStructureKHR-pAllocator-parameter\",\n\"VUID-vkCreateAccelerationStructureNV-pAllocator-parameter\",\n\"VUID-vkCreateAndroidSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateBuffer-pAllocator-parameter\",\n\"VUID-vkCreateBufferCollectionFUCHSIA-pAllocator-parameter\",\n\"VUID-vkCreateBufferView-pAllocator-parameter\",\n\"VUID-vkCreateCommandPool-pAllocator-parameter\",\n\"VUID-vkCreateComputePipelines-pAllocator-parameter\",\n\"VUID-vkCreateCuFunctionNVX-pAllocator-parameter\",\n\"VUID-vkCreateCuModuleNVX-pAllocator-parameter\",\n\"VUID-vkCreateCudaFunctionNV-pAllocator-parameter\",\n\"VUID-vkCreateCudaModuleNV-pAllocator-parameter\",\n\"VUID-vkCreateDebugReportCallbackEXT-pAllocator-parameter\",\n\"VUID-vkCreateDebugUtilsMessengerEXT-pAllocator-parameter\",\n\"VUID-vkCreateDeferredOperationKHR-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorPool-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorSetLayout-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorUpdateTemplate-pAllocator-parameter\",\n\"VUID-vkCreateDevice-pAllocator-parameter\",\n\"VUID-vkCreateDirectFBSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateDisplayModeKHR-pAllocator-parameter\",\n\"VUID-vkCreateDisplayPlaneSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateEvent-pAllocator-parameter\",\n\"VUID-vkCreateExecutionGraphPipelinesAMDX-pAllocator-parameter\",\n\"VUID-vkCreateFence-pAllocator-parameter\",\n\"VUID-vkCreateFramebuffer-pAllocator-parameter\",\n\"VUID-vkCreateGraphicsPipelines-pAllocator-parameter\",\n\"VUID-vkCreateHeadlessSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateIOSSurfaceMVK-pAllocator-parameter\",\n\"VUID-vkCreateImage-pAllocator-parameter\",\n\"VUID-vkCreateImagePipeSurfaceFUCHSIA-pAllocator-parameter\",\n\"VUID-vkCreateImageView-pAllocator-parameter\",\n\"VUID-vkCreateIndirectCommandsLayoutNV-pAllocator-parameter\",\n\"VUID-vkCreateInstance-pAllocator-parameter\",\n\"VUID-vkCreateMacOSSurfaceMVK-pAllocator-parameter\",\n\"VUID-vkCreateMetalSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateMicromapEXT-pAllocator-parameter\",\n\"VUID-vkCreateOpticalFlowSessionNV-pAllocator-parameter\",\n\"VUID-vkCreatePipelineCache-pAllocator-parameter\",\n\"VUID-vkCreatePipelineLayout-pAllocator-parameter\",\n\"VUID-vkCreatePrivateDataSlot-pAllocator-parameter\",\n\"VUID-vkCreateQueryPool-pAllocator-parameter\",\n\"VUID-vkCreateRayTracingPipelinesKHR-pAllocator-parameter\",\n\"VUID-vkCreateRayTracingPipelinesNV-pAllocator-parameter\",\n\"VUID-vkCreateRenderPass-pAllocator-parameter\",\n\"VUID-vkCreateRenderPass2-pAllocator-parameter\",\n\"VUID-vkCreateSampler-pAllocator-parameter\",\n\"VUID-vkCreateSamplerYcbcrConversion-pAllocator-parameter\",\n\"VUID-vkCreateScreenSurfaceQNX-pAllocator-parameter\",\n\"VUID-vkCreateSemaphore-pAllocator-parameter\",\n\"VUID-vkCreateShaderModule-pAllocator-parameter\",\n\"VUID-vkCreateShadersEXT-pAllocator-parameter\",\n\"VUID-vkCreateSharedSwapchainsKHR-pAllocator-parameter\",\n\"VUID-vkCreateStreamDescriptorSurfaceGGP-pAllocator-parameter\",\n\"VUID-vkCreateSwapchainKHR-pAllocator-parameter\",\n\"VUID-vkCreateValidationCacheEXT-pAllocator-parameter\",\n\"VUID-vkCreateViSurfaceNN-pAllocator-parameter\",\n\"VUID-vkCreateVideoSessionKHR-pAllocator-parameter\",\n\"VUID-vkCreateVideoSessionParametersKHR-pAllocator-parameter\",\n\"VUID-vkCreateWaylandSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateWin32SurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateXcbSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateXlibSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkDestroyAccelerationStructureKHR-pAllocator-parameter\",\n\"VUID-vkDestroyAccelerationStructureNV-pAllocator-parameter\",\n\"VUID-vkDestroyBuffer-pAllocator-parameter\",\n\"VUID-vkDestroyBufferCollectionFUCHSIA-pAllocator-parameter\",\n\"VUID-vkDestroyBufferView-pAllocator-parameter\",\n\"VUID-vkDestroyCommandPool-pAllocator-parameter\",\n\"VUID-vkDestroyCuFunctionNVX-pAllocator-parameter\",\n\"VUID-vkDestroyCuModuleNVX-pAllocator-parameter\",\n\"VUID-vkDestroyCudaFunctionNV-pAllocator-parameter\",\n\"VUID-vkDestroyCudaModuleNV-pAllocator-parameter\",\n\"VUID-vkDestroyDebugReportCallbackEXT-pAllocator-parameter\",\n\"VUID-vkDestroyDebugUtilsMessengerEXT-pAllocator-parameter\",\n\"VUID-vkDestroyDeferredOperationKHR-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorPool-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorSetLayout-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorUpdateTemplate-pAllocator-parameter\",\n\"VUID-vkDestroyDevice-pAllocator-parameter\",\n\"VUID-vkDestroyEvent-pAllocator-parameter\",\n\"VUID-vkDestroyFence-pAllocator-parameter\",\n\"VUID-vkDestroyFramebuffer-pAllocator-parameter\",\n\"VUID-vkDestroyImage-pAllocator-parameter\",\n\"VUID-vkDestroyImageView-pAllocator-parameter\",\n\"VUID-vkDestroyIndirectCommandsLayoutNV-pAllocator-parameter\",\n\"VUID-vkDestroyInstance-pAllocator-parameter\",\n\"VUID-vkDestroyMicromapEXT-pAllocator-parameter\",\n\"VUID-vkDestroyOpticalFlowSessionNV-pAllocator-parameter\",\n\"VUID-vkDestroyPipeline-pAllocator-parameter\",\n\"VUID-vkDestroyPipelineCache-pAllocator-parameter\",\n\"VUID-vkDestroyPipelineLayout-pAllocator-parameter\",\n\"VUID-vkDestroyPrivateDataSlot-pAllocator-parameter\",\n\"VUID-vkDestroyQueryPool-pAllocator-parameter\",\n\"VUID-vkDestroyRenderPass-pAllocator-parameter\",\n\"VUID-vkDestroySampler-pAllocator-parameter\",\n\"VUID-vkDestroySamplerYcbcrConversion-pAllocator-parameter\",\n\"VUID-vkDestroySemaphore-pAllocator-parameter\",\n\"VUID-vkDestroyShaderEXT-pAllocator-parameter\",\n\"VUID-vkDestroyShaderModule-pAllocator-parameter\",\n\"VUID-vkDestroySurfaceKHR-pAllocator-parameter\",\n\"VUID-vkDestroySwapchainKHR-pAllocator-parameter\",\n\"VUID-vkDestroyValidationCacheEXT-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionKHR-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionParametersKHR-pAllocator-parameter\",\n\"VUID-vkFreeMemory-pAllocator-parameter\",\n\"VUID-vkRegisterDeviceEventEXT-pAllocator-parameter\",\n\"VUID-vkRegisterDisplayEventEXT-pAllocator-parameter\",\n\"VUID-vkAllocateMemory-pAllocator-parameter\",\n};\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkMemoryToImageCopyEXT-imageSubresource-parameter\", \"imageSubresource must be a valid VkImageSubresourceLayers structure\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "\"VUID-VkImageResolve2-srcSubresource-parameter\",\n\"VUID-VkBufferImageCopy-imageSubresource-parameter\",\n\"VUID-VkBufferImageCopy2-imageSubresource-parameter\",\n\"VUID-VkMemoryToImageCopyEXT-imageSubresource-parameter\",\n\"VUID-VkImageToMemoryCopyEXT-imageSubresource-parameter\",\n\"VUID-VkCopyMemoryToImageIndirectCommandNV-imageSubresource-parameter\",\n// VkImageSubresourceRange\n\"VUID-VkImageMemoryBarrier-subresourceRange-parameter\",\n\"VUID-VkImageMemoryBarrier2-subresourceRange-parameter\",\n\"VUID-VkHostImageLayoutTransitionInfoEXT-subresourceRange-parameter\",\n\"VUID-VkImageViewCreateInfo-subresourceRange-parameter\",\n// VkImageSubresource\n\"VUID-VkImageSubresource2KHR-imageSubresource-parameter\",\n\"VUID-VkSparseImageMemoryBind-subresource-parameter\",\n// VkStencilOpState\n\"VUID-VkPipelineDepthStencilStateCreateInfo-front-parameter\",\n\"VUID-VkPipelineDepthStencilStateCreateInfo-back-parameter\",\n// VkClearValue\n\"VUID-VkRenderingAttachmentInfo-clearValue-parameter\",\n// VkComponentMapping\n\"VUID-VkImageViewCreateInfo-components-parameter\",\n\"VUID-VkSamplerYcbcrConversionCreateInfo-components-parameter\",\n\"VUID-VkSamplerBorderColorComponentMappingCreateInfoEXT-components-parameter\",\n// VkAttachmentReference\n\"VUID-VkRenderPassFragmentDensityMapCreateInfoEXT-fragmentDensityMapAttachment-parameter\",\n// VkVideoEncodeH264QpKHR and VkVideoEncodeH264FrameSizeKHR\n\"VUID-VkVideoEncodeH264RateControlLayerInfoKHR-maxFrameSize-parameter\",\n\"VUID-VkVideoEncodeH264RateControlLayerInfoKHR-maxQp-parameter\",\n\"VUID-VkVideoEncodeH264RateControlLayerInfoKHR-minQp-parameter\",\n// VkVideoEncodeH265QpKHR and VkVideoEncodeH265FrameSizeKHR\n\"VUID-VkVideoEncodeH265RateControlLayerInfoKHR-maxFrameSize-parameter\",\n\"VUID-VkVideoEncodeH265RateControlLayerInfoKHR-maxQp-parameter\",\n\"VUID-VkVideoEncodeH265RateControlLayerInfoKHR-minQp-parameter\",\n// VkVideoPictureResourceInfoKHR\n\"VUID-VkVideoDecodeInfoKHR-dstPictureResource-parameter\",\n\"VUID-VkVideoEncodeInfoKHR-srcPictureResource-parameter\",\n// When:\n//   Struct A has a pointer field to Struct B\n//   Struct B has a non-pointer field to Struct C\n// you get a situation where Struct B has a VU that is not hit because we validate it in Struct C\n\"VUID-VkAttachmentSampleLocationsEXT-sampleLocationsInfo-parameter\",              // VUID-VkSampleLocationsInfoEXT-sType-sType\n\"VUID-VkSubpassSampleLocationsEXT-sampleLocationsInfo-parameter\",                 // VUID-VkSampleLocationsInfoEXT-sType-sType\n\"VUID-VkPipelineSampleLocationsStateCreateInfoEXT-sampleLocationsInfo-parameter\", // VUID-VkSampleLocationsInfoEXT-sType-sType\n\"VUID-VkComputePipelineCreateInfo-stage-parameter\", // VUID-VkPipelineShaderStageCreateInfo-sType-sType\n// Not possible as described in https://gitlab.khronos.org/vulkan/vulkan/-/merge_requests/6324\n\"VUID-VkGraphicsPipelineCreateInfo-pTessellationState-09023\",\n\"VUID-VkGraphicsPipelineCreateInfo-pViewportState-09025\",\n\"VUID-VkGraphicsPipelineCreateInfo-pMultisampleState-09027\",\n\"VUID-VkGraphicsPipelineCreateInfo-pDepthStencilState-09029\",\n\"VUID-VkGraphicsPipelineCreateInfo-pInputAssemblyState-09032\",\n\"VUID-VkGraphicsPipelineCreateInfo-pDepthStencilState-09034\",\n\"VUID-VkGraphicsPipelineCreateInfo-pDepthStencilState-09036\",\n\"VUID-VkGraphicsPipelineCreateInfo-pColorBlendState-09038\",\n\"VUID-VkGraphicsPipelineCreateInfo-pRasterizationState-09039\",\n\"VUID-VkGraphicsPipelineCreateInfo-pRasterizationState-09040\",\n// another variation of it\n\"VUID-vkGetDeviceFaultInfoEXT-pFaultCounts-07337\",\n\"VUID-vkGetDeviceFaultInfoEXT-pFaultCounts-07338\",\n\"VUID-vkGetDeviceFaultInfoEXT-pFaultCounts-07339\",\n\"VUID-VkRenderingInputAttachmentIndexInfoKHR-pDepthInputAttachmentIndex-parameter\",\n\"VUID-VkRenderingInputAttachmentIndexInfoKHR-pStencilInputAttachmentIndex-parameter\"\n// These VUs have \"is not NULL it must be a pointer to a valid pointer to valid structure\" language\n// There is no actual way to validate thsese\n// https://gitlab.khronos.org/vulkan/vulkan/-/issues/3718\n\"VUID-VkDescriptorGetInfoEXT-pUniformTexelBuffer-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pStorageTexelBuffer-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pUniformBuffer-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pStorageBuffer-parameter\",\n// These occur in stateless validation when a pointer member is optional and the length member is also optional\n\"VUID-VkPipelineColorBlendStateCreateInfo-pAttachments-parameter\",\n\"VUID-VkSubpassDescription-pResolveAttachments-parameter\",\n\"VUID-VkTimelineSemaphoreSubmitInfo-pWaitSemaphoreValues-parameter\",\n\"VUID-VkTimelineSemaphoreSubmitInfo-pSignalSemaphoreValues-parameter\",\n\"VUID-VkVideoEncodeH264SessionParametersAddInfoKHR-pStdSPSs-parameter\",\n\"VUID-VkVideoEncodeH264SessionParametersAddInfoKHR-pStdPPSs-parameter\",\n\"VUID-VkVideoEncodeH265SessionParametersAddInfoKHR-pStdVPSs-parameter\",\n\"VUID-VkVideoEncodeH265SessionParametersAddInfoKHR-pStdSPSs-parameter\",\n\"VUID-VkVideoEncodeH265SessionParametersAddInfoKHR-pStdPPSs-parameter\",\n\"VUID-VkD3D12FenceSubmitInfoKHR-pWaitSemaphoreValues-parameter\",\n\"VUID-VkD3D12FenceSubmitInfoKHR-pSignalSemaphoreValues-parameter\",\n\"VUID-VkPresentRegionKHR-pRectangles-parameter\",\n\"VUID-VkBindDescriptorSetsInfoKHR-pDynamicOffsets-parameter\",\n\"VUID-VkPhysicalDeviceHostImageCopyPropertiesEXT-pCopySrcLayouts-parameter\",\n\"VUID-VkPhysicalDeviceHostImageCopyPropertiesEXT-pCopyDstLayouts-parameter\",\n\"VUID-VkSurfacePresentModeCompatibilityEXT-pPresentModes-parameter\",\n\"VUID-VkFrameBoundaryEXT-pImages-parameter\",\n\"VUID-VkFrameBoundaryEXT-pBuffers-parameter\",\n\"VUID-VkFrameBoundaryEXT-pTag-parameter\",\n\"VUID-VkMicromapBuildInfoEXT-pUsageCounts-parameter\",\n\"VUID-VkMicromapBuildInfoEXT-ppUsageCounts-parameter\",\n\"VUID-VkAccelerationStructureTrianglesOpacityMicromapEXT-pUsageCounts-parameter\",\n\"VUID-VkAccelerationStructureTrianglesOpacityMicromapEXT-ppUsageCounts-parameter\",\n\"VUID-VkAccelerationStructureTrianglesDisplacementMicromapNV-pUsageCounts-parameter\",\n\"VUID-VkAccelerationStructureTrianglesDisplacementMicromapNV-ppUsageCounts-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pSetLayouts-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pPushConstantRanges-parameter\",\n\"VUID-VkLatencySurfaceCapabilitiesNV-pPresentModes-parameter\",\n\"VUID-vkCmdBeginTransformFeedbackEXT-pCounterBufferOffsets-parameter\",\n\"VUID-vkCmdEndTransformFeedbackEXT-pCounterBufferOffsets-parameter\",\n\"VUID-vkCmdBindVertexBuffers2-pSizes-parameter\",\n\"VUID-vkCmdBindVertexBuffers2-pStrides-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pSampledImage-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pSampler-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pStorageImage-parameter\",\n\"VUID-vkGetAccelerationStructureBuildSizesKHR-pMaxPrimitiveCounts-parameter\",\n\"VUID-vkCmdDrawMultiIndexedEXT-pVertexOffset-parameter\",\n\"VUID-VkDisplayModeCreateInfoKHR-parameters-parameter\",\n// These occur in stateless validation when a pointer member is optional and the length member is null\n\"VUID-VkDeviceCreateInfo-pEnabledFeatures-parameter\",\n\"VUID-VkPipelineShaderStageCreateInfo-pSpecializationInfo-parameter\",\n\"VUID-VkSubpassDescription-pDepthStencilAttachment-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pSpecializationInfo-parameter\",\n\"VUID-VkExportFenceWin32HandleInfoKHR-pAttributes-parameter\",\n\"VUID-VkExportSemaphoreWin32HandleInfoKHR-pAttributes-parameter\",\n\"VUID-VkExportMemoryWin32HandleInfoKHR-pAttributes-parameter\",\n\"VUID-VkExportMemoryWin32HandleInfoNV-pAttributes-parameter\",\n\"VUID-vkEnumerateDeviceExtensionProperties-pProperties-parameter\",\n\"VUID-vkEnumerateDeviceLayerProperties-pProperties-parameter\",\n\"VUID-vkEnumerateInstanceExtensionProperties-pProperties-parameter\",\n\"VUID-vkEnumerateInstanceLayerProperties-pProperties-parameter\",\n// Checking for null-terminated UTF-8 string\n\"VUID-VkApplicationInfo-pApplicationName-parameter\",\n\"VUID-VkApplicationInfo-pEngineName-parameter\",\n\"VUID-VkDebugUtilsObjectNameInfoEXT-pObjectName-parameter\",\n\"VUID-VkDebugUtilsMessengerCallbackDataEXT-pMessageIdName-parameter\",\n\"VUID-VkPipelineShaderStageNodeCreateInfoAMDX-pName-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pName-parameter\",\n\"VUID-vkGetDeviceProcAddr-pName-parameter\",\n\"VUID-vkGetInstanceProcAddr-pName-parameter\",\n\"VUID-vkEnumerateDeviceExtensionProperties-pLayerName-parameter\",\n\"VUID-vkEnumerateInstanceExtensionProperties-pLayerName-parameter\",\n// Can't validate a VkAllocationCallbacks structure\n\"VUID-vkCreateAccelerationStructureKHR-pAllocator-parameter\",\n\"VUID-vkCreateAccelerationStructureNV-pAllocator-parameter\",\n\"VUID-vkCreateAndroidSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateBuffer-pAllocator-parameter\",\n\"VUID-vkCreateBufferCollectionFUCHSIA-pAllocator-parameter\",\n\"VUID-vkCreateBufferView-pAllocator-parameter\",\n\"VUID-vkCreateCommandPool-pAllocator-parameter\",\n\"VUID-vkCreateComputePipelines-pAllocator-parameter\",\n\"VUID-vkCreateCuFunctionNVX-pAllocator-parameter\",\n\"VUID-vkCreateCuModuleNVX-pAllocator-parameter\",\n\"VUID-vkCreateCudaFunctionNV-pAllocator-parameter\",\n\"VUID-vkCreateCudaModuleNV-pAllocator-parameter\",\n\"VUID-vkCreateDebugReportCallbackEXT-pAllocator-parameter\",\n\"VUID-vkCreateDebugUtilsMessengerEXT-pAllocator-parameter\",\n\"VUID-vkCreateDeferredOperationKHR-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorPool-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorSetLayout-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorUpdateTemplate-pAllocator-parameter\",\n\"VUID-vkCreateDevice-pAllocator-parameter\",\n\"VUID-vkCreateDirectFBSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateDisplayModeKHR-pAllocator-parameter\",\n\"VUID-vkCreateDisplayPlaneSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateEvent-pAllocator-parameter\",\n\"VUID-vkCreateExecutionGraphPipelinesAMDX-pAllocator-parameter\",\n\"VUID-vkCreateFence-pAllocator-parameter\",\n\"VUID-vkCreateFramebuffer-pAllocator-parameter\",\n\"VUID-vkCreateGraphicsPipelines-pAllocator-parameter\",\n\"VUID-vkCreateHeadlessSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateIOSSurfaceMVK-pAllocator-parameter\",\n\"VUID-vkCreateImage-pAllocator-parameter\",\n\"VUID-vkCreateImagePipeSurfaceFUCHSIA-pAllocator-parameter\",\n\"VUID-vkCreateImageView-pAllocator-parameter\",\n\"VUID-vkCreateIndirectCommandsLayoutNV-pAllocator-parameter\",\n\"VUID-vkCreateInstance-pAllocator-parameter\",\n\"VUID-vkCreateMacOSSurfaceMVK-pAllocator-parameter\",\n\"VUID-vkCreateMetalSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateMicromapEXT-pAllocator-parameter\",\n\"VUID-vkCreateOpticalFlowSessionNV-pAllocator-parameter\",\n\"VUID-vkCreatePipelineCache-pAllocator-parameter\",\n\"VUID-vkCreatePipelineLayout-pAllocator-parameter\",\n\"VUID-vkCreatePrivateDataSlot-pAllocator-parameter\",\n\"VUID-vkCreateQueryPool-pAllocator-parameter\",\n\"VUID-vkCreateRayTracingPipelinesKHR-pAllocator-parameter\",\n\"VUID-vkCreateRayTracingPipelinesNV-pAllocator-parameter\",\n\"VUID-vkCreateRenderPass-pAllocator-parameter\",\n\"VUID-vkCreateRenderPass2-pAllocator-parameter\",\n\"VUID-vkCreateSampler-pAllocator-parameter\",\n\"VUID-vkCreateSamplerYcbcrConversion-pAllocator-parameter\",\n\"VUID-vkCreateScreenSurfaceQNX-pAllocator-parameter\",\n\"VUID-vkCreateSemaphore-pAllocator-parameter\",\n\"VUID-vkCreateShaderModule-pAllocator-parameter\",\n\"VUID-vkCreateShadersEXT-pAllocator-parameter\",\n\"VUID-vkCreateSharedSwapchainsKHR-pAllocator-parameter\",\n\"VUID-vkCreateStreamDescriptorSurfaceGGP-pAllocator-parameter\",\n\"VUID-vkCreateSwapchainKHR-pAllocator-parameter\",\n\"VUID-vkCreateValidationCacheEXT-pAllocator-parameter\",\n\"VUID-vkCreateViSurfaceNN-pAllocator-parameter\",\n\"VUID-vkCreateVideoSessionKHR-pAllocator-parameter\",\n\"VUID-vkCreateVideoSessionParametersKHR-pAllocator-parameter\",\n\"VUID-vkCreateWaylandSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateWin32SurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateXcbSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateXlibSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkDestroyAccelerationStructureKHR-pAllocator-parameter\",\n\"VUID-vkDestroyAccelerationStructureNV-pAllocator-parameter\",\n\"VUID-vkDestroyBuffer-pAllocator-parameter\",\n\"VUID-vkDestroyBufferCollectionFUCHSIA-pAllocator-parameter\",\n\"VUID-vkDestroyBufferView-pAllocator-parameter\",\n\"VUID-vkDestroyCommandPool-pAllocator-parameter\",\n\"VUID-vkDestroyCuFunctionNVX-pAllocator-parameter\",\n\"VUID-vkDestroyCuModuleNVX-pAllocator-parameter\",\n\"VUID-vkDestroyCudaFunctionNV-pAllocator-parameter\",\n\"VUID-vkDestroyCudaModuleNV-pAllocator-parameter\",\n\"VUID-vkDestroyDebugReportCallbackEXT-pAllocator-parameter\",\n\"VUID-vkDestroyDebugUtilsMessengerEXT-pAllocator-parameter\",\n\"VUID-vkDestroyDeferredOperationKHR-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorPool-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorSetLayout-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorUpdateTemplate-pAllocator-parameter\",\n\"VUID-vkDestroyDevice-pAllocator-parameter\",\n\"VUID-vkDestroyEvent-pAllocator-parameter\",\n\"VUID-vkDestroyFence-pAllocator-parameter\",\n\"VUID-vkDestroyFramebuffer-pAllocator-parameter\",\n\"VUID-vkDestroyImage-pAllocator-parameter\",\n\"VUID-vkDestroyImageView-pAllocator-parameter\",\n\"VUID-vkDestroyIndirectCommandsLayoutNV-pAllocator-parameter\",\n\"VUID-vkDestroyInstance-pAllocator-parameter\",\n\"VUID-vkDestroyMicromapEXT-pAllocator-parameter\",\n\"VUID-vkDestroyOpticalFlowSessionNV-pAllocator-parameter\",\n\"VUID-vkDestroyPipeline-pAllocator-parameter\",\n\"VUID-vkDestroyPipelineCache-pAllocator-parameter\",\n\"VUID-vkDestroyPipelineLayout-pAllocator-parameter\",\n\"VUID-vkDestroyPrivateDataSlot-pAllocator-parameter\",\n\"VUID-vkDestroyQueryPool-pAllocator-parameter\",\n\"VUID-vkDestroyRenderPass-pAllocator-parameter\",\n\"VUID-vkDestroySampler-pAllocator-parameter\",\n\"VUID-vkDestroySamplerYcbcrConversion-pAllocator-parameter\",\n\"VUID-vkDestroySemaphore-pAllocator-parameter\",\n\"VUID-vkDestroyShaderEXT-pAllocator-parameter\",\n\"VUID-vkDestroyShaderModule-pAllocator-parameter\",\n\"VUID-vkDestroySurfaceKHR-pAllocator-parameter\",\n\"VUID-vkDestroySwapchainKHR-pAllocator-parameter\",\n\"VUID-vkDestroyValidationCacheEXT-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionKHR-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionParametersKHR-pAllocator-parameter\",\n\"VUID-vkFreeMemory-pAllocator-parameter\",\n\"VUID-vkRegisterDeviceEventEXT-pAllocator-parameter\",\n\"VUID-vkRegisterDisplayEventEXT-pAllocator-parameter\",\n\"VUID-vkAllocateMemory-pAllocator-parameter\",\n};\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkImageViewCreateInfo-subresourceRange-parameter\", \"subresourceRange must be a valid VkImageSubresourceRange structure\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "\"VUID-VkImageMemoryBarrier-subresourceRange-parameter\",\n\"VUID-VkImageMemoryBarrier2-subresourceRange-parameter\",\n\"VUID-VkHostImageLayoutTransitionInfoEXT-subresourceRange-parameter\",\n\"VUID-VkImageViewCreateInfo-subresourceRange-parameter\",\n// VkImageSubresource\n\"VUID-VkImageSubresource2KHR-imageSubresource-parameter\",\n\"VUID-VkSparseImageMemoryBind-subresource-parameter\",\n// VkStencilOpState\n\"VUID-VkPipelineDepthStencilStateCreateInfo-front-parameter\",\n\"VUID-VkPipelineDepthStencilStateCreateInfo-back-parameter\",\n// VkClearValue\n\"VUID-VkRenderingAttachmentInfo-clearValue-parameter\",\n// VkComponentMapping\n\"VUID-VkImageViewCreateInfo-components-parameter\",\n\"VUID-VkSamplerYcbcrConversionCreateInfo-components-parameter\",\n\"VUID-VkSamplerBorderColorComponentMappingCreateInfoEXT-components-parameter\",\n// VkAttachmentReference\n\"VUID-VkRenderPassFragmentDensityMapCreateInfoEXT-fragmentDensityMapAttachment-parameter\",\n// VkVideoEncodeH264QpKHR and VkVideoEncodeH264FrameSizeKHR\n\"VUID-VkVideoEncodeH264RateControlLayerInfoKHR-maxFrameSize-parameter\",\n\"VUID-VkVideoEncodeH264RateControlLayerInfoKHR-maxQp-parameter\",\n\"VUID-VkVideoEncodeH264RateControlLayerInfoKHR-minQp-parameter\",\n// VkVideoEncodeH265QpKHR and VkVideoEncodeH265FrameSizeKHR\n\"VUID-VkVideoEncodeH265RateControlLayerInfoKHR-maxFrameSize-parameter\",\n\"VUID-VkVideoEncodeH265RateControlLayerInfoKHR-maxQp-parameter\",\n\"VUID-VkVideoEncodeH265RateControlLayerInfoKHR-minQp-parameter\",\n// VkVideoPictureResourceInfoKHR\n\"VUID-VkVideoDecodeInfoKHR-dstPictureResource-parameter\",\n\"VUID-VkVideoEncodeInfoKHR-srcPictureResource-parameter\",\n// When:\n//   Struct A has a pointer field to Struct B\n//   Struct B has a non-pointer field to Struct C\n// you get a situation where Struct B has a VU that is not hit because we validate it in Struct C\n\"VUID-VkAttachmentSampleLocationsEXT-sampleLocationsInfo-parameter\",              // VUID-VkSampleLocationsInfoEXT-sType-sType\n\"VUID-VkSubpassSampleLocationsEXT-sampleLocationsInfo-parameter\",                 // VUID-VkSampleLocationsInfoEXT-sType-sType\n\"VUID-VkPipelineSampleLocationsStateCreateInfoEXT-sampleLocationsInfo-parameter\", // VUID-VkSampleLocationsInfoEXT-sType-sType\n\"VUID-VkComputePipelineCreateInfo-stage-parameter\", // VUID-VkPipelineShaderStageCreateInfo-sType-sType\n// Not possible as described in https://gitlab.khronos.org/vulkan/vulkan/-/merge_requests/6324\n\"VUID-VkGraphicsPipelineCreateInfo-pTessellationState-09023\",\n\"VUID-VkGraphicsPipelineCreateInfo-pViewportState-09025\",\n\"VUID-VkGraphicsPipelineCreateInfo-pMultisampleState-09027\",\n\"VUID-VkGraphicsPipelineCreateInfo-pDepthStencilState-09029\",\n\"VUID-VkGraphicsPipelineCreateInfo-pInputAssemblyState-09032\",\n\"VUID-VkGraphicsPipelineCreateInfo-pDepthStencilState-09034\",\n\"VUID-VkGraphicsPipelineCreateInfo-pDepthStencilState-09036\",\n\"VUID-VkGraphicsPipelineCreateInfo-pColorBlendState-09038\",\n\"VUID-VkGraphicsPipelineCreateInfo-pRasterizationState-09039\",\n\"VUID-VkGraphicsPipelineCreateInfo-pRasterizationState-09040\",\n// another variation of it\n\"VUID-vkGetDeviceFaultInfoEXT-pFaultCounts-07337\",\n\"VUID-vkGetDeviceFaultInfoEXT-pFaultCounts-07338\",\n\"VUID-vkGetDeviceFaultInfoEXT-pFaultCounts-07339\",\n\"VUID-VkRenderingInputAttachmentIndexInfoKHR-pDepthInputAttachmentIndex-parameter\",\n\"VUID-VkRenderingInputAttachmentIndexInfoKHR-pStencilInputAttachmentIndex-parameter\"\n// These VUs have \"is not NULL it must be a pointer to a valid pointer to valid structure\" language\n// There is no actual way to validate thsese\n// https://gitlab.khronos.org/vulkan/vulkan/-/issues/3718\n\"VUID-VkDescriptorGetInfoEXT-pUniformTexelBuffer-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pStorageTexelBuffer-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pUniformBuffer-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pStorageBuffer-parameter\",\n// These occur in stateless validation when a pointer member is optional and the length member is also optional\n\"VUID-VkPipelineColorBlendStateCreateInfo-pAttachments-parameter\",\n\"VUID-VkSubpassDescription-pResolveAttachments-parameter\",\n\"VUID-VkTimelineSemaphoreSubmitInfo-pWaitSemaphoreValues-parameter\",\n\"VUID-VkTimelineSemaphoreSubmitInfo-pSignalSemaphoreValues-parameter\",\n\"VUID-VkVideoEncodeH264SessionParametersAddInfoKHR-pStdSPSs-parameter\",\n\"VUID-VkVideoEncodeH264SessionParametersAddInfoKHR-pStdPPSs-parameter\",\n\"VUID-VkVideoEncodeH265SessionParametersAddInfoKHR-pStdVPSs-parameter\",\n\"VUID-VkVideoEncodeH265SessionParametersAddInfoKHR-pStdSPSs-parameter\",\n\"VUID-VkVideoEncodeH265SessionParametersAddInfoKHR-pStdPPSs-parameter\",\n\"VUID-VkD3D12FenceSubmitInfoKHR-pWaitSemaphoreValues-parameter\",\n\"VUID-VkD3D12FenceSubmitInfoKHR-pSignalSemaphoreValues-parameter\",\n\"VUID-VkPresentRegionKHR-pRectangles-parameter\",\n\"VUID-VkBindDescriptorSetsInfoKHR-pDynamicOffsets-parameter\",\n\"VUID-VkPhysicalDeviceHostImageCopyPropertiesEXT-pCopySrcLayouts-parameter\",\n\"VUID-VkPhysicalDeviceHostImageCopyPropertiesEXT-pCopyDstLayouts-parameter\",\n\"VUID-VkSurfacePresentModeCompatibilityEXT-pPresentModes-parameter\",\n\"VUID-VkFrameBoundaryEXT-pImages-parameter\",\n\"VUID-VkFrameBoundaryEXT-pBuffers-parameter\",\n\"VUID-VkFrameBoundaryEXT-pTag-parameter\",\n\"VUID-VkMicromapBuildInfoEXT-pUsageCounts-parameter\",\n\"VUID-VkMicromapBuildInfoEXT-ppUsageCounts-parameter\",\n\"VUID-VkAccelerationStructureTrianglesOpacityMicromapEXT-pUsageCounts-parameter\",\n\"VUID-VkAccelerationStructureTrianglesOpacityMicromapEXT-ppUsageCounts-parameter\",\n\"VUID-VkAccelerationStructureTrianglesDisplacementMicromapNV-pUsageCounts-parameter\",\n\"VUID-VkAccelerationStructureTrianglesDisplacementMicromapNV-ppUsageCounts-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pSetLayouts-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pPushConstantRanges-parameter\",\n\"VUID-VkLatencySurfaceCapabilitiesNV-pPresentModes-parameter\",\n\"VUID-vkCmdBeginTransformFeedbackEXT-pCounterBufferOffsets-parameter\",\n\"VUID-vkCmdEndTransformFeedbackEXT-pCounterBufferOffsets-parameter\",\n\"VUID-vkCmdBindVertexBuffers2-pSizes-parameter\",\n\"VUID-vkCmdBindVertexBuffers2-pStrides-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pSampledImage-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pSampler-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pStorageImage-parameter\",\n\"VUID-vkGetAccelerationStructureBuildSizesKHR-pMaxPrimitiveCounts-parameter\",\n\"VUID-vkCmdDrawMultiIndexedEXT-pVertexOffset-parameter\",\n\"VUID-VkDisplayModeCreateInfoKHR-parameters-parameter\",\n// These occur in stateless validation when a pointer member is optional and the length member is null\n\"VUID-VkDeviceCreateInfo-pEnabledFeatures-parameter\",\n\"VUID-VkPipelineShaderStageCreateInfo-pSpecializationInfo-parameter\",\n\"VUID-VkSubpassDescription-pDepthStencilAttachment-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pSpecializationInfo-parameter\",\n\"VUID-VkExportFenceWin32HandleInfoKHR-pAttributes-parameter\",\n\"VUID-VkExportSemaphoreWin32HandleInfoKHR-pAttributes-parameter\",\n\"VUID-VkExportMemoryWin32HandleInfoKHR-pAttributes-parameter\",\n\"VUID-VkExportMemoryWin32HandleInfoNV-pAttributes-parameter\",\n\"VUID-vkEnumerateDeviceExtensionProperties-pProperties-parameter\",\n\"VUID-vkEnumerateDeviceLayerProperties-pProperties-parameter\",\n\"VUID-vkEnumerateInstanceExtensionProperties-pProperties-parameter\",\n\"VUID-vkEnumerateInstanceLayerProperties-pProperties-parameter\",\n// Checking for null-terminated UTF-8 string\n\"VUID-VkApplicationInfo-pApplicationName-parameter\",\n\"VUID-VkApplicationInfo-pEngineName-parameter\",\n\"VUID-VkDebugUtilsObjectNameInfoEXT-pObjectName-parameter\",\n\"VUID-VkDebugUtilsMessengerCallbackDataEXT-pMessageIdName-parameter\",\n\"VUID-VkPipelineShaderStageNodeCreateInfoAMDX-pName-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pName-parameter\",\n\"VUID-vkGetDeviceProcAddr-pName-parameter\",\n\"VUID-vkGetInstanceProcAddr-pName-parameter\",\n\"VUID-vkEnumerateDeviceExtensionProperties-pLayerName-parameter\",\n\"VUID-vkEnumerateInstanceExtensionProperties-pLayerName-parameter\",\n// Can't validate a VkAllocationCallbacks structure\n\"VUID-vkCreateAccelerationStructureKHR-pAllocator-parameter\",\n\"VUID-vkCreateAccelerationStructureNV-pAllocator-parameter\",\n\"VUID-vkCreateAndroidSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateBuffer-pAllocator-parameter\",\n\"VUID-vkCreateBufferCollectionFUCHSIA-pAllocator-parameter\",\n\"VUID-vkCreateBufferView-pAllocator-parameter\",\n\"VUID-vkCreateCommandPool-pAllocator-parameter\",\n\"VUID-vkCreateComputePipelines-pAllocator-parameter\",\n\"VUID-vkCreateCuFunctionNVX-pAllocator-parameter\",\n\"VUID-vkCreateCuModuleNVX-pAllocator-parameter\",\n\"VUID-vkCreateCudaFunctionNV-pAllocator-parameter\",\n\"VUID-vkCreateCudaModuleNV-pAllocator-parameter\",\n\"VUID-vkCreateDebugReportCallbackEXT-pAllocator-parameter\",\n\"VUID-vkCreateDebugUtilsMessengerEXT-pAllocator-parameter\",\n\"VUID-vkCreateDeferredOperationKHR-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorPool-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorSetLayout-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorUpdateTemplate-pAllocator-parameter\",\n\"VUID-vkCreateDevice-pAllocator-parameter\",\n\"VUID-vkCreateDirectFBSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateDisplayModeKHR-pAllocator-parameter\",\n\"VUID-vkCreateDisplayPlaneSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateEvent-pAllocator-parameter\",\n\"VUID-vkCreateExecutionGraphPipelinesAMDX-pAllocator-parameter\",\n\"VUID-vkCreateFence-pAllocator-parameter\",\n\"VUID-vkCreateFramebuffer-pAllocator-parameter\",\n\"VUID-vkCreateGraphicsPipelines-pAllocator-parameter\",\n\"VUID-vkCreateHeadlessSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateIOSSurfaceMVK-pAllocator-parameter\",\n\"VUID-vkCreateImage-pAllocator-parameter\",\n\"VUID-vkCreateImagePipeSurfaceFUCHSIA-pAllocator-parameter\",\n\"VUID-vkCreateImageView-pAllocator-parameter\",\n\"VUID-vkCreateIndirectCommandsLayoutNV-pAllocator-parameter\",\n\"VUID-vkCreateInstance-pAllocator-parameter\",\n\"VUID-vkCreateMacOSSurfaceMVK-pAllocator-parameter\",\n\"VUID-vkCreateMetalSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateMicromapEXT-pAllocator-parameter\",\n\"VUID-vkCreateOpticalFlowSessionNV-pAllocator-parameter\",\n\"VUID-vkCreatePipelineCache-pAllocator-parameter\",\n\"VUID-vkCreatePipelineLayout-pAllocator-parameter\",\n\"VUID-vkCreatePrivateDataSlot-pAllocator-parameter\",\n\"VUID-vkCreateQueryPool-pAllocator-parameter\",\n\"VUID-vkCreateRayTracingPipelinesKHR-pAllocator-parameter\",\n\"VUID-vkCreateRayTracingPipelinesNV-pAllocator-parameter\",\n\"VUID-vkCreateRenderPass-pAllocator-parameter\",\n\"VUID-vkCreateRenderPass2-pAllocator-parameter\",\n\"VUID-vkCreateSampler-pAllocator-parameter\",\n\"VUID-vkCreateSamplerYcbcrConversion-pAllocator-parameter\",\n\"VUID-vkCreateScreenSurfaceQNX-pAllocator-parameter\",\n\"VUID-vkCreateSemaphore-pAllocator-parameter\",\n\"VUID-vkCreateShaderModule-pAllocator-parameter\",\n\"VUID-vkCreateShadersEXT-pAllocator-parameter\",\n\"VUID-vkCreateSharedSwapchainsKHR-pAllocator-parameter\",\n\"VUID-vkCreateStreamDescriptorSurfaceGGP-pAllocator-parameter\",\n\"VUID-vkCreateSwapchainKHR-pAllocator-parameter\",\n\"VUID-vkCreateValidationCacheEXT-pAllocator-parameter\",\n\"VUID-vkCreateViSurfaceNN-pAllocator-parameter\",\n\"VUID-vkCreateVideoSessionKHR-pAllocator-parameter\",\n\"VUID-vkCreateVideoSessionParametersKHR-pAllocator-parameter\",\n\"VUID-vkCreateWaylandSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateWin32SurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateXcbSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateXlibSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkDestroyAccelerationStructureKHR-pAllocator-parameter\",\n\"VUID-vkDestroyAccelerationStructureNV-pAllocator-parameter\",\n\"VUID-vkDestroyBuffer-pAllocator-parameter\",\n\"VUID-vkDestroyBufferCollectionFUCHSIA-pAllocator-parameter\",\n\"VUID-vkDestroyBufferView-pAllocator-parameter\",\n\"VUID-vkDestroyCommandPool-pAllocator-parameter\",\n\"VUID-vkDestroyCuFunctionNVX-pAllocator-parameter\",\n\"VUID-vkDestroyCuModuleNVX-pAllocator-parameter\",\n\"VUID-vkDestroyCudaFunctionNV-pAllocator-parameter\",\n\"VUID-vkDestroyCudaModuleNV-pAllocator-parameter\",\n\"VUID-vkDestroyDebugReportCallbackEXT-pAllocator-parameter\",\n\"VUID-vkDestroyDebugUtilsMessengerEXT-pAllocator-parameter\",\n\"VUID-vkDestroyDeferredOperationKHR-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorPool-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorSetLayout-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorUpdateTemplate-pAllocator-parameter\",\n\"VUID-vkDestroyDevice-pAllocator-parameter\",\n\"VUID-vkDestroyEvent-pAllocator-parameter\",\n\"VUID-vkDestroyFence-pAllocator-parameter\",\n\"VUID-vkDestroyFramebuffer-pAllocator-parameter\",\n\"VUID-vkDestroyImage-pAllocator-parameter\",\n\"VUID-vkDestroyImageView-pAllocator-parameter\",\n\"VUID-vkDestroyIndirectCommandsLayoutNV-pAllocator-parameter\",\n\"VUID-vkDestroyInstance-pAllocator-parameter\",\n\"VUID-vkDestroyMicromapEXT-pAllocator-parameter\",\n\"VUID-vkDestroyOpticalFlowSessionNV-pAllocator-parameter\",\n\"VUID-vkDestroyPipeline-pAllocator-parameter\",\n\"VUID-vkDestroyPipelineCache-pAllocator-parameter\",\n\"VUID-vkDestroyPipelineLayout-pAllocator-parameter\",\n\"VUID-vkDestroyPrivateDataSlot-pAllocator-parameter\",\n\"VUID-vkDestroyQueryPool-pAllocator-parameter\",\n\"VUID-vkDestroyRenderPass-pAllocator-parameter\",\n\"VUID-vkDestroySampler-pAllocator-parameter\",\n\"VUID-vkDestroySamplerYcbcrConversion-pAllocator-parameter\",\n\"VUID-vkDestroySemaphore-pAllocator-parameter\",\n\"VUID-vkDestroyShaderEXT-pAllocator-parameter\",\n\"VUID-vkDestroyShaderModule-pAllocator-parameter\",\n\"VUID-vkDestroySurfaceKHR-pAllocator-parameter\",\n\"VUID-vkDestroySwapchainKHR-pAllocator-parameter\",\n\"VUID-vkDestroyValidationCacheEXT-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionKHR-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionParametersKHR-pAllocator-parameter\",\n\"VUID-vkFreeMemory-pAllocator-parameter\",\n\"VUID-vkRegisterDeviceEventEXT-pAllocator-parameter\",\n\"VUID-vkRegisterDisplayEventEXT-pAllocator-parameter\",\n\"VUID-vkAllocateMemory-pAllocator-parameter\",\n};\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkRenderingAttachmentInfo-clearValue-parameter\", \"clearValue must be a valid VkClearValue union\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "\"VUID-VkPipelineDepthStencilStateCreateInfo-front-parameter\",\n\"VUID-VkPipelineDepthStencilStateCreateInfo-back-parameter\",\n\"VUID-VkRenderingAttachmentInfo-clearValue-parameter\",\n// VkComponentMapping\n\"VUID-VkImageViewCreateInfo-components-parameter\",\n\"VUID-VkSamplerYcbcrConversionCreateInfo-components-parameter\",\n\"VUID-VkSamplerBorderColorComponentMappingCreateInfoEXT-components-parameter\",\n// VkAttachmentReference\n\"VUID-VkRenderPassFragmentDensityMapCreateInfoEXT-fragmentDensityMapAttachment-parameter\",\n// VkVideoEncodeH264QpKHR and VkVideoEncodeH264FrameSizeKHR\n\"VUID-VkVideoEncodeH264RateControlLayerInfoKHR-maxFrameSize-parameter\",\n\"VUID-VkVideoEncodeH264RateControlLayerInfoKHR-maxQp-parameter\",\n\"VUID-VkVideoEncodeH264RateControlLayerInfoKHR-minQp-parameter\",\n// VkVideoEncodeH265QpKHR and VkVideoEncodeH265FrameSizeKHR\n\"VUID-VkVideoEncodeH265RateControlLayerInfoKHR-maxFrameSize-parameter\",\n\"VUID-VkVideoEncodeH265RateControlLayerInfoKHR-maxQp-parameter\",\n\"VUID-VkVideoEncodeH265RateControlLayerInfoKHR-minQp-parameter\",\n// VkVideoPictureResourceInfoKHR\n\"VUID-VkVideoDecodeInfoKHR-dstPictureResource-parameter\",\n\"VUID-VkVideoEncodeInfoKHR-srcPictureResource-parameter\",\n// When:\n//   Struct A has a pointer field to Struct B\n//   Struct B has a non-pointer field to Struct C\n// you get a situation where Struct B has a VU that is not hit because we validate it in Struct C\n\"VUID-VkAttachmentSampleLocationsEXT-sampleLocationsInfo-parameter\",              // VUID-VkSampleLocationsInfoEXT-sType-sType\n\"VUID-VkSubpassSampleLocationsEXT-sampleLocationsInfo-parameter\",                 // VUID-VkSampleLocationsInfoEXT-sType-sType\n\"VUID-VkPipelineSampleLocationsStateCreateInfoEXT-sampleLocationsInfo-parameter\", // VUID-VkSampleLocationsInfoEXT-sType-sType\n\"VUID-VkComputePipelineCreateInfo-stage-parameter\", // VUID-VkPipelineShaderStageCreateInfo-sType-sType\n// Not possible as described in https://gitlab.khronos.org/vulkan/vulkan/-/merge_requests/6324\n\"VUID-VkGraphicsPipelineCreateInfo-pTessellationState-09023\",\n\"VUID-VkGraphicsPipelineCreateInfo-pViewportState-09025\",\n\"VUID-VkGraphicsPipelineCreateInfo-pMultisampleState-09027\",\n\"VUID-VkGraphicsPipelineCreateInfo-pDepthStencilState-09029\",\n\"VUID-VkGraphicsPipelineCreateInfo-pInputAssemblyState-09032\",\n\"VUID-VkGraphicsPipelineCreateInfo-pDepthStencilState-09034\",\n\"VUID-VkGraphicsPipelineCreateInfo-pDepthStencilState-09036\",\n\"VUID-VkGraphicsPipelineCreateInfo-pColorBlendState-09038\",\n\"VUID-VkGraphicsPipelineCreateInfo-pRasterizationState-09039\",\n\"VUID-VkGraphicsPipelineCreateInfo-pRasterizationState-09040\",\n// another variation of it\n\"VUID-vkGetDeviceFaultInfoEXT-pFaultCounts-07337\",\n\"VUID-vkGetDeviceFaultInfoEXT-pFaultCounts-07338\",\n\"VUID-vkGetDeviceFaultInfoEXT-pFaultCounts-07339\",\n\"VUID-VkRenderingInputAttachmentIndexInfoKHR-pDepthInputAttachmentIndex-parameter\",\n\"VUID-VkRenderingInputAttachmentIndexInfoKHR-pStencilInputAttachmentIndex-parameter\"\n// These VUs have \"is not NULL it must be a pointer to a valid pointer to valid structure\" language\n// There is no actual way to validate thsese\n// https://gitlab.khronos.org/vulkan/vulkan/-/issues/3718\n\"VUID-VkDescriptorGetInfoEXT-pUniformTexelBuffer-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pStorageTexelBuffer-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pUniformBuffer-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pStorageBuffer-parameter\",\n// These occur in stateless validation when a pointer member is optional and the length member is also optional\n\"VUID-VkPipelineColorBlendStateCreateInfo-pAttachments-parameter\",\n\"VUID-VkSubpassDescription-pResolveAttachments-parameter\",\n\"VUID-VkTimelineSemaphoreSubmitInfo-pWaitSemaphoreValues-parameter\",\n\"VUID-VkTimelineSemaphoreSubmitInfo-pSignalSemaphoreValues-parameter\",\n\"VUID-VkVideoEncodeH264SessionParametersAddInfoKHR-pStdSPSs-parameter\",\n\"VUID-VkVideoEncodeH264SessionParametersAddInfoKHR-pStdPPSs-parameter\",\n\"VUID-VkVideoEncodeH265SessionParametersAddInfoKHR-pStdVPSs-parameter\",\n\"VUID-VkVideoEncodeH265SessionParametersAddInfoKHR-pStdSPSs-parameter\",\n\"VUID-VkVideoEncodeH265SessionParametersAddInfoKHR-pStdPPSs-parameter\",\n\"VUID-VkD3D12FenceSubmitInfoKHR-pWaitSemaphoreValues-parameter\",\n\"VUID-VkD3D12FenceSubmitInfoKHR-pSignalSemaphoreValues-parameter\",\n\"VUID-VkPresentRegionKHR-pRectangles-parameter\",\n\"VUID-VkBindDescriptorSetsInfoKHR-pDynamicOffsets-parameter\",\n\"VUID-VkPhysicalDeviceHostImageCopyPropertiesEXT-pCopySrcLayouts-parameter\",\n\"VUID-VkPhysicalDeviceHostImageCopyPropertiesEXT-pCopyDstLayouts-parameter\",\n\"VUID-VkSurfacePresentModeCompatibilityEXT-pPresentModes-parameter\",\n\"VUID-VkFrameBoundaryEXT-pImages-parameter\",\n\"VUID-VkFrameBoundaryEXT-pBuffers-parameter\",\n\"VUID-VkFrameBoundaryEXT-pTag-parameter\",\n\"VUID-VkMicromapBuildInfoEXT-pUsageCounts-parameter\",\n\"VUID-VkMicromapBuildInfoEXT-ppUsageCounts-parameter\",\n\"VUID-VkAccelerationStructureTrianglesOpacityMicromapEXT-pUsageCounts-parameter\",\n\"VUID-VkAccelerationStructureTrianglesOpacityMicromapEXT-ppUsageCounts-parameter\",\n\"VUID-VkAccelerationStructureTrianglesDisplacementMicromapNV-pUsageCounts-parameter\",\n\"VUID-VkAccelerationStructureTrianglesDisplacementMicromapNV-ppUsageCounts-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pSetLayouts-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pPushConstantRanges-parameter\",\n\"VUID-VkLatencySurfaceCapabilitiesNV-pPresentModes-parameter\",\n\"VUID-vkCmdBeginTransformFeedbackEXT-pCounterBufferOffsets-parameter\",\n\"VUID-vkCmdEndTransformFeedbackEXT-pCounterBufferOffsets-parameter\",\n\"VUID-vkCmdBindVertexBuffers2-pSizes-parameter\",\n\"VUID-vkCmdBindVertexBuffers2-pStrides-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pSampledImage-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pSampler-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pStorageImage-parameter\",\n\"VUID-vkGetAccelerationStructureBuildSizesKHR-pMaxPrimitiveCounts-parameter\",\n\"VUID-vkCmdDrawMultiIndexedEXT-pVertexOffset-parameter\",\n\"VUID-VkDisplayModeCreateInfoKHR-parameters-parameter\",\n// These occur in stateless validation when a pointer member is optional and the length member is null\n\"VUID-VkDeviceCreateInfo-pEnabledFeatures-parameter\",\n\"VUID-VkPipelineShaderStageCreateInfo-pSpecializationInfo-parameter\",\n\"VUID-VkSubpassDescription-pDepthStencilAttachment-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pSpecializationInfo-parameter\",\n\"VUID-VkExportFenceWin32HandleInfoKHR-pAttributes-parameter\",\n\"VUID-VkExportSemaphoreWin32HandleInfoKHR-pAttributes-parameter\",\n\"VUID-VkExportMemoryWin32HandleInfoKHR-pAttributes-parameter\",\n\"VUID-VkExportMemoryWin32HandleInfoNV-pAttributes-parameter\",\n\"VUID-vkEnumerateDeviceExtensionProperties-pProperties-parameter\",\n\"VUID-vkEnumerateDeviceLayerProperties-pProperties-parameter\",\n\"VUID-vkEnumerateInstanceExtensionProperties-pProperties-parameter\",\n\"VUID-vkEnumerateInstanceLayerProperties-pProperties-parameter\",\n// Checking for null-terminated UTF-8 string\n\"VUID-VkApplicationInfo-pApplicationName-parameter\",\n\"VUID-VkApplicationInfo-pEngineName-parameter\",\n\"VUID-VkDebugUtilsObjectNameInfoEXT-pObjectName-parameter\",\n\"VUID-VkDebugUtilsMessengerCallbackDataEXT-pMessageIdName-parameter\",\n\"VUID-VkPipelineShaderStageNodeCreateInfoAMDX-pName-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pName-parameter\",\n\"VUID-vkGetDeviceProcAddr-pName-parameter\",\n\"VUID-vkGetInstanceProcAddr-pName-parameter\",\n\"VUID-vkEnumerateDeviceExtensionProperties-pLayerName-parameter\",\n\"VUID-vkEnumerateInstanceExtensionProperties-pLayerName-parameter\",\n// Can't validate a VkAllocationCallbacks structure\n\"VUID-vkCreateAccelerationStructureKHR-pAllocator-parameter\",\n\"VUID-vkCreateAccelerationStructureNV-pAllocator-parameter\",\n\"VUID-vkCreateAndroidSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateBuffer-pAllocator-parameter\",\n\"VUID-vkCreateBufferCollectionFUCHSIA-pAllocator-parameter\",\n\"VUID-vkCreateBufferView-pAllocator-parameter\",\n\"VUID-vkCreateCommandPool-pAllocator-parameter\",\n\"VUID-vkCreateComputePipelines-pAllocator-parameter\",\n\"VUID-vkCreateCuFunctionNVX-pAllocator-parameter\",\n\"VUID-vkCreateCuModuleNVX-pAllocator-parameter\",\n\"VUID-vkCreateCudaFunctionNV-pAllocator-parameter\",\n\"VUID-vkCreateCudaModuleNV-pAllocator-parameter\",\n\"VUID-vkCreateDebugReportCallbackEXT-pAllocator-parameter\",\n\"VUID-vkCreateDebugUtilsMessengerEXT-pAllocator-parameter\",\n\"VUID-vkCreateDeferredOperationKHR-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorPool-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorSetLayout-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorUpdateTemplate-pAllocator-parameter\",\n\"VUID-vkCreateDevice-pAllocator-parameter\",\n\"VUID-vkCreateDirectFBSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateDisplayModeKHR-pAllocator-parameter\",\n\"VUID-vkCreateDisplayPlaneSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateEvent-pAllocator-parameter\",\n\"VUID-vkCreateExecutionGraphPipelinesAMDX-pAllocator-parameter\",\n\"VUID-vkCreateFence-pAllocator-parameter\",\n\"VUID-vkCreateFramebuffer-pAllocator-parameter\",\n\"VUID-vkCreateGraphicsPipelines-pAllocator-parameter\",\n\"VUID-vkCreateHeadlessSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateIOSSurfaceMVK-pAllocator-parameter\",\n\"VUID-vkCreateImage-pAllocator-parameter\",\n\"VUID-vkCreateImagePipeSurfaceFUCHSIA-pAllocator-parameter\",\n\"VUID-vkCreateImageView-pAllocator-parameter\",\n\"VUID-vkCreateIndirectCommandsLayoutNV-pAllocator-parameter\",\n\"VUID-vkCreateInstance-pAllocator-parameter\",\n\"VUID-vkCreateMacOSSurfaceMVK-pAllocator-parameter\",\n\"VUID-vkCreateMetalSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateMicromapEXT-pAllocator-parameter\",\n\"VUID-vkCreateOpticalFlowSessionNV-pAllocator-parameter\",\n\"VUID-vkCreatePipelineCache-pAllocator-parameter\",\n\"VUID-vkCreatePipelineLayout-pAllocator-parameter\",\n\"VUID-vkCreatePrivateDataSlot-pAllocator-parameter\",\n\"VUID-vkCreateQueryPool-pAllocator-parameter\",\n\"VUID-vkCreateRayTracingPipelinesKHR-pAllocator-parameter\",\n\"VUID-vkCreateRayTracingPipelinesNV-pAllocator-parameter\",\n\"VUID-vkCreateRenderPass-pAllocator-parameter\",\n\"VUID-vkCreateRenderPass2-pAllocator-parameter\",\n\"VUID-vkCreateSampler-pAllocator-parameter\",\n\"VUID-vkCreateSamplerYcbcrConversion-pAllocator-parameter\",\n\"VUID-vkCreateScreenSurfaceQNX-pAllocator-parameter\",\n\"VUID-vkCreateSemaphore-pAllocator-parameter\",\n\"VUID-vkCreateShaderModule-pAllocator-parameter\",\n\"VUID-vkCreateShadersEXT-pAllocator-parameter\",\n\"VUID-vkCreateSharedSwapchainsKHR-pAllocator-parameter\",\n\"VUID-vkCreateStreamDescriptorSurfaceGGP-pAllocator-parameter\",\n\"VUID-vkCreateSwapchainKHR-pAllocator-parameter\",\n\"VUID-vkCreateValidationCacheEXT-pAllocator-parameter\",\n\"VUID-vkCreateViSurfaceNN-pAllocator-parameter\",\n\"VUID-vkCreateVideoSessionKHR-pAllocator-parameter\",\n\"VUID-vkCreateVideoSessionParametersKHR-pAllocator-parameter\",\n\"VUID-vkCreateWaylandSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateWin32SurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateXcbSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateXlibSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkDestroyAccelerationStructureKHR-pAllocator-parameter\",\n\"VUID-vkDestroyAccelerationStructureNV-pAllocator-parameter\",\n\"VUID-vkDestroyBuffer-pAllocator-parameter\",\n\"VUID-vkDestroyBufferCollectionFUCHSIA-pAllocator-parameter\",\n\"VUID-vkDestroyBufferView-pAllocator-parameter\",\n\"VUID-vkDestroyCommandPool-pAllocator-parameter\",\n\"VUID-vkDestroyCuFunctionNVX-pAllocator-parameter\",\n\"VUID-vkDestroyCuModuleNVX-pAllocator-parameter\",\n\"VUID-vkDestroyCudaFunctionNV-pAllocator-parameter\",\n\"VUID-vkDestroyCudaModuleNV-pAllocator-parameter\",\n\"VUID-vkDestroyDebugReportCallbackEXT-pAllocator-parameter\",\n\"VUID-vkDestroyDebugUtilsMessengerEXT-pAllocator-parameter\",\n\"VUID-vkDestroyDeferredOperationKHR-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorPool-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorSetLayout-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorUpdateTemplate-pAllocator-parameter\",\n\"VUID-vkDestroyDevice-pAllocator-parameter\",\n\"VUID-vkDestroyEvent-pAllocator-parameter\",\n\"VUID-vkDestroyFence-pAllocator-parameter\",\n\"VUID-vkDestroyFramebuffer-pAllocator-parameter\",\n\"VUID-vkDestroyImage-pAllocator-parameter\",\n\"VUID-vkDestroyImageView-pAllocator-parameter\",\n\"VUID-vkDestroyIndirectCommandsLayoutNV-pAllocator-parameter\",\n\"VUID-vkDestroyInstance-pAllocator-parameter\",\n\"VUID-vkDestroyMicromapEXT-pAllocator-parameter\",\n\"VUID-vkDestroyOpticalFlowSessionNV-pAllocator-parameter\",\n\"VUID-vkDestroyPipeline-pAllocator-parameter\",\n\"VUID-vkDestroyPipelineCache-pAllocator-parameter\",\n\"VUID-vkDestroyPipelineLayout-pAllocator-parameter\",\n\"VUID-vkDestroyPrivateDataSlot-pAllocator-parameter\",\n\"VUID-vkDestroyQueryPool-pAllocator-parameter\",\n\"VUID-vkDestroyRenderPass-pAllocator-parameter\",\n\"VUID-vkDestroySampler-pAllocator-parameter\",\n\"VUID-vkDestroySamplerYcbcrConversion-pAllocator-parameter\",\n\"VUID-vkDestroySemaphore-pAllocator-parameter\",\n\"VUID-vkDestroyShaderEXT-pAllocator-parameter\",\n\"VUID-vkDestroyShaderModule-pAllocator-parameter\",\n\"VUID-vkDestroySurfaceKHR-pAllocator-parameter\",\n\"VUID-vkDestroySwapchainKHR-pAllocator-parameter\",\n\"VUID-vkDestroyValidationCacheEXT-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionKHR-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionParametersKHR-pAllocator-parameter\",\n\"VUID-vkFreeMemory-pAllocator-parameter\",\n\"VUID-vkRegisterDeviceEventEXT-pAllocator-parameter\",\n\"VUID-vkRegisterDisplayEventEXT-pAllocator-parameter\",\n\"VUID-vkAllocateMemory-pAllocator-parameter\",\n};\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkVideoEncodeH264RateControlLayerInfoKHR-maxFrameSize-parameter\", \"maxFrameSize must be a valid VkVideoEncodeH264FrameSizeKHR structure\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "\"VUID-VkRenderPassFragmentDensityMapCreateInfoEXT-fragmentDensityMapAttachment-parameter\",\n\"VUID-VkVideoEncodeH264RateControlLayerInfoKHR-maxFrameSize-parameter\",\n\"VUID-VkVideoEncodeH264RateControlLayerInfoKHR-maxQp-parameter\",\n\"VUID-VkVideoEncodeH264RateControlLayerInfoKHR-minQp-parameter\",\n// VkVideoEncodeH265QpKHR and VkVideoEncodeH265FrameSizeKHR\n\"VUID-VkVideoEncodeH265RateControlLayerInfoKHR-maxFrameSize-parameter\",\n\"VUID-VkVideoEncodeH265RateControlLayerInfoKHR-maxQp-parameter\",\n\"VUID-VkVideoEncodeH265RateControlLayerInfoKHR-minQp-parameter\",\n// VkVideoPictureResourceInfoKHR\n\"VUID-VkVideoDecodeInfoKHR-dstPictureResource-parameter\",\n\"VUID-VkVideoEncodeInfoKHR-srcPictureResource-parameter\",\n// When:\n//   Struct A has a pointer field to Struct B\n//   Struct B has a non-pointer field to Struct C\n// you get a situation where Struct B has a VU that is not hit because we validate it in Struct C\n\"VUID-VkAttachmentSampleLocationsEXT-sampleLocationsInfo-parameter\",              // VUID-VkSampleLocationsInfoEXT-sType-sType\n\"VUID-VkSubpassSampleLocationsEXT-sampleLocationsInfo-parameter\",                 // VUID-VkSampleLocationsInfoEXT-sType-sType\n\"VUID-VkPipelineSampleLocationsStateCreateInfoEXT-sampleLocationsInfo-parameter\", // VUID-VkSampleLocationsInfoEXT-sType-sType\n\"VUID-VkComputePipelineCreateInfo-stage-parameter\", // VUID-VkPipelineShaderStageCreateInfo-sType-sType\n// Not possible as described in https://gitlab.khronos.org/vulkan/vulkan/-/merge_requests/6324\n\"VUID-VkGraphicsPipelineCreateInfo-pTessellationState-09023\",\n\"VUID-VkGraphicsPipelineCreateInfo-pViewportState-09025\",\n\"VUID-VkGraphicsPipelineCreateInfo-pMultisampleState-09027\",\n\"VUID-VkGraphicsPipelineCreateInfo-pDepthStencilState-09029\",\n\"VUID-VkGraphicsPipelineCreateInfo-pInputAssemblyState-09032\",\n\"VUID-VkGraphicsPipelineCreateInfo-pDepthStencilState-09034\",\n\"VUID-VkGraphicsPipelineCreateInfo-pDepthStencilState-09036\",\n\"VUID-VkGraphicsPipelineCreateInfo-pColorBlendState-09038\",\n\"VUID-VkGraphicsPipelineCreateInfo-pRasterizationState-09039\",\n\"VUID-VkGraphicsPipelineCreateInfo-pRasterizationState-09040\",\n// another variation of it\n\"VUID-vkGetDeviceFaultInfoEXT-pFaultCounts-07337\",\n\"VUID-vkGetDeviceFaultInfoEXT-pFaultCounts-07338\",\n\"VUID-vkGetDeviceFaultInfoEXT-pFaultCounts-07339\",\n\"VUID-VkRenderingInputAttachmentIndexInfoKHR-pDepthInputAttachmentIndex-parameter\",\n\"VUID-VkRenderingInputAttachmentIndexInfoKHR-pStencilInputAttachmentIndex-parameter\"\n// These VUs have \"is not NULL it must be a pointer to a valid pointer to valid structure\" language\n// There is no actual way to validate thsese\n// https://gitlab.khronos.org/vulkan/vulkan/-/issues/3718\n\"VUID-VkDescriptorGetInfoEXT-pUniformTexelBuffer-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pStorageTexelBuffer-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pUniformBuffer-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pStorageBuffer-parameter\",\n// These occur in stateless validation when a pointer member is optional and the length member is also optional\n\"VUID-VkPipelineColorBlendStateCreateInfo-pAttachments-parameter\",\n\"VUID-VkSubpassDescription-pResolveAttachments-parameter\",\n\"VUID-VkTimelineSemaphoreSubmitInfo-pWaitSemaphoreValues-parameter\",\n\"VUID-VkTimelineSemaphoreSubmitInfo-pSignalSemaphoreValues-parameter\",\n\"VUID-VkVideoEncodeH264SessionParametersAddInfoKHR-pStdSPSs-parameter\",\n\"VUID-VkVideoEncodeH264SessionParametersAddInfoKHR-pStdPPSs-parameter\",\n\"VUID-VkVideoEncodeH265SessionParametersAddInfoKHR-pStdVPSs-parameter\",\n\"VUID-VkVideoEncodeH265SessionParametersAddInfoKHR-pStdSPSs-parameter\",\n\"VUID-VkVideoEncodeH265SessionParametersAddInfoKHR-pStdPPSs-parameter\",\n\"VUID-VkD3D12FenceSubmitInfoKHR-pWaitSemaphoreValues-parameter\",\n\"VUID-VkD3D12FenceSubmitInfoKHR-pSignalSemaphoreValues-parameter\",\n\"VUID-VkPresentRegionKHR-pRectangles-parameter\",\n\"VUID-VkBindDescriptorSetsInfoKHR-pDynamicOffsets-parameter\",\n\"VUID-VkPhysicalDeviceHostImageCopyPropertiesEXT-pCopySrcLayouts-parameter\",\n\"VUID-VkPhysicalDeviceHostImageCopyPropertiesEXT-pCopyDstLayouts-parameter\",\n\"VUID-VkSurfacePresentModeCompatibilityEXT-pPresentModes-parameter\",\n\"VUID-VkFrameBoundaryEXT-pImages-parameter\",\n\"VUID-VkFrameBoundaryEXT-pBuffers-parameter\",\n\"VUID-VkFrameBoundaryEXT-pTag-parameter\",\n\"VUID-VkMicromapBuildInfoEXT-pUsageCounts-parameter\",\n\"VUID-VkMicromapBuildInfoEXT-ppUsageCounts-parameter\",\n\"VUID-VkAccelerationStructureTrianglesOpacityMicromapEXT-pUsageCounts-parameter\",\n\"VUID-VkAccelerationStructureTrianglesOpacityMicromapEXT-ppUsageCounts-parameter\",\n\"VUID-VkAccelerationStructureTrianglesDisplacementMicromapNV-pUsageCounts-parameter\",\n\"VUID-VkAccelerationStructureTrianglesDisplacementMicromapNV-ppUsageCounts-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pSetLayouts-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pPushConstantRanges-parameter\",\n\"VUID-VkLatencySurfaceCapabilitiesNV-pPresentModes-parameter\",\n\"VUID-vkCmdBeginTransformFeedbackEXT-pCounterBufferOffsets-parameter\",\n\"VUID-vkCmdEndTransformFeedbackEXT-pCounterBufferOffsets-parameter\",\n\"VUID-vkCmdBindVertexBuffers2-pSizes-parameter\",\n\"VUID-vkCmdBindVertexBuffers2-pStrides-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pSampledImage-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pSampler-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pStorageImage-parameter\",\n\"VUID-vkGetAccelerationStructureBuildSizesKHR-pMaxPrimitiveCounts-parameter\",\n\"VUID-vkCmdDrawMultiIndexedEXT-pVertexOffset-parameter\",\n\"VUID-VkDisplayModeCreateInfoKHR-parameters-parameter\",\n// These occur in stateless validation when a pointer member is optional and the length member is null\n\"VUID-VkDeviceCreateInfo-pEnabledFeatures-parameter\",\n\"VUID-VkPipelineShaderStageCreateInfo-pSpecializationInfo-parameter\",\n\"VUID-VkSubpassDescription-pDepthStencilAttachment-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pSpecializationInfo-parameter\",\n\"VUID-VkExportFenceWin32HandleInfoKHR-pAttributes-parameter\",\n\"VUID-VkExportSemaphoreWin32HandleInfoKHR-pAttributes-parameter\",\n\"VUID-VkExportMemoryWin32HandleInfoKHR-pAttributes-parameter\",\n\"VUID-VkExportMemoryWin32HandleInfoNV-pAttributes-parameter\",\n\"VUID-vkEnumerateDeviceExtensionProperties-pProperties-parameter\",\n\"VUID-vkEnumerateDeviceLayerProperties-pProperties-parameter\",\n\"VUID-vkEnumerateInstanceExtensionProperties-pProperties-parameter\",\n\"VUID-vkEnumerateInstanceLayerProperties-pProperties-parameter\",\n// Checking for null-terminated UTF-8 string\n\"VUID-VkApplicationInfo-pApplicationName-parameter\",\n\"VUID-VkApplicationInfo-pEngineName-parameter\",\n\"VUID-VkDebugUtilsObjectNameInfoEXT-pObjectName-parameter\",\n\"VUID-VkDebugUtilsMessengerCallbackDataEXT-pMessageIdName-parameter\",\n\"VUID-VkPipelineShaderStageNodeCreateInfoAMDX-pName-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pName-parameter\",\n\"VUID-vkGetDeviceProcAddr-pName-parameter\",\n\"VUID-vkGetInstanceProcAddr-pName-parameter\",\n\"VUID-vkEnumerateDeviceExtensionProperties-pLayerName-parameter\",\n\"VUID-vkEnumerateInstanceExtensionProperties-pLayerName-parameter\",\n// Can't validate a VkAllocationCallbacks structure\n\"VUID-vkCreateAccelerationStructureKHR-pAllocator-parameter\",\n\"VUID-vkCreateAccelerationStructureNV-pAllocator-parameter\",\n\"VUID-vkCreateAndroidSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateBuffer-pAllocator-parameter\",\n\"VUID-vkCreateBufferCollectionFUCHSIA-pAllocator-parameter\",\n\"VUID-vkCreateBufferView-pAllocator-parameter\",\n\"VUID-vkCreateCommandPool-pAllocator-parameter\",\n\"VUID-vkCreateComputePipelines-pAllocator-parameter\",\n\"VUID-vkCreateCuFunctionNVX-pAllocator-parameter\",\n\"VUID-vkCreateCuModuleNVX-pAllocator-parameter\",\n\"VUID-vkCreateCudaFunctionNV-pAllocator-parameter\",\n\"VUID-vkCreateCudaModuleNV-pAllocator-parameter\",\n\"VUID-vkCreateDebugReportCallbackEXT-pAllocator-parameter\",\n\"VUID-vkCreateDebugUtilsMessengerEXT-pAllocator-parameter\",\n\"VUID-vkCreateDeferredOperationKHR-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorPool-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorSetLayout-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorUpdateTemplate-pAllocator-parameter\",\n\"VUID-vkCreateDevice-pAllocator-parameter\",\n\"VUID-vkCreateDirectFBSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateDisplayModeKHR-pAllocator-parameter\",\n\"VUID-vkCreateDisplayPlaneSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateEvent-pAllocator-parameter\",\n\"VUID-vkCreateExecutionGraphPipelinesAMDX-pAllocator-parameter\",\n\"VUID-vkCreateFence-pAllocator-parameter\",\n\"VUID-vkCreateFramebuffer-pAllocator-parameter\",\n\"VUID-vkCreateGraphicsPipelines-pAllocator-parameter\",\n\"VUID-vkCreateHeadlessSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateIOSSurfaceMVK-pAllocator-parameter\",\n\"VUID-vkCreateImage-pAllocator-parameter\",\n\"VUID-vkCreateImagePipeSurfaceFUCHSIA-pAllocator-parameter\",\n\"VUID-vkCreateImageView-pAllocator-parameter\",\n\"VUID-vkCreateIndirectCommandsLayoutNV-pAllocator-parameter\",\n\"VUID-vkCreateInstance-pAllocator-parameter\",\n\"VUID-vkCreateMacOSSurfaceMVK-pAllocator-parameter\",\n\"VUID-vkCreateMetalSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateMicromapEXT-pAllocator-parameter\",\n\"VUID-vkCreateOpticalFlowSessionNV-pAllocator-parameter\",\n\"VUID-vkCreatePipelineCache-pAllocator-parameter\",\n\"VUID-vkCreatePipelineLayout-pAllocator-parameter\",\n\"VUID-vkCreatePrivateDataSlot-pAllocator-parameter\",\n\"VUID-vkCreateQueryPool-pAllocator-parameter\",\n\"VUID-vkCreateRayTracingPipelinesKHR-pAllocator-parameter\",\n\"VUID-vkCreateRayTracingPipelinesNV-pAllocator-parameter\",\n\"VUID-vkCreateRenderPass-pAllocator-parameter\",\n\"VUID-vkCreateRenderPass2-pAllocator-parameter\",\n\"VUID-vkCreateSampler-pAllocator-parameter\",\n\"VUID-vkCreateSamplerYcbcrConversion-pAllocator-parameter\",\n\"VUID-vkCreateScreenSurfaceQNX-pAllocator-parameter\",\n\"VUID-vkCreateSemaphore-pAllocator-parameter\",\n\"VUID-vkCreateShaderModule-pAllocator-parameter\",\n\"VUID-vkCreateShadersEXT-pAllocator-parameter\",\n\"VUID-vkCreateSharedSwapchainsKHR-pAllocator-parameter\",\n\"VUID-vkCreateStreamDescriptorSurfaceGGP-pAllocator-parameter\",\n\"VUID-vkCreateSwapchainKHR-pAllocator-parameter\",\n\"VUID-vkCreateValidationCacheEXT-pAllocator-parameter\",\n\"VUID-vkCreateViSurfaceNN-pAllocator-parameter\",\n\"VUID-vkCreateVideoSessionKHR-pAllocator-parameter\",\n\"VUID-vkCreateVideoSessionParametersKHR-pAllocator-parameter\",\n\"VUID-vkCreateWaylandSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateWin32SurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateXcbSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateXlibSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkDestroyAccelerationStructureKHR-pAllocator-parameter\",\n\"VUID-vkDestroyAccelerationStructureNV-pAllocator-parameter\",\n\"VUID-vkDestroyBuffer-pAllocator-parameter\",\n\"VUID-vkDestroyBufferCollectionFUCHSIA-pAllocator-parameter\",\n\"VUID-vkDestroyBufferView-pAllocator-parameter\",\n\"VUID-vkDestroyCommandPool-pAllocator-parameter\",\n\"VUID-vkDestroyCuFunctionNVX-pAllocator-parameter\",\n\"VUID-vkDestroyCuModuleNVX-pAllocator-parameter\",\n\"VUID-vkDestroyCudaFunctionNV-pAllocator-parameter\",\n\"VUID-vkDestroyCudaModuleNV-pAllocator-parameter\",\n\"VUID-vkDestroyDebugReportCallbackEXT-pAllocator-parameter\",\n\"VUID-vkDestroyDebugUtilsMessengerEXT-pAllocator-parameter\",\n\"VUID-vkDestroyDeferredOperationKHR-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorPool-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorSetLayout-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorUpdateTemplate-pAllocator-parameter\",\n\"VUID-vkDestroyDevice-pAllocator-parameter\",\n\"VUID-vkDestroyEvent-pAllocator-parameter\",\n\"VUID-vkDestroyFence-pAllocator-parameter\",\n\"VUID-vkDestroyFramebuffer-pAllocator-parameter\",\n\"VUID-vkDestroyImage-pAllocator-parameter\",\n\"VUID-vkDestroyImageView-pAllocator-parameter\",\n\"VUID-vkDestroyIndirectCommandsLayoutNV-pAllocator-parameter\",\n\"VUID-vkDestroyInstance-pAllocator-parameter\",\n\"VUID-vkDestroyMicromapEXT-pAllocator-parameter\",\n\"VUID-vkDestroyOpticalFlowSessionNV-pAllocator-parameter\",\n\"VUID-vkDestroyPipeline-pAllocator-parameter\",\n\"VUID-vkDestroyPipelineCache-pAllocator-parameter\",\n\"VUID-vkDestroyPipelineLayout-pAllocator-parameter\",\n\"VUID-vkDestroyPrivateDataSlot-pAllocator-parameter\",\n\"VUID-vkDestroyQueryPool-pAllocator-parameter\",\n\"VUID-vkDestroyRenderPass-pAllocator-parameter\",\n\"VUID-vkDestroySampler-pAllocator-parameter\",\n\"VUID-vkDestroySamplerYcbcrConversion-pAllocator-parameter\",\n\"VUID-vkDestroySemaphore-pAllocator-parameter\",\n\"VUID-vkDestroyShaderEXT-pAllocator-parameter\",\n\"VUID-vkDestroyShaderModule-pAllocator-parameter\",\n\"VUID-vkDestroySurfaceKHR-pAllocator-parameter\",\n\"VUID-vkDestroySwapchainKHR-pAllocator-parameter\",\n\"VUID-vkDestroyValidationCacheEXT-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionKHR-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionParametersKHR-pAllocator-parameter\",\n\"VUID-vkFreeMemory-pAllocator-parameter\",\n\"VUID-vkRegisterDeviceEventEXT-pAllocator-parameter\",\n\"VUID-vkRegisterDisplayEventEXT-pAllocator-parameter\",\n\"VUID-vkAllocateMemory-pAllocator-parameter\",\n};\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkVideoEncodeH265RateControlLayerInfoKHR-minQp-parameter\", \"minQp must be a valid VkVideoEncodeH265QpKHR structure\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "\"VUID-VkVideoEncodeH265RateControlLayerInfoKHR-maxFrameSize-parameter\",\n\"VUID-VkVideoEncodeH265RateControlLayerInfoKHR-maxQp-parameter\",\n\"VUID-VkVideoEncodeH265RateControlLayerInfoKHR-minQp-parameter\",\n// VkVideoPictureResourceInfoKHR\n\"VUID-VkVideoDecodeInfoKHR-dstPictureResource-parameter\",\n\"VUID-VkVideoEncodeInfoKHR-srcPictureResource-parameter\",\n// When:\n//   Struct A has a pointer field to Struct B\n//   Struct B has a non-pointer field to Struct C\n// you get a situation where Struct B has a VU that is not hit because we validate it in Struct C\n\"VUID-VkAttachmentSampleLocationsEXT-sampleLocationsInfo-parameter\",              // VUID-VkSampleLocationsInfoEXT-sType-sType\n\"VUID-VkSubpassSampleLocationsEXT-sampleLocationsInfo-parameter\",                 // VUID-VkSampleLocationsInfoEXT-sType-sType\n\"VUID-VkPipelineSampleLocationsStateCreateInfoEXT-sampleLocationsInfo-parameter\", // VUID-VkSampleLocationsInfoEXT-sType-sType\n\"VUID-VkComputePipelineCreateInfo-stage-parameter\", // VUID-VkPipelineShaderStageCreateInfo-sType-sType\n// Not possible as described in https://gitlab.khronos.org/vulkan/vulkan/-/merge_requests/6324\n\"VUID-VkGraphicsPipelineCreateInfo-pTessellationState-09023\",\n\"VUID-VkGraphicsPipelineCreateInfo-pViewportState-09025\",\n\"VUID-VkGraphicsPipelineCreateInfo-pMultisampleState-09027\",\n\"VUID-VkGraphicsPipelineCreateInfo-pDepthStencilState-09029\",\n\"VUID-VkGraphicsPipelineCreateInfo-pInputAssemblyState-09032\",\n\"VUID-VkGraphicsPipelineCreateInfo-pDepthStencilState-09034\",\n\"VUID-VkGraphicsPipelineCreateInfo-pDepthStencilState-09036\",\n\"VUID-VkGraphicsPipelineCreateInfo-pColorBlendState-09038\",\n\"VUID-VkGraphicsPipelineCreateInfo-pRasterizationState-09039\",\n\"VUID-VkGraphicsPipelineCreateInfo-pRasterizationState-09040\",\n// another variation of it\n\"VUID-vkGetDeviceFaultInfoEXT-pFaultCounts-07337\",\n\"VUID-vkGetDeviceFaultInfoEXT-pFaultCounts-07338\",\n\"VUID-vkGetDeviceFaultInfoEXT-pFaultCounts-07339\",\n\"VUID-VkRenderingInputAttachmentIndexInfoKHR-pDepthInputAttachmentIndex-parameter\",\n\"VUID-VkRenderingInputAttachmentIndexInfoKHR-pStencilInputAttachmentIndex-parameter\"\n// These VUs have \"is not NULL it must be a pointer to a valid pointer to valid structure\" language\n// There is no actual way to validate thsese\n// https://gitlab.khronos.org/vulkan/vulkan/-/issues/3718\n\"VUID-VkDescriptorGetInfoEXT-pUniformTexelBuffer-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pStorageTexelBuffer-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pUniformBuffer-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pStorageBuffer-parameter\",\n// These occur in stateless validation when a pointer member is optional and the length member is also optional\n\"VUID-VkPipelineColorBlendStateCreateInfo-pAttachments-parameter\",\n\"VUID-VkSubpassDescription-pResolveAttachments-parameter\",\n\"VUID-VkTimelineSemaphoreSubmitInfo-pWaitSemaphoreValues-parameter\",\n\"VUID-VkTimelineSemaphoreSubmitInfo-pSignalSemaphoreValues-parameter\",\n\"VUID-VkVideoEncodeH264SessionParametersAddInfoKHR-pStdSPSs-parameter\",\n\"VUID-VkVideoEncodeH264SessionParametersAddInfoKHR-pStdPPSs-parameter\",\n\"VUID-VkVideoEncodeH265SessionParametersAddInfoKHR-pStdVPSs-parameter\",\n\"VUID-VkVideoEncodeH265SessionParametersAddInfoKHR-pStdSPSs-parameter\",\n\"VUID-VkVideoEncodeH265SessionParametersAddInfoKHR-pStdPPSs-parameter\",\n\"VUID-VkD3D12FenceSubmitInfoKHR-pWaitSemaphoreValues-parameter\",\n\"VUID-VkD3D12FenceSubmitInfoKHR-pSignalSemaphoreValues-parameter\",\n\"VUID-VkPresentRegionKHR-pRectangles-parameter\",\n\"VUID-VkBindDescriptorSetsInfoKHR-pDynamicOffsets-parameter\",\n\"VUID-VkPhysicalDeviceHostImageCopyPropertiesEXT-pCopySrcLayouts-parameter\",\n\"VUID-VkPhysicalDeviceHostImageCopyPropertiesEXT-pCopyDstLayouts-parameter\",\n\"VUID-VkSurfacePresentModeCompatibilityEXT-pPresentModes-parameter\",\n\"VUID-VkFrameBoundaryEXT-pImages-parameter\",\n\"VUID-VkFrameBoundaryEXT-pBuffers-parameter\",\n\"VUID-VkFrameBoundaryEXT-pTag-parameter\",\n\"VUID-VkMicromapBuildInfoEXT-pUsageCounts-parameter\",\n\"VUID-VkMicromapBuildInfoEXT-ppUsageCounts-parameter\",\n\"VUID-VkAccelerationStructureTrianglesOpacityMicromapEXT-pUsageCounts-parameter\",\n\"VUID-VkAccelerationStructureTrianglesOpacityMicromapEXT-ppUsageCounts-parameter\",\n\"VUID-VkAccelerationStructureTrianglesDisplacementMicromapNV-pUsageCounts-parameter\",\n\"VUID-VkAccelerationStructureTrianglesDisplacementMicromapNV-ppUsageCounts-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pSetLayouts-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pPushConstantRanges-parameter\",\n\"VUID-VkLatencySurfaceCapabilitiesNV-pPresentModes-parameter\",\n\"VUID-vkCmdBeginTransformFeedbackEXT-pCounterBufferOffsets-parameter\",\n\"VUID-vkCmdEndTransformFeedbackEXT-pCounterBufferOffsets-parameter\",\n\"VUID-vkCmdBindVertexBuffers2-pSizes-parameter\",\n\"VUID-vkCmdBindVertexBuffers2-pStrides-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pSampledImage-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pSampler-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pStorageImage-parameter\",\n\"VUID-vkGetAccelerationStructureBuildSizesKHR-pMaxPrimitiveCounts-parameter\",\n\"VUID-vkCmdDrawMultiIndexedEXT-pVertexOffset-parameter\",\n\"VUID-VkDisplayModeCreateInfoKHR-parameters-parameter\",\n// These occur in stateless validation when a pointer member is optional and the length member is null\n\"VUID-VkDeviceCreateInfo-pEnabledFeatures-parameter\",\n\"VUID-VkPipelineShaderStageCreateInfo-pSpecializationInfo-parameter\",\n\"VUID-VkSubpassDescription-pDepthStencilAttachment-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pSpecializationInfo-parameter\",\n\"VUID-VkExportFenceWin32HandleInfoKHR-pAttributes-parameter\",\n\"VUID-VkExportSemaphoreWin32HandleInfoKHR-pAttributes-parameter\",\n\"VUID-VkExportMemoryWin32HandleInfoKHR-pAttributes-parameter\",\n\"VUID-VkExportMemoryWin32HandleInfoNV-pAttributes-parameter\",\n\"VUID-vkEnumerateDeviceExtensionProperties-pProperties-parameter\",\n\"VUID-vkEnumerateDeviceLayerProperties-pProperties-parameter\",\n\"VUID-vkEnumerateInstanceExtensionProperties-pProperties-parameter\",\n\"VUID-vkEnumerateInstanceLayerProperties-pProperties-parameter\",\n// Checking for null-terminated UTF-8 string\n\"VUID-VkApplicationInfo-pApplicationName-parameter\",\n\"VUID-VkApplicationInfo-pEngineName-parameter\",\n\"VUID-VkDebugUtilsObjectNameInfoEXT-pObjectName-parameter\",\n\"VUID-VkDebugUtilsMessengerCallbackDataEXT-pMessageIdName-parameter\",\n\"VUID-VkPipelineShaderStageNodeCreateInfoAMDX-pName-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pName-parameter\",\n\"VUID-vkGetDeviceProcAddr-pName-parameter\",\n\"VUID-vkGetInstanceProcAddr-pName-parameter\",\n\"VUID-vkEnumerateDeviceExtensionProperties-pLayerName-parameter\",\n\"VUID-vkEnumerateInstanceExtensionProperties-pLayerName-parameter\",\n// Can't validate a VkAllocationCallbacks structure\n\"VUID-vkCreateAccelerationStructureKHR-pAllocator-parameter\",\n\"VUID-vkCreateAccelerationStructureNV-pAllocator-parameter\",\n\"VUID-vkCreateAndroidSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateBuffer-pAllocator-parameter\",\n\"VUID-vkCreateBufferCollectionFUCHSIA-pAllocator-parameter\",\n\"VUID-vkCreateBufferView-pAllocator-parameter\",\n\"VUID-vkCreateCommandPool-pAllocator-parameter\",\n\"VUID-vkCreateComputePipelines-pAllocator-parameter\",\n\"VUID-vkCreateCuFunctionNVX-pAllocator-parameter\",\n\"VUID-vkCreateCuModuleNVX-pAllocator-parameter\",\n\"VUID-vkCreateCudaFunctionNV-pAllocator-parameter\",\n\"VUID-vkCreateCudaModuleNV-pAllocator-parameter\",\n\"VUID-vkCreateDebugReportCallbackEXT-pAllocator-parameter\",\n\"VUID-vkCreateDebugUtilsMessengerEXT-pAllocator-parameter\",\n\"VUID-vkCreateDeferredOperationKHR-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorPool-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorSetLayout-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorUpdateTemplate-pAllocator-parameter\",\n\"VUID-vkCreateDevice-pAllocator-parameter\",\n\"VUID-vkCreateDirectFBSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateDisplayModeKHR-pAllocator-parameter\",\n\"VUID-vkCreateDisplayPlaneSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateEvent-pAllocator-parameter\",\n\"VUID-vkCreateExecutionGraphPipelinesAMDX-pAllocator-parameter\",\n\"VUID-vkCreateFence-pAllocator-parameter\",\n\"VUID-vkCreateFramebuffer-pAllocator-parameter\",\n\"VUID-vkCreateGraphicsPipelines-pAllocator-parameter\",\n\"VUID-vkCreateHeadlessSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateIOSSurfaceMVK-pAllocator-parameter\",\n\"VUID-vkCreateImage-pAllocator-parameter\",\n\"VUID-vkCreateImagePipeSurfaceFUCHSIA-pAllocator-parameter\",\n\"VUID-vkCreateImageView-pAllocator-parameter\",\n\"VUID-vkCreateIndirectCommandsLayoutNV-pAllocator-parameter\",\n\"VUID-vkCreateInstance-pAllocator-parameter\",\n\"VUID-vkCreateMacOSSurfaceMVK-pAllocator-parameter\",\n\"VUID-vkCreateMetalSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateMicromapEXT-pAllocator-parameter\",\n\"VUID-vkCreateOpticalFlowSessionNV-pAllocator-parameter\",\n\"VUID-vkCreatePipelineCache-pAllocator-parameter\",\n\"VUID-vkCreatePipelineLayout-pAllocator-parameter\",\n\"VUID-vkCreatePrivateDataSlot-pAllocator-parameter\",\n\"VUID-vkCreateQueryPool-pAllocator-parameter\",\n\"VUID-vkCreateRayTracingPipelinesKHR-pAllocator-parameter\",\n\"VUID-vkCreateRayTracingPipelinesNV-pAllocator-parameter\",\n\"VUID-vkCreateRenderPass-pAllocator-parameter\",\n\"VUID-vkCreateRenderPass2-pAllocator-parameter\",\n\"VUID-vkCreateSampler-pAllocator-parameter\",\n\"VUID-vkCreateSamplerYcbcrConversion-pAllocator-parameter\",\n\"VUID-vkCreateScreenSurfaceQNX-pAllocator-parameter\",\n\"VUID-vkCreateSemaphore-pAllocator-parameter\",\n\"VUID-vkCreateShaderModule-pAllocator-parameter\",\n\"VUID-vkCreateShadersEXT-pAllocator-parameter\",\n\"VUID-vkCreateSharedSwapchainsKHR-pAllocator-parameter\",\n\"VUID-vkCreateStreamDescriptorSurfaceGGP-pAllocator-parameter\",\n\"VUID-vkCreateSwapchainKHR-pAllocator-parameter\",\n\"VUID-vkCreateValidationCacheEXT-pAllocator-parameter\",\n\"VUID-vkCreateViSurfaceNN-pAllocator-parameter\",\n\"VUID-vkCreateVideoSessionKHR-pAllocator-parameter\",\n\"VUID-vkCreateVideoSessionParametersKHR-pAllocator-parameter\",\n\"VUID-vkCreateWaylandSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateWin32SurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateXcbSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateXlibSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkDestroyAccelerationStructureKHR-pAllocator-parameter\",\n\"VUID-vkDestroyAccelerationStructureNV-pAllocator-parameter\",\n\"VUID-vkDestroyBuffer-pAllocator-parameter\",\n\"VUID-vkDestroyBufferCollectionFUCHSIA-pAllocator-parameter\",\n\"VUID-vkDestroyBufferView-pAllocator-parameter\",\n\"VUID-vkDestroyCommandPool-pAllocator-parameter\",\n\"VUID-vkDestroyCuFunctionNVX-pAllocator-parameter\",\n\"VUID-vkDestroyCuModuleNVX-pAllocator-parameter\",\n\"VUID-vkDestroyCudaFunctionNV-pAllocator-parameter\",\n\"VUID-vkDestroyCudaModuleNV-pAllocator-parameter\",\n\"VUID-vkDestroyDebugReportCallbackEXT-pAllocator-parameter\",\n\"VUID-vkDestroyDebugUtilsMessengerEXT-pAllocator-parameter\",\n\"VUID-vkDestroyDeferredOperationKHR-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorPool-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorSetLayout-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorUpdateTemplate-pAllocator-parameter\",\n\"VUID-vkDestroyDevice-pAllocator-parameter\",\n\"VUID-vkDestroyEvent-pAllocator-parameter\",\n\"VUID-vkDestroyFence-pAllocator-parameter\",\n\"VUID-vkDestroyFramebuffer-pAllocator-parameter\",\n\"VUID-vkDestroyImage-pAllocator-parameter\",\n\"VUID-vkDestroyImageView-pAllocator-parameter\",\n\"VUID-vkDestroyIndirectCommandsLayoutNV-pAllocator-parameter\",\n\"VUID-vkDestroyInstance-pAllocator-parameter\",\n\"VUID-vkDestroyMicromapEXT-pAllocator-parameter\",\n\"VUID-vkDestroyOpticalFlowSessionNV-pAllocator-parameter\",\n\"VUID-vkDestroyPipeline-pAllocator-parameter\",\n\"VUID-vkDestroyPipelineCache-pAllocator-parameter\",\n\"VUID-vkDestroyPipelineLayout-pAllocator-parameter\",\n\"VUID-vkDestroyPrivateDataSlot-pAllocator-parameter\",\n\"VUID-vkDestroyQueryPool-pAllocator-parameter\",\n\"VUID-vkDestroyRenderPass-pAllocator-parameter\",\n\"VUID-vkDestroySampler-pAllocator-parameter\",\n\"VUID-vkDestroySamplerYcbcrConversion-pAllocator-parameter\",\n\"VUID-vkDestroySemaphore-pAllocator-parameter\",\n\"VUID-vkDestroyShaderEXT-pAllocator-parameter\",\n\"VUID-vkDestroyShaderModule-pAllocator-parameter\",\n\"VUID-vkDestroySurfaceKHR-pAllocator-parameter\",\n\"VUID-vkDestroySwapchainKHR-pAllocator-parameter\",\n\"VUID-vkDestroyValidationCacheEXT-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionKHR-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionParametersKHR-pAllocator-parameter\",\n\"VUID-vkFreeMemory-pAllocator-parameter\",\n\"VUID-vkRegisterDeviceEventEXT-pAllocator-parameter\",\n\"VUID-vkRegisterDisplayEventEXT-pAllocator-parameter\",\n\"VUID-vkAllocateMemory-pAllocator-parameter\",\n};\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkSampleLocationsInfoEXT-sType-sType\", \"sType must be VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "\"VUID-VkAttachmentSampleLocationsEXT-sampleLocationsInfo-parameter\",              // VUID-VkSampleLocationsInfoEXT-sType-sType\n\"VUID-VkSubpassSampleLocationsEXT-sampleLocationsInfo-parameter\",                 // VUID-VkSampleLocationsInfoEXT-sType-sType\n\"VUID-VkPipelineSampleLocationsStateCreateInfoEXT-sampleLocationsInfo-parameter\", // VUID-VkSampleLocationsInfoEXT-sType-sType\n\"VUID-VkComputePipelineCreateInfo-stage-parameter\", // VUID-VkPipelineShaderStageCreateInfo-sType-sType\n// Not possible as described in https://gitlab.khronos.org/vulkan/vulkan/-/merge_requests/6324\n\"VUID-VkGraphicsPipelineCreateInfo-pTessellationState-09023\",\n\"VUID-VkGraphicsPipelineCreateInfo-pViewportState-09025\",\n\"VUID-VkGraphicsPipelineCreateInfo-pMultisampleState-09027\",\n\"VUID-VkGraphicsPipelineCreateInfo-pDepthStencilState-09029\",\n\"VUID-VkGraphicsPipelineCreateInfo-pInputAssemblyState-09032\",\n\"VUID-VkGraphicsPipelineCreateInfo-pDepthStencilState-09034\",\n\"VUID-VkGraphicsPipelineCreateInfo-pDepthStencilState-09036\",\n\"VUID-VkGraphicsPipelineCreateInfo-pColorBlendState-09038\",\n\"VUID-VkGraphicsPipelineCreateInfo-pRasterizationState-09039\",\n\"VUID-VkGraphicsPipelineCreateInfo-pRasterizationState-09040\",\n// another variation of it\n\"VUID-vkGetDeviceFaultInfoEXT-pFaultCounts-07337\",\n\"VUID-vkGetDeviceFaultInfoEXT-pFaultCounts-07338\",\n\"VUID-vkGetDeviceFaultInfoEXT-pFaultCounts-07339\",\n\"VUID-VkRenderingInputAttachmentIndexInfoKHR-pDepthInputAttachmentIndex-parameter\",\n\"VUID-VkRenderingInputAttachmentIndexInfoKHR-pStencilInputAttachmentIndex-parameter\"\n// These VUs have \"is not NULL it must be a pointer to a valid pointer to valid structure\" language\n// There is no actual way to validate thsese\n// https://gitlab.khronos.org/vulkan/vulkan/-/issues/3718\n\"VUID-VkDescriptorGetInfoEXT-pUniformTexelBuffer-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pStorageTexelBuffer-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pUniformBuffer-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pStorageBuffer-parameter\",\n// These occur in stateless validation when a pointer member is optional and the length member is also optional\n\"VUID-VkPipelineColorBlendStateCreateInfo-pAttachments-parameter\",\n\"VUID-VkSubpassDescription-pResolveAttachments-parameter\",\n\"VUID-VkTimelineSemaphoreSubmitInfo-pWaitSemaphoreValues-parameter\",\n\"VUID-VkTimelineSemaphoreSubmitInfo-pSignalSemaphoreValues-parameter\",\n\"VUID-VkVideoEncodeH264SessionParametersAddInfoKHR-pStdSPSs-parameter\",\n\"VUID-VkVideoEncodeH264SessionParametersAddInfoKHR-pStdPPSs-parameter\",\n\"VUID-VkVideoEncodeH265SessionParametersAddInfoKHR-pStdVPSs-parameter\",\n\"VUID-VkVideoEncodeH265SessionParametersAddInfoKHR-pStdSPSs-parameter\",\n\"VUID-VkVideoEncodeH265SessionParametersAddInfoKHR-pStdPPSs-parameter\",\n\"VUID-VkD3D12FenceSubmitInfoKHR-pWaitSemaphoreValues-parameter\",\n\"VUID-VkD3D12FenceSubmitInfoKHR-pSignalSemaphoreValues-parameter\",\n\"VUID-VkPresentRegionKHR-pRectangles-parameter\",\n\"VUID-VkBindDescriptorSetsInfoKHR-pDynamicOffsets-parameter\",\n\"VUID-VkPhysicalDeviceHostImageCopyPropertiesEXT-pCopySrcLayouts-parameter\",\n\"VUID-VkPhysicalDeviceHostImageCopyPropertiesEXT-pCopyDstLayouts-parameter\",\n\"VUID-VkSurfacePresentModeCompatibilityEXT-pPresentModes-parameter\",\n\"VUID-VkFrameBoundaryEXT-pImages-parameter\",\n\"VUID-VkFrameBoundaryEXT-pBuffers-parameter\",\n\"VUID-VkFrameBoundaryEXT-pTag-parameter\",\n\"VUID-VkMicromapBuildInfoEXT-pUsageCounts-parameter\",\n\"VUID-VkMicromapBuildInfoEXT-ppUsageCounts-parameter\",\n\"VUID-VkAccelerationStructureTrianglesOpacityMicromapEXT-pUsageCounts-parameter\",\n\"VUID-VkAccelerationStructureTrianglesOpacityMicromapEXT-ppUsageCounts-parameter\",\n\"VUID-VkAccelerationStructureTrianglesDisplacementMicromapNV-pUsageCounts-parameter\",\n\"VUID-VkAccelerationStructureTrianglesDisplacementMicromapNV-ppUsageCounts-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pSetLayouts-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pPushConstantRanges-parameter\",\n\"VUID-VkLatencySurfaceCapabilitiesNV-pPresentModes-parameter\",\n\"VUID-vkCmdBeginTransformFeedbackEXT-pCounterBufferOffsets-parameter\",\n\"VUID-vkCmdEndTransformFeedbackEXT-pCounterBufferOffsets-parameter\",\n\"VUID-vkCmdBindVertexBuffers2-pSizes-parameter\",\n\"VUID-vkCmdBindVertexBuffers2-pStrides-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pSampledImage-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pSampler-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pStorageImage-parameter\",\n\"VUID-vkGetAccelerationStructureBuildSizesKHR-pMaxPrimitiveCounts-parameter\",\n\"VUID-vkCmdDrawMultiIndexedEXT-pVertexOffset-parameter\",\n\"VUID-VkDisplayModeCreateInfoKHR-parameters-parameter\",\n// These occur in stateless validation when a pointer member is optional and the length member is null\n\"VUID-VkDeviceCreateInfo-pEnabledFeatures-parameter\",\n\"VUID-VkPipelineShaderStageCreateInfo-pSpecializationInfo-parameter\",\n\"VUID-VkSubpassDescription-pDepthStencilAttachment-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pSpecializationInfo-parameter\",\n\"VUID-VkExportFenceWin32HandleInfoKHR-pAttributes-parameter\",\n\"VUID-VkExportSemaphoreWin32HandleInfoKHR-pAttributes-parameter\",\n\"VUID-VkExportMemoryWin32HandleInfoKHR-pAttributes-parameter\",\n\"VUID-VkExportMemoryWin32HandleInfoNV-pAttributes-parameter\",\n\"VUID-vkEnumerateDeviceExtensionProperties-pProperties-parameter\",\n\"VUID-vkEnumerateDeviceLayerProperties-pProperties-parameter\",\n\"VUID-vkEnumerateInstanceExtensionProperties-pProperties-parameter\",\n\"VUID-vkEnumerateInstanceLayerProperties-pProperties-parameter\",\n// Checking for null-terminated UTF-8 string\n\"VUID-VkApplicationInfo-pApplicationName-parameter\",\n\"VUID-VkApplicationInfo-pEngineName-parameter\",\n\"VUID-VkDebugUtilsObjectNameInfoEXT-pObjectName-parameter\",\n\"VUID-VkDebugUtilsMessengerCallbackDataEXT-pMessageIdName-parameter\",\n\"VUID-VkPipelineShaderStageNodeCreateInfoAMDX-pName-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pName-parameter\",\n\"VUID-vkGetDeviceProcAddr-pName-parameter\",\n\"VUID-vkGetInstanceProcAddr-pName-parameter\",\n\"VUID-vkEnumerateDeviceExtensionProperties-pLayerName-parameter\",\n\"VUID-vkEnumerateInstanceExtensionProperties-pLayerName-parameter\",\n// Can't validate a VkAllocationCallbacks structure\n\"VUID-vkCreateAccelerationStructureKHR-pAllocator-parameter\",\n\"VUID-vkCreateAccelerationStructureNV-pAllocator-parameter\",\n\"VUID-vkCreateAndroidSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateBuffer-pAllocator-parameter\",\n\"VUID-vkCreateBufferCollectionFUCHSIA-pAllocator-parameter\",\n\"VUID-vkCreateBufferView-pAllocator-parameter\",\n\"VUID-vkCreateCommandPool-pAllocator-parameter\",\n\"VUID-vkCreateComputePipelines-pAllocator-parameter\",\n\"VUID-vkCreateCuFunctionNVX-pAllocator-parameter\",\n\"VUID-vkCreateCuModuleNVX-pAllocator-parameter\",\n\"VUID-vkCreateCudaFunctionNV-pAllocator-parameter\",\n\"VUID-vkCreateCudaModuleNV-pAllocator-parameter\",\n\"VUID-vkCreateDebugReportCallbackEXT-pAllocator-parameter\",\n\"VUID-vkCreateDebugUtilsMessengerEXT-pAllocator-parameter\",\n\"VUID-vkCreateDeferredOperationKHR-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorPool-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorSetLayout-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorUpdateTemplate-pAllocator-parameter\",\n\"VUID-vkCreateDevice-pAllocator-parameter\",\n\"VUID-vkCreateDirectFBSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateDisplayModeKHR-pAllocator-parameter\",\n\"VUID-vkCreateDisplayPlaneSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateEvent-pAllocator-parameter\",\n\"VUID-vkCreateExecutionGraphPipelinesAMDX-pAllocator-parameter\",\n\"VUID-vkCreateFence-pAllocator-parameter\",\n\"VUID-vkCreateFramebuffer-pAllocator-parameter\",\n\"VUID-vkCreateGraphicsPipelines-pAllocator-parameter\",\n\"VUID-vkCreateHeadlessSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateIOSSurfaceMVK-pAllocator-parameter\",\n\"VUID-vkCreateImage-pAllocator-parameter\",\n\"VUID-vkCreateImagePipeSurfaceFUCHSIA-pAllocator-parameter\",\n\"VUID-vkCreateImageView-pAllocator-parameter\",\n\"VUID-vkCreateIndirectCommandsLayoutNV-pAllocator-parameter\",\n\"VUID-vkCreateInstance-pAllocator-parameter\",\n\"VUID-vkCreateMacOSSurfaceMVK-pAllocator-parameter\",\n\"VUID-vkCreateMetalSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateMicromapEXT-pAllocator-parameter\",\n\"VUID-vkCreateOpticalFlowSessionNV-pAllocator-parameter\",\n\"VUID-vkCreatePipelineCache-pAllocator-parameter\",\n\"VUID-vkCreatePipelineLayout-pAllocator-parameter\",\n\"VUID-vkCreatePrivateDataSlot-pAllocator-parameter\",\n\"VUID-vkCreateQueryPool-pAllocator-parameter\",\n\"VUID-vkCreateRayTracingPipelinesKHR-pAllocator-parameter\",\n\"VUID-vkCreateRayTracingPipelinesNV-pAllocator-parameter\",\n\"VUID-vkCreateRenderPass-pAllocator-parameter\",\n\"VUID-vkCreateRenderPass2-pAllocator-parameter\",\n\"VUID-vkCreateSampler-pAllocator-parameter\",\n\"VUID-vkCreateSamplerYcbcrConversion-pAllocator-parameter\",\n\"VUID-vkCreateScreenSurfaceQNX-pAllocator-parameter\",\n\"VUID-vkCreateSemaphore-pAllocator-parameter\",\n\"VUID-vkCreateShaderModule-pAllocator-parameter\",\n\"VUID-vkCreateShadersEXT-pAllocator-parameter\",\n\"VUID-vkCreateSharedSwapchainsKHR-pAllocator-parameter\",\n\"VUID-vkCreateStreamDescriptorSurfaceGGP-pAllocator-parameter\",\n\"VUID-vkCreateSwapchainKHR-pAllocator-parameter\",\n\"VUID-vkCreateValidationCacheEXT-pAllocator-parameter\",\n\"VUID-vkCreateViSurfaceNN-pAllocator-parameter\",\n\"VUID-vkCreateVideoSessionKHR-pAllocator-parameter\",\n\"VUID-vkCreateVideoSessionParametersKHR-pAllocator-parameter\",\n\"VUID-vkCreateWaylandSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateWin32SurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateXcbSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateXlibSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkDestroyAccelerationStructureKHR-pAllocator-parameter\",\n\"VUID-vkDestroyAccelerationStructureNV-pAllocator-parameter\",\n\"VUID-vkDestroyBuffer-pAllocator-parameter\",\n\"VUID-vkDestroyBufferCollectionFUCHSIA-pAllocator-parameter\",\n\"VUID-vkDestroyBufferView-pAllocator-parameter\",\n\"VUID-vkDestroyCommandPool-pAllocator-parameter\",\n\"VUID-vkDestroyCuFunctionNVX-pAllocator-parameter\",\n\"VUID-vkDestroyCuModuleNVX-pAllocator-parameter\",\n\"VUID-vkDestroyCudaFunctionNV-pAllocator-parameter\",\n\"VUID-vkDestroyCudaModuleNV-pAllocator-parameter\",\n\"VUID-vkDestroyDebugReportCallbackEXT-pAllocator-parameter\",\n\"VUID-vkDestroyDebugUtilsMessengerEXT-pAllocator-parameter\",\n\"VUID-vkDestroyDeferredOperationKHR-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorPool-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorSetLayout-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorUpdateTemplate-pAllocator-parameter\",\n\"VUID-vkDestroyDevice-pAllocator-parameter\",\n\"VUID-vkDestroyEvent-pAllocator-parameter\",\n\"VUID-vkDestroyFence-pAllocator-parameter\",\n\"VUID-vkDestroyFramebuffer-pAllocator-parameter\",\n\"VUID-vkDestroyImage-pAllocator-parameter\",\n\"VUID-vkDestroyImageView-pAllocator-parameter\",\n\"VUID-vkDestroyIndirectCommandsLayoutNV-pAllocator-parameter\",\n\"VUID-vkDestroyInstance-pAllocator-parameter\",\n\"VUID-vkDestroyMicromapEXT-pAllocator-parameter\",\n\"VUID-vkDestroyOpticalFlowSessionNV-pAllocator-parameter\",\n\"VUID-vkDestroyPipeline-pAllocator-parameter\",\n\"VUID-vkDestroyPipelineCache-pAllocator-parameter\",\n\"VUID-vkDestroyPipelineLayout-pAllocator-parameter\",\n\"VUID-vkDestroyPrivateDataSlot-pAllocator-parameter\",\n\"VUID-vkDestroyQueryPool-pAllocator-parameter\",\n\"VUID-vkDestroyRenderPass-pAllocator-parameter\",\n\"VUID-vkDestroySampler-pAllocator-parameter\",\n\"VUID-vkDestroySamplerYcbcrConversion-pAllocator-parameter\",\n\"VUID-vkDestroySemaphore-pAllocator-parameter\",\n\"VUID-vkDestroyShaderEXT-pAllocator-parameter\",\n\"VUID-vkDestroyShaderModule-pAllocator-parameter\",\n\"VUID-vkDestroySurfaceKHR-pAllocator-parameter\",\n\"VUID-vkDestroySwapchainKHR-pAllocator-parameter\",\n\"VUID-vkDestroyValidationCacheEXT-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionKHR-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionParametersKHR-pAllocator-parameter\",\n\"VUID-vkFreeMemory-pAllocator-parameter\",\n\"VUID-vkRegisterDeviceEventEXT-pAllocator-parameter\",\n\"VUID-vkRegisterDisplayEventEXT-pAllocator-parameter\",\n\"VUID-vkAllocateMemory-pAllocator-parameter\",\n};\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkPipelineShaderStageCreateInfo-sType-sType\", \"sType must be VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "\"VUID-VkAttachmentSampleLocationsEXT-sampleLocationsInfo-parameter\",              // VUID-VkSampleLocationsInfoEXT-sType-sType\n\"VUID-VkSubpassSampleLocationsEXT-sampleLocationsInfo-parameter\",                 // VUID-VkSampleLocationsInfoEXT-sType-sType\n\"VUID-VkPipelineSampleLocationsStateCreateInfoEXT-sampleLocationsInfo-parameter\", // VUID-VkSampleLocationsInfoEXT-sType-sType\n\"VUID-VkComputePipelineCreateInfo-stage-parameter\", // VUID-VkPipelineShaderStageCreateInfo-sType-sType\n// Not possible as described in https://gitlab.khronos.org/vulkan/vulkan/-/merge_requests/6324\n\"VUID-VkGraphicsPipelineCreateInfo-pTessellationState-09023\",\n\"VUID-VkGraphicsPipelineCreateInfo-pViewportState-09025\",\n\"VUID-VkGraphicsPipelineCreateInfo-pMultisampleState-09027\",\n\"VUID-VkGraphicsPipelineCreateInfo-pDepthStencilState-09029\",\n\"VUID-VkGraphicsPipelineCreateInfo-pInputAssemblyState-09032\",\n\"VUID-VkGraphicsPipelineCreateInfo-pDepthStencilState-09034\",\n\"VUID-VkGraphicsPipelineCreateInfo-pDepthStencilState-09036\",\n\"VUID-VkGraphicsPipelineCreateInfo-pColorBlendState-09038\",\n\"VUID-VkGraphicsPipelineCreateInfo-pRasterizationState-09039\",\n\"VUID-VkGraphicsPipelineCreateInfo-pRasterizationState-09040\",\n// another variation of it\n\"VUID-vkGetDeviceFaultInfoEXT-pFaultCounts-07337\",\n\"VUID-vkGetDeviceFaultInfoEXT-pFaultCounts-07338\",\n\"VUID-vkGetDeviceFaultInfoEXT-pFaultCounts-07339\",\n\"VUID-VkRenderingInputAttachmentIndexInfoKHR-pDepthInputAttachmentIndex-parameter\",\n\"VUID-VkRenderingInputAttachmentIndexInfoKHR-pStencilInputAttachmentIndex-parameter\"\n// These VUs have \"is not NULL it must be a pointer to a valid pointer to valid structure\" language\n// There is no actual way to validate thsese\n// https://gitlab.khronos.org/vulkan/vulkan/-/issues/3718\n\"VUID-VkDescriptorGetInfoEXT-pUniformTexelBuffer-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pStorageTexelBuffer-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pUniformBuffer-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pStorageBuffer-parameter\",\n// These occur in stateless validation when a pointer member is optional and the length member is also optional\n\"VUID-VkPipelineColorBlendStateCreateInfo-pAttachments-parameter\",\n\"VUID-VkSubpassDescription-pResolveAttachments-parameter\",\n\"VUID-VkTimelineSemaphoreSubmitInfo-pWaitSemaphoreValues-parameter\",\n\"VUID-VkTimelineSemaphoreSubmitInfo-pSignalSemaphoreValues-parameter\",\n\"VUID-VkVideoEncodeH264SessionParametersAddInfoKHR-pStdSPSs-parameter\",\n\"VUID-VkVideoEncodeH264SessionParametersAddInfoKHR-pStdPPSs-parameter\",\n\"VUID-VkVideoEncodeH265SessionParametersAddInfoKHR-pStdVPSs-parameter\",\n\"VUID-VkVideoEncodeH265SessionParametersAddInfoKHR-pStdSPSs-parameter\",\n\"VUID-VkVideoEncodeH265SessionParametersAddInfoKHR-pStdPPSs-parameter\",\n\"VUID-VkD3D12FenceSubmitInfoKHR-pWaitSemaphoreValues-parameter\",\n\"VUID-VkD3D12FenceSubmitInfoKHR-pSignalSemaphoreValues-parameter\",\n\"VUID-VkPresentRegionKHR-pRectangles-parameter\",\n\"VUID-VkBindDescriptorSetsInfoKHR-pDynamicOffsets-parameter\",\n\"VUID-VkPhysicalDeviceHostImageCopyPropertiesEXT-pCopySrcLayouts-parameter\",\n\"VUID-VkPhysicalDeviceHostImageCopyPropertiesEXT-pCopyDstLayouts-parameter\",\n\"VUID-VkSurfacePresentModeCompatibilityEXT-pPresentModes-parameter\",\n\"VUID-VkFrameBoundaryEXT-pImages-parameter\",\n\"VUID-VkFrameBoundaryEXT-pBuffers-parameter\",\n\"VUID-VkFrameBoundaryEXT-pTag-parameter\",\n\"VUID-VkMicromapBuildInfoEXT-pUsageCounts-parameter\",\n\"VUID-VkMicromapBuildInfoEXT-ppUsageCounts-parameter\",\n\"VUID-VkAccelerationStructureTrianglesOpacityMicromapEXT-pUsageCounts-parameter\",\n\"VUID-VkAccelerationStructureTrianglesOpacityMicromapEXT-ppUsageCounts-parameter\",\n\"VUID-VkAccelerationStructureTrianglesDisplacementMicromapNV-pUsageCounts-parameter\",\n\"VUID-VkAccelerationStructureTrianglesDisplacementMicromapNV-ppUsageCounts-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pSetLayouts-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pPushConstantRanges-parameter\",\n\"VUID-VkLatencySurfaceCapabilitiesNV-pPresentModes-parameter\",\n\"VUID-vkCmdBeginTransformFeedbackEXT-pCounterBufferOffsets-parameter\",\n\"VUID-vkCmdEndTransformFeedbackEXT-pCounterBufferOffsets-parameter\",\n\"VUID-vkCmdBindVertexBuffers2-pSizes-parameter\",\n\"VUID-vkCmdBindVertexBuffers2-pStrides-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pSampledImage-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pSampler-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pStorageImage-parameter\",\n\"VUID-vkGetAccelerationStructureBuildSizesKHR-pMaxPrimitiveCounts-parameter\",\n\"VUID-vkCmdDrawMultiIndexedEXT-pVertexOffset-parameter\",\n\"VUID-VkDisplayModeCreateInfoKHR-parameters-parameter\",\n// These occur in stateless validation when a pointer member is optional and the length member is null\n\"VUID-VkDeviceCreateInfo-pEnabledFeatures-parameter\",\n\"VUID-VkPipelineShaderStageCreateInfo-pSpecializationInfo-parameter\",\n\"VUID-VkSubpassDescription-pDepthStencilAttachment-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pSpecializationInfo-parameter\",\n\"VUID-VkExportFenceWin32HandleInfoKHR-pAttributes-parameter\",\n\"VUID-VkExportSemaphoreWin32HandleInfoKHR-pAttributes-parameter\",\n\"VUID-VkExportMemoryWin32HandleInfoKHR-pAttributes-parameter\",\n\"VUID-VkExportMemoryWin32HandleInfoNV-pAttributes-parameter\",\n\"VUID-vkEnumerateDeviceExtensionProperties-pProperties-parameter\",\n\"VUID-vkEnumerateDeviceLayerProperties-pProperties-parameter\",\n\"VUID-vkEnumerateInstanceExtensionProperties-pProperties-parameter\",\n\"VUID-vkEnumerateInstanceLayerProperties-pProperties-parameter\",\n// Checking for null-terminated UTF-8 string\n\"VUID-VkApplicationInfo-pApplicationName-parameter\",\n\"VUID-VkApplicationInfo-pEngineName-parameter\",\n\"VUID-VkDebugUtilsObjectNameInfoEXT-pObjectName-parameter\",\n\"VUID-VkDebugUtilsMessengerCallbackDataEXT-pMessageIdName-parameter\",\n\"VUID-VkPipelineShaderStageNodeCreateInfoAMDX-pName-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pName-parameter\",\n\"VUID-vkGetDeviceProcAddr-pName-parameter\",\n\"VUID-vkGetInstanceProcAddr-pName-parameter\",\n\"VUID-vkEnumerateDeviceExtensionProperties-pLayerName-parameter\",\n\"VUID-vkEnumerateInstanceExtensionProperties-pLayerName-parameter\",\n// Can't validate a VkAllocationCallbacks structure\n\"VUID-vkCreateAccelerationStructureKHR-pAllocator-parameter\",\n\"VUID-vkCreateAccelerationStructureNV-pAllocator-parameter\",\n\"VUID-vkCreateAndroidSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateBuffer-pAllocator-parameter\",\n\"VUID-vkCreateBufferCollectionFUCHSIA-pAllocator-parameter\",\n\"VUID-vkCreateBufferView-pAllocator-parameter\",\n\"VUID-vkCreateCommandPool-pAllocator-parameter\",\n\"VUID-vkCreateComputePipelines-pAllocator-parameter\",\n\"VUID-vkCreateCuFunctionNVX-pAllocator-parameter\",\n\"VUID-vkCreateCuModuleNVX-pAllocator-parameter\",\n\"VUID-vkCreateCudaFunctionNV-pAllocator-parameter\",\n\"VUID-vkCreateCudaModuleNV-pAllocator-parameter\",\n\"VUID-vkCreateDebugReportCallbackEXT-pAllocator-parameter\",\n\"VUID-vkCreateDebugUtilsMessengerEXT-pAllocator-parameter\",\n\"VUID-vkCreateDeferredOperationKHR-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorPool-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorSetLayout-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorUpdateTemplate-pAllocator-parameter\",\n\"VUID-vkCreateDevice-pAllocator-parameter\",\n\"VUID-vkCreateDirectFBSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateDisplayModeKHR-pAllocator-parameter\",\n\"VUID-vkCreateDisplayPlaneSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateEvent-pAllocator-parameter\",\n\"VUID-vkCreateExecutionGraphPipelinesAMDX-pAllocator-parameter\",\n\"VUID-vkCreateFence-pAllocator-parameter\",\n\"VUID-vkCreateFramebuffer-pAllocator-parameter\",\n\"VUID-vkCreateGraphicsPipelines-pAllocator-parameter\",\n\"VUID-vkCreateHeadlessSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateIOSSurfaceMVK-pAllocator-parameter\",\n\"VUID-vkCreateImage-pAllocator-parameter\",\n\"VUID-vkCreateImagePipeSurfaceFUCHSIA-pAllocator-parameter\",\n\"VUID-vkCreateImageView-pAllocator-parameter\",\n\"VUID-vkCreateIndirectCommandsLayoutNV-pAllocator-parameter\",\n\"VUID-vkCreateInstance-pAllocator-parameter\",\n\"VUID-vkCreateMacOSSurfaceMVK-pAllocator-parameter\",\n\"VUID-vkCreateMetalSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateMicromapEXT-pAllocator-parameter\",\n\"VUID-vkCreateOpticalFlowSessionNV-pAllocator-parameter\",\n\"VUID-vkCreatePipelineCache-pAllocator-parameter\",\n\"VUID-vkCreatePipelineLayout-pAllocator-parameter\",\n\"VUID-vkCreatePrivateDataSlot-pAllocator-parameter\",\n\"VUID-vkCreateQueryPool-pAllocator-parameter\",\n\"VUID-vkCreateRayTracingPipelinesKHR-pAllocator-parameter\",\n\"VUID-vkCreateRayTracingPipelinesNV-pAllocator-parameter\",\n\"VUID-vkCreateRenderPass-pAllocator-parameter\",\n\"VUID-vkCreateRenderPass2-pAllocator-parameter\",\n\"VUID-vkCreateSampler-pAllocator-parameter\",\n\"VUID-vkCreateSamplerYcbcrConversion-pAllocator-parameter\",\n\"VUID-vkCreateScreenSurfaceQNX-pAllocator-parameter\",\n\"VUID-vkCreateSemaphore-pAllocator-parameter\",\n\"VUID-vkCreateShaderModule-pAllocator-parameter\",\n\"VUID-vkCreateShadersEXT-pAllocator-parameter\",\n\"VUID-vkCreateSharedSwapchainsKHR-pAllocator-parameter\",\n\"VUID-vkCreateStreamDescriptorSurfaceGGP-pAllocator-parameter\",\n\"VUID-vkCreateSwapchainKHR-pAllocator-parameter\",\n\"VUID-vkCreateValidationCacheEXT-pAllocator-parameter\",\n\"VUID-vkCreateViSurfaceNN-pAllocator-parameter\",\n\"VUID-vkCreateVideoSessionKHR-pAllocator-parameter\",\n\"VUID-vkCreateVideoSessionParametersKHR-pAllocator-parameter\",\n\"VUID-vkCreateWaylandSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateWin32SurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateXcbSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateXlibSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkDestroyAccelerationStructureKHR-pAllocator-parameter\",\n\"VUID-vkDestroyAccelerationStructureNV-pAllocator-parameter\",\n\"VUID-vkDestroyBuffer-pAllocator-parameter\",\n\"VUID-vkDestroyBufferCollectionFUCHSIA-pAllocator-parameter\",\n\"VUID-vkDestroyBufferView-pAllocator-parameter\",\n\"VUID-vkDestroyCommandPool-pAllocator-parameter\",\n\"VUID-vkDestroyCuFunctionNVX-pAllocator-parameter\",\n\"VUID-vkDestroyCuModuleNVX-pAllocator-parameter\",\n\"VUID-vkDestroyCudaFunctionNV-pAllocator-parameter\",\n\"VUID-vkDestroyCudaModuleNV-pAllocator-parameter\",\n\"VUID-vkDestroyDebugReportCallbackEXT-pAllocator-parameter\",\n\"VUID-vkDestroyDebugUtilsMessengerEXT-pAllocator-parameter\",\n\"VUID-vkDestroyDeferredOperationKHR-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorPool-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorSetLayout-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorUpdateTemplate-pAllocator-parameter\",\n\"VUID-vkDestroyDevice-pAllocator-parameter\",\n\"VUID-vkDestroyEvent-pAllocator-parameter\",\n\"VUID-vkDestroyFence-pAllocator-parameter\",\n\"VUID-vkDestroyFramebuffer-pAllocator-parameter\",\n\"VUID-vkDestroyImage-pAllocator-parameter\",\n\"VUID-vkDestroyImageView-pAllocator-parameter\",\n\"VUID-vkDestroyIndirectCommandsLayoutNV-pAllocator-parameter\",\n\"VUID-vkDestroyInstance-pAllocator-parameter\",\n\"VUID-vkDestroyMicromapEXT-pAllocator-parameter\",\n\"VUID-vkDestroyOpticalFlowSessionNV-pAllocator-parameter\",\n\"VUID-vkDestroyPipeline-pAllocator-parameter\",\n\"VUID-vkDestroyPipelineCache-pAllocator-parameter\",\n\"VUID-vkDestroyPipelineLayout-pAllocator-parameter\",\n\"VUID-vkDestroyPrivateDataSlot-pAllocator-parameter\",\n\"VUID-vkDestroyQueryPool-pAllocator-parameter\",\n\"VUID-vkDestroyRenderPass-pAllocator-parameter\",\n\"VUID-vkDestroySampler-pAllocator-parameter\",\n\"VUID-vkDestroySamplerYcbcrConversion-pAllocator-parameter\",\n\"VUID-vkDestroySemaphore-pAllocator-parameter\",\n\"VUID-vkDestroyShaderEXT-pAllocator-parameter\",\n\"VUID-vkDestroyShaderModule-pAllocator-parameter\",\n\"VUID-vkDestroySurfaceKHR-pAllocator-parameter\",\n\"VUID-vkDestroySwapchainKHR-pAllocator-parameter\",\n\"VUID-vkDestroyValidationCacheEXT-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionKHR-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionParametersKHR-pAllocator-parameter\",\n\"VUID-vkFreeMemory-pAllocator-parameter\",\n\"VUID-vkRegisterDeviceEventEXT-pAllocator-parameter\",\n\"VUID-vkRegisterDisplayEventEXT-pAllocator-parameter\",\n\"VUID-vkAllocateMemory-pAllocator-parameter\",\n};\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkGraphicsPipelineCreateInfo-pMultisampleState-09027\", \"If pMultisampleState is not NULL it must be a valid pointer to a valid VkPipelineMultisampleStateCreateInfo structure\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "\"VUID-VkGraphicsPipelineCreateInfo-pTessellationState-09023\",\n\"VUID-VkGraphicsPipelineCreateInfo-pViewportState-09025\",\n\"VUID-VkGraphicsPipelineCreateInfo-pMultisampleState-09027\",\n\"VUID-VkGraphicsPipelineCreateInfo-pDepthStencilState-09029\",\n\"VUID-VkGraphicsPipelineCreateInfo-pInputAssemblyState-09032\",\n\"VUID-VkGraphicsPipelineCreateInfo-pDepthStencilState-09034\",\n\"VUID-VkGraphicsPipelineCreateInfo-pDepthStencilState-09036\",\n\"VUID-VkGraphicsPipelineCreateInfo-pColorBlendState-09038\",\n\"VUID-VkGraphicsPipelineCreateInfo-pRasterizationState-09039\",\n\"VUID-VkGraphicsPipelineCreateInfo-pRasterizationState-09040\",\n// another variation of it\n\"VUID-vkGetDeviceFaultInfoEXT-pFaultCounts-07337\",\n\"VUID-vkGetDeviceFaultInfoEXT-pFaultCounts-07338\",\n\"VUID-vkGetDeviceFaultInfoEXT-pFaultCounts-07339\",\n\"VUID-VkRenderingInputAttachmentIndexInfoKHR-pDepthInputAttachmentIndex-parameter\",\n\"VUID-VkRenderingInputAttachmentIndexInfoKHR-pStencilInputAttachmentIndex-parameter\"\n// These VUs have \"is not NULL it must be a pointer to a valid pointer to valid structure\" language\n// There is no actual way to validate thsese\n// https://gitlab.khronos.org/vulkan/vulkan/-/issues/3718\n\"VUID-VkDescriptorGetInfoEXT-pUniformTexelBuffer-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pStorageTexelBuffer-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pUniformBuffer-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pStorageBuffer-parameter\",\n// These occur in stateless validation when a pointer member is optional and the length member is also optional\n\"VUID-VkPipelineColorBlendStateCreateInfo-pAttachments-parameter\",\n\"VUID-VkSubpassDescription-pResolveAttachments-parameter\",\n\"VUID-VkTimelineSemaphoreSubmitInfo-pWaitSemaphoreValues-parameter\",\n\"VUID-VkTimelineSemaphoreSubmitInfo-pSignalSemaphoreValues-parameter\",\n\"VUID-VkVideoEncodeH264SessionParametersAddInfoKHR-pStdSPSs-parameter\",\n\"VUID-VkVideoEncodeH264SessionParametersAddInfoKHR-pStdPPSs-parameter\",\n\"VUID-VkVideoEncodeH265SessionParametersAddInfoKHR-pStdVPSs-parameter\",\n\"VUID-VkVideoEncodeH265SessionParametersAddInfoKHR-pStdSPSs-parameter\",\n\"VUID-VkVideoEncodeH265SessionParametersAddInfoKHR-pStdPPSs-parameter\",\n\"VUID-VkD3D12FenceSubmitInfoKHR-pWaitSemaphoreValues-parameter\",\n\"VUID-VkD3D12FenceSubmitInfoKHR-pSignalSemaphoreValues-parameter\",\n\"VUID-VkPresentRegionKHR-pRectangles-parameter\",\n\"VUID-VkBindDescriptorSetsInfoKHR-pDynamicOffsets-parameter\",\n\"VUID-VkPhysicalDeviceHostImageCopyPropertiesEXT-pCopySrcLayouts-parameter\",\n\"VUID-VkPhysicalDeviceHostImageCopyPropertiesEXT-pCopyDstLayouts-parameter\",\n\"VUID-VkSurfacePresentModeCompatibilityEXT-pPresentModes-parameter\",\n\"VUID-VkFrameBoundaryEXT-pImages-parameter\",\n\"VUID-VkFrameBoundaryEXT-pBuffers-parameter\",\n\"VUID-VkFrameBoundaryEXT-pTag-parameter\",\n\"VUID-VkMicromapBuildInfoEXT-pUsageCounts-parameter\",\n\"VUID-VkMicromapBuildInfoEXT-ppUsageCounts-parameter\",\n\"VUID-VkAccelerationStructureTrianglesOpacityMicromapEXT-pUsageCounts-parameter\",\n\"VUID-VkAccelerationStructureTrianglesOpacityMicromapEXT-ppUsageCounts-parameter\",\n\"VUID-VkAccelerationStructureTrianglesDisplacementMicromapNV-pUsageCounts-parameter\",\n\"VUID-VkAccelerationStructureTrianglesDisplacementMicromapNV-ppUsageCounts-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pSetLayouts-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pPushConstantRanges-parameter\",\n\"VUID-VkLatencySurfaceCapabilitiesNV-pPresentModes-parameter\",\n\"VUID-vkCmdBeginTransformFeedbackEXT-pCounterBufferOffsets-parameter\",\n\"VUID-vkCmdEndTransformFeedbackEXT-pCounterBufferOffsets-parameter\",\n\"VUID-vkCmdBindVertexBuffers2-pSizes-parameter\",\n\"VUID-vkCmdBindVertexBuffers2-pStrides-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pSampledImage-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pSampler-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pStorageImage-parameter\",\n\"VUID-vkGetAccelerationStructureBuildSizesKHR-pMaxPrimitiveCounts-parameter\",\n\"VUID-vkCmdDrawMultiIndexedEXT-pVertexOffset-parameter\",\n\"VUID-VkDisplayModeCreateInfoKHR-parameters-parameter\",\n// These occur in stateless validation when a pointer member is optional and the length member is null\n\"VUID-VkDeviceCreateInfo-pEnabledFeatures-parameter\",\n\"VUID-VkPipelineShaderStageCreateInfo-pSpecializationInfo-parameter\",\n\"VUID-VkSubpassDescription-pDepthStencilAttachment-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pSpecializationInfo-parameter\",\n\"VUID-VkExportFenceWin32HandleInfoKHR-pAttributes-parameter\",\n\"VUID-VkExportSemaphoreWin32HandleInfoKHR-pAttributes-parameter\",\n\"VUID-VkExportMemoryWin32HandleInfoKHR-pAttributes-parameter\",\n\"VUID-VkExportMemoryWin32HandleInfoNV-pAttributes-parameter\",\n\"VUID-vkEnumerateDeviceExtensionProperties-pProperties-parameter\",\n\"VUID-vkEnumerateDeviceLayerProperties-pProperties-parameter\",\n\"VUID-vkEnumerateInstanceExtensionProperties-pProperties-parameter\",\n\"VUID-vkEnumerateInstanceLayerProperties-pProperties-parameter\",\n// Checking for null-terminated UTF-8 string\n\"VUID-VkApplicationInfo-pApplicationName-parameter\",\n\"VUID-VkApplicationInfo-pEngineName-parameter\",\n\"VUID-VkDebugUtilsObjectNameInfoEXT-pObjectName-parameter\",\n\"VUID-VkDebugUtilsMessengerCallbackDataEXT-pMessageIdName-parameter\",\n\"VUID-VkPipelineShaderStageNodeCreateInfoAMDX-pName-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pName-parameter\",\n\"VUID-vkGetDeviceProcAddr-pName-parameter\",\n\"VUID-vkGetInstanceProcAddr-pName-parameter\",\n\"VUID-vkEnumerateDeviceExtensionProperties-pLayerName-parameter\",\n\"VUID-vkEnumerateInstanceExtensionProperties-pLayerName-parameter\",\n// Can't validate a VkAllocationCallbacks structure\n\"VUID-vkCreateAccelerationStructureKHR-pAllocator-parameter\",\n\"VUID-vkCreateAccelerationStructureNV-pAllocator-parameter\",\n\"VUID-vkCreateAndroidSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateBuffer-pAllocator-parameter\",\n\"VUID-vkCreateBufferCollectionFUCHSIA-pAllocator-parameter\",\n\"VUID-vkCreateBufferView-pAllocator-parameter\",\n\"VUID-vkCreateCommandPool-pAllocator-parameter\",\n\"VUID-vkCreateComputePipelines-pAllocator-parameter\",\n\"VUID-vkCreateCuFunctionNVX-pAllocator-parameter\",\n\"VUID-vkCreateCuModuleNVX-pAllocator-parameter\",\n\"VUID-vkCreateCudaFunctionNV-pAllocator-parameter\",\n\"VUID-vkCreateCudaModuleNV-pAllocator-parameter\",\n\"VUID-vkCreateDebugReportCallbackEXT-pAllocator-parameter\",\n\"VUID-vkCreateDebugUtilsMessengerEXT-pAllocator-parameter\",\n\"VUID-vkCreateDeferredOperationKHR-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorPool-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorSetLayout-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorUpdateTemplate-pAllocator-parameter\",\n\"VUID-vkCreateDevice-pAllocator-parameter\",\n\"VUID-vkCreateDirectFBSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateDisplayModeKHR-pAllocator-parameter\",\n\"VUID-vkCreateDisplayPlaneSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateEvent-pAllocator-parameter\",\n\"VUID-vkCreateExecutionGraphPipelinesAMDX-pAllocator-parameter\",\n\"VUID-vkCreateFence-pAllocator-parameter\",\n\"VUID-vkCreateFramebuffer-pAllocator-parameter\",\n\"VUID-vkCreateGraphicsPipelines-pAllocator-parameter\",\n\"VUID-vkCreateHeadlessSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateIOSSurfaceMVK-pAllocator-parameter\",\n\"VUID-vkCreateImage-pAllocator-parameter\",\n\"VUID-vkCreateImagePipeSurfaceFUCHSIA-pAllocator-parameter\",\n\"VUID-vkCreateImageView-pAllocator-parameter\",\n\"VUID-vkCreateIndirectCommandsLayoutNV-pAllocator-parameter\",\n\"VUID-vkCreateInstance-pAllocator-parameter\",\n\"VUID-vkCreateMacOSSurfaceMVK-pAllocator-parameter\",\n\"VUID-vkCreateMetalSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateMicromapEXT-pAllocator-parameter\",\n\"VUID-vkCreateOpticalFlowSessionNV-pAllocator-parameter\",\n\"VUID-vkCreatePipelineCache-pAllocator-parameter\",\n\"VUID-vkCreatePipelineLayout-pAllocator-parameter\",\n\"VUID-vkCreatePrivateDataSlot-pAllocator-parameter\",\n\"VUID-vkCreateQueryPool-pAllocator-parameter\",\n\"VUID-vkCreateRayTracingPipelinesKHR-pAllocator-parameter\",\n\"VUID-vkCreateRayTracingPipelinesNV-pAllocator-parameter\",\n\"VUID-vkCreateRenderPass-pAllocator-parameter\",\n\"VUID-vkCreateRenderPass2-pAllocator-parameter\",\n\"VUID-vkCreateSampler-pAllocator-parameter\",\n\"VUID-vkCreateSamplerYcbcrConversion-pAllocator-parameter\",\n\"VUID-vkCreateScreenSurfaceQNX-pAllocator-parameter\",\n\"VUID-vkCreateSemaphore-pAllocator-parameter\",\n\"VUID-vkCreateShaderModule-pAllocator-parameter\",\n\"VUID-vkCreateShadersEXT-pAllocator-parameter\",\n\"VUID-vkCreateSharedSwapchainsKHR-pAllocator-parameter\",\n\"VUID-vkCreateStreamDescriptorSurfaceGGP-pAllocator-parameter\",\n\"VUID-vkCreateSwapchainKHR-pAllocator-parameter\",\n\"VUID-vkCreateValidationCacheEXT-pAllocator-parameter\",\n\"VUID-vkCreateViSurfaceNN-pAllocator-parameter\",\n\"VUID-vkCreateVideoSessionKHR-pAllocator-parameter\",\n\"VUID-vkCreateVideoSessionParametersKHR-pAllocator-parameter\",\n\"VUID-vkCreateWaylandSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateWin32SurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateXcbSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateXlibSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkDestroyAccelerationStructureKHR-pAllocator-parameter\",\n\"VUID-vkDestroyAccelerationStructureNV-pAllocator-parameter\",\n\"VUID-vkDestroyBuffer-pAllocator-parameter\",\n\"VUID-vkDestroyBufferCollectionFUCHSIA-pAllocator-parameter\",\n\"VUID-vkDestroyBufferView-pAllocator-parameter\",\n\"VUID-vkDestroyCommandPool-pAllocator-parameter\",\n\"VUID-vkDestroyCuFunctionNVX-pAllocator-parameter\",\n\"VUID-vkDestroyCuModuleNVX-pAllocator-parameter\",\n\"VUID-vkDestroyCudaFunctionNV-pAllocator-parameter\",\n\"VUID-vkDestroyCudaModuleNV-pAllocator-parameter\",\n\"VUID-vkDestroyDebugReportCallbackEXT-pAllocator-parameter\",\n\"VUID-vkDestroyDebugUtilsMessengerEXT-pAllocator-parameter\",\n\"VUID-vkDestroyDeferredOperationKHR-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorPool-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorSetLayout-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorUpdateTemplate-pAllocator-parameter\",\n\"VUID-vkDestroyDevice-pAllocator-parameter\",\n\"VUID-vkDestroyEvent-pAllocator-parameter\",\n\"VUID-vkDestroyFence-pAllocator-parameter\",\n\"VUID-vkDestroyFramebuffer-pAllocator-parameter\",\n\"VUID-vkDestroyImage-pAllocator-parameter\",\n\"VUID-vkDestroyImageView-pAllocator-parameter\",\n\"VUID-vkDestroyIndirectCommandsLayoutNV-pAllocator-parameter\",\n\"VUID-vkDestroyInstance-pAllocator-parameter\",\n\"VUID-vkDestroyMicromapEXT-pAllocator-parameter\",\n\"VUID-vkDestroyOpticalFlowSessionNV-pAllocator-parameter\",\n\"VUID-vkDestroyPipeline-pAllocator-parameter\",\n\"VUID-vkDestroyPipelineCache-pAllocator-parameter\",\n\"VUID-vkDestroyPipelineLayout-pAllocator-parameter\",\n\"VUID-vkDestroyPrivateDataSlot-pAllocator-parameter\",\n\"VUID-vkDestroyQueryPool-pAllocator-parameter\",\n\"VUID-vkDestroyRenderPass-pAllocator-parameter\",\n\"VUID-vkDestroySampler-pAllocator-parameter\",\n\"VUID-vkDestroySamplerYcbcrConversion-pAllocator-parameter\",\n\"VUID-vkDestroySemaphore-pAllocator-parameter\",\n\"VUID-vkDestroyShaderEXT-pAllocator-parameter\",\n\"VUID-vkDestroyShaderModule-pAllocator-parameter\",\n\"VUID-vkDestroySurfaceKHR-pAllocator-parameter\",\n\"VUID-vkDestroySwapchainKHR-pAllocator-parameter\",\n\"VUID-vkDestroyValidationCacheEXT-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionKHR-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionParametersKHR-pAllocator-parameter\",\n\"VUID-vkFreeMemory-pAllocator-parameter\",\n\"VUID-vkRegisterDeviceEventEXT-pAllocator-parameter\",\n\"VUID-vkRegisterDisplayEventEXT-pAllocator-parameter\",\n\"VUID-vkAllocateMemory-pAllocator-parameter\",\n};\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkGraphicsPipelineCreateInfo-pColorBlendState-09038\", \"If pColorBlendState is not NULL it must be a valid pointer to a valid VkPipelineColorBlendStateCreateInfo structure\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "\"VUID-VkGraphicsPipelineCreateInfo-pInputAssemblyState-09032\",\n\"VUID-VkGraphicsPipelineCreateInfo-pDepthStencilState-09034\",\n\"VUID-VkGraphicsPipelineCreateInfo-pDepthStencilState-09036\",\n\"VUID-VkGraphicsPipelineCreateInfo-pColorBlendState-09038\",\n\"VUID-VkGraphicsPipelineCreateInfo-pRasterizationState-09039\",\n\"VUID-VkGraphicsPipelineCreateInfo-pRasterizationState-09040\",\n// another variation of it\n\"VUID-vkGetDeviceFaultInfoEXT-pFaultCounts-07337\",\n\"VUID-vkGetDeviceFaultInfoEXT-pFaultCounts-07338\",\n\"VUID-vkGetDeviceFaultInfoEXT-pFaultCounts-07339\",\n\"VUID-VkRenderingInputAttachmentIndexInfoKHR-pDepthInputAttachmentIndex-parameter\",\n\"VUID-VkRenderingInputAttachmentIndexInfoKHR-pStencilInputAttachmentIndex-parameter\"\n// These VUs have \"is not NULL it must be a pointer to a valid pointer to valid structure\" language\n// There is no actual way to validate thsese\n// https://gitlab.khronos.org/vulkan/vulkan/-/issues/3718\n\"VUID-VkDescriptorGetInfoEXT-pUniformTexelBuffer-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pStorageTexelBuffer-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pUniformBuffer-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pStorageBuffer-parameter\",\n// These occur in stateless validation when a pointer member is optional and the length member is also optional\n\"VUID-VkPipelineColorBlendStateCreateInfo-pAttachments-parameter\",\n\"VUID-VkSubpassDescription-pResolveAttachments-parameter\",\n\"VUID-VkTimelineSemaphoreSubmitInfo-pWaitSemaphoreValues-parameter\",\n\"VUID-VkTimelineSemaphoreSubmitInfo-pSignalSemaphoreValues-parameter\",\n\"VUID-VkVideoEncodeH264SessionParametersAddInfoKHR-pStdSPSs-parameter\",\n\"VUID-VkVideoEncodeH264SessionParametersAddInfoKHR-pStdPPSs-parameter\",\n\"VUID-VkVideoEncodeH265SessionParametersAddInfoKHR-pStdVPSs-parameter\",\n\"VUID-VkVideoEncodeH265SessionParametersAddInfoKHR-pStdSPSs-parameter\",\n\"VUID-VkVideoEncodeH265SessionParametersAddInfoKHR-pStdPPSs-parameter\",\n\"VUID-VkD3D12FenceSubmitInfoKHR-pWaitSemaphoreValues-parameter\",\n\"VUID-VkD3D12FenceSubmitInfoKHR-pSignalSemaphoreValues-parameter\",\n\"VUID-VkPresentRegionKHR-pRectangles-parameter\",\n\"VUID-VkBindDescriptorSetsInfoKHR-pDynamicOffsets-parameter\",\n\"VUID-VkPhysicalDeviceHostImageCopyPropertiesEXT-pCopySrcLayouts-parameter\",\n\"VUID-VkPhysicalDeviceHostImageCopyPropertiesEXT-pCopyDstLayouts-parameter\",\n\"VUID-VkSurfacePresentModeCompatibilityEXT-pPresentModes-parameter\",\n\"VUID-VkFrameBoundaryEXT-pImages-parameter\",\n\"VUID-VkFrameBoundaryEXT-pBuffers-parameter\",\n\"VUID-VkFrameBoundaryEXT-pTag-parameter\",\n\"VUID-VkMicromapBuildInfoEXT-pUsageCounts-parameter\",\n\"VUID-VkMicromapBuildInfoEXT-ppUsageCounts-parameter\",\n\"VUID-VkAccelerationStructureTrianglesOpacityMicromapEXT-pUsageCounts-parameter\",\n\"VUID-VkAccelerationStructureTrianglesOpacityMicromapEXT-ppUsageCounts-parameter\",\n\"VUID-VkAccelerationStructureTrianglesDisplacementMicromapNV-pUsageCounts-parameter\",\n\"VUID-VkAccelerationStructureTrianglesDisplacementMicromapNV-ppUsageCounts-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pSetLayouts-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pPushConstantRanges-parameter\",\n\"VUID-VkLatencySurfaceCapabilitiesNV-pPresentModes-parameter\",\n\"VUID-vkCmdBeginTransformFeedbackEXT-pCounterBufferOffsets-parameter\",\n\"VUID-vkCmdEndTransformFeedbackEXT-pCounterBufferOffsets-parameter\",\n\"VUID-vkCmdBindVertexBuffers2-pSizes-parameter\",\n\"VUID-vkCmdBindVertexBuffers2-pStrides-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pSampledImage-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pSampler-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pStorageImage-parameter\",\n\"VUID-vkGetAccelerationStructureBuildSizesKHR-pMaxPrimitiveCounts-parameter\",\n\"VUID-vkCmdDrawMultiIndexedEXT-pVertexOffset-parameter\",\n\"VUID-VkDisplayModeCreateInfoKHR-parameters-parameter\",\n// These occur in stateless validation when a pointer member is optional and the length member is null\n\"VUID-VkDeviceCreateInfo-pEnabledFeatures-parameter\",\n\"VUID-VkPipelineShaderStageCreateInfo-pSpecializationInfo-parameter\",\n\"VUID-VkSubpassDescription-pDepthStencilAttachment-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pSpecializationInfo-parameter\",\n\"VUID-VkExportFenceWin32HandleInfoKHR-pAttributes-parameter\",\n\"VUID-VkExportSemaphoreWin32HandleInfoKHR-pAttributes-parameter\",\n\"VUID-VkExportMemoryWin32HandleInfoKHR-pAttributes-parameter\",\n\"VUID-VkExportMemoryWin32HandleInfoNV-pAttributes-parameter\",\n\"VUID-vkEnumerateDeviceExtensionProperties-pProperties-parameter\",\n\"VUID-vkEnumerateDeviceLayerProperties-pProperties-parameter\",\n\"VUID-vkEnumerateInstanceExtensionProperties-pProperties-parameter\",\n\"VUID-vkEnumerateInstanceLayerProperties-pProperties-parameter\",\n// Checking for null-terminated UTF-8 string\n\"VUID-VkApplicationInfo-pApplicationName-parameter\",\n\"VUID-VkApplicationInfo-pEngineName-parameter\",\n\"VUID-VkDebugUtilsObjectNameInfoEXT-pObjectName-parameter\",\n\"VUID-VkDebugUtilsMessengerCallbackDataEXT-pMessageIdName-parameter\",\n\"VUID-VkPipelineShaderStageNodeCreateInfoAMDX-pName-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pName-parameter\",\n\"VUID-vkGetDeviceProcAddr-pName-parameter\",\n\"VUID-vkGetInstanceProcAddr-pName-parameter\",\n\"VUID-vkEnumerateDeviceExtensionProperties-pLayerName-parameter\",\n\"VUID-vkEnumerateInstanceExtensionProperties-pLayerName-parameter\",\n// Can't validate a VkAllocationCallbacks structure\n\"VUID-vkCreateAccelerationStructureKHR-pAllocator-parameter\",\n\"VUID-vkCreateAccelerationStructureNV-pAllocator-parameter\",\n\"VUID-vkCreateAndroidSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateBuffer-pAllocator-parameter\",\n\"VUID-vkCreateBufferCollectionFUCHSIA-pAllocator-parameter\",\n\"VUID-vkCreateBufferView-pAllocator-parameter\",\n\"VUID-vkCreateCommandPool-pAllocator-parameter\",\n\"VUID-vkCreateComputePipelines-pAllocator-parameter\",\n\"VUID-vkCreateCuFunctionNVX-pAllocator-parameter\",\n\"VUID-vkCreateCuModuleNVX-pAllocator-parameter\",\n\"VUID-vkCreateCudaFunctionNV-pAllocator-parameter\",\n\"VUID-vkCreateCudaModuleNV-pAllocator-parameter\",\n\"VUID-vkCreateDebugReportCallbackEXT-pAllocator-parameter\",\n\"VUID-vkCreateDebugUtilsMessengerEXT-pAllocator-parameter\",\n\"VUID-vkCreateDeferredOperationKHR-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorPool-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorSetLayout-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorUpdateTemplate-pAllocator-parameter\",\n\"VUID-vkCreateDevice-pAllocator-parameter\",\n\"VUID-vkCreateDirectFBSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateDisplayModeKHR-pAllocator-parameter\",\n\"VUID-vkCreateDisplayPlaneSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateEvent-pAllocator-parameter\",\n\"VUID-vkCreateExecutionGraphPipelinesAMDX-pAllocator-parameter\",\n\"VUID-vkCreateFence-pAllocator-parameter\",\n\"VUID-vkCreateFramebuffer-pAllocator-parameter\",\n\"VUID-vkCreateGraphicsPipelines-pAllocator-parameter\",\n\"VUID-vkCreateHeadlessSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateIOSSurfaceMVK-pAllocator-parameter\",\n\"VUID-vkCreateImage-pAllocator-parameter\",\n\"VUID-vkCreateImagePipeSurfaceFUCHSIA-pAllocator-parameter\",\n\"VUID-vkCreateImageView-pAllocator-parameter\",\n\"VUID-vkCreateIndirectCommandsLayoutNV-pAllocator-parameter\",\n\"VUID-vkCreateInstance-pAllocator-parameter\",\n\"VUID-vkCreateMacOSSurfaceMVK-pAllocator-parameter\",\n\"VUID-vkCreateMetalSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateMicromapEXT-pAllocator-parameter\",\n\"VUID-vkCreateOpticalFlowSessionNV-pAllocator-parameter\",\n\"VUID-vkCreatePipelineCache-pAllocator-parameter\",\n\"VUID-vkCreatePipelineLayout-pAllocator-parameter\",\n\"VUID-vkCreatePrivateDataSlot-pAllocator-parameter\",\n\"VUID-vkCreateQueryPool-pAllocator-parameter\",\n\"VUID-vkCreateRayTracingPipelinesKHR-pAllocator-parameter\",\n\"VUID-vkCreateRayTracingPipelinesNV-pAllocator-parameter\",\n\"VUID-vkCreateRenderPass-pAllocator-parameter\",\n\"VUID-vkCreateRenderPass2-pAllocator-parameter\",\n\"VUID-vkCreateSampler-pAllocator-parameter\",\n\"VUID-vkCreateSamplerYcbcrConversion-pAllocator-parameter\",\n\"VUID-vkCreateScreenSurfaceQNX-pAllocator-parameter\",\n\"VUID-vkCreateSemaphore-pAllocator-parameter\",\n\"VUID-vkCreateShaderModule-pAllocator-parameter\",\n\"VUID-vkCreateShadersEXT-pAllocator-parameter\",\n\"VUID-vkCreateSharedSwapchainsKHR-pAllocator-parameter\",\n\"VUID-vkCreateStreamDescriptorSurfaceGGP-pAllocator-parameter\",\n\"VUID-vkCreateSwapchainKHR-pAllocator-parameter\",\n\"VUID-vkCreateValidationCacheEXT-pAllocator-parameter\",\n\"VUID-vkCreateViSurfaceNN-pAllocator-parameter\",\n\"VUID-vkCreateVideoSessionKHR-pAllocator-parameter\",\n\"VUID-vkCreateVideoSessionParametersKHR-pAllocator-parameter\",\n\"VUID-vkCreateWaylandSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateWin32SurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateXcbSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateXlibSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkDestroyAccelerationStructureKHR-pAllocator-parameter\",\n\"VUID-vkDestroyAccelerationStructureNV-pAllocator-parameter\",\n\"VUID-vkDestroyBuffer-pAllocator-parameter\",\n\"VUID-vkDestroyBufferCollectionFUCHSIA-pAllocator-parameter\",\n\"VUID-vkDestroyBufferView-pAllocator-parameter\",\n\"VUID-vkDestroyCommandPool-pAllocator-parameter\",\n\"VUID-vkDestroyCuFunctionNVX-pAllocator-parameter\",\n\"VUID-vkDestroyCuModuleNVX-pAllocator-parameter\",\n\"VUID-vkDestroyCudaFunctionNV-pAllocator-parameter\",\n\"VUID-vkDestroyCudaModuleNV-pAllocator-parameter\",\n\"VUID-vkDestroyDebugReportCallbackEXT-pAllocator-parameter\",\n\"VUID-vkDestroyDebugUtilsMessengerEXT-pAllocator-parameter\",\n\"VUID-vkDestroyDeferredOperationKHR-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorPool-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorSetLayout-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorUpdateTemplate-pAllocator-parameter\",\n\"VUID-vkDestroyDevice-pAllocator-parameter\",\n\"VUID-vkDestroyEvent-pAllocator-parameter\",\n\"VUID-vkDestroyFence-pAllocator-parameter\",\n\"VUID-vkDestroyFramebuffer-pAllocator-parameter\",\n\"VUID-vkDestroyImage-pAllocator-parameter\",\n\"VUID-vkDestroyImageView-pAllocator-parameter\",\n\"VUID-vkDestroyIndirectCommandsLayoutNV-pAllocator-parameter\",\n\"VUID-vkDestroyInstance-pAllocator-parameter\",\n\"VUID-vkDestroyMicromapEXT-pAllocator-parameter\",\n\"VUID-vkDestroyOpticalFlowSessionNV-pAllocator-parameter\",\n\"VUID-vkDestroyPipeline-pAllocator-parameter\",\n\"VUID-vkDestroyPipelineCache-pAllocator-parameter\",\n\"VUID-vkDestroyPipelineLayout-pAllocator-parameter\",\n\"VUID-vkDestroyPrivateDataSlot-pAllocator-parameter\",\n\"VUID-vkDestroyQueryPool-pAllocator-parameter\",\n\"VUID-vkDestroyRenderPass-pAllocator-parameter\",\n\"VUID-vkDestroySampler-pAllocator-parameter\",\n\"VUID-vkDestroySamplerYcbcrConversion-pAllocator-parameter\",\n\"VUID-vkDestroySemaphore-pAllocator-parameter\",\n\"VUID-vkDestroyShaderEXT-pAllocator-parameter\",\n\"VUID-vkDestroyShaderModule-pAllocator-parameter\",\n\"VUID-vkDestroySurfaceKHR-pAllocator-parameter\",\n\"VUID-vkDestroySwapchainKHR-pAllocator-parameter\",\n\"VUID-vkDestroyValidationCacheEXT-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionKHR-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionParametersKHR-pAllocator-parameter\",\n\"VUID-vkFreeMemory-pAllocator-parameter\",\n\"VUID-vkRegisterDeviceEventEXT-pAllocator-parameter\",\n\"VUID-vkRegisterDisplayEventEXT-pAllocator-parameter\",\n\"VUID-vkAllocateMemory-pAllocator-parameter\",\n};\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkGetDeviceFaultInfoEXT-pFaultCounts-07338\", \"If the value referenced by pFaultCounts->vendorInfoCount is not 0, and pFaultInfo->pVendorInfos is not NULL, pFaultInfo->pVendorInfos must be a valid pointer to an array of pFaultCounts->vendorInfoCount VkDeviceFaultVendorInfoEXT structures\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "\"VUID-VkGraphicsPipelineCreateInfo-pRasterizationState-09040\",\n\"VUID-vkGetDeviceFaultInfoEXT-pFaultCounts-07337\",\n\"VUID-vkGetDeviceFaultInfoEXT-pFaultCounts-07338\",\n\"VUID-vkGetDeviceFaultInfoEXT-pFaultCounts-07339\",\n\"VUID-VkRenderingInputAttachmentIndexInfoKHR-pDepthInputAttachmentIndex-parameter\",\n\"VUID-VkRenderingInputAttachmentIndexInfoKHR-pStencilInputAttachmentIndex-parameter\"\n// These VUs have \"is not NULL it must be a pointer to a valid pointer to valid structure\" language\n// There is no actual way to validate thsese\n// https://gitlab.khronos.org/vulkan/vulkan/-/issues/3718\n\"VUID-VkDescriptorGetInfoEXT-pUniformTexelBuffer-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pStorageTexelBuffer-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pUniformBuffer-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pStorageBuffer-parameter\",\n// These occur in stateless validation when a pointer member is optional and the length member is also optional\n\"VUID-VkPipelineColorBlendStateCreateInfo-pAttachments-parameter\",\n\"VUID-VkSubpassDescription-pResolveAttachments-parameter\",\n\"VUID-VkTimelineSemaphoreSubmitInfo-pWaitSemaphoreValues-parameter\",\n\"VUID-VkTimelineSemaphoreSubmitInfo-pSignalSemaphoreValues-parameter\",\n\"VUID-VkVideoEncodeH264SessionParametersAddInfoKHR-pStdSPSs-parameter\",\n\"VUID-VkVideoEncodeH264SessionParametersAddInfoKHR-pStdPPSs-parameter\",\n\"VUID-VkVideoEncodeH265SessionParametersAddInfoKHR-pStdVPSs-parameter\",\n\"VUID-VkVideoEncodeH265SessionParametersAddInfoKHR-pStdSPSs-parameter\",\n\"VUID-VkVideoEncodeH265SessionParametersAddInfoKHR-pStdPPSs-parameter\",\n\"VUID-VkD3D12FenceSubmitInfoKHR-pWaitSemaphoreValues-parameter\",\n\"VUID-VkD3D12FenceSubmitInfoKHR-pSignalSemaphoreValues-parameter\",\n\"VUID-VkPresentRegionKHR-pRectangles-parameter\",\n\"VUID-VkBindDescriptorSetsInfoKHR-pDynamicOffsets-parameter\",\n\"VUID-VkPhysicalDeviceHostImageCopyPropertiesEXT-pCopySrcLayouts-parameter\",\n\"VUID-VkPhysicalDeviceHostImageCopyPropertiesEXT-pCopyDstLayouts-parameter\",\n\"VUID-VkSurfacePresentModeCompatibilityEXT-pPresentModes-parameter\",\n\"VUID-VkFrameBoundaryEXT-pImages-parameter\",\n\"VUID-VkFrameBoundaryEXT-pBuffers-parameter\",\n\"VUID-VkFrameBoundaryEXT-pTag-parameter\",\n\"VUID-VkMicromapBuildInfoEXT-pUsageCounts-parameter\",\n\"VUID-VkMicromapBuildInfoEXT-ppUsageCounts-parameter\",\n\"VUID-VkAccelerationStructureTrianglesOpacityMicromapEXT-pUsageCounts-parameter\",\n\"VUID-VkAccelerationStructureTrianglesOpacityMicromapEXT-ppUsageCounts-parameter\",\n\"VUID-VkAccelerationStructureTrianglesDisplacementMicromapNV-pUsageCounts-parameter\",\n\"VUID-VkAccelerationStructureTrianglesDisplacementMicromapNV-ppUsageCounts-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pSetLayouts-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pPushConstantRanges-parameter\",\n\"VUID-VkLatencySurfaceCapabilitiesNV-pPresentModes-parameter\",\n\"VUID-vkCmdBeginTransformFeedbackEXT-pCounterBufferOffsets-parameter\",\n\"VUID-vkCmdEndTransformFeedbackEXT-pCounterBufferOffsets-parameter\",\n\"VUID-vkCmdBindVertexBuffers2-pSizes-parameter\",\n\"VUID-vkCmdBindVertexBuffers2-pStrides-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pSampledImage-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pSampler-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pStorageImage-parameter\",\n\"VUID-vkGetAccelerationStructureBuildSizesKHR-pMaxPrimitiveCounts-parameter\",\n\"VUID-vkCmdDrawMultiIndexedEXT-pVertexOffset-parameter\",\n\"VUID-VkDisplayModeCreateInfoKHR-parameters-parameter\",\n// These occur in stateless validation when a pointer member is optional and the length member is null\n\"VUID-VkDeviceCreateInfo-pEnabledFeatures-parameter\",\n\"VUID-VkPipelineShaderStageCreateInfo-pSpecializationInfo-parameter\",\n\"VUID-VkSubpassDescription-pDepthStencilAttachment-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pSpecializationInfo-parameter\",\n\"VUID-VkExportFenceWin32HandleInfoKHR-pAttributes-parameter\",\n\"VUID-VkExportSemaphoreWin32HandleInfoKHR-pAttributes-parameter\",\n\"VUID-VkExportMemoryWin32HandleInfoKHR-pAttributes-parameter\",\n\"VUID-VkExportMemoryWin32HandleInfoNV-pAttributes-parameter\",\n\"VUID-vkEnumerateDeviceExtensionProperties-pProperties-parameter\",\n\"VUID-vkEnumerateDeviceLayerProperties-pProperties-parameter\",\n\"VUID-vkEnumerateInstanceExtensionProperties-pProperties-parameter\",\n\"VUID-vkEnumerateInstanceLayerProperties-pProperties-parameter\",\n// Checking for null-terminated UTF-8 string\n\"VUID-VkApplicationInfo-pApplicationName-parameter\",\n\"VUID-VkApplicationInfo-pEngineName-parameter\",\n\"VUID-VkDebugUtilsObjectNameInfoEXT-pObjectName-parameter\",\n\"VUID-VkDebugUtilsMessengerCallbackDataEXT-pMessageIdName-parameter\",\n\"VUID-VkPipelineShaderStageNodeCreateInfoAMDX-pName-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pName-parameter\",\n\"VUID-vkGetDeviceProcAddr-pName-parameter\",\n\"VUID-vkGetInstanceProcAddr-pName-parameter\",\n\"VUID-vkEnumerateDeviceExtensionProperties-pLayerName-parameter\",\n\"VUID-vkEnumerateInstanceExtensionProperties-pLayerName-parameter\",\n// Can't validate a VkAllocationCallbacks structure\n\"VUID-vkCreateAccelerationStructureKHR-pAllocator-parameter\",\n\"VUID-vkCreateAccelerationStructureNV-pAllocator-parameter\",\n\"VUID-vkCreateAndroidSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateBuffer-pAllocator-parameter\",\n\"VUID-vkCreateBufferCollectionFUCHSIA-pAllocator-parameter\",\n\"VUID-vkCreateBufferView-pAllocator-parameter\",\n\"VUID-vkCreateCommandPool-pAllocator-parameter\",\n\"VUID-vkCreateComputePipelines-pAllocator-parameter\",\n\"VUID-vkCreateCuFunctionNVX-pAllocator-parameter\",\n\"VUID-vkCreateCuModuleNVX-pAllocator-parameter\",\n\"VUID-vkCreateCudaFunctionNV-pAllocator-parameter\",\n\"VUID-vkCreateCudaModuleNV-pAllocator-parameter\",\n\"VUID-vkCreateDebugReportCallbackEXT-pAllocator-parameter\",\n\"VUID-vkCreateDebugUtilsMessengerEXT-pAllocator-parameter\",\n\"VUID-vkCreateDeferredOperationKHR-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorPool-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorSetLayout-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorUpdateTemplate-pAllocator-parameter\",\n\"VUID-vkCreateDevice-pAllocator-parameter\",\n\"VUID-vkCreateDirectFBSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateDisplayModeKHR-pAllocator-parameter\",\n\"VUID-vkCreateDisplayPlaneSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateEvent-pAllocator-parameter\",\n\"VUID-vkCreateExecutionGraphPipelinesAMDX-pAllocator-parameter\",\n\"VUID-vkCreateFence-pAllocator-parameter\",\n\"VUID-vkCreateFramebuffer-pAllocator-parameter\",\n\"VUID-vkCreateGraphicsPipelines-pAllocator-parameter\",\n\"VUID-vkCreateHeadlessSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateIOSSurfaceMVK-pAllocator-parameter\",\n\"VUID-vkCreateImage-pAllocator-parameter\",\n\"VUID-vkCreateImagePipeSurfaceFUCHSIA-pAllocator-parameter\",\n\"VUID-vkCreateImageView-pAllocator-parameter\",\n\"VUID-vkCreateIndirectCommandsLayoutNV-pAllocator-parameter\",\n\"VUID-vkCreateInstance-pAllocator-parameter\",\n\"VUID-vkCreateMacOSSurfaceMVK-pAllocator-parameter\",\n\"VUID-vkCreateMetalSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateMicromapEXT-pAllocator-parameter\",\n\"VUID-vkCreateOpticalFlowSessionNV-pAllocator-parameter\",\n\"VUID-vkCreatePipelineCache-pAllocator-parameter\",\n\"VUID-vkCreatePipelineLayout-pAllocator-parameter\",\n\"VUID-vkCreatePrivateDataSlot-pAllocator-parameter\",\n\"VUID-vkCreateQueryPool-pAllocator-parameter\",\n\"VUID-vkCreateRayTracingPipelinesKHR-pAllocator-parameter\",\n\"VUID-vkCreateRayTracingPipelinesNV-pAllocator-parameter\",\n\"VUID-vkCreateRenderPass-pAllocator-parameter\",\n\"VUID-vkCreateRenderPass2-pAllocator-parameter\",\n\"VUID-vkCreateSampler-pAllocator-parameter\",\n\"VUID-vkCreateSamplerYcbcrConversion-pAllocator-parameter\",\n\"VUID-vkCreateScreenSurfaceQNX-pAllocator-parameter\",\n\"VUID-vkCreateSemaphore-pAllocator-parameter\",\n\"VUID-vkCreateShaderModule-pAllocator-parameter\",\n\"VUID-vkCreateShadersEXT-pAllocator-parameter\",\n\"VUID-vkCreateSharedSwapchainsKHR-pAllocator-parameter\",\n\"VUID-vkCreateStreamDescriptorSurfaceGGP-pAllocator-parameter\",\n\"VUID-vkCreateSwapchainKHR-pAllocator-parameter\",\n\"VUID-vkCreateValidationCacheEXT-pAllocator-parameter\",\n\"VUID-vkCreateViSurfaceNN-pAllocator-parameter\",\n\"VUID-vkCreateVideoSessionKHR-pAllocator-parameter\",\n\"VUID-vkCreateVideoSessionParametersKHR-pAllocator-parameter\",\n\"VUID-vkCreateWaylandSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateWin32SurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateXcbSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateXlibSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkDestroyAccelerationStructureKHR-pAllocator-parameter\",\n\"VUID-vkDestroyAccelerationStructureNV-pAllocator-parameter\",\n\"VUID-vkDestroyBuffer-pAllocator-parameter\",\n\"VUID-vkDestroyBufferCollectionFUCHSIA-pAllocator-parameter\",\n\"VUID-vkDestroyBufferView-pAllocator-parameter\",\n\"VUID-vkDestroyCommandPool-pAllocator-parameter\",\n\"VUID-vkDestroyCuFunctionNVX-pAllocator-parameter\",\n\"VUID-vkDestroyCuModuleNVX-pAllocator-parameter\",\n\"VUID-vkDestroyCudaFunctionNV-pAllocator-parameter\",\n\"VUID-vkDestroyCudaModuleNV-pAllocator-parameter\",\n\"VUID-vkDestroyDebugReportCallbackEXT-pAllocator-parameter\",\n\"VUID-vkDestroyDebugUtilsMessengerEXT-pAllocator-parameter\",\n\"VUID-vkDestroyDeferredOperationKHR-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorPool-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorSetLayout-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorUpdateTemplate-pAllocator-parameter\",\n\"VUID-vkDestroyDevice-pAllocator-parameter\",\n\"VUID-vkDestroyEvent-pAllocator-parameter\",\n\"VUID-vkDestroyFence-pAllocator-parameter\",\n\"VUID-vkDestroyFramebuffer-pAllocator-parameter\",\n\"VUID-vkDestroyImage-pAllocator-parameter\",\n\"VUID-vkDestroyImageView-pAllocator-parameter\",\n\"VUID-vkDestroyIndirectCommandsLayoutNV-pAllocator-parameter\",\n\"VUID-vkDestroyInstance-pAllocator-parameter\",\n\"VUID-vkDestroyMicromapEXT-pAllocator-parameter\",\n\"VUID-vkDestroyOpticalFlowSessionNV-pAllocator-parameter\",\n\"VUID-vkDestroyPipeline-pAllocator-parameter\",\n\"VUID-vkDestroyPipelineCache-pAllocator-parameter\",\n\"VUID-vkDestroyPipelineLayout-pAllocator-parameter\",\n\"VUID-vkDestroyPrivateDataSlot-pAllocator-parameter\",\n\"VUID-vkDestroyQueryPool-pAllocator-parameter\",\n\"VUID-vkDestroyRenderPass-pAllocator-parameter\",\n\"VUID-vkDestroySampler-pAllocator-parameter\",\n\"VUID-vkDestroySamplerYcbcrConversion-pAllocator-parameter\",\n\"VUID-vkDestroySemaphore-pAllocator-parameter\",\n\"VUID-vkDestroyShaderEXT-pAllocator-parameter\",\n\"VUID-vkDestroyShaderModule-pAllocator-parameter\",\n\"VUID-vkDestroySurfaceKHR-pAllocator-parameter\",\n\"VUID-vkDestroySwapchainKHR-pAllocator-parameter\",\n\"VUID-vkDestroyValidationCacheEXT-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionKHR-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionParametersKHR-pAllocator-parameter\",\n\"VUID-vkFreeMemory-pAllocator-parameter\",\n\"VUID-vkRegisterDeviceEventEXT-pAllocator-parameter\",\n\"VUID-vkRegisterDisplayEventEXT-pAllocator-parameter\",\n\"VUID-vkAllocateMemory-pAllocator-parameter\",\n};\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkDescriptorGetInfoEXT-pStorageTexelBuffer-parameter\", \"If type is VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER, and if pStorageTexelBuffer is not NULL, the pStorageTexelBuffer member of data must be a valid pointer to a valid VkDescriptorAddressInfoEXT structure\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "\"VUID-VkDescriptorGetInfoEXT-pUniformTexelBuffer-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pStorageTexelBuffer-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pUniformBuffer-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pStorageBuffer-parameter\",\n// These occur in stateless validation when a pointer member is optional and the length member is also optional\n\"VUID-VkPipelineColorBlendStateCreateInfo-pAttachments-parameter\",\n\"VUID-VkSubpassDescription-pResolveAttachments-parameter\",\n\"VUID-VkTimelineSemaphoreSubmitInfo-pWaitSemaphoreValues-parameter\",\n\"VUID-VkTimelineSemaphoreSubmitInfo-pSignalSemaphoreValues-parameter\",\n\"VUID-VkVideoEncodeH264SessionParametersAddInfoKHR-pStdSPSs-parameter\",\n\"VUID-VkVideoEncodeH264SessionParametersAddInfoKHR-pStdPPSs-parameter\",\n\"VUID-VkVideoEncodeH265SessionParametersAddInfoKHR-pStdVPSs-parameter\",\n\"VUID-VkVideoEncodeH265SessionParametersAddInfoKHR-pStdSPSs-parameter\",\n\"VUID-VkVideoEncodeH265SessionParametersAddInfoKHR-pStdPPSs-parameter\",\n\"VUID-VkD3D12FenceSubmitInfoKHR-pWaitSemaphoreValues-parameter\",\n\"VUID-VkD3D12FenceSubmitInfoKHR-pSignalSemaphoreValues-parameter\",\n\"VUID-VkPresentRegionKHR-pRectangles-parameter\",\n\"VUID-VkBindDescriptorSetsInfoKHR-pDynamicOffsets-parameter\",\n\"VUID-VkPhysicalDeviceHostImageCopyPropertiesEXT-pCopySrcLayouts-parameter\",\n\"VUID-VkPhysicalDeviceHostImageCopyPropertiesEXT-pCopyDstLayouts-parameter\",\n\"VUID-VkSurfacePresentModeCompatibilityEXT-pPresentModes-parameter\",\n\"VUID-VkFrameBoundaryEXT-pImages-parameter\",\n\"VUID-VkFrameBoundaryEXT-pBuffers-parameter\",\n\"VUID-VkFrameBoundaryEXT-pTag-parameter\",\n\"VUID-VkMicromapBuildInfoEXT-pUsageCounts-parameter\",\n\"VUID-VkMicromapBuildInfoEXT-ppUsageCounts-parameter\",\n\"VUID-VkAccelerationStructureTrianglesOpacityMicromapEXT-pUsageCounts-parameter\",\n\"VUID-VkAccelerationStructureTrianglesOpacityMicromapEXT-ppUsageCounts-parameter\",\n\"VUID-VkAccelerationStructureTrianglesDisplacementMicromapNV-pUsageCounts-parameter\",\n\"VUID-VkAccelerationStructureTrianglesDisplacementMicromapNV-ppUsageCounts-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pSetLayouts-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pPushConstantRanges-parameter\",\n\"VUID-VkLatencySurfaceCapabilitiesNV-pPresentModes-parameter\",\n\"VUID-vkCmdBeginTransformFeedbackEXT-pCounterBufferOffsets-parameter\",\n\"VUID-vkCmdEndTransformFeedbackEXT-pCounterBufferOffsets-parameter\",\n\"VUID-vkCmdBindVertexBuffers2-pSizes-parameter\",\n\"VUID-vkCmdBindVertexBuffers2-pStrides-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pSampledImage-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pSampler-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pStorageImage-parameter\",\n\"VUID-vkGetAccelerationStructureBuildSizesKHR-pMaxPrimitiveCounts-parameter\",\n\"VUID-vkCmdDrawMultiIndexedEXT-pVertexOffset-parameter\",\n\"VUID-VkDisplayModeCreateInfoKHR-parameters-parameter\",\n// These occur in stateless validation when a pointer member is optional and the length member is null\n\"VUID-VkDeviceCreateInfo-pEnabledFeatures-parameter\",\n\"VUID-VkPipelineShaderStageCreateInfo-pSpecializationInfo-parameter\",\n\"VUID-VkSubpassDescription-pDepthStencilAttachment-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pSpecializationInfo-parameter\",\n\"VUID-VkExportFenceWin32HandleInfoKHR-pAttributes-parameter\",\n\"VUID-VkExportSemaphoreWin32HandleInfoKHR-pAttributes-parameter\",\n\"VUID-VkExportMemoryWin32HandleInfoKHR-pAttributes-parameter\",\n\"VUID-VkExportMemoryWin32HandleInfoNV-pAttributes-parameter\",\n\"VUID-vkEnumerateDeviceExtensionProperties-pProperties-parameter\",\n\"VUID-vkEnumerateDeviceLayerProperties-pProperties-parameter\",\n\"VUID-vkEnumerateInstanceExtensionProperties-pProperties-parameter\",\n\"VUID-vkEnumerateInstanceLayerProperties-pProperties-parameter\",\n// Checking for null-terminated UTF-8 string\n\"VUID-VkApplicationInfo-pApplicationName-parameter\",\n\"VUID-VkApplicationInfo-pEngineName-parameter\",\n\"VUID-VkDebugUtilsObjectNameInfoEXT-pObjectName-parameter\",\n\"VUID-VkDebugUtilsMessengerCallbackDataEXT-pMessageIdName-parameter\",\n\"VUID-VkPipelineShaderStageNodeCreateInfoAMDX-pName-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pName-parameter\",\n\"VUID-vkGetDeviceProcAddr-pName-parameter\",\n\"VUID-vkGetInstanceProcAddr-pName-parameter\",\n\"VUID-vkEnumerateDeviceExtensionProperties-pLayerName-parameter\",\n\"VUID-vkEnumerateInstanceExtensionProperties-pLayerName-parameter\",\n// Can't validate a VkAllocationCallbacks structure\n\"VUID-vkCreateAccelerationStructureKHR-pAllocator-parameter\",\n\"VUID-vkCreateAccelerationStructureNV-pAllocator-parameter\",\n\"VUID-vkCreateAndroidSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateBuffer-pAllocator-parameter\",\n\"VUID-vkCreateBufferCollectionFUCHSIA-pAllocator-parameter\",\n\"VUID-vkCreateBufferView-pAllocator-parameter\",\n\"VUID-vkCreateCommandPool-pAllocator-parameter\",\n\"VUID-vkCreateComputePipelines-pAllocator-parameter\",\n\"VUID-vkCreateCuFunctionNVX-pAllocator-parameter\",\n\"VUID-vkCreateCuModuleNVX-pAllocator-parameter\",\n\"VUID-vkCreateCudaFunctionNV-pAllocator-parameter\",\n\"VUID-vkCreateCudaModuleNV-pAllocator-parameter\",\n\"VUID-vkCreateDebugReportCallbackEXT-pAllocator-parameter\",\n\"VUID-vkCreateDebugUtilsMessengerEXT-pAllocator-parameter\",\n\"VUID-vkCreateDeferredOperationKHR-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorPool-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorSetLayout-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorUpdateTemplate-pAllocator-parameter\",\n\"VUID-vkCreateDevice-pAllocator-parameter\",\n\"VUID-vkCreateDirectFBSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateDisplayModeKHR-pAllocator-parameter\",\n\"VUID-vkCreateDisplayPlaneSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateEvent-pAllocator-parameter\",\n\"VUID-vkCreateExecutionGraphPipelinesAMDX-pAllocator-parameter\",\n\"VUID-vkCreateFence-pAllocator-parameter\",\n\"VUID-vkCreateFramebuffer-pAllocator-parameter\",\n\"VUID-vkCreateGraphicsPipelines-pAllocator-parameter\",\n\"VUID-vkCreateHeadlessSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateIOSSurfaceMVK-pAllocator-parameter\",\n\"VUID-vkCreateImage-pAllocator-parameter\",\n\"VUID-vkCreateImagePipeSurfaceFUCHSIA-pAllocator-parameter\",\n\"VUID-vkCreateImageView-pAllocator-parameter\",\n\"VUID-vkCreateIndirectCommandsLayoutNV-pAllocator-parameter\",\n\"VUID-vkCreateInstance-pAllocator-parameter\",\n\"VUID-vkCreateMacOSSurfaceMVK-pAllocator-parameter\",\n\"VUID-vkCreateMetalSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateMicromapEXT-pAllocator-parameter\",\n\"VUID-vkCreateOpticalFlowSessionNV-pAllocator-parameter\",\n\"VUID-vkCreatePipelineCache-pAllocator-parameter\",\n\"VUID-vkCreatePipelineLayout-pAllocator-parameter\",\n\"VUID-vkCreatePrivateDataSlot-pAllocator-parameter\",\n\"VUID-vkCreateQueryPool-pAllocator-parameter\",\n\"VUID-vkCreateRayTracingPipelinesKHR-pAllocator-parameter\",\n\"VUID-vkCreateRayTracingPipelinesNV-pAllocator-parameter\",\n\"VUID-vkCreateRenderPass-pAllocator-parameter\",\n\"VUID-vkCreateRenderPass2-pAllocator-parameter\",\n\"VUID-vkCreateSampler-pAllocator-parameter\",\n\"VUID-vkCreateSamplerYcbcrConversion-pAllocator-parameter\",\n\"VUID-vkCreateScreenSurfaceQNX-pAllocator-parameter\",\n\"VUID-vkCreateSemaphore-pAllocator-parameter\",\n\"VUID-vkCreateShaderModule-pAllocator-parameter\",\n\"VUID-vkCreateShadersEXT-pAllocator-parameter\",\n\"VUID-vkCreateSharedSwapchainsKHR-pAllocator-parameter\",\n\"VUID-vkCreateStreamDescriptorSurfaceGGP-pAllocator-parameter\",\n\"VUID-vkCreateSwapchainKHR-pAllocator-parameter\",\n\"VUID-vkCreateValidationCacheEXT-pAllocator-parameter\",\n\"VUID-vkCreateViSurfaceNN-pAllocator-parameter\",\n\"VUID-vkCreateVideoSessionKHR-pAllocator-parameter\",\n\"VUID-vkCreateVideoSessionParametersKHR-pAllocator-parameter\",\n\"VUID-vkCreateWaylandSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateWin32SurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateXcbSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateXlibSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkDestroyAccelerationStructureKHR-pAllocator-parameter\",\n\"VUID-vkDestroyAccelerationStructureNV-pAllocator-parameter\",\n\"VUID-vkDestroyBuffer-pAllocator-parameter\",\n\"VUID-vkDestroyBufferCollectionFUCHSIA-pAllocator-parameter\",\n\"VUID-vkDestroyBufferView-pAllocator-parameter\",\n\"VUID-vkDestroyCommandPool-pAllocator-parameter\",\n\"VUID-vkDestroyCuFunctionNVX-pAllocator-parameter\",\n\"VUID-vkDestroyCuModuleNVX-pAllocator-parameter\",\n\"VUID-vkDestroyCudaFunctionNV-pAllocator-parameter\",\n\"VUID-vkDestroyCudaModuleNV-pAllocator-parameter\",\n\"VUID-vkDestroyDebugReportCallbackEXT-pAllocator-parameter\",\n\"VUID-vkDestroyDebugUtilsMessengerEXT-pAllocator-parameter\",\n\"VUID-vkDestroyDeferredOperationKHR-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorPool-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorSetLayout-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorUpdateTemplate-pAllocator-parameter\",\n\"VUID-vkDestroyDevice-pAllocator-parameter\",\n\"VUID-vkDestroyEvent-pAllocator-parameter\",\n\"VUID-vkDestroyFence-pAllocator-parameter\",\n\"VUID-vkDestroyFramebuffer-pAllocator-parameter\",\n\"VUID-vkDestroyImage-pAllocator-parameter\",\n\"VUID-vkDestroyImageView-pAllocator-parameter\",\n\"VUID-vkDestroyIndirectCommandsLayoutNV-pAllocator-parameter\",\n\"VUID-vkDestroyInstance-pAllocator-parameter\",\n\"VUID-vkDestroyMicromapEXT-pAllocator-parameter\",\n\"VUID-vkDestroyOpticalFlowSessionNV-pAllocator-parameter\",\n\"VUID-vkDestroyPipeline-pAllocator-parameter\",\n\"VUID-vkDestroyPipelineCache-pAllocator-parameter\",\n\"VUID-vkDestroyPipelineLayout-pAllocator-parameter\",\n\"VUID-vkDestroyPrivateDataSlot-pAllocator-parameter\",\n\"VUID-vkDestroyQueryPool-pAllocator-parameter\",\n\"VUID-vkDestroyRenderPass-pAllocator-parameter\",\n\"VUID-vkDestroySampler-pAllocator-parameter\",\n\"VUID-vkDestroySamplerYcbcrConversion-pAllocator-parameter\",\n\"VUID-vkDestroySemaphore-pAllocator-parameter\",\n\"VUID-vkDestroyShaderEXT-pAllocator-parameter\",\n\"VUID-vkDestroyShaderModule-pAllocator-parameter\",\n\"VUID-vkDestroySurfaceKHR-pAllocator-parameter\",\n\"VUID-vkDestroySwapchainKHR-pAllocator-parameter\",\n\"VUID-vkDestroyValidationCacheEXT-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionKHR-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionParametersKHR-pAllocator-parameter\",\n\"VUID-vkFreeMemory-pAllocator-parameter\",\n\"VUID-vkRegisterDeviceEventEXT-pAllocator-parameter\",\n\"VUID-vkRegisterDisplayEventEXT-pAllocator-parameter\",\n\"VUID-vkAllocateMemory-pAllocator-parameter\",\n};\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkTimelineSemaphoreSubmitInfo-pWaitSemaphoreValues-parameter\", \"If waitSemaphoreValueCount is not 0, and pWaitSemaphoreValues is not NULL, pWaitSemaphoreValues must be a valid pointer to an array of waitSemaphoreValueCount uint64_t values\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "\"VUID-VkPipelineColorBlendStateCreateInfo-pAttachments-parameter\",\n\"VUID-VkSubpassDescription-pResolveAttachments-parameter\",\n\"VUID-VkTimelineSemaphoreSubmitInfo-pWaitSemaphoreValues-parameter\",\n\"VUID-VkTimelineSemaphoreSubmitInfo-pSignalSemaphoreValues-parameter\",\n\"VUID-VkVideoEncodeH264SessionParametersAddInfoKHR-pStdSPSs-parameter\",\n\"VUID-VkVideoEncodeH264SessionParametersAddInfoKHR-pStdPPSs-parameter\",\n\"VUID-VkVideoEncodeH265SessionParametersAddInfoKHR-pStdVPSs-parameter\",\n\"VUID-VkVideoEncodeH265SessionParametersAddInfoKHR-pStdSPSs-parameter\",\n\"VUID-VkVideoEncodeH265SessionParametersAddInfoKHR-pStdPPSs-parameter\",\n\"VUID-VkD3D12FenceSubmitInfoKHR-pWaitSemaphoreValues-parameter\",\n\"VUID-VkD3D12FenceSubmitInfoKHR-pSignalSemaphoreValues-parameter\",\n\"VUID-VkPresentRegionKHR-pRectangles-parameter\",\n\"VUID-VkBindDescriptorSetsInfoKHR-pDynamicOffsets-parameter\",\n\"VUID-VkPhysicalDeviceHostImageCopyPropertiesEXT-pCopySrcLayouts-parameter\",\n\"VUID-VkPhysicalDeviceHostImageCopyPropertiesEXT-pCopyDstLayouts-parameter\",\n\"VUID-VkSurfacePresentModeCompatibilityEXT-pPresentModes-parameter\",\n\"VUID-VkFrameBoundaryEXT-pImages-parameter\",\n\"VUID-VkFrameBoundaryEXT-pBuffers-parameter\",\n\"VUID-VkFrameBoundaryEXT-pTag-parameter\",\n\"VUID-VkMicromapBuildInfoEXT-pUsageCounts-parameter\",\n\"VUID-VkMicromapBuildInfoEXT-ppUsageCounts-parameter\",\n\"VUID-VkAccelerationStructureTrianglesOpacityMicromapEXT-pUsageCounts-parameter\",\n\"VUID-VkAccelerationStructureTrianglesOpacityMicromapEXT-ppUsageCounts-parameter\",\n\"VUID-VkAccelerationStructureTrianglesDisplacementMicromapNV-pUsageCounts-parameter\",\n\"VUID-VkAccelerationStructureTrianglesDisplacementMicromapNV-ppUsageCounts-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pSetLayouts-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pPushConstantRanges-parameter\",\n\"VUID-VkLatencySurfaceCapabilitiesNV-pPresentModes-parameter\",\n\"VUID-vkCmdBeginTransformFeedbackEXT-pCounterBufferOffsets-parameter\",\n\"VUID-vkCmdEndTransformFeedbackEXT-pCounterBufferOffsets-parameter\",\n\"VUID-vkCmdBindVertexBuffers2-pSizes-parameter\",\n\"VUID-vkCmdBindVertexBuffers2-pStrides-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pSampledImage-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pSampler-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pStorageImage-parameter\",\n\"VUID-vkGetAccelerationStructureBuildSizesKHR-pMaxPrimitiveCounts-parameter\",\n\"VUID-vkCmdDrawMultiIndexedEXT-pVertexOffset-parameter\",\n\"VUID-VkDisplayModeCreateInfoKHR-parameters-parameter\",\n// These occur in stateless validation when a pointer member is optional and the length member is null\n\"VUID-VkDeviceCreateInfo-pEnabledFeatures-parameter\",\n\"VUID-VkPipelineShaderStageCreateInfo-pSpecializationInfo-parameter\",\n\"VUID-VkSubpassDescription-pDepthStencilAttachment-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pSpecializationInfo-parameter\",\n\"VUID-VkExportFenceWin32HandleInfoKHR-pAttributes-parameter\",\n\"VUID-VkExportSemaphoreWin32HandleInfoKHR-pAttributes-parameter\",\n\"VUID-VkExportMemoryWin32HandleInfoKHR-pAttributes-parameter\",\n\"VUID-VkExportMemoryWin32HandleInfoNV-pAttributes-parameter\",\n\"VUID-vkEnumerateDeviceExtensionProperties-pProperties-parameter\",\n\"VUID-vkEnumerateDeviceLayerProperties-pProperties-parameter\",\n\"VUID-vkEnumerateInstanceExtensionProperties-pProperties-parameter\",\n\"VUID-vkEnumerateInstanceLayerProperties-pProperties-parameter\",\n// Checking for null-terminated UTF-8 string\n\"VUID-VkApplicationInfo-pApplicationName-parameter\",\n\"VUID-VkApplicationInfo-pEngineName-parameter\",\n\"VUID-VkDebugUtilsObjectNameInfoEXT-pObjectName-parameter\",\n\"VUID-VkDebugUtilsMessengerCallbackDataEXT-pMessageIdName-parameter\",\n\"VUID-VkPipelineShaderStageNodeCreateInfoAMDX-pName-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pName-parameter\",\n\"VUID-vkGetDeviceProcAddr-pName-parameter\",\n\"VUID-vkGetInstanceProcAddr-pName-parameter\",\n\"VUID-vkEnumerateDeviceExtensionProperties-pLayerName-parameter\",\n\"VUID-vkEnumerateInstanceExtensionProperties-pLayerName-parameter\",\n// Can't validate a VkAllocationCallbacks structure\n\"VUID-vkCreateAccelerationStructureKHR-pAllocator-parameter\",\n\"VUID-vkCreateAccelerationStructureNV-pAllocator-parameter\",\n\"VUID-vkCreateAndroidSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateBuffer-pAllocator-parameter\",\n\"VUID-vkCreateBufferCollectionFUCHSIA-pAllocator-parameter\",\n\"VUID-vkCreateBufferView-pAllocator-parameter\",\n\"VUID-vkCreateCommandPool-pAllocator-parameter\",\n\"VUID-vkCreateComputePipelines-pAllocator-parameter\",\n\"VUID-vkCreateCuFunctionNVX-pAllocator-parameter\",\n\"VUID-vkCreateCuModuleNVX-pAllocator-parameter\",\n\"VUID-vkCreateCudaFunctionNV-pAllocator-parameter\",\n\"VUID-vkCreateCudaModuleNV-pAllocator-parameter\",\n\"VUID-vkCreateDebugReportCallbackEXT-pAllocator-parameter\",\n\"VUID-vkCreateDebugUtilsMessengerEXT-pAllocator-parameter\",\n\"VUID-vkCreateDeferredOperationKHR-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorPool-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorSetLayout-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorUpdateTemplate-pAllocator-parameter\",\n\"VUID-vkCreateDevice-pAllocator-parameter\",\n\"VUID-vkCreateDirectFBSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateDisplayModeKHR-pAllocator-parameter\",\n\"VUID-vkCreateDisplayPlaneSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateEvent-pAllocator-parameter\",\n\"VUID-vkCreateExecutionGraphPipelinesAMDX-pAllocator-parameter\",\n\"VUID-vkCreateFence-pAllocator-parameter\",\n\"VUID-vkCreateFramebuffer-pAllocator-parameter\",\n\"VUID-vkCreateGraphicsPipelines-pAllocator-parameter\",\n\"VUID-vkCreateHeadlessSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateIOSSurfaceMVK-pAllocator-parameter\",\n\"VUID-vkCreateImage-pAllocator-parameter\",\n\"VUID-vkCreateImagePipeSurfaceFUCHSIA-pAllocator-parameter\",\n\"VUID-vkCreateImageView-pAllocator-parameter\",\n\"VUID-vkCreateIndirectCommandsLayoutNV-pAllocator-parameter\",\n\"VUID-vkCreateInstance-pAllocator-parameter\",\n\"VUID-vkCreateMacOSSurfaceMVK-pAllocator-parameter\",\n\"VUID-vkCreateMetalSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateMicromapEXT-pAllocator-parameter\",\n\"VUID-vkCreateOpticalFlowSessionNV-pAllocator-parameter\",\n\"VUID-vkCreatePipelineCache-pAllocator-parameter\",\n\"VUID-vkCreatePipelineLayout-pAllocator-parameter\",\n\"VUID-vkCreatePrivateDataSlot-pAllocator-parameter\",\n\"VUID-vkCreateQueryPool-pAllocator-parameter\",\n\"VUID-vkCreateRayTracingPipelinesKHR-pAllocator-parameter\",\n\"VUID-vkCreateRayTracingPipelinesNV-pAllocator-parameter\",\n\"VUID-vkCreateRenderPass-pAllocator-parameter\",\n\"VUID-vkCreateRenderPass2-pAllocator-parameter\",\n\"VUID-vkCreateSampler-pAllocator-parameter\",\n\"VUID-vkCreateSamplerYcbcrConversion-pAllocator-parameter\",\n\"VUID-vkCreateScreenSurfaceQNX-pAllocator-parameter\",\n\"VUID-vkCreateSemaphore-pAllocator-parameter\",\n\"VUID-vkCreateShaderModule-pAllocator-parameter\",\n\"VUID-vkCreateShadersEXT-pAllocator-parameter\",\n\"VUID-vkCreateSharedSwapchainsKHR-pAllocator-parameter\",\n\"VUID-vkCreateStreamDescriptorSurfaceGGP-pAllocator-parameter\",\n\"VUID-vkCreateSwapchainKHR-pAllocator-parameter\",\n\"VUID-vkCreateValidationCacheEXT-pAllocator-parameter\",\n\"VUID-vkCreateViSurfaceNN-pAllocator-parameter\",\n\"VUID-vkCreateVideoSessionKHR-pAllocator-parameter\",\n\"VUID-vkCreateVideoSessionParametersKHR-pAllocator-parameter\",\n\"VUID-vkCreateWaylandSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateWin32SurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateXcbSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateXlibSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkDestroyAccelerationStructureKHR-pAllocator-parameter\",\n\"VUID-vkDestroyAccelerationStructureNV-pAllocator-parameter\",\n\"VUID-vkDestroyBuffer-pAllocator-parameter\",\n\"VUID-vkDestroyBufferCollectionFUCHSIA-pAllocator-parameter\",\n\"VUID-vkDestroyBufferView-pAllocator-parameter\",\n\"VUID-vkDestroyCommandPool-pAllocator-parameter\",\n\"VUID-vkDestroyCuFunctionNVX-pAllocator-parameter\",\n\"VUID-vkDestroyCuModuleNVX-pAllocator-parameter\",\n\"VUID-vkDestroyCudaFunctionNV-pAllocator-parameter\",\n\"VUID-vkDestroyCudaModuleNV-pAllocator-parameter\",\n\"VUID-vkDestroyDebugReportCallbackEXT-pAllocator-parameter\",\n\"VUID-vkDestroyDebugUtilsMessengerEXT-pAllocator-parameter\",\n\"VUID-vkDestroyDeferredOperationKHR-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorPool-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorSetLayout-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorUpdateTemplate-pAllocator-parameter\",\n\"VUID-vkDestroyDevice-pAllocator-parameter\",\n\"VUID-vkDestroyEvent-pAllocator-parameter\",\n\"VUID-vkDestroyFence-pAllocator-parameter\",\n\"VUID-vkDestroyFramebuffer-pAllocator-parameter\",\n\"VUID-vkDestroyImage-pAllocator-parameter\",\n\"VUID-vkDestroyImageView-pAllocator-parameter\",\n\"VUID-vkDestroyIndirectCommandsLayoutNV-pAllocator-parameter\",\n\"VUID-vkDestroyInstance-pAllocator-parameter\",\n\"VUID-vkDestroyMicromapEXT-pAllocator-parameter\",\n\"VUID-vkDestroyOpticalFlowSessionNV-pAllocator-parameter\",\n\"VUID-vkDestroyPipeline-pAllocator-parameter\",\n\"VUID-vkDestroyPipelineCache-pAllocator-parameter\",\n\"VUID-vkDestroyPipelineLayout-pAllocator-parameter\",\n\"VUID-vkDestroyPrivateDataSlot-pAllocator-parameter\",\n\"VUID-vkDestroyQueryPool-pAllocator-parameter\",\n\"VUID-vkDestroyRenderPass-pAllocator-parameter\",\n\"VUID-vkDestroySampler-pAllocator-parameter\",\n\"VUID-vkDestroySamplerYcbcrConversion-pAllocator-parameter\",\n\"VUID-vkDestroySemaphore-pAllocator-parameter\",\n\"VUID-vkDestroyShaderEXT-pAllocator-parameter\",\n\"VUID-vkDestroyShaderModule-pAllocator-parameter\",\n\"VUID-vkDestroySurfaceKHR-pAllocator-parameter\",\n\"VUID-vkDestroySwapchainKHR-pAllocator-parameter\",\n\"VUID-vkDestroyValidationCacheEXT-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionKHR-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionParametersKHR-pAllocator-parameter\",\n\"VUID-vkFreeMemory-pAllocator-parameter\",\n\"VUID-vkRegisterDeviceEventEXT-pAllocator-parameter\",\n\"VUID-vkRegisterDisplayEventEXT-pAllocator-parameter\",\n\"VUID-vkAllocateMemory-pAllocator-parameter\",\n};\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkVideoEncodeH265SessionParametersAddInfoKHR-pStdSPSs-parameter\", \"If stdSPSCount is not 0, and pStdSPSs is not NULL, pStdSPSs must be a valid pointer to an array of stdSPSCount StdVideoH265SequenceParameterSet values\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "\"VUID-VkVideoEncodeH264SessionParametersAddInfoKHR-pStdSPSs-parameter\",\n\"VUID-VkVideoEncodeH264SessionParametersAddInfoKHR-pStdPPSs-parameter\",\n\"VUID-VkVideoEncodeH265SessionParametersAddInfoKHR-pStdVPSs-parameter\",\n\"VUID-VkVideoEncodeH265SessionParametersAddInfoKHR-pStdSPSs-parameter\",\n\"VUID-VkVideoEncodeH265SessionParametersAddInfoKHR-pStdPPSs-parameter\",\n\"VUID-VkD3D12FenceSubmitInfoKHR-pWaitSemaphoreValues-parameter\",\n\"VUID-VkD3D12FenceSubmitInfoKHR-pSignalSemaphoreValues-parameter\",\n\"VUID-VkPresentRegionKHR-pRectangles-parameter\",\n\"VUID-VkBindDescriptorSetsInfoKHR-pDynamicOffsets-parameter\",\n\"VUID-VkPhysicalDeviceHostImageCopyPropertiesEXT-pCopySrcLayouts-parameter\",\n\"VUID-VkPhysicalDeviceHostImageCopyPropertiesEXT-pCopyDstLayouts-parameter\",\n\"VUID-VkSurfacePresentModeCompatibilityEXT-pPresentModes-parameter\",\n\"VUID-VkFrameBoundaryEXT-pImages-parameter\",\n\"VUID-VkFrameBoundaryEXT-pBuffers-parameter\",\n\"VUID-VkFrameBoundaryEXT-pTag-parameter\",\n\"VUID-VkMicromapBuildInfoEXT-pUsageCounts-parameter\",\n\"VUID-VkMicromapBuildInfoEXT-ppUsageCounts-parameter\",\n\"VUID-VkAccelerationStructureTrianglesOpacityMicromapEXT-pUsageCounts-parameter\",\n\"VUID-VkAccelerationStructureTrianglesOpacityMicromapEXT-ppUsageCounts-parameter\",\n\"VUID-VkAccelerationStructureTrianglesDisplacementMicromapNV-pUsageCounts-parameter\",\n\"VUID-VkAccelerationStructureTrianglesDisplacementMicromapNV-ppUsageCounts-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pSetLayouts-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pPushConstantRanges-parameter\",\n\"VUID-VkLatencySurfaceCapabilitiesNV-pPresentModes-parameter\",\n\"VUID-vkCmdBeginTransformFeedbackEXT-pCounterBufferOffsets-parameter\",\n\"VUID-vkCmdEndTransformFeedbackEXT-pCounterBufferOffsets-parameter\",\n\"VUID-vkCmdBindVertexBuffers2-pSizes-parameter\",\n\"VUID-vkCmdBindVertexBuffers2-pStrides-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pSampledImage-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pSampler-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pStorageImage-parameter\",\n\"VUID-vkGetAccelerationStructureBuildSizesKHR-pMaxPrimitiveCounts-parameter\",\n\"VUID-vkCmdDrawMultiIndexedEXT-pVertexOffset-parameter\",\n\"VUID-VkDisplayModeCreateInfoKHR-parameters-parameter\",\n// These occur in stateless validation when a pointer member is optional and the length member is null\n\"VUID-VkDeviceCreateInfo-pEnabledFeatures-parameter\",\n\"VUID-VkPipelineShaderStageCreateInfo-pSpecializationInfo-parameter\",\n\"VUID-VkSubpassDescription-pDepthStencilAttachment-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pSpecializationInfo-parameter\",\n\"VUID-VkExportFenceWin32HandleInfoKHR-pAttributes-parameter\",\n\"VUID-VkExportSemaphoreWin32HandleInfoKHR-pAttributes-parameter\",\n\"VUID-VkExportMemoryWin32HandleInfoKHR-pAttributes-parameter\",\n\"VUID-VkExportMemoryWin32HandleInfoNV-pAttributes-parameter\",\n\"VUID-vkEnumerateDeviceExtensionProperties-pProperties-parameter\",\n\"VUID-vkEnumerateDeviceLayerProperties-pProperties-parameter\",\n\"VUID-vkEnumerateInstanceExtensionProperties-pProperties-parameter\",\n\"VUID-vkEnumerateInstanceLayerProperties-pProperties-parameter\",\n// Checking for null-terminated UTF-8 string\n\"VUID-VkApplicationInfo-pApplicationName-parameter\",\n\"VUID-VkApplicationInfo-pEngineName-parameter\",\n\"VUID-VkDebugUtilsObjectNameInfoEXT-pObjectName-parameter\",\n\"VUID-VkDebugUtilsMessengerCallbackDataEXT-pMessageIdName-parameter\",\n\"VUID-VkPipelineShaderStageNodeCreateInfoAMDX-pName-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pName-parameter\",\n\"VUID-vkGetDeviceProcAddr-pName-parameter\",\n\"VUID-vkGetInstanceProcAddr-pName-parameter\",\n\"VUID-vkEnumerateDeviceExtensionProperties-pLayerName-parameter\",\n\"VUID-vkEnumerateInstanceExtensionProperties-pLayerName-parameter\",\n// Can't validate a VkAllocationCallbacks structure\n\"VUID-vkCreateAccelerationStructureKHR-pAllocator-parameter\",\n\"VUID-vkCreateAccelerationStructureNV-pAllocator-parameter\",\n\"VUID-vkCreateAndroidSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateBuffer-pAllocator-parameter\",\n\"VUID-vkCreateBufferCollectionFUCHSIA-pAllocator-parameter\",\n\"VUID-vkCreateBufferView-pAllocator-parameter\",\n\"VUID-vkCreateCommandPool-pAllocator-parameter\",\n\"VUID-vkCreateComputePipelines-pAllocator-parameter\",\n\"VUID-vkCreateCuFunctionNVX-pAllocator-parameter\",\n\"VUID-vkCreateCuModuleNVX-pAllocator-parameter\",\n\"VUID-vkCreateCudaFunctionNV-pAllocator-parameter\",\n\"VUID-vkCreateCudaModuleNV-pAllocator-parameter\",\n\"VUID-vkCreateDebugReportCallbackEXT-pAllocator-parameter\",\n\"VUID-vkCreateDebugUtilsMessengerEXT-pAllocator-parameter\",\n\"VUID-vkCreateDeferredOperationKHR-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorPool-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorSetLayout-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorUpdateTemplate-pAllocator-parameter\",\n\"VUID-vkCreateDevice-pAllocator-parameter\",\n\"VUID-vkCreateDirectFBSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateDisplayModeKHR-pAllocator-parameter\",\n\"VUID-vkCreateDisplayPlaneSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateEvent-pAllocator-parameter\",\n\"VUID-vkCreateExecutionGraphPipelinesAMDX-pAllocator-parameter\",\n\"VUID-vkCreateFence-pAllocator-parameter\",\n\"VUID-vkCreateFramebuffer-pAllocator-parameter\",\n\"VUID-vkCreateGraphicsPipelines-pAllocator-parameter\",\n\"VUID-vkCreateHeadlessSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateIOSSurfaceMVK-pAllocator-parameter\",\n\"VUID-vkCreateImage-pAllocator-parameter\",\n\"VUID-vkCreateImagePipeSurfaceFUCHSIA-pAllocator-parameter\",\n\"VUID-vkCreateImageView-pAllocator-parameter\",\n\"VUID-vkCreateIndirectCommandsLayoutNV-pAllocator-parameter\",\n\"VUID-vkCreateInstance-pAllocator-parameter\",\n\"VUID-vkCreateMacOSSurfaceMVK-pAllocator-parameter\",\n\"VUID-vkCreateMetalSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateMicromapEXT-pAllocator-parameter\",\n\"VUID-vkCreateOpticalFlowSessionNV-pAllocator-parameter\",\n\"VUID-vkCreatePipelineCache-pAllocator-parameter\",\n\"VUID-vkCreatePipelineLayout-pAllocator-parameter\",\n\"VUID-vkCreatePrivateDataSlot-pAllocator-parameter\",\n\"VUID-vkCreateQueryPool-pAllocator-parameter\",\n\"VUID-vkCreateRayTracingPipelinesKHR-pAllocator-parameter\",\n\"VUID-vkCreateRayTracingPipelinesNV-pAllocator-parameter\",\n\"VUID-vkCreateRenderPass-pAllocator-parameter\",\n\"VUID-vkCreateRenderPass2-pAllocator-parameter\",\n\"VUID-vkCreateSampler-pAllocator-parameter\",\n\"VUID-vkCreateSamplerYcbcrConversion-pAllocator-parameter\",\n\"VUID-vkCreateScreenSurfaceQNX-pAllocator-parameter\",\n\"VUID-vkCreateSemaphore-pAllocator-parameter\",\n\"VUID-vkCreateShaderModule-pAllocator-parameter\",\n\"VUID-vkCreateShadersEXT-pAllocator-parameter\",\n\"VUID-vkCreateSharedSwapchainsKHR-pAllocator-parameter\",\n\"VUID-vkCreateStreamDescriptorSurfaceGGP-pAllocator-parameter\",\n\"VUID-vkCreateSwapchainKHR-pAllocator-parameter\",\n\"VUID-vkCreateValidationCacheEXT-pAllocator-parameter\",\n\"VUID-vkCreateViSurfaceNN-pAllocator-parameter\",\n\"VUID-vkCreateVideoSessionKHR-pAllocator-parameter\",\n\"VUID-vkCreateVideoSessionParametersKHR-pAllocator-parameter\",\n\"VUID-vkCreateWaylandSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateWin32SurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateXcbSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateXlibSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkDestroyAccelerationStructureKHR-pAllocator-parameter\",\n\"VUID-vkDestroyAccelerationStructureNV-pAllocator-parameter\",\n\"VUID-vkDestroyBuffer-pAllocator-parameter\",\n\"VUID-vkDestroyBufferCollectionFUCHSIA-pAllocator-parameter\",\n\"VUID-vkDestroyBufferView-pAllocator-parameter\",\n\"VUID-vkDestroyCommandPool-pAllocator-parameter\",\n\"VUID-vkDestroyCuFunctionNVX-pAllocator-parameter\",\n\"VUID-vkDestroyCuModuleNVX-pAllocator-parameter\",\n\"VUID-vkDestroyCudaFunctionNV-pAllocator-parameter\",\n\"VUID-vkDestroyCudaModuleNV-pAllocator-parameter\",\n\"VUID-vkDestroyDebugReportCallbackEXT-pAllocator-parameter\",\n\"VUID-vkDestroyDebugUtilsMessengerEXT-pAllocator-parameter\",\n\"VUID-vkDestroyDeferredOperationKHR-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorPool-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorSetLayout-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorUpdateTemplate-pAllocator-parameter\",\n\"VUID-vkDestroyDevice-pAllocator-parameter\",\n\"VUID-vkDestroyEvent-pAllocator-parameter\",\n\"VUID-vkDestroyFence-pAllocator-parameter\",\n\"VUID-vkDestroyFramebuffer-pAllocator-parameter\",\n\"VUID-vkDestroyImage-pAllocator-parameter\",\n\"VUID-vkDestroyImageView-pAllocator-parameter\",\n\"VUID-vkDestroyIndirectCommandsLayoutNV-pAllocator-parameter\",\n\"VUID-vkDestroyInstance-pAllocator-parameter\",\n\"VUID-vkDestroyMicromapEXT-pAllocator-parameter\",\n\"VUID-vkDestroyOpticalFlowSessionNV-pAllocator-parameter\",\n\"VUID-vkDestroyPipeline-pAllocator-parameter\",\n\"VUID-vkDestroyPipelineCache-pAllocator-parameter\",\n\"VUID-vkDestroyPipelineLayout-pAllocator-parameter\",\n\"VUID-vkDestroyPrivateDataSlot-pAllocator-parameter\",\n\"VUID-vkDestroyQueryPool-pAllocator-parameter\",\n\"VUID-vkDestroyRenderPass-pAllocator-parameter\",\n\"VUID-vkDestroySampler-pAllocator-parameter\",\n\"VUID-vkDestroySamplerYcbcrConversion-pAllocator-parameter\",\n\"VUID-vkDestroySemaphore-pAllocator-parameter\",\n\"VUID-vkDestroyShaderEXT-pAllocator-parameter\",\n\"VUID-vkDestroyShaderModule-pAllocator-parameter\",\n\"VUID-vkDestroySurfaceKHR-pAllocator-parameter\",\n\"VUID-vkDestroySwapchainKHR-pAllocator-parameter\",\n\"VUID-vkDestroyValidationCacheEXT-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionKHR-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionParametersKHR-pAllocator-parameter\",\n\"VUID-vkFreeMemory-pAllocator-parameter\",\n\"VUID-vkRegisterDeviceEventEXT-pAllocator-parameter\",\n\"VUID-vkRegisterDisplayEventEXT-pAllocator-parameter\",\n\"VUID-vkAllocateMemory-pAllocator-parameter\",\n};\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkBindDescriptorSetsInfoKHR-pDynamicOffsets-parameter\", \"If dynamicOffsetCount is not 0, and pDynamicOffsets is not NULL, pDynamicOffsets must be a valid pointer to an array of dynamicOffsetCount or VK_NULL_HANDLE uint32_t values\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "\"VUID-VkD3D12FenceSubmitInfoKHR-pWaitSemaphoreValues-parameter\",\n\"VUID-VkD3D12FenceSubmitInfoKHR-pSignalSemaphoreValues-parameter\",\n\"VUID-VkPresentRegionKHR-pRectangles-parameter\",\n\"VUID-VkBindDescriptorSetsInfoKHR-pDynamicOffsets-parameter\",\n\"VUID-VkPhysicalDeviceHostImageCopyPropertiesEXT-pCopySrcLayouts-parameter\",\n\"VUID-VkPhysicalDeviceHostImageCopyPropertiesEXT-pCopyDstLayouts-parameter\",\n\"VUID-VkSurfacePresentModeCompatibilityEXT-pPresentModes-parameter\",\n\"VUID-VkFrameBoundaryEXT-pImages-parameter\",\n\"VUID-VkFrameBoundaryEXT-pBuffers-parameter\",\n\"VUID-VkFrameBoundaryEXT-pTag-parameter\",\n\"VUID-VkMicromapBuildInfoEXT-pUsageCounts-parameter\",\n\"VUID-VkMicromapBuildInfoEXT-ppUsageCounts-parameter\",\n\"VUID-VkAccelerationStructureTrianglesOpacityMicromapEXT-pUsageCounts-parameter\",\n\"VUID-VkAccelerationStructureTrianglesOpacityMicromapEXT-ppUsageCounts-parameter\",\n\"VUID-VkAccelerationStructureTrianglesDisplacementMicromapNV-pUsageCounts-parameter\",\n\"VUID-VkAccelerationStructureTrianglesDisplacementMicromapNV-ppUsageCounts-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pSetLayouts-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pPushConstantRanges-parameter\",\n\"VUID-VkLatencySurfaceCapabilitiesNV-pPresentModes-parameter\",\n\"VUID-vkCmdBeginTransformFeedbackEXT-pCounterBufferOffsets-parameter\",\n\"VUID-vkCmdEndTransformFeedbackEXT-pCounterBufferOffsets-parameter\",\n\"VUID-vkCmdBindVertexBuffers2-pSizes-parameter\",\n\"VUID-vkCmdBindVertexBuffers2-pStrides-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pSampledImage-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pSampler-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pStorageImage-parameter\",\n\"VUID-vkGetAccelerationStructureBuildSizesKHR-pMaxPrimitiveCounts-parameter\",\n\"VUID-vkCmdDrawMultiIndexedEXT-pVertexOffset-parameter\",\n\"VUID-VkDisplayModeCreateInfoKHR-parameters-parameter\",\n// These occur in stateless validation when a pointer member is optional and the length member is null\n\"VUID-VkDeviceCreateInfo-pEnabledFeatures-parameter\",\n\"VUID-VkPipelineShaderStageCreateInfo-pSpecializationInfo-parameter\",\n\"VUID-VkSubpassDescription-pDepthStencilAttachment-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pSpecializationInfo-parameter\",\n\"VUID-VkExportFenceWin32HandleInfoKHR-pAttributes-parameter\",\n\"VUID-VkExportSemaphoreWin32HandleInfoKHR-pAttributes-parameter\",\n\"VUID-VkExportMemoryWin32HandleInfoKHR-pAttributes-parameter\",\n\"VUID-VkExportMemoryWin32HandleInfoNV-pAttributes-parameter\",\n\"VUID-vkEnumerateDeviceExtensionProperties-pProperties-parameter\",\n\"VUID-vkEnumerateDeviceLayerProperties-pProperties-parameter\",\n\"VUID-vkEnumerateInstanceExtensionProperties-pProperties-parameter\",\n\"VUID-vkEnumerateInstanceLayerProperties-pProperties-parameter\",\n// Checking for null-terminated UTF-8 string\n\"VUID-VkApplicationInfo-pApplicationName-parameter\",\n\"VUID-VkApplicationInfo-pEngineName-parameter\",\n\"VUID-VkDebugUtilsObjectNameInfoEXT-pObjectName-parameter\",\n\"VUID-VkDebugUtilsMessengerCallbackDataEXT-pMessageIdName-parameter\",\n\"VUID-VkPipelineShaderStageNodeCreateInfoAMDX-pName-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pName-parameter\",\n\"VUID-vkGetDeviceProcAddr-pName-parameter\",\n\"VUID-vkGetInstanceProcAddr-pName-parameter\",\n\"VUID-vkEnumerateDeviceExtensionProperties-pLayerName-parameter\",\n\"VUID-vkEnumerateInstanceExtensionProperties-pLayerName-parameter\",\n// Can't validate a VkAllocationCallbacks structure\n\"VUID-vkCreateAccelerationStructureKHR-pAllocator-parameter\",\n\"VUID-vkCreateAccelerationStructureNV-pAllocator-parameter\",\n\"VUID-vkCreateAndroidSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateBuffer-pAllocator-parameter\",\n\"VUID-vkCreateBufferCollectionFUCHSIA-pAllocator-parameter\",\n\"VUID-vkCreateBufferView-pAllocator-parameter\",\n\"VUID-vkCreateCommandPool-pAllocator-parameter\",\n\"VUID-vkCreateComputePipelines-pAllocator-parameter\",\n\"VUID-vkCreateCuFunctionNVX-pAllocator-parameter\",\n\"VUID-vkCreateCuModuleNVX-pAllocator-parameter\",\n\"VUID-vkCreateCudaFunctionNV-pAllocator-parameter\",\n\"VUID-vkCreateCudaModuleNV-pAllocator-parameter\",\n\"VUID-vkCreateDebugReportCallbackEXT-pAllocator-parameter\",\n\"VUID-vkCreateDebugUtilsMessengerEXT-pAllocator-parameter\",\n\"VUID-vkCreateDeferredOperationKHR-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorPool-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorSetLayout-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorUpdateTemplate-pAllocator-parameter\",\n\"VUID-vkCreateDevice-pAllocator-parameter\",\n\"VUID-vkCreateDirectFBSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateDisplayModeKHR-pAllocator-parameter\",\n\"VUID-vkCreateDisplayPlaneSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateEvent-pAllocator-parameter\",\n\"VUID-vkCreateExecutionGraphPipelinesAMDX-pAllocator-parameter\",\n\"VUID-vkCreateFence-pAllocator-parameter\",\n\"VUID-vkCreateFramebuffer-pAllocator-parameter\",\n\"VUID-vkCreateGraphicsPipelines-pAllocator-parameter\",\n\"VUID-vkCreateHeadlessSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateIOSSurfaceMVK-pAllocator-parameter\",\n\"VUID-vkCreateImage-pAllocator-parameter\",\n\"VUID-vkCreateImagePipeSurfaceFUCHSIA-pAllocator-parameter\",\n\"VUID-vkCreateImageView-pAllocator-parameter\",\n\"VUID-vkCreateIndirectCommandsLayoutNV-pAllocator-parameter\",\n\"VUID-vkCreateInstance-pAllocator-parameter\",\n\"VUID-vkCreateMacOSSurfaceMVK-pAllocator-parameter\",\n\"VUID-vkCreateMetalSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateMicromapEXT-pAllocator-parameter\",\n\"VUID-vkCreateOpticalFlowSessionNV-pAllocator-parameter\",\n\"VUID-vkCreatePipelineCache-pAllocator-parameter\",\n\"VUID-vkCreatePipelineLayout-pAllocator-parameter\",\n\"VUID-vkCreatePrivateDataSlot-pAllocator-parameter\",\n\"VUID-vkCreateQueryPool-pAllocator-parameter\",\n\"VUID-vkCreateRayTracingPipelinesKHR-pAllocator-parameter\",\n\"VUID-vkCreateRayTracingPipelinesNV-pAllocator-parameter\",\n\"VUID-vkCreateRenderPass-pAllocator-parameter\",\n\"VUID-vkCreateRenderPass2-pAllocator-parameter\",\n\"VUID-vkCreateSampler-pAllocator-parameter\",\n\"VUID-vkCreateSamplerYcbcrConversion-pAllocator-parameter\",\n\"VUID-vkCreateScreenSurfaceQNX-pAllocator-parameter\",\n\"VUID-vkCreateSemaphore-pAllocator-parameter\",\n\"VUID-vkCreateShaderModule-pAllocator-parameter\",\n\"VUID-vkCreateShadersEXT-pAllocator-parameter\",\n\"VUID-vkCreateSharedSwapchainsKHR-pAllocator-parameter\",\n\"VUID-vkCreateStreamDescriptorSurfaceGGP-pAllocator-parameter\",\n\"VUID-vkCreateSwapchainKHR-pAllocator-parameter\",\n\"VUID-vkCreateValidationCacheEXT-pAllocator-parameter\",\n\"VUID-vkCreateViSurfaceNN-pAllocator-parameter\",\n\"VUID-vkCreateVideoSessionKHR-pAllocator-parameter\",\n\"VUID-vkCreateVideoSessionParametersKHR-pAllocator-parameter\",\n\"VUID-vkCreateWaylandSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateWin32SurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateXcbSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateXlibSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkDestroyAccelerationStructureKHR-pAllocator-parameter\",\n\"VUID-vkDestroyAccelerationStructureNV-pAllocator-parameter\",\n\"VUID-vkDestroyBuffer-pAllocator-parameter\",\n\"VUID-vkDestroyBufferCollectionFUCHSIA-pAllocator-parameter\",\n\"VUID-vkDestroyBufferView-pAllocator-parameter\",\n\"VUID-vkDestroyCommandPool-pAllocator-parameter\",\n\"VUID-vkDestroyCuFunctionNVX-pAllocator-parameter\",\n\"VUID-vkDestroyCuModuleNVX-pAllocator-parameter\",\n\"VUID-vkDestroyCudaFunctionNV-pAllocator-parameter\",\n\"VUID-vkDestroyCudaModuleNV-pAllocator-parameter\",\n\"VUID-vkDestroyDebugReportCallbackEXT-pAllocator-parameter\",\n\"VUID-vkDestroyDebugUtilsMessengerEXT-pAllocator-parameter\",\n\"VUID-vkDestroyDeferredOperationKHR-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorPool-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorSetLayout-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorUpdateTemplate-pAllocator-parameter\",\n\"VUID-vkDestroyDevice-pAllocator-parameter\",\n\"VUID-vkDestroyEvent-pAllocator-parameter\",\n\"VUID-vkDestroyFence-pAllocator-parameter\",\n\"VUID-vkDestroyFramebuffer-pAllocator-parameter\",\n\"VUID-vkDestroyImage-pAllocator-parameter\",\n\"VUID-vkDestroyImageView-pAllocator-parameter\",\n\"VUID-vkDestroyIndirectCommandsLayoutNV-pAllocator-parameter\",\n\"VUID-vkDestroyInstance-pAllocator-parameter\",\n\"VUID-vkDestroyMicromapEXT-pAllocator-parameter\",\n\"VUID-vkDestroyOpticalFlowSessionNV-pAllocator-parameter\",\n\"VUID-vkDestroyPipeline-pAllocator-parameter\",\n\"VUID-vkDestroyPipelineCache-pAllocator-parameter\",\n\"VUID-vkDestroyPipelineLayout-pAllocator-parameter\",\n\"VUID-vkDestroyPrivateDataSlot-pAllocator-parameter\",\n\"VUID-vkDestroyQueryPool-pAllocator-parameter\",\n\"VUID-vkDestroyRenderPass-pAllocator-parameter\",\n\"VUID-vkDestroySampler-pAllocator-parameter\",\n\"VUID-vkDestroySamplerYcbcrConversion-pAllocator-parameter\",\n\"VUID-vkDestroySemaphore-pAllocator-parameter\",\n\"VUID-vkDestroyShaderEXT-pAllocator-parameter\",\n\"VUID-vkDestroyShaderModule-pAllocator-parameter\",\n\"VUID-vkDestroySurfaceKHR-pAllocator-parameter\",\n\"VUID-vkDestroySwapchainKHR-pAllocator-parameter\",\n\"VUID-vkDestroyValidationCacheEXT-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionKHR-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionParametersKHR-pAllocator-parameter\",\n\"VUID-vkFreeMemory-pAllocator-parameter\",\n\"VUID-vkRegisterDeviceEventEXT-pAllocator-parameter\",\n\"VUID-vkRegisterDisplayEventEXT-pAllocator-parameter\",\n\"VUID-vkAllocateMemory-pAllocator-parameter\",\n};\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkFrameBoundaryEXT-pBuffers-parameter\", \"If bufferCount is not 0, and pBuffers is not NULL, pBuffers must be a valid pointer to an array of bufferCount valid VkBuffer handles\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "\"VUID-VkPhysicalDeviceHostImageCopyPropertiesEXT-pCopyDstLayouts-parameter\",\n\"VUID-VkSurfacePresentModeCompatibilityEXT-pPresentModes-parameter\",\n\"VUID-VkFrameBoundaryEXT-pImages-parameter\",\n\"VUID-VkFrameBoundaryEXT-pBuffers-parameter\",\n\"VUID-VkFrameBoundaryEXT-pTag-parameter\",\n\"VUID-VkMicromapBuildInfoEXT-pUsageCounts-parameter\",\n\"VUID-VkMicromapBuildInfoEXT-ppUsageCounts-parameter\",\n\"VUID-VkAccelerationStructureTrianglesOpacityMicromapEXT-pUsageCounts-parameter\",\n\"VUID-VkAccelerationStructureTrianglesOpacityMicromapEXT-ppUsageCounts-parameter\",\n\"VUID-VkAccelerationStructureTrianglesDisplacementMicromapNV-pUsageCounts-parameter\",\n\"VUID-VkAccelerationStructureTrianglesDisplacementMicromapNV-ppUsageCounts-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pSetLayouts-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pPushConstantRanges-parameter\",\n\"VUID-VkLatencySurfaceCapabilitiesNV-pPresentModes-parameter\",\n\"VUID-vkCmdBeginTransformFeedbackEXT-pCounterBufferOffsets-parameter\",\n\"VUID-vkCmdEndTransformFeedbackEXT-pCounterBufferOffsets-parameter\",\n\"VUID-vkCmdBindVertexBuffers2-pSizes-parameter\",\n\"VUID-vkCmdBindVertexBuffers2-pStrides-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pSampledImage-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pSampler-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pStorageImage-parameter\",\n\"VUID-vkGetAccelerationStructureBuildSizesKHR-pMaxPrimitiveCounts-parameter\",\n\"VUID-vkCmdDrawMultiIndexedEXT-pVertexOffset-parameter\",\n\"VUID-VkDisplayModeCreateInfoKHR-parameters-parameter\",\n// These occur in stateless validation when a pointer member is optional and the length member is null\n\"VUID-VkDeviceCreateInfo-pEnabledFeatures-parameter\",\n\"VUID-VkPipelineShaderStageCreateInfo-pSpecializationInfo-parameter\",\n\"VUID-VkSubpassDescription-pDepthStencilAttachment-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pSpecializationInfo-parameter\",\n\"VUID-VkExportFenceWin32HandleInfoKHR-pAttributes-parameter\",\n\"VUID-VkExportSemaphoreWin32HandleInfoKHR-pAttributes-parameter\",\n\"VUID-VkExportMemoryWin32HandleInfoKHR-pAttributes-parameter\",\n\"VUID-VkExportMemoryWin32HandleInfoNV-pAttributes-parameter\",\n\"VUID-vkEnumerateDeviceExtensionProperties-pProperties-parameter\",\n\"VUID-vkEnumerateDeviceLayerProperties-pProperties-parameter\",\n\"VUID-vkEnumerateInstanceExtensionProperties-pProperties-parameter\",\n\"VUID-vkEnumerateInstanceLayerProperties-pProperties-parameter\",\n// Checking for null-terminated UTF-8 string\n\"VUID-VkApplicationInfo-pApplicationName-parameter\",\n\"VUID-VkApplicationInfo-pEngineName-parameter\",\n\"VUID-VkDebugUtilsObjectNameInfoEXT-pObjectName-parameter\",\n\"VUID-VkDebugUtilsMessengerCallbackDataEXT-pMessageIdName-parameter\",\n\"VUID-VkPipelineShaderStageNodeCreateInfoAMDX-pName-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pName-parameter\",\n\"VUID-vkGetDeviceProcAddr-pName-parameter\",\n\"VUID-vkGetInstanceProcAddr-pName-parameter\",\n\"VUID-vkEnumerateDeviceExtensionProperties-pLayerName-parameter\",\n\"VUID-vkEnumerateInstanceExtensionProperties-pLayerName-parameter\",\n// Can't validate a VkAllocationCallbacks structure\n\"VUID-vkCreateAccelerationStructureKHR-pAllocator-parameter\",\n\"VUID-vkCreateAccelerationStructureNV-pAllocator-parameter\",\n\"VUID-vkCreateAndroidSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateBuffer-pAllocator-parameter\",\n\"VUID-vkCreateBufferCollectionFUCHSIA-pAllocator-parameter\",\n\"VUID-vkCreateBufferView-pAllocator-parameter\",\n\"VUID-vkCreateCommandPool-pAllocator-parameter\",\n\"VUID-vkCreateComputePipelines-pAllocator-parameter\",\n\"VUID-vkCreateCuFunctionNVX-pAllocator-parameter\",\n\"VUID-vkCreateCuModuleNVX-pAllocator-parameter\",\n\"VUID-vkCreateCudaFunctionNV-pAllocator-parameter\",\n\"VUID-vkCreateCudaModuleNV-pAllocator-parameter\",\n\"VUID-vkCreateDebugReportCallbackEXT-pAllocator-parameter\",\n\"VUID-vkCreateDebugUtilsMessengerEXT-pAllocator-parameter\",\n\"VUID-vkCreateDeferredOperationKHR-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorPool-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorSetLayout-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorUpdateTemplate-pAllocator-parameter\",\n\"VUID-vkCreateDevice-pAllocator-parameter\",\n\"VUID-vkCreateDirectFBSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateDisplayModeKHR-pAllocator-parameter\",\n\"VUID-vkCreateDisplayPlaneSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateEvent-pAllocator-parameter\",\n\"VUID-vkCreateExecutionGraphPipelinesAMDX-pAllocator-parameter\",\n\"VUID-vkCreateFence-pAllocator-parameter\",\n\"VUID-vkCreateFramebuffer-pAllocator-parameter\",\n\"VUID-vkCreateGraphicsPipelines-pAllocator-parameter\",\n\"VUID-vkCreateHeadlessSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateIOSSurfaceMVK-pAllocator-parameter\",\n\"VUID-vkCreateImage-pAllocator-parameter\",\n\"VUID-vkCreateImagePipeSurfaceFUCHSIA-pAllocator-parameter\",\n\"VUID-vkCreateImageView-pAllocator-parameter\",\n\"VUID-vkCreateIndirectCommandsLayoutNV-pAllocator-parameter\",\n\"VUID-vkCreateInstance-pAllocator-parameter\",\n\"VUID-vkCreateMacOSSurfaceMVK-pAllocator-parameter\",\n\"VUID-vkCreateMetalSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateMicromapEXT-pAllocator-parameter\",\n\"VUID-vkCreateOpticalFlowSessionNV-pAllocator-parameter\",\n\"VUID-vkCreatePipelineCache-pAllocator-parameter\",\n\"VUID-vkCreatePipelineLayout-pAllocator-parameter\",\n\"VUID-vkCreatePrivateDataSlot-pAllocator-parameter\",\n\"VUID-vkCreateQueryPool-pAllocator-parameter\",\n\"VUID-vkCreateRayTracingPipelinesKHR-pAllocator-parameter\",\n\"VUID-vkCreateRayTracingPipelinesNV-pAllocator-parameter\",\n\"VUID-vkCreateRenderPass-pAllocator-parameter\",\n\"VUID-vkCreateRenderPass2-pAllocator-parameter\",\n\"VUID-vkCreateSampler-pAllocator-parameter\",\n\"VUID-vkCreateSamplerYcbcrConversion-pAllocator-parameter\",\n\"VUID-vkCreateScreenSurfaceQNX-pAllocator-parameter\",\n\"VUID-vkCreateSemaphore-pAllocator-parameter\",\n\"VUID-vkCreateShaderModule-pAllocator-parameter\",\n\"VUID-vkCreateShadersEXT-pAllocator-parameter\",\n\"VUID-vkCreateSharedSwapchainsKHR-pAllocator-parameter\",\n\"VUID-vkCreateStreamDescriptorSurfaceGGP-pAllocator-parameter\",\n\"VUID-vkCreateSwapchainKHR-pAllocator-parameter\",\n\"VUID-vkCreateValidationCacheEXT-pAllocator-parameter\",\n\"VUID-vkCreateViSurfaceNN-pAllocator-parameter\",\n\"VUID-vkCreateVideoSessionKHR-pAllocator-parameter\",\n\"VUID-vkCreateVideoSessionParametersKHR-pAllocator-parameter\",\n\"VUID-vkCreateWaylandSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateWin32SurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateXcbSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateXlibSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkDestroyAccelerationStructureKHR-pAllocator-parameter\",\n\"VUID-vkDestroyAccelerationStructureNV-pAllocator-parameter\",\n\"VUID-vkDestroyBuffer-pAllocator-parameter\",\n\"VUID-vkDestroyBufferCollectionFUCHSIA-pAllocator-parameter\",\n\"VUID-vkDestroyBufferView-pAllocator-parameter\",\n\"VUID-vkDestroyCommandPool-pAllocator-parameter\",\n\"VUID-vkDestroyCuFunctionNVX-pAllocator-parameter\",\n\"VUID-vkDestroyCuModuleNVX-pAllocator-parameter\",\n\"VUID-vkDestroyCudaFunctionNV-pAllocator-parameter\",\n\"VUID-vkDestroyCudaModuleNV-pAllocator-parameter\",\n\"VUID-vkDestroyDebugReportCallbackEXT-pAllocator-parameter\",\n\"VUID-vkDestroyDebugUtilsMessengerEXT-pAllocator-parameter\",\n\"VUID-vkDestroyDeferredOperationKHR-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorPool-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorSetLayout-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorUpdateTemplate-pAllocator-parameter\",\n\"VUID-vkDestroyDevice-pAllocator-parameter\",\n\"VUID-vkDestroyEvent-pAllocator-parameter\",\n\"VUID-vkDestroyFence-pAllocator-parameter\",\n\"VUID-vkDestroyFramebuffer-pAllocator-parameter\",\n\"VUID-vkDestroyImage-pAllocator-parameter\",\n\"VUID-vkDestroyImageView-pAllocator-parameter\",\n\"VUID-vkDestroyIndirectCommandsLayoutNV-pAllocator-parameter\",\n\"VUID-vkDestroyInstance-pAllocator-parameter\",\n\"VUID-vkDestroyMicromapEXT-pAllocator-parameter\",\n\"VUID-vkDestroyOpticalFlowSessionNV-pAllocator-parameter\",\n\"VUID-vkDestroyPipeline-pAllocator-parameter\",\n\"VUID-vkDestroyPipelineCache-pAllocator-parameter\",\n\"VUID-vkDestroyPipelineLayout-pAllocator-parameter\",\n\"VUID-vkDestroyPrivateDataSlot-pAllocator-parameter\",\n\"VUID-vkDestroyQueryPool-pAllocator-parameter\",\n\"VUID-vkDestroyRenderPass-pAllocator-parameter\",\n\"VUID-vkDestroySampler-pAllocator-parameter\",\n\"VUID-vkDestroySamplerYcbcrConversion-pAllocator-parameter\",\n\"VUID-vkDestroySemaphore-pAllocator-parameter\",\n\"VUID-vkDestroyShaderEXT-pAllocator-parameter\",\n\"VUID-vkDestroyShaderModule-pAllocator-parameter\",\n\"VUID-vkDestroySurfaceKHR-pAllocator-parameter\",\n\"VUID-vkDestroySwapchainKHR-pAllocator-parameter\",\n\"VUID-vkDestroyValidationCacheEXT-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionKHR-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionParametersKHR-pAllocator-parameter\",\n\"VUID-vkFreeMemory-pAllocator-parameter\",\n\"VUID-vkRegisterDeviceEventEXT-pAllocator-parameter\",\n\"VUID-vkRegisterDisplayEventEXT-pAllocator-parameter\",\n\"VUID-vkAllocateMemory-pAllocator-parameter\",\n};\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkAccelerationStructureTrianglesOpacityMicromapEXT-ppUsageCounts-parameter\", \"If usageCountsCount is not 0, and ppUsageCounts is not NULL, ppUsageCounts must be a valid pointer to an array of usageCountsCount valid pointers to VkMicromapUsageEXT structures\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "\"VUID-VkMicromapBuildInfoEXT-pUsageCounts-parameter\",\n\"VUID-VkMicromapBuildInfoEXT-ppUsageCounts-parameter\",\n\"VUID-VkAccelerationStructureTrianglesOpacityMicromapEXT-pUsageCounts-parameter\",\n\"VUID-VkAccelerationStructureTrianglesOpacityMicromapEXT-ppUsageCounts-parameter\",\n\"VUID-VkAccelerationStructureTrianglesDisplacementMicromapNV-pUsageCounts-parameter\",\n\"VUID-VkAccelerationStructureTrianglesDisplacementMicromapNV-ppUsageCounts-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pSetLayouts-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pPushConstantRanges-parameter\",\n\"VUID-VkLatencySurfaceCapabilitiesNV-pPresentModes-parameter\",\n\"VUID-vkCmdBeginTransformFeedbackEXT-pCounterBufferOffsets-parameter\",\n\"VUID-vkCmdEndTransformFeedbackEXT-pCounterBufferOffsets-parameter\",\n\"VUID-vkCmdBindVertexBuffers2-pSizes-parameter\",\n\"VUID-vkCmdBindVertexBuffers2-pStrides-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pSampledImage-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pSampler-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pStorageImage-parameter\",\n\"VUID-vkGetAccelerationStructureBuildSizesKHR-pMaxPrimitiveCounts-parameter\",\n\"VUID-vkCmdDrawMultiIndexedEXT-pVertexOffset-parameter\",\n\"VUID-VkDisplayModeCreateInfoKHR-parameters-parameter\",\n// These occur in stateless validation when a pointer member is optional and the length member is null\n\"VUID-VkDeviceCreateInfo-pEnabledFeatures-parameter\",\n\"VUID-VkPipelineShaderStageCreateInfo-pSpecializationInfo-parameter\",\n\"VUID-VkSubpassDescription-pDepthStencilAttachment-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pSpecializationInfo-parameter\",\n\"VUID-VkExportFenceWin32HandleInfoKHR-pAttributes-parameter\",\n\"VUID-VkExportSemaphoreWin32HandleInfoKHR-pAttributes-parameter\",\n\"VUID-VkExportMemoryWin32HandleInfoKHR-pAttributes-parameter\",\n\"VUID-VkExportMemoryWin32HandleInfoNV-pAttributes-parameter\",\n\"VUID-vkEnumerateDeviceExtensionProperties-pProperties-parameter\",\n\"VUID-vkEnumerateDeviceLayerProperties-pProperties-parameter\",\n\"VUID-vkEnumerateInstanceExtensionProperties-pProperties-parameter\",\n\"VUID-vkEnumerateInstanceLayerProperties-pProperties-parameter\",\n// Checking for null-terminated UTF-8 string\n\"VUID-VkApplicationInfo-pApplicationName-parameter\",\n\"VUID-VkApplicationInfo-pEngineName-parameter\",\n\"VUID-VkDebugUtilsObjectNameInfoEXT-pObjectName-parameter\",\n\"VUID-VkDebugUtilsMessengerCallbackDataEXT-pMessageIdName-parameter\",\n\"VUID-VkPipelineShaderStageNodeCreateInfoAMDX-pName-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pName-parameter\",\n\"VUID-vkGetDeviceProcAddr-pName-parameter\",\n\"VUID-vkGetInstanceProcAddr-pName-parameter\",\n\"VUID-vkEnumerateDeviceExtensionProperties-pLayerName-parameter\",\n\"VUID-vkEnumerateInstanceExtensionProperties-pLayerName-parameter\",\n// Can't validate a VkAllocationCallbacks structure\n\"VUID-vkCreateAccelerationStructureKHR-pAllocator-parameter\",\n\"VUID-vkCreateAccelerationStructureNV-pAllocator-parameter\",\n\"VUID-vkCreateAndroidSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateBuffer-pAllocator-parameter\",\n\"VUID-vkCreateBufferCollectionFUCHSIA-pAllocator-parameter\",\n\"VUID-vkCreateBufferView-pAllocator-parameter\",\n\"VUID-vkCreateCommandPool-pAllocator-parameter\",\n\"VUID-vkCreateComputePipelines-pAllocator-parameter\",\n\"VUID-vkCreateCuFunctionNVX-pAllocator-parameter\",\n\"VUID-vkCreateCuModuleNVX-pAllocator-parameter\",\n\"VUID-vkCreateCudaFunctionNV-pAllocator-parameter\",\n\"VUID-vkCreateCudaModuleNV-pAllocator-parameter\",\n\"VUID-vkCreateDebugReportCallbackEXT-pAllocator-parameter\",\n\"VUID-vkCreateDebugUtilsMessengerEXT-pAllocator-parameter\",\n\"VUID-vkCreateDeferredOperationKHR-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorPool-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorSetLayout-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorUpdateTemplate-pAllocator-parameter\",\n\"VUID-vkCreateDevice-pAllocator-parameter\",\n\"VUID-vkCreateDirectFBSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateDisplayModeKHR-pAllocator-parameter\",\n\"VUID-vkCreateDisplayPlaneSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateEvent-pAllocator-parameter\",\n\"VUID-vkCreateExecutionGraphPipelinesAMDX-pAllocator-parameter\",\n\"VUID-vkCreateFence-pAllocator-parameter\",\n\"VUID-vkCreateFramebuffer-pAllocator-parameter\",\n\"VUID-vkCreateGraphicsPipelines-pAllocator-parameter\",\n\"VUID-vkCreateHeadlessSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateIOSSurfaceMVK-pAllocator-parameter\",\n\"VUID-vkCreateImage-pAllocator-parameter\",\n\"VUID-vkCreateImagePipeSurfaceFUCHSIA-pAllocator-parameter\",\n\"VUID-vkCreateImageView-pAllocator-parameter\",\n\"VUID-vkCreateIndirectCommandsLayoutNV-pAllocator-parameter\",\n\"VUID-vkCreateInstance-pAllocator-parameter\",\n\"VUID-vkCreateMacOSSurfaceMVK-pAllocator-parameter\",\n\"VUID-vkCreateMetalSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateMicromapEXT-pAllocator-parameter\",\n\"VUID-vkCreateOpticalFlowSessionNV-pAllocator-parameter\",\n\"VUID-vkCreatePipelineCache-pAllocator-parameter\",\n\"VUID-vkCreatePipelineLayout-pAllocator-parameter\",\n\"VUID-vkCreatePrivateDataSlot-pAllocator-parameter\",\n\"VUID-vkCreateQueryPool-pAllocator-parameter\",\n\"VUID-vkCreateRayTracingPipelinesKHR-pAllocator-parameter\",\n\"VUID-vkCreateRayTracingPipelinesNV-pAllocator-parameter\",\n\"VUID-vkCreateRenderPass-pAllocator-parameter\",\n\"VUID-vkCreateRenderPass2-pAllocator-parameter\",\n\"VUID-vkCreateSampler-pAllocator-parameter\",\n\"VUID-vkCreateSamplerYcbcrConversion-pAllocator-parameter\",\n\"VUID-vkCreateScreenSurfaceQNX-pAllocator-parameter\",\n\"VUID-vkCreateSemaphore-pAllocator-parameter\",\n\"VUID-vkCreateShaderModule-pAllocator-parameter\",\n\"VUID-vkCreateShadersEXT-pAllocator-parameter\",\n\"VUID-vkCreateSharedSwapchainsKHR-pAllocator-parameter\",\n\"VUID-vkCreateStreamDescriptorSurfaceGGP-pAllocator-parameter\",\n\"VUID-vkCreateSwapchainKHR-pAllocator-parameter\",\n\"VUID-vkCreateValidationCacheEXT-pAllocator-parameter\",\n\"VUID-vkCreateViSurfaceNN-pAllocator-parameter\",\n\"VUID-vkCreateVideoSessionKHR-pAllocator-parameter\",\n\"VUID-vkCreateVideoSessionParametersKHR-pAllocator-parameter\",\n\"VUID-vkCreateWaylandSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateWin32SurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateXcbSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateXlibSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkDestroyAccelerationStructureKHR-pAllocator-parameter\",\n\"VUID-vkDestroyAccelerationStructureNV-pAllocator-parameter\",\n\"VUID-vkDestroyBuffer-pAllocator-parameter\",\n\"VUID-vkDestroyBufferCollectionFUCHSIA-pAllocator-parameter\",\n\"VUID-vkDestroyBufferView-pAllocator-parameter\",\n\"VUID-vkDestroyCommandPool-pAllocator-parameter\",\n\"VUID-vkDestroyCuFunctionNVX-pAllocator-parameter\",\n\"VUID-vkDestroyCuModuleNVX-pAllocator-parameter\",\n\"VUID-vkDestroyCudaFunctionNV-pAllocator-parameter\",\n\"VUID-vkDestroyCudaModuleNV-pAllocator-parameter\",\n\"VUID-vkDestroyDebugReportCallbackEXT-pAllocator-parameter\",\n\"VUID-vkDestroyDebugUtilsMessengerEXT-pAllocator-parameter\",\n\"VUID-vkDestroyDeferredOperationKHR-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorPool-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorSetLayout-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorUpdateTemplate-pAllocator-parameter\",\n\"VUID-vkDestroyDevice-pAllocator-parameter\",\n\"VUID-vkDestroyEvent-pAllocator-parameter\",\n\"VUID-vkDestroyFence-pAllocator-parameter\",\n\"VUID-vkDestroyFramebuffer-pAllocator-parameter\",\n\"VUID-vkDestroyImage-pAllocator-parameter\",\n\"VUID-vkDestroyImageView-pAllocator-parameter\",\n\"VUID-vkDestroyIndirectCommandsLayoutNV-pAllocator-parameter\",\n\"VUID-vkDestroyInstance-pAllocator-parameter\",\n\"VUID-vkDestroyMicromapEXT-pAllocator-parameter\",\n\"VUID-vkDestroyOpticalFlowSessionNV-pAllocator-parameter\",\n\"VUID-vkDestroyPipeline-pAllocator-parameter\",\n\"VUID-vkDestroyPipelineCache-pAllocator-parameter\",\n\"VUID-vkDestroyPipelineLayout-pAllocator-parameter\",\n\"VUID-vkDestroyPrivateDataSlot-pAllocator-parameter\",\n\"VUID-vkDestroyQueryPool-pAllocator-parameter\",\n\"VUID-vkDestroyRenderPass-pAllocator-parameter\",\n\"VUID-vkDestroySampler-pAllocator-parameter\",\n\"VUID-vkDestroySamplerYcbcrConversion-pAllocator-parameter\",\n\"VUID-vkDestroySemaphore-pAllocator-parameter\",\n\"VUID-vkDestroyShaderEXT-pAllocator-parameter\",\n\"VUID-vkDestroyShaderModule-pAllocator-parameter\",\n\"VUID-vkDestroySurfaceKHR-pAllocator-parameter\",\n\"VUID-vkDestroySwapchainKHR-pAllocator-parameter\",\n\"VUID-vkDestroyValidationCacheEXT-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionKHR-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionParametersKHR-pAllocator-parameter\",\n\"VUID-vkFreeMemory-pAllocator-parameter\",\n\"VUID-vkRegisterDeviceEventEXT-pAllocator-parameter\",\n\"VUID-vkRegisterDisplayEventEXT-pAllocator-parameter\",\n\"VUID-vkAllocateMemory-pAllocator-parameter\",\n};\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkLatencySurfaceCapabilitiesNV-pPresentModes-parameter\", \"If presentModeCount is not 0, and pPresentModes is not NULL, pPresentModes must be a valid pointer to an array of presentModeCount VkPresentModeKHR values\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "\"VUID-VkAccelerationStructureTrianglesDisplacementMicromapNV-ppUsageCounts-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pSetLayouts-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pPushConstantRanges-parameter\",\n\"VUID-VkLatencySurfaceCapabilitiesNV-pPresentModes-parameter\",\n\"VUID-vkCmdBeginTransformFeedbackEXT-pCounterBufferOffsets-parameter\",\n\"VUID-vkCmdEndTransformFeedbackEXT-pCounterBufferOffsets-parameter\",\n\"VUID-vkCmdBindVertexBuffers2-pSizes-parameter\",\n\"VUID-vkCmdBindVertexBuffers2-pStrides-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pSampledImage-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pSampler-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pStorageImage-parameter\",\n\"VUID-vkGetAccelerationStructureBuildSizesKHR-pMaxPrimitiveCounts-parameter\",\n\"VUID-vkCmdDrawMultiIndexedEXT-pVertexOffset-parameter\",\n\"VUID-VkDisplayModeCreateInfoKHR-parameters-parameter\",\n// These occur in stateless validation when a pointer member is optional and the length member is null\n\"VUID-VkDeviceCreateInfo-pEnabledFeatures-parameter\",\n\"VUID-VkPipelineShaderStageCreateInfo-pSpecializationInfo-parameter\",\n\"VUID-VkSubpassDescription-pDepthStencilAttachment-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pSpecializationInfo-parameter\",\n\"VUID-VkExportFenceWin32HandleInfoKHR-pAttributes-parameter\",\n\"VUID-VkExportSemaphoreWin32HandleInfoKHR-pAttributes-parameter\",\n\"VUID-VkExportMemoryWin32HandleInfoKHR-pAttributes-parameter\",\n\"VUID-VkExportMemoryWin32HandleInfoNV-pAttributes-parameter\",\n\"VUID-vkEnumerateDeviceExtensionProperties-pProperties-parameter\",\n\"VUID-vkEnumerateDeviceLayerProperties-pProperties-parameter\",\n\"VUID-vkEnumerateInstanceExtensionProperties-pProperties-parameter\",\n\"VUID-vkEnumerateInstanceLayerProperties-pProperties-parameter\",\n// Checking for null-terminated UTF-8 string\n\"VUID-VkApplicationInfo-pApplicationName-parameter\",\n\"VUID-VkApplicationInfo-pEngineName-parameter\",\n\"VUID-VkDebugUtilsObjectNameInfoEXT-pObjectName-parameter\",\n\"VUID-VkDebugUtilsMessengerCallbackDataEXT-pMessageIdName-parameter\",\n\"VUID-VkPipelineShaderStageNodeCreateInfoAMDX-pName-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pName-parameter\",\n\"VUID-vkGetDeviceProcAddr-pName-parameter\",\n\"VUID-vkGetInstanceProcAddr-pName-parameter\",\n\"VUID-vkEnumerateDeviceExtensionProperties-pLayerName-parameter\",\n\"VUID-vkEnumerateInstanceExtensionProperties-pLayerName-parameter\",\n// Can't validate a VkAllocationCallbacks structure\n\"VUID-vkCreateAccelerationStructureKHR-pAllocator-parameter\",\n\"VUID-vkCreateAccelerationStructureNV-pAllocator-parameter\",\n\"VUID-vkCreateAndroidSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateBuffer-pAllocator-parameter\",\n\"VUID-vkCreateBufferCollectionFUCHSIA-pAllocator-parameter\",\n\"VUID-vkCreateBufferView-pAllocator-parameter\",\n\"VUID-vkCreateCommandPool-pAllocator-parameter\",\n\"VUID-vkCreateComputePipelines-pAllocator-parameter\",\n\"VUID-vkCreateCuFunctionNVX-pAllocator-parameter\",\n\"VUID-vkCreateCuModuleNVX-pAllocator-parameter\",\n\"VUID-vkCreateCudaFunctionNV-pAllocator-parameter\",\n\"VUID-vkCreateCudaModuleNV-pAllocator-parameter\",\n\"VUID-vkCreateDebugReportCallbackEXT-pAllocator-parameter\",\n\"VUID-vkCreateDebugUtilsMessengerEXT-pAllocator-parameter\",\n\"VUID-vkCreateDeferredOperationKHR-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorPool-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorSetLayout-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorUpdateTemplate-pAllocator-parameter\",\n\"VUID-vkCreateDevice-pAllocator-parameter\",\n\"VUID-vkCreateDirectFBSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateDisplayModeKHR-pAllocator-parameter\",\n\"VUID-vkCreateDisplayPlaneSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateEvent-pAllocator-parameter\",\n\"VUID-vkCreateExecutionGraphPipelinesAMDX-pAllocator-parameter\",\n\"VUID-vkCreateFence-pAllocator-parameter\",\n\"VUID-vkCreateFramebuffer-pAllocator-parameter\",\n\"VUID-vkCreateGraphicsPipelines-pAllocator-parameter\",\n\"VUID-vkCreateHeadlessSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateIOSSurfaceMVK-pAllocator-parameter\",\n\"VUID-vkCreateImage-pAllocator-parameter\",\n\"VUID-vkCreateImagePipeSurfaceFUCHSIA-pAllocator-parameter\",\n\"VUID-vkCreateImageView-pAllocator-parameter\",\n\"VUID-vkCreateIndirectCommandsLayoutNV-pAllocator-parameter\",\n\"VUID-vkCreateInstance-pAllocator-parameter\",\n\"VUID-vkCreateMacOSSurfaceMVK-pAllocator-parameter\",\n\"VUID-vkCreateMetalSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateMicromapEXT-pAllocator-parameter\",\n\"VUID-vkCreateOpticalFlowSessionNV-pAllocator-parameter\",\n\"VUID-vkCreatePipelineCache-pAllocator-parameter\",\n\"VUID-vkCreatePipelineLayout-pAllocator-parameter\",\n\"VUID-vkCreatePrivateDataSlot-pAllocator-parameter\",\n\"VUID-vkCreateQueryPool-pAllocator-parameter\",\n\"VUID-vkCreateRayTracingPipelinesKHR-pAllocator-parameter\",\n\"VUID-vkCreateRayTracingPipelinesNV-pAllocator-parameter\",\n\"VUID-vkCreateRenderPass-pAllocator-parameter\",\n\"VUID-vkCreateRenderPass2-pAllocator-parameter\",\n\"VUID-vkCreateSampler-pAllocator-parameter\",\n\"VUID-vkCreateSamplerYcbcrConversion-pAllocator-parameter\",\n\"VUID-vkCreateScreenSurfaceQNX-pAllocator-parameter\",\n\"VUID-vkCreateSemaphore-pAllocator-parameter\",\n\"VUID-vkCreateShaderModule-pAllocator-parameter\",\n\"VUID-vkCreateShadersEXT-pAllocator-parameter\",\n\"VUID-vkCreateSharedSwapchainsKHR-pAllocator-parameter\",\n\"VUID-vkCreateStreamDescriptorSurfaceGGP-pAllocator-parameter\",\n\"VUID-vkCreateSwapchainKHR-pAllocator-parameter\",\n\"VUID-vkCreateValidationCacheEXT-pAllocator-parameter\",\n\"VUID-vkCreateViSurfaceNN-pAllocator-parameter\",\n\"VUID-vkCreateVideoSessionKHR-pAllocator-parameter\",\n\"VUID-vkCreateVideoSessionParametersKHR-pAllocator-parameter\",\n\"VUID-vkCreateWaylandSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateWin32SurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateXcbSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateXlibSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkDestroyAccelerationStructureKHR-pAllocator-parameter\",\n\"VUID-vkDestroyAccelerationStructureNV-pAllocator-parameter\",\n\"VUID-vkDestroyBuffer-pAllocator-parameter\",\n\"VUID-vkDestroyBufferCollectionFUCHSIA-pAllocator-parameter\",\n\"VUID-vkDestroyBufferView-pAllocator-parameter\",\n\"VUID-vkDestroyCommandPool-pAllocator-parameter\",\n\"VUID-vkDestroyCuFunctionNVX-pAllocator-parameter\",\n\"VUID-vkDestroyCuModuleNVX-pAllocator-parameter\",\n\"VUID-vkDestroyCudaFunctionNV-pAllocator-parameter\",\n\"VUID-vkDestroyCudaModuleNV-pAllocator-parameter\",\n\"VUID-vkDestroyDebugReportCallbackEXT-pAllocator-parameter\",\n\"VUID-vkDestroyDebugUtilsMessengerEXT-pAllocator-parameter\",\n\"VUID-vkDestroyDeferredOperationKHR-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorPool-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorSetLayout-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorUpdateTemplate-pAllocator-parameter\",\n\"VUID-vkDestroyDevice-pAllocator-parameter\",\n\"VUID-vkDestroyEvent-pAllocator-parameter\",\n\"VUID-vkDestroyFence-pAllocator-parameter\",\n\"VUID-vkDestroyFramebuffer-pAllocator-parameter\",\n\"VUID-vkDestroyImage-pAllocator-parameter\",\n\"VUID-vkDestroyImageView-pAllocator-parameter\",\n\"VUID-vkDestroyIndirectCommandsLayoutNV-pAllocator-parameter\",\n\"VUID-vkDestroyInstance-pAllocator-parameter\",\n\"VUID-vkDestroyMicromapEXT-pAllocator-parameter\",\n\"VUID-vkDestroyOpticalFlowSessionNV-pAllocator-parameter\",\n\"VUID-vkDestroyPipeline-pAllocator-parameter\",\n\"VUID-vkDestroyPipelineCache-pAllocator-parameter\",\n\"VUID-vkDestroyPipelineLayout-pAllocator-parameter\",\n\"VUID-vkDestroyPrivateDataSlot-pAllocator-parameter\",\n\"VUID-vkDestroyQueryPool-pAllocator-parameter\",\n\"VUID-vkDestroyRenderPass-pAllocator-parameter\",\n\"VUID-vkDestroySampler-pAllocator-parameter\",\n\"VUID-vkDestroySamplerYcbcrConversion-pAllocator-parameter\",\n\"VUID-vkDestroySemaphore-pAllocator-parameter\",\n\"VUID-vkDestroyShaderEXT-pAllocator-parameter\",\n\"VUID-vkDestroyShaderModule-pAllocator-parameter\",\n\"VUID-vkDestroySurfaceKHR-pAllocator-parameter\",\n\"VUID-vkDestroySwapchainKHR-pAllocator-parameter\",\n\"VUID-vkDestroyValidationCacheEXT-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionKHR-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionParametersKHR-pAllocator-parameter\",\n\"VUID-vkFreeMemory-pAllocator-parameter\",\n\"VUID-vkRegisterDeviceEventEXT-pAllocator-parameter\",\n\"VUID-vkRegisterDisplayEventEXT-pAllocator-parameter\",\n\"VUID-vkAllocateMemory-pAllocator-parameter\",\n};\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkDescriptorGetInfoEXT-pSampledImage-parameter\", \"If type is VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE, and if pSampledImage is not NULL, the pSampledImage member of data must be a valid pointer to a valid VkDescriptorImageInfo structure\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "\"VUID-vkCmdEndTransformFeedbackEXT-pCounterBufferOffsets-parameter\",\n\"VUID-vkCmdBindVertexBuffers2-pSizes-parameter\",\n\"VUID-vkCmdBindVertexBuffers2-pStrides-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pSampledImage-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pSampler-parameter\",\n\"VUID-VkDescriptorGetInfoEXT-pStorageImage-parameter\",\n\"VUID-vkGetAccelerationStructureBuildSizesKHR-pMaxPrimitiveCounts-parameter\",\n\"VUID-vkCmdDrawMultiIndexedEXT-pVertexOffset-parameter\",\n\"VUID-VkDisplayModeCreateInfoKHR-parameters-parameter\",\n// These occur in stateless validation when a pointer member is optional and the length member is null\n\"VUID-VkDeviceCreateInfo-pEnabledFeatures-parameter\",\n\"VUID-VkPipelineShaderStageCreateInfo-pSpecializationInfo-parameter\",\n\"VUID-VkSubpassDescription-pDepthStencilAttachment-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pSpecializationInfo-parameter\",\n\"VUID-VkExportFenceWin32HandleInfoKHR-pAttributes-parameter\",\n\"VUID-VkExportSemaphoreWin32HandleInfoKHR-pAttributes-parameter\",\n\"VUID-VkExportMemoryWin32HandleInfoKHR-pAttributes-parameter\",\n\"VUID-VkExportMemoryWin32HandleInfoNV-pAttributes-parameter\",\n\"VUID-vkEnumerateDeviceExtensionProperties-pProperties-parameter\",\n\"VUID-vkEnumerateDeviceLayerProperties-pProperties-parameter\",\n\"VUID-vkEnumerateInstanceExtensionProperties-pProperties-parameter\",\n\"VUID-vkEnumerateInstanceLayerProperties-pProperties-parameter\",\n// Checking for null-terminated UTF-8 string\n\"VUID-VkApplicationInfo-pApplicationName-parameter\",\n\"VUID-VkApplicationInfo-pEngineName-parameter\",\n\"VUID-VkDebugUtilsObjectNameInfoEXT-pObjectName-parameter\",\n\"VUID-VkDebugUtilsMessengerCallbackDataEXT-pMessageIdName-parameter\",\n\"VUID-VkPipelineShaderStageNodeCreateInfoAMDX-pName-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pName-parameter\",\n\"VUID-vkGetDeviceProcAddr-pName-parameter\",\n\"VUID-vkGetInstanceProcAddr-pName-parameter\",\n\"VUID-vkEnumerateDeviceExtensionProperties-pLayerName-parameter\",\n\"VUID-vkEnumerateInstanceExtensionProperties-pLayerName-parameter\",\n// Can't validate a VkAllocationCallbacks structure\n\"VUID-vkCreateAccelerationStructureKHR-pAllocator-parameter\",\n\"VUID-vkCreateAccelerationStructureNV-pAllocator-parameter\",\n\"VUID-vkCreateAndroidSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateBuffer-pAllocator-parameter\",\n\"VUID-vkCreateBufferCollectionFUCHSIA-pAllocator-parameter\",\n\"VUID-vkCreateBufferView-pAllocator-parameter\",\n\"VUID-vkCreateCommandPool-pAllocator-parameter\",\n\"VUID-vkCreateComputePipelines-pAllocator-parameter\",\n\"VUID-vkCreateCuFunctionNVX-pAllocator-parameter\",\n\"VUID-vkCreateCuModuleNVX-pAllocator-parameter\",\n\"VUID-vkCreateCudaFunctionNV-pAllocator-parameter\",\n\"VUID-vkCreateCudaModuleNV-pAllocator-parameter\",\n\"VUID-vkCreateDebugReportCallbackEXT-pAllocator-parameter\",\n\"VUID-vkCreateDebugUtilsMessengerEXT-pAllocator-parameter\",\n\"VUID-vkCreateDeferredOperationKHR-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorPool-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorSetLayout-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorUpdateTemplate-pAllocator-parameter\",\n\"VUID-vkCreateDevice-pAllocator-parameter\",\n\"VUID-vkCreateDirectFBSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateDisplayModeKHR-pAllocator-parameter\",\n\"VUID-vkCreateDisplayPlaneSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateEvent-pAllocator-parameter\",\n\"VUID-vkCreateExecutionGraphPipelinesAMDX-pAllocator-parameter\",\n\"VUID-vkCreateFence-pAllocator-parameter\",\n\"VUID-vkCreateFramebuffer-pAllocator-parameter\",\n\"VUID-vkCreateGraphicsPipelines-pAllocator-parameter\",\n\"VUID-vkCreateHeadlessSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateIOSSurfaceMVK-pAllocator-parameter\",\n\"VUID-vkCreateImage-pAllocator-parameter\",\n\"VUID-vkCreateImagePipeSurfaceFUCHSIA-pAllocator-parameter\",\n\"VUID-vkCreateImageView-pAllocator-parameter\",\n\"VUID-vkCreateIndirectCommandsLayoutNV-pAllocator-parameter\",\n\"VUID-vkCreateInstance-pAllocator-parameter\",\n\"VUID-vkCreateMacOSSurfaceMVK-pAllocator-parameter\",\n\"VUID-vkCreateMetalSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateMicromapEXT-pAllocator-parameter\",\n\"VUID-vkCreateOpticalFlowSessionNV-pAllocator-parameter\",\n\"VUID-vkCreatePipelineCache-pAllocator-parameter\",\n\"VUID-vkCreatePipelineLayout-pAllocator-parameter\",\n\"VUID-vkCreatePrivateDataSlot-pAllocator-parameter\",\n\"VUID-vkCreateQueryPool-pAllocator-parameter\",\n\"VUID-vkCreateRayTracingPipelinesKHR-pAllocator-parameter\",\n\"VUID-vkCreateRayTracingPipelinesNV-pAllocator-parameter\",\n\"VUID-vkCreateRenderPass-pAllocator-parameter\",\n\"VUID-vkCreateRenderPass2-pAllocator-parameter\",\n\"VUID-vkCreateSampler-pAllocator-parameter\",\n\"VUID-vkCreateSamplerYcbcrConversion-pAllocator-parameter\",\n\"VUID-vkCreateScreenSurfaceQNX-pAllocator-parameter\",\n\"VUID-vkCreateSemaphore-pAllocator-parameter\",\n\"VUID-vkCreateShaderModule-pAllocator-parameter\",\n\"VUID-vkCreateShadersEXT-pAllocator-parameter\",\n\"VUID-vkCreateSharedSwapchainsKHR-pAllocator-parameter\",\n\"VUID-vkCreateStreamDescriptorSurfaceGGP-pAllocator-parameter\",\n\"VUID-vkCreateSwapchainKHR-pAllocator-parameter\",\n\"VUID-vkCreateValidationCacheEXT-pAllocator-parameter\",\n\"VUID-vkCreateViSurfaceNN-pAllocator-parameter\",\n\"VUID-vkCreateVideoSessionKHR-pAllocator-parameter\",\n\"VUID-vkCreateVideoSessionParametersKHR-pAllocator-parameter\",\n\"VUID-vkCreateWaylandSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateWin32SurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateXcbSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateXlibSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkDestroyAccelerationStructureKHR-pAllocator-parameter\",\n\"VUID-vkDestroyAccelerationStructureNV-pAllocator-parameter\",\n\"VUID-vkDestroyBuffer-pAllocator-parameter\",\n\"VUID-vkDestroyBufferCollectionFUCHSIA-pAllocator-parameter\",\n\"VUID-vkDestroyBufferView-pAllocator-parameter\",\n\"VUID-vkDestroyCommandPool-pAllocator-parameter\",\n\"VUID-vkDestroyCuFunctionNVX-pAllocator-parameter\",\n\"VUID-vkDestroyCuModuleNVX-pAllocator-parameter\",\n\"VUID-vkDestroyCudaFunctionNV-pAllocator-parameter\",\n\"VUID-vkDestroyCudaModuleNV-pAllocator-parameter\",\n\"VUID-vkDestroyDebugReportCallbackEXT-pAllocator-parameter\",\n\"VUID-vkDestroyDebugUtilsMessengerEXT-pAllocator-parameter\",\n\"VUID-vkDestroyDeferredOperationKHR-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorPool-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorSetLayout-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorUpdateTemplate-pAllocator-parameter\",\n\"VUID-vkDestroyDevice-pAllocator-parameter\",\n\"VUID-vkDestroyEvent-pAllocator-parameter\",\n\"VUID-vkDestroyFence-pAllocator-parameter\",\n\"VUID-vkDestroyFramebuffer-pAllocator-parameter\",\n\"VUID-vkDestroyImage-pAllocator-parameter\",\n\"VUID-vkDestroyImageView-pAllocator-parameter\",\n\"VUID-vkDestroyIndirectCommandsLayoutNV-pAllocator-parameter\",\n\"VUID-vkDestroyInstance-pAllocator-parameter\",\n\"VUID-vkDestroyMicromapEXT-pAllocator-parameter\",\n\"VUID-vkDestroyOpticalFlowSessionNV-pAllocator-parameter\",\n\"VUID-vkDestroyPipeline-pAllocator-parameter\",\n\"VUID-vkDestroyPipelineCache-pAllocator-parameter\",\n\"VUID-vkDestroyPipelineLayout-pAllocator-parameter\",\n\"VUID-vkDestroyPrivateDataSlot-pAllocator-parameter\",\n\"VUID-vkDestroyQueryPool-pAllocator-parameter\",\n\"VUID-vkDestroyRenderPass-pAllocator-parameter\",\n\"VUID-vkDestroySampler-pAllocator-parameter\",\n\"VUID-vkDestroySamplerYcbcrConversion-pAllocator-parameter\",\n\"VUID-vkDestroySemaphore-pAllocator-parameter\",\n\"VUID-vkDestroyShaderEXT-pAllocator-parameter\",\n\"VUID-vkDestroyShaderModule-pAllocator-parameter\",\n\"VUID-vkDestroySurfaceKHR-pAllocator-parameter\",\n\"VUID-vkDestroySwapchainKHR-pAllocator-parameter\",\n\"VUID-vkDestroyValidationCacheEXT-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionKHR-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionParametersKHR-pAllocator-parameter\",\n\"VUID-vkFreeMemory-pAllocator-parameter\",\n\"VUID-vkRegisterDeviceEventEXT-pAllocator-parameter\",\n\"VUID-vkRegisterDisplayEventEXT-pAllocator-parameter\",\n\"VUID-vkAllocateMemory-pAllocator-parameter\",\n};\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkDisplayModeCreateInfoKHR-parameters-parameter\", \"parameters must be a valid VkDisplayModeParametersKHR structure\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "\"VUID-VkDescriptorGetInfoEXT-pStorageImage-parameter\",\n\"VUID-vkGetAccelerationStructureBuildSizesKHR-pMaxPrimitiveCounts-parameter\",\n\"VUID-vkCmdDrawMultiIndexedEXT-pVertexOffset-parameter\",\n\"VUID-VkDisplayModeCreateInfoKHR-parameters-parameter\",\n// These occur in stateless validation when a pointer member is optional and the length member is null\n\"VUID-VkDeviceCreateInfo-pEnabledFeatures-parameter\",\n\"VUID-VkPipelineShaderStageCreateInfo-pSpecializationInfo-parameter\",\n\"VUID-VkSubpassDescription-pDepthStencilAttachment-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pSpecializationInfo-parameter\",\n\"VUID-VkExportFenceWin32HandleInfoKHR-pAttributes-parameter\",\n\"VUID-VkExportSemaphoreWin32HandleInfoKHR-pAttributes-parameter\",\n\"VUID-VkExportMemoryWin32HandleInfoKHR-pAttributes-parameter\",\n\"VUID-VkExportMemoryWin32HandleInfoNV-pAttributes-parameter\",\n\"VUID-vkEnumerateDeviceExtensionProperties-pProperties-parameter\",\n\"VUID-vkEnumerateDeviceLayerProperties-pProperties-parameter\",\n\"VUID-vkEnumerateInstanceExtensionProperties-pProperties-parameter\",\n\"VUID-vkEnumerateInstanceLayerProperties-pProperties-parameter\",\n// Checking for null-terminated UTF-8 string\n\"VUID-VkApplicationInfo-pApplicationName-parameter\",\n\"VUID-VkApplicationInfo-pEngineName-parameter\",\n\"VUID-VkDebugUtilsObjectNameInfoEXT-pObjectName-parameter\",\n\"VUID-VkDebugUtilsMessengerCallbackDataEXT-pMessageIdName-parameter\",\n\"VUID-VkPipelineShaderStageNodeCreateInfoAMDX-pName-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pName-parameter\",\n\"VUID-vkGetDeviceProcAddr-pName-parameter\",\n\"VUID-vkGetInstanceProcAddr-pName-parameter\",\n\"VUID-vkEnumerateDeviceExtensionProperties-pLayerName-parameter\",\n\"VUID-vkEnumerateInstanceExtensionProperties-pLayerName-parameter\",\n// Can't validate a VkAllocationCallbacks structure\n\"VUID-vkCreateAccelerationStructureKHR-pAllocator-parameter\",\n\"VUID-vkCreateAccelerationStructureNV-pAllocator-parameter\",\n\"VUID-vkCreateAndroidSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateBuffer-pAllocator-parameter\",\n\"VUID-vkCreateBufferCollectionFUCHSIA-pAllocator-parameter\",\n\"VUID-vkCreateBufferView-pAllocator-parameter\",\n\"VUID-vkCreateCommandPool-pAllocator-parameter\",\n\"VUID-vkCreateComputePipelines-pAllocator-parameter\",\n\"VUID-vkCreateCuFunctionNVX-pAllocator-parameter\",\n\"VUID-vkCreateCuModuleNVX-pAllocator-parameter\",\n\"VUID-vkCreateCudaFunctionNV-pAllocator-parameter\",\n\"VUID-vkCreateCudaModuleNV-pAllocator-parameter\",\n\"VUID-vkCreateDebugReportCallbackEXT-pAllocator-parameter\",\n\"VUID-vkCreateDebugUtilsMessengerEXT-pAllocator-parameter\",\n\"VUID-vkCreateDeferredOperationKHR-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorPool-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorSetLayout-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorUpdateTemplate-pAllocator-parameter\",\n\"VUID-vkCreateDevice-pAllocator-parameter\",\n\"VUID-vkCreateDirectFBSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateDisplayModeKHR-pAllocator-parameter\",\n\"VUID-vkCreateDisplayPlaneSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateEvent-pAllocator-parameter\",\n\"VUID-vkCreateExecutionGraphPipelinesAMDX-pAllocator-parameter\",\n\"VUID-vkCreateFence-pAllocator-parameter\",\n\"VUID-vkCreateFramebuffer-pAllocator-parameter\",\n\"VUID-vkCreateGraphicsPipelines-pAllocator-parameter\",\n\"VUID-vkCreateHeadlessSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateIOSSurfaceMVK-pAllocator-parameter\",\n\"VUID-vkCreateImage-pAllocator-parameter\",\n\"VUID-vkCreateImagePipeSurfaceFUCHSIA-pAllocator-parameter\",\n\"VUID-vkCreateImageView-pAllocator-parameter\",\n\"VUID-vkCreateIndirectCommandsLayoutNV-pAllocator-parameter\",\n\"VUID-vkCreateInstance-pAllocator-parameter\",\n\"VUID-vkCreateMacOSSurfaceMVK-pAllocator-parameter\",\n\"VUID-vkCreateMetalSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateMicromapEXT-pAllocator-parameter\",\n\"VUID-vkCreateOpticalFlowSessionNV-pAllocator-parameter\",\n\"VUID-vkCreatePipelineCache-pAllocator-parameter\",\n\"VUID-vkCreatePipelineLayout-pAllocator-parameter\",\n\"VUID-vkCreatePrivateDataSlot-pAllocator-parameter\",\n\"VUID-vkCreateQueryPool-pAllocator-parameter\",\n\"VUID-vkCreateRayTracingPipelinesKHR-pAllocator-parameter\",\n\"VUID-vkCreateRayTracingPipelinesNV-pAllocator-parameter\",\n\"VUID-vkCreateRenderPass-pAllocator-parameter\",\n\"VUID-vkCreateRenderPass2-pAllocator-parameter\",\n\"VUID-vkCreateSampler-pAllocator-parameter\",\n\"VUID-vkCreateSamplerYcbcrConversion-pAllocator-parameter\",\n\"VUID-vkCreateScreenSurfaceQNX-pAllocator-parameter\",\n\"VUID-vkCreateSemaphore-pAllocator-parameter\",\n\"VUID-vkCreateShaderModule-pAllocator-parameter\",\n\"VUID-vkCreateShadersEXT-pAllocator-parameter\",\n\"VUID-vkCreateSharedSwapchainsKHR-pAllocator-parameter\",\n\"VUID-vkCreateStreamDescriptorSurfaceGGP-pAllocator-parameter\",\n\"VUID-vkCreateSwapchainKHR-pAllocator-parameter\",\n\"VUID-vkCreateValidationCacheEXT-pAllocator-parameter\",\n\"VUID-vkCreateViSurfaceNN-pAllocator-parameter\",\n\"VUID-vkCreateVideoSessionKHR-pAllocator-parameter\",\n\"VUID-vkCreateVideoSessionParametersKHR-pAllocator-parameter\",\n\"VUID-vkCreateWaylandSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateWin32SurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateXcbSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateXlibSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkDestroyAccelerationStructureKHR-pAllocator-parameter\",\n\"VUID-vkDestroyAccelerationStructureNV-pAllocator-parameter\",\n\"VUID-vkDestroyBuffer-pAllocator-parameter\",\n\"VUID-vkDestroyBufferCollectionFUCHSIA-pAllocator-parameter\",\n\"VUID-vkDestroyBufferView-pAllocator-parameter\",\n\"VUID-vkDestroyCommandPool-pAllocator-parameter\",\n\"VUID-vkDestroyCuFunctionNVX-pAllocator-parameter\",\n\"VUID-vkDestroyCuModuleNVX-pAllocator-parameter\",\n\"VUID-vkDestroyCudaFunctionNV-pAllocator-parameter\",\n\"VUID-vkDestroyCudaModuleNV-pAllocator-parameter\",\n\"VUID-vkDestroyDebugReportCallbackEXT-pAllocator-parameter\",\n\"VUID-vkDestroyDebugUtilsMessengerEXT-pAllocator-parameter\",\n\"VUID-vkDestroyDeferredOperationKHR-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorPool-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorSetLayout-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorUpdateTemplate-pAllocator-parameter\",\n\"VUID-vkDestroyDevice-pAllocator-parameter\",\n\"VUID-vkDestroyEvent-pAllocator-parameter\",\n\"VUID-vkDestroyFence-pAllocator-parameter\",\n\"VUID-vkDestroyFramebuffer-pAllocator-parameter\",\n\"VUID-vkDestroyImage-pAllocator-parameter\",\n\"VUID-vkDestroyImageView-pAllocator-parameter\",\n\"VUID-vkDestroyIndirectCommandsLayoutNV-pAllocator-parameter\",\n\"VUID-vkDestroyInstance-pAllocator-parameter\",\n\"VUID-vkDestroyMicromapEXT-pAllocator-parameter\",\n\"VUID-vkDestroyOpticalFlowSessionNV-pAllocator-parameter\",\n\"VUID-vkDestroyPipeline-pAllocator-parameter\",\n\"VUID-vkDestroyPipelineCache-pAllocator-parameter\",\n\"VUID-vkDestroyPipelineLayout-pAllocator-parameter\",\n\"VUID-vkDestroyPrivateDataSlot-pAllocator-parameter\",\n\"VUID-vkDestroyQueryPool-pAllocator-parameter\",\n\"VUID-vkDestroyRenderPass-pAllocator-parameter\",\n\"VUID-vkDestroySampler-pAllocator-parameter\",\n\"VUID-vkDestroySamplerYcbcrConversion-pAllocator-parameter\",\n\"VUID-vkDestroySemaphore-pAllocator-parameter\",\n\"VUID-vkDestroyShaderEXT-pAllocator-parameter\",\n\"VUID-vkDestroyShaderModule-pAllocator-parameter\",\n\"VUID-vkDestroySurfaceKHR-pAllocator-parameter\",\n\"VUID-vkDestroySwapchainKHR-pAllocator-parameter\",\n\"VUID-vkDestroyValidationCacheEXT-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionKHR-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionParametersKHR-pAllocator-parameter\",\n\"VUID-vkFreeMemory-pAllocator-parameter\",\n\"VUID-vkRegisterDeviceEventEXT-pAllocator-parameter\",\n\"VUID-vkRegisterDisplayEventEXT-pAllocator-parameter\",\n\"VUID-vkAllocateMemory-pAllocator-parameter\",\n};\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkExportFenceWin32HandleInfoKHR-pAttributes-parameter\", \"If pAttributes is not NULL, pAttributes must be a valid pointer to a valid SECURITY_ATTRIBUTES value\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "\"VUID-VkPipelineShaderStageCreateInfo-pSpecializationInfo-parameter\",\n\"VUID-VkSubpassDescription-pDepthStencilAttachment-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pSpecializationInfo-parameter\",\n\"VUID-VkExportFenceWin32HandleInfoKHR-pAttributes-parameter\",\n\"VUID-VkExportSemaphoreWin32HandleInfoKHR-pAttributes-parameter\",\n\"VUID-VkExportMemoryWin32HandleInfoKHR-pAttributes-parameter\",\n\"VUID-VkExportMemoryWin32HandleInfoNV-pAttributes-parameter\",\n\"VUID-vkEnumerateDeviceExtensionProperties-pProperties-parameter\",\n\"VUID-vkEnumerateDeviceLayerProperties-pProperties-parameter\",\n\"VUID-vkEnumerateInstanceExtensionProperties-pProperties-parameter\",\n\"VUID-vkEnumerateInstanceLayerProperties-pProperties-parameter\",\n// Checking for null-terminated UTF-8 string\n\"VUID-VkApplicationInfo-pApplicationName-parameter\",\n\"VUID-VkApplicationInfo-pEngineName-parameter\",\n\"VUID-VkDebugUtilsObjectNameInfoEXT-pObjectName-parameter\",\n\"VUID-VkDebugUtilsMessengerCallbackDataEXT-pMessageIdName-parameter\",\n\"VUID-VkPipelineShaderStageNodeCreateInfoAMDX-pName-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pName-parameter\",\n\"VUID-vkGetDeviceProcAddr-pName-parameter\",\n\"VUID-vkGetInstanceProcAddr-pName-parameter\",\n\"VUID-vkEnumerateDeviceExtensionProperties-pLayerName-parameter\",\n\"VUID-vkEnumerateInstanceExtensionProperties-pLayerName-parameter\",\n// Can't validate a VkAllocationCallbacks structure\n\"VUID-vkCreateAccelerationStructureKHR-pAllocator-parameter\",\n\"VUID-vkCreateAccelerationStructureNV-pAllocator-parameter\",\n\"VUID-vkCreateAndroidSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateBuffer-pAllocator-parameter\",\n\"VUID-vkCreateBufferCollectionFUCHSIA-pAllocator-parameter\",\n\"VUID-vkCreateBufferView-pAllocator-parameter\",\n\"VUID-vkCreateCommandPool-pAllocator-parameter\",\n\"VUID-vkCreateComputePipelines-pAllocator-parameter\",\n\"VUID-vkCreateCuFunctionNVX-pAllocator-parameter\",\n\"VUID-vkCreateCuModuleNVX-pAllocator-parameter\",\n\"VUID-vkCreateCudaFunctionNV-pAllocator-parameter\",\n\"VUID-vkCreateCudaModuleNV-pAllocator-parameter\",\n\"VUID-vkCreateDebugReportCallbackEXT-pAllocator-parameter\",\n\"VUID-vkCreateDebugUtilsMessengerEXT-pAllocator-parameter\",\n\"VUID-vkCreateDeferredOperationKHR-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorPool-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorSetLayout-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorUpdateTemplate-pAllocator-parameter\",\n\"VUID-vkCreateDevice-pAllocator-parameter\",\n\"VUID-vkCreateDirectFBSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateDisplayModeKHR-pAllocator-parameter\",\n\"VUID-vkCreateDisplayPlaneSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateEvent-pAllocator-parameter\",\n\"VUID-vkCreateExecutionGraphPipelinesAMDX-pAllocator-parameter\",\n\"VUID-vkCreateFence-pAllocator-parameter\",\n\"VUID-vkCreateFramebuffer-pAllocator-parameter\",\n\"VUID-vkCreateGraphicsPipelines-pAllocator-parameter\",\n\"VUID-vkCreateHeadlessSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateIOSSurfaceMVK-pAllocator-parameter\",\n\"VUID-vkCreateImage-pAllocator-parameter\",\n\"VUID-vkCreateImagePipeSurfaceFUCHSIA-pAllocator-parameter\",\n\"VUID-vkCreateImageView-pAllocator-parameter\",\n\"VUID-vkCreateIndirectCommandsLayoutNV-pAllocator-parameter\",\n\"VUID-vkCreateInstance-pAllocator-parameter\",\n\"VUID-vkCreateMacOSSurfaceMVK-pAllocator-parameter\",\n\"VUID-vkCreateMetalSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateMicromapEXT-pAllocator-parameter\",\n\"VUID-vkCreateOpticalFlowSessionNV-pAllocator-parameter\",\n\"VUID-vkCreatePipelineCache-pAllocator-parameter\",\n\"VUID-vkCreatePipelineLayout-pAllocator-parameter\",\n\"VUID-vkCreatePrivateDataSlot-pAllocator-parameter\",\n\"VUID-vkCreateQueryPool-pAllocator-parameter\",\n\"VUID-vkCreateRayTracingPipelinesKHR-pAllocator-parameter\",\n\"VUID-vkCreateRayTracingPipelinesNV-pAllocator-parameter\",\n\"VUID-vkCreateRenderPass-pAllocator-parameter\",\n\"VUID-vkCreateRenderPass2-pAllocator-parameter\",\n\"VUID-vkCreateSampler-pAllocator-parameter\",\n\"VUID-vkCreateSamplerYcbcrConversion-pAllocator-parameter\",\n\"VUID-vkCreateScreenSurfaceQNX-pAllocator-parameter\",\n\"VUID-vkCreateSemaphore-pAllocator-parameter\",\n\"VUID-vkCreateShaderModule-pAllocator-parameter\",\n\"VUID-vkCreateShadersEXT-pAllocator-parameter\",\n\"VUID-vkCreateSharedSwapchainsKHR-pAllocator-parameter\",\n\"VUID-vkCreateStreamDescriptorSurfaceGGP-pAllocator-parameter\",\n\"VUID-vkCreateSwapchainKHR-pAllocator-parameter\",\n\"VUID-vkCreateValidationCacheEXT-pAllocator-parameter\",\n\"VUID-vkCreateViSurfaceNN-pAllocator-parameter\",\n\"VUID-vkCreateVideoSessionKHR-pAllocator-parameter\",\n\"VUID-vkCreateVideoSessionParametersKHR-pAllocator-parameter\",\n\"VUID-vkCreateWaylandSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateWin32SurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateXcbSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateXlibSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkDestroyAccelerationStructureKHR-pAllocator-parameter\",\n\"VUID-vkDestroyAccelerationStructureNV-pAllocator-parameter\",\n\"VUID-vkDestroyBuffer-pAllocator-parameter\",\n\"VUID-vkDestroyBufferCollectionFUCHSIA-pAllocator-parameter\",\n\"VUID-vkDestroyBufferView-pAllocator-parameter\",\n\"VUID-vkDestroyCommandPool-pAllocator-parameter\",\n\"VUID-vkDestroyCuFunctionNVX-pAllocator-parameter\",\n\"VUID-vkDestroyCuModuleNVX-pAllocator-parameter\",\n\"VUID-vkDestroyCudaFunctionNV-pAllocator-parameter\",\n\"VUID-vkDestroyCudaModuleNV-pAllocator-parameter\",\n\"VUID-vkDestroyDebugReportCallbackEXT-pAllocator-parameter\",\n\"VUID-vkDestroyDebugUtilsMessengerEXT-pAllocator-parameter\",\n\"VUID-vkDestroyDeferredOperationKHR-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorPool-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorSetLayout-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorUpdateTemplate-pAllocator-parameter\",\n\"VUID-vkDestroyDevice-pAllocator-parameter\",\n\"VUID-vkDestroyEvent-pAllocator-parameter\",\n\"VUID-vkDestroyFence-pAllocator-parameter\",\n\"VUID-vkDestroyFramebuffer-pAllocator-parameter\",\n\"VUID-vkDestroyImage-pAllocator-parameter\",\n\"VUID-vkDestroyImageView-pAllocator-parameter\",\n\"VUID-vkDestroyIndirectCommandsLayoutNV-pAllocator-parameter\",\n\"VUID-vkDestroyInstance-pAllocator-parameter\",\n\"VUID-vkDestroyMicromapEXT-pAllocator-parameter\",\n\"VUID-vkDestroyOpticalFlowSessionNV-pAllocator-parameter\",\n\"VUID-vkDestroyPipeline-pAllocator-parameter\",\n\"VUID-vkDestroyPipelineCache-pAllocator-parameter\",\n\"VUID-vkDestroyPipelineLayout-pAllocator-parameter\",\n\"VUID-vkDestroyPrivateDataSlot-pAllocator-parameter\",\n\"VUID-vkDestroyQueryPool-pAllocator-parameter\",\n\"VUID-vkDestroyRenderPass-pAllocator-parameter\",\n\"VUID-vkDestroySampler-pAllocator-parameter\",\n\"VUID-vkDestroySamplerYcbcrConversion-pAllocator-parameter\",\n\"VUID-vkDestroySemaphore-pAllocator-parameter\",\n\"VUID-vkDestroyShaderEXT-pAllocator-parameter\",\n\"VUID-vkDestroyShaderModule-pAllocator-parameter\",\n\"VUID-vkDestroySurfaceKHR-pAllocator-parameter\",\n\"VUID-vkDestroySwapchainKHR-pAllocator-parameter\",\n\"VUID-vkDestroyValidationCacheEXT-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionKHR-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionParametersKHR-pAllocator-parameter\",\n\"VUID-vkFreeMemory-pAllocator-parameter\",\n\"VUID-vkRegisterDeviceEventEXT-pAllocator-parameter\",\n\"VUID-vkRegisterDisplayEventEXT-pAllocator-parameter\",\n\"VUID-vkAllocateMemory-pAllocator-parameter\",\n};\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkEnumerateDeviceLayerProperties-pProperties-parameter\", \"If the value referenced by pPropertyCount is not 0, and pProperties is not NULL, pProperties must be a valid pointer to an array of pPropertyCount VkLayerProperties structures\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "\"VUID-VkExportMemoryWin32HandleInfoKHR-pAttributes-parameter\",\n\"VUID-VkExportMemoryWin32HandleInfoNV-pAttributes-parameter\",\n\"VUID-vkEnumerateDeviceExtensionProperties-pProperties-parameter\",\n\"VUID-vkEnumerateDeviceLayerProperties-pProperties-parameter\",\n\"VUID-vkEnumerateInstanceExtensionProperties-pProperties-parameter\",\n\"VUID-vkEnumerateInstanceLayerProperties-pProperties-parameter\",\n// Checking for null-terminated UTF-8 string\n\"VUID-VkApplicationInfo-pApplicationName-parameter\",\n\"VUID-VkApplicationInfo-pEngineName-parameter\",\n\"VUID-VkDebugUtilsObjectNameInfoEXT-pObjectName-parameter\",\n\"VUID-VkDebugUtilsMessengerCallbackDataEXT-pMessageIdName-parameter\",\n\"VUID-VkPipelineShaderStageNodeCreateInfoAMDX-pName-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pName-parameter\",\n\"VUID-vkGetDeviceProcAddr-pName-parameter\",\n\"VUID-vkGetInstanceProcAddr-pName-parameter\",\n\"VUID-vkEnumerateDeviceExtensionProperties-pLayerName-parameter\",\n\"VUID-vkEnumerateInstanceExtensionProperties-pLayerName-parameter\",\n// Can't validate a VkAllocationCallbacks structure\n\"VUID-vkCreateAccelerationStructureKHR-pAllocator-parameter\",\n\"VUID-vkCreateAccelerationStructureNV-pAllocator-parameter\",\n\"VUID-vkCreateAndroidSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateBuffer-pAllocator-parameter\",\n\"VUID-vkCreateBufferCollectionFUCHSIA-pAllocator-parameter\",\n\"VUID-vkCreateBufferView-pAllocator-parameter\",\n\"VUID-vkCreateCommandPool-pAllocator-parameter\",\n\"VUID-vkCreateComputePipelines-pAllocator-parameter\",\n\"VUID-vkCreateCuFunctionNVX-pAllocator-parameter\",\n\"VUID-vkCreateCuModuleNVX-pAllocator-parameter\",\n\"VUID-vkCreateCudaFunctionNV-pAllocator-parameter\",\n\"VUID-vkCreateCudaModuleNV-pAllocator-parameter\",\n\"VUID-vkCreateDebugReportCallbackEXT-pAllocator-parameter\",\n\"VUID-vkCreateDebugUtilsMessengerEXT-pAllocator-parameter\",\n\"VUID-vkCreateDeferredOperationKHR-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorPool-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorSetLayout-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorUpdateTemplate-pAllocator-parameter\",\n\"VUID-vkCreateDevice-pAllocator-parameter\",\n\"VUID-vkCreateDirectFBSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateDisplayModeKHR-pAllocator-parameter\",\n\"VUID-vkCreateDisplayPlaneSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateEvent-pAllocator-parameter\",\n\"VUID-vkCreateExecutionGraphPipelinesAMDX-pAllocator-parameter\",\n\"VUID-vkCreateFence-pAllocator-parameter\",\n\"VUID-vkCreateFramebuffer-pAllocator-parameter\",\n\"VUID-vkCreateGraphicsPipelines-pAllocator-parameter\",\n\"VUID-vkCreateHeadlessSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateIOSSurfaceMVK-pAllocator-parameter\",\n\"VUID-vkCreateImage-pAllocator-parameter\",\n\"VUID-vkCreateImagePipeSurfaceFUCHSIA-pAllocator-parameter\",\n\"VUID-vkCreateImageView-pAllocator-parameter\",\n\"VUID-vkCreateIndirectCommandsLayoutNV-pAllocator-parameter\",\n\"VUID-vkCreateInstance-pAllocator-parameter\",\n\"VUID-vkCreateMacOSSurfaceMVK-pAllocator-parameter\",\n\"VUID-vkCreateMetalSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateMicromapEXT-pAllocator-parameter\",\n\"VUID-vkCreateOpticalFlowSessionNV-pAllocator-parameter\",\n\"VUID-vkCreatePipelineCache-pAllocator-parameter\",\n\"VUID-vkCreatePipelineLayout-pAllocator-parameter\",\n\"VUID-vkCreatePrivateDataSlot-pAllocator-parameter\",\n\"VUID-vkCreateQueryPool-pAllocator-parameter\",\n\"VUID-vkCreateRayTracingPipelinesKHR-pAllocator-parameter\",\n\"VUID-vkCreateRayTracingPipelinesNV-pAllocator-parameter\",\n\"VUID-vkCreateRenderPass-pAllocator-parameter\",\n\"VUID-vkCreateRenderPass2-pAllocator-parameter\",\n\"VUID-vkCreateSampler-pAllocator-parameter\",\n\"VUID-vkCreateSamplerYcbcrConversion-pAllocator-parameter\",\n\"VUID-vkCreateScreenSurfaceQNX-pAllocator-parameter\",\n\"VUID-vkCreateSemaphore-pAllocator-parameter\",\n\"VUID-vkCreateShaderModule-pAllocator-parameter\",\n\"VUID-vkCreateShadersEXT-pAllocator-parameter\",\n\"VUID-vkCreateSharedSwapchainsKHR-pAllocator-parameter\",\n\"VUID-vkCreateStreamDescriptorSurfaceGGP-pAllocator-parameter\",\n\"VUID-vkCreateSwapchainKHR-pAllocator-parameter\",\n\"VUID-vkCreateValidationCacheEXT-pAllocator-parameter\",\n\"VUID-vkCreateViSurfaceNN-pAllocator-parameter\",\n\"VUID-vkCreateVideoSessionKHR-pAllocator-parameter\",\n\"VUID-vkCreateVideoSessionParametersKHR-pAllocator-parameter\",\n\"VUID-vkCreateWaylandSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateWin32SurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateXcbSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateXlibSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkDestroyAccelerationStructureKHR-pAllocator-parameter\",\n\"VUID-vkDestroyAccelerationStructureNV-pAllocator-parameter\",\n\"VUID-vkDestroyBuffer-pAllocator-parameter\",\n\"VUID-vkDestroyBufferCollectionFUCHSIA-pAllocator-parameter\",\n\"VUID-vkDestroyBufferView-pAllocator-parameter\",\n\"VUID-vkDestroyCommandPool-pAllocator-parameter\",\n\"VUID-vkDestroyCuFunctionNVX-pAllocator-parameter\",\n\"VUID-vkDestroyCuModuleNVX-pAllocator-parameter\",\n\"VUID-vkDestroyCudaFunctionNV-pAllocator-parameter\",\n\"VUID-vkDestroyCudaModuleNV-pAllocator-parameter\",\n\"VUID-vkDestroyDebugReportCallbackEXT-pAllocator-parameter\",\n\"VUID-vkDestroyDebugUtilsMessengerEXT-pAllocator-parameter\",\n\"VUID-vkDestroyDeferredOperationKHR-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorPool-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorSetLayout-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorUpdateTemplate-pAllocator-parameter\",\n\"VUID-vkDestroyDevice-pAllocator-parameter\",\n\"VUID-vkDestroyEvent-pAllocator-parameter\",\n\"VUID-vkDestroyFence-pAllocator-parameter\",\n\"VUID-vkDestroyFramebuffer-pAllocator-parameter\",\n\"VUID-vkDestroyImage-pAllocator-parameter\",\n\"VUID-vkDestroyImageView-pAllocator-parameter\",\n\"VUID-vkDestroyIndirectCommandsLayoutNV-pAllocator-parameter\",\n\"VUID-vkDestroyInstance-pAllocator-parameter\",\n\"VUID-vkDestroyMicromapEXT-pAllocator-parameter\",\n\"VUID-vkDestroyOpticalFlowSessionNV-pAllocator-parameter\",\n\"VUID-vkDestroyPipeline-pAllocator-parameter\",\n\"VUID-vkDestroyPipelineCache-pAllocator-parameter\",\n\"VUID-vkDestroyPipelineLayout-pAllocator-parameter\",\n\"VUID-vkDestroyPrivateDataSlot-pAllocator-parameter\",\n\"VUID-vkDestroyQueryPool-pAllocator-parameter\",\n\"VUID-vkDestroyRenderPass-pAllocator-parameter\",\n\"VUID-vkDestroySampler-pAllocator-parameter\",\n\"VUID-vkDestroySamplerYcbcrConversion-pAllocator-parameter\",\n\"VUID-vkDestroySemaphore-pAllocator-parameter\",\n\"VUID-vkDestroyShaderEXT-pAllocator-parameter\",\n\"VUID-vkDestroyShaderModule-pAllocator-parameter\",\n\"VUID-vkDestroySurfaceKHR-pAllocator-parameter\",\n\"VUID-vkDestroySwapchainKHR-pAllocator-parameter\",\n\"VUID-vkDestroyValidationCacheEXT-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionKHR-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionParametersKHR-pAllocator-parameter\",\n\"VUID-vkFreeMemory-pAllocator-parameter\",\n\"VUID-vkRegisterDeviceEventEXT-pAllocator-parameter\",\n\"VUID-vkRegisterDisplayEventEXT-pAllocator-parameter\",\n\"VUID-vkAllocateMemory-pAllocator-parameter\",\n};\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkDebugUtilsObjectNameInfoEXT-pObjectName-parameter\", \"If pObjectName is not NULL, pObjectName must be a null-terminated UTF-8 string\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "\"VUID-VkApplicationInfo-pApplicationName-parameter\",\n\"VUID-VkApplicationInfo-pEngineName-parameter\",\n\"VUID-VkDebugUtilsObjectNameInfoEXT-pObjectName-parameter\",\n\"VUID-VkDebugUtilsMessengerCallbackDataEXT-pMessageIdName-parameter\",\n\"VUID-VkPipelineShaderStageNodeCreateInfoAMDX-pName-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pName-parameter\",\n\"VUID-vkGetDeviceProcAddr-pName-parameter\",\n\"VUID-vkGetInstanceProcAddr-pName-parameter\",\n\"VUID-vkEnumerateDeviceExtensionProperties-pLayerName-parameter\",\n\"VUID-vkEnumerateInstanceExtensionProperties-pLayerName-parameter\",\n// Can't validate a VkAllocationCallbacks structure\n\"VUID-vkCreateAccelerationStructureKHR-pAllocator-parameter\",\n\"VUID-vkCreateAccelerationStructureNV-pAllocator-parameter\",\n\"VUID-vkCreateAndroidSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateBuffer-pAllocator-parameter\",\n\"VUID-vkCreateBufferCollectionFUCHSIA-pAllocator-parameter\",\n\"VUID-vkCreateBufferView-pAllocator-parameter\",\n\"VUID-vkCreateCommandPool-pAllocator-parameter\",\n\"VUID-vkCreateComputePipelines-pAllocator-parameter\",\n\"VUID-vkCreateCuFunctionNVX-pAllocator-parameter\",\n\"VUID-vkCreateCuModuleNVX-pAllocator-parameter\",\n\"VUID-vkCreateCudaFunctionNV-pAllocator-parameter\",\n\"VUID-vkCreateCudaModuleNV-pAllocator-parameter\",\n\"VUID-vkCreateDebugReportCallbackEXT-pAllocator-parameter\",\n\"VUID-vkCreateDebugUtilsMessengerEXT-pAllocator-parameter\",\n\"VUID-vkCreateDeferredOperationKHR-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorPool-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorSetLayout-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorUpdateTemplate-pAllocator-parameter\",\n\"VUID-vkCreateDevice-pAllocator-parameter\",\n\"VUID-vkCreateDirectFBSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateDisplayModeKHR-pAllocator-parameter\",\n\"VUID-vkCreateDisplayPlaneSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateEvent-pAllocator-parameter\",\n\"VUID-vkCreateExecutionGraphPipelinesAMDX-pAllocator-parameter\",\n\"VUID-vkCreateFence-pAllocator-parameter\",\n\"VUID-vkCreateFramebuffer-pAllocator-parameter\",\n\"VUID-vkCreateGraphicsPipelines-pAllocator-parameter\",\n\"VUID-vkCreateHeadlessSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateIOSSurfaceMVK-pAllocator-parameter\",\n\"VUID-vkCreateImage-pAllocator-parameter\",\n\"VUID-vkCreateImagePipeSurfaceFUCHSIA-pAllocator-parameter\",\n\"VUID-vkCreateImageView-pAllocator-parameter\",\n\"VUID-vkCreateIndirectCommandsLayoutNV-pAllocator-parameter\",\n\"VUID-vkCreateInstance-pAllocator-parameter\",\n\"VUID-vkCreateMacOSSurfaceMVK-pAllocator-parameter\",\n\"VUID-vkCreateMetalSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateMicromapEXT-pAllocator-parameter\",\n\"VUID-vkCreateOpticalFlowSessionNV-pAllocator-parameter\",\n\"VUID-vkCreatePipelineCache-pAllocator-parameter\",\n\"VUID-vkCreatePipelineLayout-pAllocator-parameter\",\n\"VUID-vkCreatePrivateDataSlot-pAllocator-parameter\",\n\"VUID-vkCreateQueryPool-pAllocator-parameter\",\n\"VUID-vkCreateRayTracingPipelinesKHR-pAllocator-parameter\",\n\"VUID-vkCreateRayTracingPipelinesNV-pAllocator-parameter\",\n\"VUID-vkCreateRenderPass-pAllocator-parameter\",\n\"VUID-vkCreateRenderPass2-pAllocator-parameter\",\n\"VUID-vkCreateSampler-pAllocator-parameter\",\n\"VUID-vkCreateSamplerYcbcrConversion-pAllocator-parameter\",\n\"VUID-vkCreateScreenSurfaceQNX-pAllocator-parameter\",\n\"VUID-vkCreateSemaphore-pAllocator-parameter\",\n\"VUID-vkCreateShaderModule-pAllocator-parameter\",\n\"VUID-vkCreateShadersEXT-pAllocator-parameter\",\n\"VUID-vkCreateSharedSwapchainsKHR-pAllocator-parameter\",\n\"VUID-vkCreateStreamDescriptorSurfaceGGP-pAllocator-parameter\",\n\"VUID-vkCreateSwapchainKHR-pAllocator-parameter\",\n\"VUID-vkCreateValidationCacheEXT-pAllocator-parameter\",\n\"VUID-vkCreateViSurfaceNN-pAllocator-parameter\",\n\"VUID-vkCreateVideoSessionKHR-pAllocator-parameter\",\n\"VUID-vkCreateVideoSessionParametersKHR-pAllocator-parameter\",\n\"VUID-vkCreateWaylandSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateWin32SurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateXcbSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateXlibSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkDestroyAccelerationStructureKHR-pAllocator-parameter\",\n\"VUID-vkDestroyAccelerationStructureNV-pAllocator-parameter\",\n\"VUID-vkDestroyBuffer-pAllocator-parameter\",\n\"VUID-vkDestroyBufferCollectionFUCHSIA-pAllocator-parameter\",\n\"VUID-vkDestroyBufferView-pAllocator-parameter\",\n\"VUID-vkDestroyCommandPool-pAllocator-parameter\",\n\"VUID-vkDestroyCuFunctionNVX-pAllocator-parameter\",\n\"VUID-vkDestroyCuModuleNVX-pAllocator-parameter\",\n\"VUID-vkDestroyCudaFunctionNV-pAllocator-parameter\",\n\"VUID-vkDestroyCudaModuleNV-pAllocator-parameter\",\n\"VUID-vkDestroyDebugReportCallbackEXT-pAllocator-parameter\",\n\"VUID-vkDestroyDebugUtilsMessengerEXT-pAllocator-parameter\",\n\"VUID-vkDestroyDeferredOperationKHR-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorPool-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorSetLayout-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorUpdateTemplate-pAllocator-parameter\",\n\"VUID-vkDestroyDevice-pAllocator-parameter\",\n\"VUID-vkDestroyEvent-pAllocator-parameter\",\n\"VUID-vkDestroyFence-pAllocator-parameter\",\n\"VUID-vkDestroyFramebuffer-pAllocator-parameter\",\n\"VUID-vkDestroyImage-pAllocator-parameter\",\n\"VUID-vkDestroyImageView-pAllocator-parameter\",\n\"VUID-vkDestroyIndirectCommandsLayoutNV-pAllocator-parameter\",\n\"VUID-vkDestroyInstance-pAllocator-parameter\",\n\"VUID-vkDestroyMicromapEXT-pAllocator-parameter\",\n\"VUID-vkDestroyOpticalFlowSessionNV-pAllocator-parameter\",\n\"VUID-vkDestroyPipeline-pAllocator-parameter\",\n\"VUID-vkDestroyPipelineCache-pAllocator-parameter\",\n\"VUID-vkDestroyPipelineLayout-pAllocator-parameter\",\n\"VUID-vkDestroyPrivateDataSlot-pAllocator-parameter\",\n\"VUID-vkDestroyQueryPool-pAllocator-parameter\",\n\"VUID-vkDestroyRenderPass-pAllocator-parameter\",\n\"VUID-vkDestroySampler-pAllocator-parameter\",\n\"VUID-vkDestroySamplerYcbcrConversion-pAllocator-parameter\",\n\"VUID-vkDestroySemaphore-pAllocator-parameter\",\n\"VUID-vkDestroyShaderEXT-pAllocator-parameter\",\n\"VUID-vkDestroyShaderModule-pAllocator-parameter\",\n\"VUID-vkDestroySurfaceKHR-pAllocator-parameter\",\n\"VUID-vkDestroySwapchainKHR-pAllocator-parameter\",\n\"VUID-vkDestroyValidationCacheEXT-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionKHR-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionParametersKHR-pAllocator-parameter\",\n\"VUID-vkFreeMemory-pAllocator-parameter\",\n\"VUID-vkRegisterDeviceEventEXT-pAllocator-parameter\",\n\"VUID-vkRegisterDisplayEventEXT-pAllocator-parameter\",\n\"VUID-vkAllocateMemory-pAllocator-parameter\",\n};\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkGetInstanceProcAddr-pName-parameter\", \"pName must be a null-terminated UTF-8 string\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "\"VUID-VkPipelineShaderStageNodeCreateInfoAMDX-pName-parameter\",\n\"VUID-VkShaderCreateInfoEXT-pName-parameter\",\n\"VUID-vkGetDeviceProcAddr-pName-parameter\",\n\"VUID-vkGetInstanceProcAddr-pName-parameter\",\n\"VUID-vkEnumerateDeviceExtensionProperties-pLayerName-parameter\",\n\"VUID-vkEnumerateInstanceExtensionProperties-pLayerName-parameter\",\n// Can't validate a VkAllocationCallbacks structure\n\"VUID-vkCreateAccelerationStructureKHR-pAllocator-parameter\",\n\"VUID-vkCreateAccelerationStructureNV-pAllocator-parameter\",\n\"VUID-vkCreateAndroidSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateBuffer-pAllocator-parameter\",\n\"VUID-vkCreateBufferCollectionFUCHSIA-pAllocator-parameter\",\n\"VUID-vkCreateBufferView-pAllocator-parameter\",\n\"VUID-vkCreateCommandPool-pAllocator-parameter\",\n\"VUID-vkCreateComputePipelines-pAllocator-parameter\",\n\"VUID-vkCreateCuFunctionNVX-pAllocator-parameter\",\n\"VUID-vkCreateCuModuleNVX-pAllocator-parameter\",\n\"VUID-vkCreateCudaFunctionNV-pAllocator-parameter\",\n\"VUID-vkCreateCudaModuleNV-pAllocator-parameter\",\n\"VUID-vkCreateDebugReportCallbackEXT-pAllocator-parameter\",\n\"VUID-vkCreateDebugUtilsMessengerEXT-pAllocator-parameter\",\n\"VUID-vkCreateDeferredOperationKHR-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorPool-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorSetLayout-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorUpdateTemplate-pAllocator-parameter\",\n\"VUID-vkCreateDevice-pAllocator-parameter\",\n\"VUID-vkCreateDirectFBSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateDisplayModeKHR-pAllocator-parameter\",\n\"VUID-vkCreateDisplayPlaneSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateEvent-pAllocator-parameter\",\n\"VUID-vkCreateExecutionGraphPipelinesAMDX-pAllocator-parameter\",\n\"VUID-vkCreateFence-pAllocator-parameter\",\n\"VUID-vkCreateFramebuffer-pAllocator-parameter\",\n\"VUID-vkCreateGraphicsPipelines-pAllocator-parameter\",\n\"VUID-vkCreateHeadlessSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateIOSSurfaceMVK-pAllocator-parameter\",\n\"VUID-vkCreateImage-pAllocator-parameter\",\n\"VUID-vkCreateImagePipeSurfaceFUCHSIA-pAllocator-parameter\",\n\"VUID-vkCreateImageView-pAllocator-parameter\",\n\"VUID-vkCreateIndirectCommandsLayoutNV-pAllocator-parameter\",\n\"VUID-vkCreateInstance-pAllocator-parameter\",\n\"VUID-vkCreateMacOSSurfaceMVK-pAllocator-parameter\",\n\"VUID-vkCreateMetalSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateMicromapEXT-pAllocator-parameter\",\n\"VUID-vkCreateOpticalFlowSessionNV-pAllocator-parameter\",\n\"VUID-vkCreatePipelineCache-pAllocator-parameter\",\n\"VUID-vkCreatePipelineLayout-pAllocator-parameter\",\n\"VUID-vkCreatePrivateDataSlot-pAllocator-parameter\",\n\"VUID-vkCreateQueryPool-pAllocator-parameter\",\n\"VUID-vkCreateRayTracingPipelinesKHR-pAllocator-parameter\",\n\"VUID-vkCreateRayTracingPipelinesNV-pAllocator-parameter\",\n\"VUID-vkCreateRenderPass-pAllocator-parameter\",\n\"VUID-vkCreateRenderPass2-pAllocator-parameter\",\n\"VUID-vkCreateSampler-pAllocator-parameter\",\n\"VUID-vkCreateSamplerYcbcrConversion-pAllocator-parameter\",\n\"VUID-vkCreateScreenSurfaceQNX-pAllocator-parameter\",\n\"VUID-vkCreateSemaphore-pAllocator-parameter\",\n\"VUID-vkCreateShaderModule-pAllocator-parameter\",\n\"VUID-vkCreateShadersEXT-pAllocator-parameter\",\n\"VUID-vkCreateSharedSwapchainsKHR-pAllocator-parameter\",\n\"VUID-vkCreateStreamDescriptorSurfaceGGP-pAllocator-parameter\",\n\"VUID-vkCreateSwapchainKHR-pAllocator-parameter\",\n\"VUID-vkCreateValidationCacheEXT-pAllocator-parameter\",\n\"VUID-vkCreateViSurfaceNN-pAllocator-parameter\",\n\"VUID-vkCreateVideoSessionKHR-pAllocator-parameter\",\n\"VUID-vkCreateVideoSessionParametersKHR-pAllocator-parameter\",\n\"VUID-vkCreateWaylandSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateWin32SurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateXcbSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateXlibSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkDestroyAccelerationStructureKHR-pAllocator-parameter\",\n\"VUID-vkDestroyAccelerationStructureNV-pAllocator-parameter\",\n\"VUID-vkDestroyBuffer-pAllocator-parameter\",\n\"VUID-vkDestroyBufferCollectionFUCHSIA-pAllocator-parameter\",\n\"VUID-vkDestroyBufferView-pAllocator-parameter\",\n\"VUID-vkDestroyCommandPool-pAllocator-parameter\",\n\"VUID-vkDestroyCuFunctionNVX-pAllocator-parameter\",\n\"VUID-vkDestroyCuModuleNVX-pAllocator-parameter\",\n\"VUID-vkDestroyCudaFunctionNV-pAllocator-parameter\",\n\"VUID-vkDestroyCudaModuleNV-pAllocator-parameter\",\n\"VUID-vkDestroyDebugReportCallbackEXT-pAllocator-parameter\",\n\"VUID-vkDestroyDebugUtilsMessengerEXT-pAllocator-parameter\",\n\"VUID-vkDestroyDeferredOperationKHR-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorPool-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorSetLayout-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorUpdateTemplate-pAllocator-parameter\",\n\"VUID-vkDestroyDevice-pAllocator-parameter\",\n\"VUID-vkDestroyEvent-pAllocator-parameter\",\n\"VUID-vkDestroyFence-pAllocator-parameter\",\n\"VUID-vkDestroyFramebuffer-pAllocator-parameter\",\n\"VUID-vkDestroyImage-pAllocator-parameter\",\n\"VUID-vkDestroyImageView-pAllocator-parameter\",\n\"VUID-vkDestroyIndirectCommandsLayoutNV-pAllocator-parameter\",\n\"VUID-vkDestroyInstance-pAllocator-parameter\",\n\"VUID-vkDestroyMicromapEXT-pAllocator-parameter\",\n\"VUID-vkDestroyOpticalFlowSessionNV-pAllocator-parameter\",\n\"VUID-vkDestroyPipeline-pAllocator-parameter\",\n\"VUID-vkDestroyPipelineCache-pAllocator-parameter\",\n\"VUID-vkDestroyPipelineLayout-pAllocator-parameter\",\n\"VUID-vkDestroyPrivateDataSlot-pAllocator-parameter\",\n\"VUID-vkDestroyQueryPool-pAllocator-parameter\",\n\"VUID-vkDestroyRenderPass-pAllocator-parameter\",\n\"VUID-vkDestroySampler-pAllocator-parameter\",\n\"VUID-vkDestroySamplerYcbcrConversion-pAllocator-parameter\",\n\"VUID-vkDestroySemaphore-pAllocator-parameter\",\n\"VUID-vkDestroyShaderEXT-pAllocator-parameter\",\n\"VUID-vkDestroyShaderModule-pAllocator-parameter\",\n\"VUID-vkDestroySurfaceKHR-pAllocator-parameter\",\n\"VUID-vkDestroySwapchainKHR-pAllocator-parameter\",\n\"VUID-vkDestroyValidationCacheEXT-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionKHR-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionParametersKHR-pAllocator-parameter\",\n\"VUID-vkFreeMemory-pAllocator-parameter\",\n\"VUID-vkRegisterDeviceEventEXT-pAllocator-parameter\",\n\"VUID-vkRegisterDisplayEventEXT-pAllocator-parameter\",\n\"VUID-vkAllocateMemory-pAllocator-parameter\",\n};\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCreateAndroidSurfaceKHR-pAllocator-parameter\", \"If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "\"VUID-vkCreateAccelerationStructureKHR-pAllocator-parameter\",\n\"VUID-vkCreateAccelerationStructureNV-pAllocator-parameter\",\n\"VUID-vkCreateAndroidSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateBuffer-pAllocator-parameter\",\n\"VUID-vkCreateBufferCollectionFUCHSIA-pAllocator-parameter\",\n\"VUID-vkCreateBufferView-pAllocator-parameter\",\n\"VUID-vkCreateCommandPool-pAllocator-parameter\",\n\"VUID-vkCreateComputePipelines-pAllocator-parameter\",\n\"VUID-vkCreateCuFunctionNVX-pAllocator-parameter\",\n\"VUID-vkCreateCuModuleNVX-pAllocator-parameter\",\n\"VUID-vkCreateCudaFunctionNV-pAllocator-parameter\",\n\"VUID-vkCreateCudaModuleNV-pAllocator-parameter\",\n\"VUID-vkCreateDebugReportCallbackEXT-pAllocator-parameter\",\n\"VUID-vkCreateDebugUtilsMessengerEXT-pAllocator-parameter\",\n\"VUID-vkCreateDeferredOperationKHR-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorPool-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorSetLayout-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorUpdateTemplate-pAllocator-parameter\",\n\"VUID-vkCreateDevice-pAllocator-parameter\",\n\"VUID-vkCreateDirectFBSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateDisplayModeKHR-pAllocator-parameter\",\n\"VUID-vkCreateDisplayPlaneSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateEvent-pAllocator-parameter\",\n\"VUID-vkCreateExecutionGraphPipelinesAMDX-pAllocator-parameter\",\n\"VUID-vkCreateFence-pAllocator-parameter\",\n\"VUID-vkCreateFramebuffer-pAllocator-parameter\",\n\"VUID-vkCreateGraphicsPipelines-pAllocator-parameter\",\n\"VUID-vkCreateHeadlessSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateIOSSurfaceMVK-pAllocator-parameter\",\n\"VUID-vkCreateImage-pAllocator-parameter\",\n\"VUID-vkCreateImagePipeSurfaceFUCHSIA-pAllocator-parameter\",\n\"VUID-vkCreateImageView-pAllocator-parameter\",\n\"VUID-vkCreateIndirectCommandsLayoutNV-pAllocator-parameter\",\n\"VUID-vkCreateInstance-pAllocator-parameter\",\n\"VUID-vkCreateMacOSSurfaceMVK-pAllocator-parameter\",\n\"VUID-vkCreateMetalSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateMicromapEXT-pAllocator-parameter\",\n\"VUID-vkCreateOpticalFlowSessionNV-pAllocator-parameter\",\n\"VUID-vkCreatePipelineCache-pAllocator-parameter\",\n\"VUID-vkCreatePipelineLayout-pAllocator-parameter\",\n\"VUID-vkCreatePrivateDataSlot-pAllocator-parameter\",\n\"VUID-vkCreateQueryPool-pAllocator-parameter\",\n\"VUID-vkCreateRayTracingPipelinesKHR-pAllocator-parameter\",\n\"VUID-vkCreateRayTracingPipelinesNV-pAllocator-parameter\",\n\"VUID-vkCreateRenderPass-pAllocator-parameter\",\n\"VUID-vkCreateRenderPass2-pAllocator-parameter\",\n\"VUID-vkCreateSampler-pAllocator-parameter\",\n\"VUID-vkCreateSamplerYcbcrConversion-pAllocator-parameter\",\n\"VUID-vkCreateScreenSurfaceQNX-pAllocator-parameter\",\n\"VUID-vkCreateSemaphore-pAllocator-parameter\",\n\"VUID-vkCreateShaderModule-pAllocator-parameter\",\n\"VUID-vkCreateShadersEXT-pAllocator-parameter\",\n\"VUID-vkCreateSharedSwapchainsKHR-pAllocator-parameter\",\n\"VUID-vkCreateStreamDescriptorSurfaceGGP-pAllocator-parameter\",\n\"VUID-vkCreateSwapchainKHR-pAllocator-parameter\",\n\"VUID-vkCreateValidationCacheEXT-pAllocator-parameter\",\n\"VUID-vkCreateViSurfaceNN-pAllocator-parameter\",\n\"VUID-vkCreateVideoSessionKHR-pAllocator-parameter\",\n\"VUID-vkCreateVideoSessionParametersKHR-pAllocator-parameter\",\n\"VUID-vkCreateWaylandSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateWin32SurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateXcbSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateXlibSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkDestroyAccelerationStructureKHR-pAllocator-parameter\",\n\"VUID-vkDestroyAccelerationStructureNV-pAllocator-parameter\",\n\"VUID-vkDestroyBuffer-pAllocator-parameter\",\n\"VUID-vkDestroyBufferCollectionFUCHSIA-pAllocator-parameter\",\n\"VUID-vkDestroyBufferView-pAllocator-parameter\",\n\"VUID-vkDestroyCommandPool-pAllocator-parameter\",\n\"VUID-vkDestroyCuFunctionNVX-pAllocator-parameter\",\n\"VUID-vkDestroyCuModuleNVX-pAllocator-parameter\",\n\"VUID-vkDestroyCudaFunctionNV-pAllocator-parameter\",\n\"VUID-vkDestroyCudaModuleNV-pAllocator-parameter\",\n\"VUID-vkDestroyDebugReportCallbackEXT-pAllocator-parameter\",\n\"VUID-vkDestroyDebugUtilsMessengerEXT-pAllocator-parameter\",\n\"VUID-vkDestroyDeferredOperationKHR-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorPool-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorSetLayout-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorUpdateTemplate-pAllocator-parameter\",\n\"VUID-vkDestroyDevice-pAllocator-parameter\",\n\"VUID-vkDestroyEvent-pAllocator-parameter\",\n\"VUID-vkDestroyFence-pAllocator-parameter\",\n\"VUID-vkDestroyFramebuffer-pAllocator-parameter\",\n\"VUID-vkDestroyImage-pAllocator-parameter\",\n\"VUID-vkDestroyImageView-pAllocator-parameter\",\n\"VUID-vkDestroyIndirectCommandsLayoutNV-pAllocator-parameter\",\n\"VUID-vkDestroyInstance-pAllocator-parameter\",\n\"VUID-vkDestroyMicromapEXT-pAllocator-parameter\",\n\"VUID-vkDestroyOpticalFlowSessionNV-pAllocator-parameter\",\n\"VUID-vkDestroyPipeline-pAllocator-parameter\",\n\"VUID-vkDestroyPipelineCache-pAllocator-parameter\",\n\"VUID-vkDestroyPipelineLayout-pAllocator-parameter\",\n\"VUID-vkDestroyPrivateDataSlot-pAllocator-parameter\",\n\"VUID-vkDestroyQueryPool-pAllocator-parameter\",\n\"VUID-vkDestroyRenderPass-pAllocator-parameter\",\n\"VUID-vkDestroySampler-pAllocator-parameter\",\n\"VUID-vkDestroySamplerYcbcrConversion-pAllocator-parameter\",\n\"VUID-vkDestroySemaphore-pAllocator-parameter\",\n\"VUID-vkDestroyShaderEXT-pAllocator-parameter\",\n\"VUID-vkDestroyShaderModule-pAllocator-parameter\",\n\"VUID-vkDestroySurfaceKHR-pAllocator-parameter\",\n\"VUID-vkDestroySwapchainKHR-pAllocator-parameter\",\n\"VUID-vkDestroyValidationCacheEXT-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionKHR-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionParametersKHR-pAllocator-parameter\",\n\"VUID-vkFreeMemory-pAllocator-parameter\",\n\"VUID-vkRegisterDeviceEventEXT-pAllocator-parameter\",\n\"VUID-vkRegisterDisplayEventEXT-pAllocator-parameter\",\n\"VUID-vkAllocateMemory-pAllocator-parameter\",\n};\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCreateComputePipelines-pAllocator-parameter\", \"If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "\"VUID-vkCreateBufferCollectionFUCHSIA-pAllocator-parameter\",\n\"VUID-vkCreateBufferView-pAllocator-parameter\",\n\"VUID-vkCreateCommandPool-pAllocator-parameter\",\n\"VUID-vkCreateComputePipelines-pAllocator-parameter\",\n\"VUID-vkCreateCuFunctionNVX-pAllocator-parameter\",\n\"VUID-vkCreateCuModuleNVX-pAllocator-parameter\",\n\"VUID-vkCreateCudaFunctionNV-pAllocator-parameter\",\n\"VUID-vkCreateCudaModuleNV-pAllocator-parameter\",\n\"VUID-vkCreateDebugReportCallbackEXT-pAllocator-parameter\",\n\"VUID-vkCreateDebugUtilsMessengerEXT-pAllocator-parameter\",\n\"VUID-vkCreateDeferredOperationKHR-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorPool-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorSetLayout-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorUpdateTemplate-pAllocator-parameter\",\n\"VUID-vkCreateDevice-pAllocator-parameter\",\n\"VUID-vkCreateDirectFBSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateDisplayModeKHR-pAllocator-parameter\",\n\"VUID-vkCreateDisplayPlaneSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateEvent-pAllocator-parameter\",\n\"VUID-vkCreateExecutionGraphPipelinesAMDX-pAllocator-parameter\",\n\"VUID-vkCreateFence-pAllocator-parameter\",\n\"VUID-vkCreateFramebuffer-pAllocator-parameter\",\n\"VUID-vkCreateGraphicsPipelines-pAllocator-parameter\",\n\"VUID-vkCreateHeadlessSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateIOSSurfaceMVK-pAllocator-parameter\",\n\"VUID-vkCreateImage-pAllocator-parameter\",\n\"VUID-vkCreateImagePipeSurfaceFUCHSIA-pAllocator-parameter\",\n\"VUID-vkCreateImageView-pAllocator-parameter\",\n\"VUID-vkCreateIndirectCommandsLayoutNV-pAllocator-parameter\",\n\"VUID-vkCreateInstance-pAllocator-parameter\",\n\"VUID-vkCreateMacOSSurfaceMVK-pAllocator-parameter\",\n\"VUID-vkCreateMetalSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateMicromapEXT-pAllocator-parameter\",\n\"VUID-vkCreateOpticalFlowSessionNV-pAllocator-parameter\",\n\"VUID-vkCreatePipelineCache-pAllocator-parameter\",\n\"VUID-vkCreatePipelineLayout-pAllocator-parameter\",\n\"VUID-vkCreatePrivateDataSlot-pAllocator-parameter\",\n\"VUID-vkCreateQueryPool-pAllocator-parameter\",\n\"VUID-vkCreateRayTracingPipelinesKHR-pAllocator-parameter\",\n\"VUID-vkCreateRayTracingPipelinesNV-pAllocator-parameter\",\n\"VUID-vkCreateRenderPass-pAllocator-parameter\",\n\"VUID-vkCreateRenderPass2-pAllocator-parameter\",\n\"VUID-vkCreateSampler-pAllocator-parameter\",\n\"VUID-vkCreateSamplerYcbcrConversion-pAllocator-parameter\",\n\"VUID-vkCreateScreenSurfaceQNX-pAllocator-parameter\",\n\"VUID-vkCreateSemaphore-pAllocator-parameter\",\n\"VUID-vkCreateShaderModule-pAllocator-parameter\",\n\"VUID-vkCreateShadersEXT-pAllocator-parameter\",\n\"VUID-vkCreateSharedSwapchainsKHR-pAllocator-parameter\",\n\"VUID-vkCreateStreamDescriptorSurfaceGGP-pAllocator-parameter\",\n\"VUID-vkCreateSwapchainKHR-pAllocator-parameter\",\n\"VUID-vkCreateValidationCacheEXT-pAllocator-parameter\",\n\"VUID-vkCreateViSurfaceNN-pAllocator-parameter\",\n\"VUID-vkCreateVideoSessionKHR-pAllocator-parameter\",\n\"VUID-vkCreateVideoSessionParametersKHR-pAllocator-parameter\",\n\"VUID-vkCreateWaylandSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateWin32SurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateXcbSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateXlibSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkDestroyAccelerationStructureKHR-pAllocator-parameter\",\n\"VUID-vkDestroyAccelerationStructureNV-pAllocator-parameter\",\n\"VUID-vkDestroyBuffer-pAllocator-parameter\",\n\"VUID-vkDestroyBufferCollectionFUCHSIA-pAllocator-parameter\",\n\"VUID-vkDestroyBufferView-pAllocator-parameter\",\n\"VUID-vkDestroyCommandPool-pAllocator-parameter\",\n\"VUID-vkDestroyCuFunctionNVX-pAllocator-parameter\",\n\"VUID-vkDestroyCuModuleNVX-pAllocator-parameter\",\n\"VUID-vkDestroyCudaFunctionNV-pAllocator-parameter\",\n\"VUID-vkDestroyCudaModuleNV-pAllocator-parameter\",\n\"VUID-vkDestroyDebugReportCallbackEXT-pAllocator-parameter\",\n\"VUID-vkDestroyDebugUtilsMessengerEXT-pAllocator-parameter\",\n\"VUID-vkDestroyDeferredOperationKHR-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorPool-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorSetLayout-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorUpdateTemplate-pAllocator-parameter\",\n\"VUID-vkDestroyDevice-pAllocator-parameter\",\n\"VUID-vkDestroyEvent-pAllocator-parameter\",\n\"VUID-vkDestroyFence-pAllocator-parameter\",\n\"VUID-vkDestroyFramebuffer-pAllocator-parameter\",\n\"VUID-vkDestroyImage-pAllocator-parameter\",\n\"VUID-vkDestroyImageView-pAllocator-parameter\",\n\"VUID-vkDestroyIndirectCommandsLayoutNV-pAllocator-parameter\",\n\"VUID-vkDestroyInstance-pAllocator-parameter\",\n\"VUID-vkDestroyMicromapEXT-pAllocator-parameter\",\n\"VUID-vkDestroyOpticalFlowSessionNV-pAllocator-parameter\",\n\"VUID-vkDestroyPipeline-pAllocator-parameter\",\n\"VUID-vkDestroyPipelineCache-pAllocator-parameter\",\n\"VUID-vkDestroyPipelineLayout-pAllocator-parameter\",\n\"VUID-vkDestroyPrivateDataSlot-pAllocator-parameter\",\n\"VUID-vkDestroyQueryPool-pAllocator-parameter\",\n\"VUID-vkDestroyRenderPass-pAllocator-parameter\",\n\"VUID-vkDestroySampler-pAllocator-parameter\",\n\"VUID-vkDestroySamplerYcbcrConversion-pAllocator-parameter\",\n\"VUID-vkDestroySemaphore-pAllocator-parameter\",\n\"VUID-vkDestroyShaderEXT-pAllocator-parameter\",\n\"VUID-vkDestroyShaderModule-pAllocator-parameter\",\n\"VUID-vkDestroySurfaceKHR-pAllocator-parameter\",\n\"VUID-vkDestroySwapchainKHR-pAllocator-parameter\",\n\"VUID-vkDestroyValidationCacheEXT-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionKHR-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionParametersKHR-pAllocator-parameter\",\n\"VUID-vkFreeMemory-pAllocator-parameter\",\n\"VUID-vkRegisterDeviceEventEXT-pAllocator-parameter\",\n\"VUID-vkRegisterDisplayEventEXT-pAllocator-parameter\",\n\"VUID-vkAllocateMemory-pAllocator-parameter\",\n};\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCreateDebugReportCallbackEXT-pAllocator-parameter\", \"If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "\"VUID-vkCreateCuModuleNVX-pAllocator-parameter\",\n\"VUID-vkCreateCudaFunctionNV-pAllocator-parameter\",\n\"VUID-vkCreateCudaModuleNV-pAllocator-parameter\",\n\"VUID-vkCreateDebugReportCallbackEXT-pAllocator-parameter\",\n\"VUID-vkCreateDebugUtilsMessengerEXT-pAllocator-parameter\",\n\"VUID-vkCreateDeferredOperationKHR-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorPool-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorSetLayout-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorUpdateTemplate-pAllocator-parameter\",\n\"VUID-vkCreateDevice-pAllocator-parameter\",\n\"VUID-vkCreateDirectFBSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateDisplayModeKHR-pAllocator-parameter\",\n\"VUID-vkCreateDisplayPlaneSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateEvent-pAllocator-parameter\",\n\"VUID-vkCreateExecutionGraphPipelinesAMDX-pAllocator-parameter\",\n\"VUID-vkCreateFence-pAllocator-parameter\",\n\"VUID-vkCreateFramebuffer-pAllocator-parameter\",\n\"VUID-vkCreateGraphicsPipelines-pAllocator-parameter\",\n\"VUID-vkCreateHeadlessSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateIOSSurfaceMVK-pAllocator-parameter\",\n\"VUID-vkCreateImage-pAllocator-parameter\",\n\"VUID-vkCreateImagePipeSurfaceFUCHSIA-pAllocator-parameter\",\n\"VUID-vkCreateImageView-pAllocator-parameter\",\n\"VUID-vkCreateIndirectCommandsLayoutNV-pAllocator-parameter\",\n\"VUID-vkCreateInstance-pAllocator-parameter\",\n\"VUID-vkCreateMacOSSurfaceMVK-pAllocator-parameter\",\n\"VUID-vkCreateMetalSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateMicromapEXT-pAllocator-parameter\",\n\"VUID-vkCreateOpticalFlowSessionNV-pAllocator-parameter\",\n\"VUID-vkCreatePipelineCache-pAllocator-parameter\",\n\"VUID-vkCreatePipelineLayout-pAllocator-parameter\",\n\"VUID-vkCreatePrivateDataSlot-pAllocator-parameter\",\n\"VUID-vkCreateQueryPool-pAllocator-parameter\",\n\"VUID-vkCreateRayTracingPipelinesKHR-pAllocator-parameter\",\n\"VUID-vkCreateRayTracingPipelinesNV-pAllocator-parameter\",\n\"VUID-vkCreateRenderPass-pAllocator-parameter\",\n\"VUID-vkCreateRenderPass2-pAllocator-parameter\",\n\"VUID-vkCreateSampler-pAllocator-parameter\",\n\"VUID-vkCreateSamplerYcbcrConversion-pAllocator-parameter\",\n\"VUID-vkCreateScreenSurfaceQNX-pAllocator-parameter\",\n\"VUID-vkCreateSemaphore-pAllocator-parameter\",\n\"VUID-vkCreateShaderModule-pAllocator-parameter\",\n\"VUID-vkCreateShadersEXT-pAllocator-parameter\",\n\"VUID-vkCreateSharedSwapchainsKHR-pAllocator-parameter\",\n\"VUID-vkCreateStreamDescriptorSurfaceGGP-pAllocator-parameter\",\n\"VUID-vkCreateSwapchainKHR-pAllocator-parameter\",\n\"VUID-vkCreateValidationCacheEXT-pAllocator-parameter\",\n\"VUID-vkCreateViSurfaceNN-pAllocator-parameter\",\n\"VUID-vkCreateVideoSessionKHR-pAllocator-parameter\",\n\"VUID-vkCreateVideoSessionParametersKHR-pAllocator-parameter\",\n\"VUID-vkCreateWaylandSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateWin32SurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateXcbSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateXlibSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkDestroyAccelerationStructureKHR-pAllocator-parameter\",\n\"VUID-vkDestroyAccelerationStructureNV-pAllocator-parameter\",\n\"VUID-vkDestroyBuffer-pAllocator-parameter\",\n\"VUID-vkDestroyBufferCollectionFUCHSIA-pAllocator-parameter\",\n\"VUID-vkDestroyBufferView-pAllocator-parameter\",\n\"VUID-vkDestroyCommandPool-pAllocator-parameter\",\n\"VUID-vkDestroyCuFunctionNVX-pAllocator-parameter\",\n\"VUID-vkDestroyCuModuleNVX-pAllocator-parameter\",\n\"VUID-vkDestroyCudaFunctionNV-pAllocator-parameter\",\n\"VUID-vkDestroyCudaModuleNV-pAllocator-parameter\",\n\"VUID-vkDestroyDebugReportCallbackEXT-pAllocator-parameter\",\n\"VUID-vkDestroyDebugUtilsMessengerEXT-pAllocator-parameter\",\n\"VUID-vkDestroyDeferredOperationKHR-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorPool-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorSetLayout-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorUpdateTemplate-pAllocator-parameter\",\n\"VUID-vkDestroyDevice-pAllocator-parameter\",\n\"VUID-vkDestroyEvent-pAllocator-parameter\",\n\"VUID-vkDestroyFence-pAllocator-parameter\",\n\"VUID-vkDestroyFramebuffer-pAllocator-parameter\",\n\"VUID-vkDestroyImage-pAllocator-parameter\",\n\"VUID-vkDestroyImageView-pAllocator-parameter\",\n\"VUID-vkDestroyIndirectCommandsLayoutNV-pAllocator-parameter\",\n\"VUID-vkDestroyInstance-pAllocator-parameter\",\n\"VUID-vkDestroyMicromapEXT-pAllocator-parameter\",\n\"VUID-vkDestroyOpticalFlowSessionNV-pAllocator-parameter\",\n\"VUID-vkDestroyPipeline-pAllocator-parameter\",\n\"VUID-vkDestroyPipelineCache-pAllocator-parameter\",\n\"VUID-vkDestroyPipelineLayout-pAllocator-parameter\",\n\"VUID-vkDestroyPrivateDataSlot-pAllocator-parameter\",\n\"VUID-vkDestroyQueryPool-pAllocator-parameter\",\n\"VUID-vkDestroyRenderPass-pAllocator-parameter\",\n\"VUID-vkDestroySampler-pAllocator-parameter\",\n\"VUID-vkDestroySamplerYcbcrConversion-pAllocator-parameter\",\n\"VUID-vkDestroySemaphore-pAllocator-parameter\",\n\"VUID-vkDestroyShaderEXT-pAllocator-parameter\",\n\"VUID-vkDestroyShaderModule-pAllocator-parameter\",\n\"VUID-vkDestroySurfaceKHR-pAllocator-parameter\",\n\"VUID-vkDestroySwapchainKHR-pAllocator-parameter\",\n\"VUID-vkDestroyValidationCacheEXT-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionKHR-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionParametersKHR-pAllocator-parameter\",\n\"VUID-vkFreeMemory-pAllocator-parameter\",\n\"VUID-vkRegisterDeviceEventEXT-pAllocator-parameter\",\n\"VUID-vkRegisterDisplayEventEXT-pAllocator-parameter\",\n\"VUID-vkAllocateMemory-pAllocator-parameter\",\n};\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCreateDescriptorUpdateTemplate-pAllocator-parameter\", \"If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "\"VUID-vkCreateDeferredOperationKHR-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorPool-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorSetLayout-pAllocator-parameter\",\n\"VUID-vkCreateDescriptorUpdateTemplate-pAllocator-parameter\",\n\"VUID-vkCreateDevice-pAllocator-parameter\",\n\"VUID-vkCreateDirectFBSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateDisplayModeKHR-pAllocator-parameter\",\n\"VUID-vkCreateDisplayPlaneSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateEvent-pAllocator-parameter\",\n\"VUID-vkCreateExecutionGraphPipelinesAMDX-pAllocator-parameter\",\n\"VUID-vkCreateFence-pAllocator-parameter\",\n\"VUID-vkCreateFramebuffer-pAllocator-parameter\",\n\"VUID-vkCreateGraphicsPipelines-pAllocator-parameter\",\n\"VUID-vkCreateHeadlessSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateIOSSurfaceMVK-pAllocator-parameter\",\n\"VUID-vkCreateImage-pAllocator-parameter\",\n\"VUID-vkCreateImagePipeSurfaceFUCHSIA-pAllocator-parameter\",\n\"VUID-vkCreateImageView-pAllocator-parameter\",\n\"VUID-vkCreateIndirectCommandsLayoutNV-pAllocator-parameter\",\n\"VUID-vkCreateInstance-pAllocator-parameter\",\n\"VUID-vkCreateMacOSSurfaceMVK-pAllocator-parameter\",\n\"VUID-vkCreateMetalSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateMicromapEXT-pAllocator-parameter\",\n\"VUID-vkCreateOpticalFlowSessionNV-pAllocator-parameter\",\n\"VUID-vkCreatePipelineCache-pAllocator-parameter\",\n\"VUID-vkCreatePipelineLayout-pAllocator-parameter\",\n\"VUID-vkCreatePrivateDataSlot-pAllocator-parameter\",\n\"VUID-vkCreateQueryPool-pAllocator-parameter\",\n\"VUID-vkCreateRayTracingPipelinesKHR-pAllocator-parameter\",\n\"VUID-vkCreateRayTracingPipelinesNV-pAllocator-parameter\",\n\"VUID-vkCreateRenderPass-pAllocator-parameter\",\n\"VUID-vkCreateRenderPass2-pAllocator-parameter\",\n\"VUID-vkCreateSampler-pAllocator-parameter\",\n\"VUID-vkCreateSamplerYcbcrConversion-pAllocator-parameter\",\n\"VUID-vkCreateScreenSurfaceQNX-pAllocator-parameter\",\n\"VUID-vkCreateSemaphore-pAllocator-parameter\",\n\"VUID-vkCreateShaderModule-pAllocator-parameter\",\n\"VUID-vkCreateShadersEXT-pAllocator-parameter\",\n\"VUID-vkCreateSharedSwapchainsKHR-pAllocator-parameter\",\n\"VUID-vkCreateStreamDescriptorSurfaceGGP-pAllocator-parameter\",\n\"VUID-vkCreateSwapchainKHR-pAllocator-parameter\",\n\"VUID-vkCreateValidationCacheEXT-pAllocator-parameter\",\n\"VUID-vkCreateViSurfaceNN-pAllocator-parameter\",\n\"VUID-vkCreateVideoSessionKHR-pAllocator-parameter\",\n\"VUID-vkCreateVideoSessionParametersKHR-pAllocator-parameter\",\n\"VUID-vkCreateWaylandSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateWin32SurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateXcbSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateXlibSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkDestroyAccelerationStructureKHR-pAllocator-parameter\",\n\"VUID-vkDestroyAccelerationStructureNV-pAllocator-parameter\",\n\"VUID-vkDestroyBuffer-pAllocator-parameter\",\n\"VUID-vkDestroyBufferCollectionFUCHSIA-pAllocator-parameter\",\n\"VUID-vkDestroyBufferView-pAllocator-parameter\",\n\"VUID-vkDestroyCommandPool-pAllocator-parameter\",\n\"VUID-vkDestroyCuFunctionNVX-pAllocator-parameter\",\n\"VUID-vkDestroyCuModuleNVX-pAllocator-parameter\",\n\"VUID-vkDestroyCudaFunctionNV-pAllocator-parameter\",\n\"VUID-vkDestroyCudaModuleNV-pAllocator-parameter\",\n\"VUID-vkDestroyDebugReportCallbackEXT-pAllocator-parameter\",\n\"VUID-vkDestroyDebugUtilsMessengerEXT-pAllocator-parameter\",\n\"VUID-vkDestroyDeferredOperationKHR-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorPool-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorSetLayout-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorUpdateTemplate-pAllocator-parameter\",\n\"VUID-vkDestroyDevice-pAllocator-parameter\",\n\"VUID-vkDestroyEvent-pAllocator-parameter\",\n\"VUID-vkDestroyFence-pAllocator-parameter\",\n\"VUID-vkDestroyFramebuffer-pAllocator-parameter\",\n\"VUID-vkDestroyImage-pAllocator-parameter\",\n\"VUID-vkDestroyImageView-pAllocator-parameter\",\n\"VUID-vkDestroyIndirectCommandsLayoutNV-pAllocator-parameter\",\n\"VUID-vkDestroyInstance-pAllocator-parameter\",\n\"VUID-vkDestroyMicromapEXT-pAllocator-parameter\",\n\"VUID-vkDestroyOpticalFlowSessionNV-pAllocator-parameter\",\n\"VUID-vkDestroyPipeline-pAllocator-parameter\",\n\"VUID-vkDestroyPipelineCache-pAllocator-parameter\",\n\"VUID-vkDestroyPipelineLayout-pAllocator-parameter\",\n\"VUID-vkDestroyPrivateDataSlot-pAllocator-parameter\",\n\"VUID-vkDestroyQueryPool-pAllocator-parameter\",\n\"VUID-vkDestroyRenderPass-pAllocator-parameter\",\n\"VUID-vkDestroySampler-pAllocator-parameter\",\n\"VUID-vkDestroySamplerYcbcrConversion-pAllocator-parameter\",\n\"VUID-vkDestroySemaphore-pAllocator-parameter\",\n\"VUID-vkDestroyShaderEXT-pAllocator-parameter\",\n\"VUID-vkDestroyShaderModule-pAllocator-parameter\",\n\"VUID-vkDestroySurfaceKHR-pAllocator-parameter\",\n\"VUID-vkDestroySwapchainKHR-pAllocator-parameter\",\n\"VUID-vkDestroyValidationCacheEXT-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionKHR-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionParametersKHR-pAllocator-parameter\",\n\"VUID-vkFreeMemory-pAllocator-parameter\",\n\"VUID-vkRegisterDeviceEventEXT-pAllocator-parameter\",\n\"VUID-vkRegisterDisplayEventEXT-pAllocator-parameter\",\n\"VUID-vkAllocateMemory-pAllocator-parameter\",\n};\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCreateEvent-pAllocator-parameter\", \"If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "\"VUID-vkCreateDirectFBSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateDisplayModeKHR-pAllocator-parameter\",\n\"VUID-vkCreateDisplayPlaneSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateEvent-pAllocator-parameter\",\n\"VUID-vkCreateExecutionGraphPipelinesAMDX-pAllocator-parameter\",\n\"VUID-vkCreateFence-pAllocator-parameter\",\n\"VUID-vkCreateFramebuffer-pAllocator-parameter\",\n\"VUID-vkCreateGraphicsPipelines-pAllocator-parameter\",\n\"VUID-vkCreateHeadlessSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateIOSSurfaceMVK-pAllocator-parameter\",\n\"VUID-vkCreateImage-pAllocator-parameter\",\n\"VUID-vkCreateImagePipeSurfaceFUCHSIA-pAllocator-parameter\",\n\"VUID-vkCreateImageView-pAllocator-parameter\",\n\"VUID-vkCreateIndirectCommandsLayoutNV-pAllocator-parameter\",\n\"VUID-vkCreateInstance-pAllocator-parameter\",\n\"VUID-vkCreateMacOSSurfaceMVK-pAllocator-parameter\",\n\"VUID-vkCreateMetalSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateMicromapEXT-pAllocator-parameter\",\n\"VUID-vkCreateOpticalFlowSessionNV-pAllocator-parameter\",\n\"VUID-vkCreatePipelineCache-pAllocator-parameter\",\n\"VUID-vkCreatePipelineLayout-pAllocator-parameter\",\n\"VUID-vkCreatePrivateDataSlot-pAllocator-parameter\",\n\"VUID-vkCreateQueryPool-pAllocator-parameter\",\n\"VUID-vkCreateRayTracingPipelinesKHR-pAllocator-parameter\",\n\"VUID-vkCreateRayTracingPipelinesNV-pAllocator-parameter\",\n\"VUID-vkCreateRenderPass-pAllocator-parameter\",\n\"VUID-vkCreateRenderPass2-pAllocator-parameter\",\n\"VUID-vkCreateSampler-pAllocator-parameter\",\n\"VUID-vkCreateSamplerYcbcrConversion-pAllocator-parameter\",\n\"VUID-vkCreateScreenSurfaceQNX-pAllocator-parameter\",\n\"VUID-vkCreateSemaphore-pAllocator-parameter\",\n\"VUID-vkCreateShaderModule-pAllocator-parameter\",\n\"VUID-vkCreateShadersEXT-pAllocator-parameter\",\n\"VUID-vkCreateSharedSwapchainsKHR-pAllocator-parameter\",\n\"VUID-vkCreateStreamDescriptorSurfaceGGP-pAllocator-parameter\",\n\"VUID-vkCreateSwapchainKHR-pAllocator-parameter\",\n\"VUID-vkCreateValidationCacheEXT-pAllocator-parameter\",\n\"VUID-vkCreateViSurfaceNN-pAllocator-parameter\",\n\"VUID-vkCreateVideoSessionKHR-pAllocator-parameter\",\n\"VUID-vkCreateVideoSessionParametersKHR-pAllocator-parameter\",\n\"VUID-vkCreateWaylandSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateWin32SurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateXcbSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateXlibSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkDestroyAccelerationStructureKHR-pAllocator-parameter\",\n\"VUID-vkDestroyAccelerationStructureNV-pAllocator-parameter\",\n\"VUID-vkDestroyBuffer-pAllocator-parameter\",\n\"VUID-vkDestroyBufferCollectionFUCHSIA-pAllocator-parameter\",\n\"VUID-vkDestroyBufferView-pAllocator-parameter\",\n\"VUID-vkDestroyCommandPool-pAllocator-parameter\",\n\"VUID-vkDestroyCuFunctionNVX-pAllocator-parameter\",\n\"VUID-vkDestroyCuModuleNVX-pAllocator-parameter\",\n\"VUID-vkDestroyCudaFunctionNV-pAllocator-parameter\",\n\"VUID-vkDestroyCudaModuleNV-pAllocator-parameter\",\n\"VUID-vkDestroyDebugReportCallbackEXT-pAllocator-parameter\",\n\"VUID-vkDestroyDebugUtilsMessengerEXT-pAllocator-parameter\",\n\"VUID-vkDestroyDeferredOperationKHR-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorPool-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorSetLayout-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorUpdateTemplate-pAllocator-parameter\",\n\"VUID-vkDestroyDevice-pAllocator-parameter\",\n\"VUID-vkDestroyEvent-pAllocator-parameter\",\n\"VUID-vkDestroyFence-pAllocator-parameter\",\n\"VUID-vkDestroyFramebuffer-pAllocator-parameter\",\n\"VUID-vkDestroyImage-pAllocator-parameter\",\n\"VUID-vkDestroyImageView-pAllocator-parameter\",\n\"VUID-vkDestroyIndirectCommandsLayoutNV-pAllocator-parameter\",\n\"VUID-vkDestroyInstance-pAllocator-parameter\",\n\"VUID-vkDestroyMicromapEXT-pAllocator-parameter\",\n\"VUID-vkDestroyOpticalFlowSessionNV-pAllocator-parameter\",\n\"VUID-vkDestroyPipeline-pAllocator-parameter\",\n\"VUID-vkDestroyPipelineCache-pAllocator-parameter\",\n\"VUID-vkDestroyPipelineLayout-pAllocator-parameter\",\n\"VUID-vkDestroyPrivateDataSlot-pAllocator-parameter\",\n\"VUID-vkDestroyQueryPool-pAllocator-parameter\",\n\"VUID-vkDestroyRenderPass-pAllocator-parameter\",\n\"VUID-vkDestroySampler-pAllocator-parameter\",\n\"VUID-vkDestroySamplerYcbcrConversion-pAllocator-parameter\",\n\"VUID-vkDestroySemaphore-pAllocator-parameter\",\n\"VUID-vkDestroyShaderEXT-pAllocator-parameter\",\n\"VUID-vkDestroyShaderModule-pAllocator-parameter\",\n\"VUID-vkDestroySurfaceKHR-pAllocator-parameter\",\n\"VUID-vkDestroySwapchainKHR-pAllocator-parameter\",\n\"VUID-vkDestroyValidationCacheEXT-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionKHR-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionParametersKHR-pAllocator-parameter\",\n\"VUID-vkFreeMemory-pAllocator-parameter\",\n\"VUID-vkRegisterDeviceEventEXT-pAllocator-parameter\",\n\"VUID-vkRegisterDisplayEventEXT-pAllocator-parameter\",\n\"VUID-vkAllocateMemory-pAllocator-parameter\",\n};\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCreateHeadlessSurfaceEXT-pAllocator-parameter\", \"If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "\"VUID-vkCreateFence-pAllocator-parameter\",\n\"VUID-vkCreateFramebuffer-pAllocator-parameter\",\n\"VUID-vkCreateGraphicsPipelines-pAllocator-parameter\",\n\"VUID-vkCreateHeadlessSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateIOSSurfaceMVK-pAllocator-parameter\",\n\"VUID-vkCreateImage-pAllocator-parameter\",\n\"VUID-vkCreateImagePipeSurfaceFUCHSIA-pAllocator-parameter\",\n\"VUID-vkCreateImageView-pAllocator-parameter\",\n\"VUID-vkCreateIndirectCommandsLayoutNV-pAllocator-parameter\",\n\"VUID-vkCreateInstance-pAllocator-parameter\",\n\"VUID-vkCreateMacOSSurfaceMVK-pAllocator-parameter\",\n\"VUID-vkCreateMetalSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateMicromapEXT-pAllocator-parameter\",\n\"VUID-vkCreateOpticalFlowSessionNV-pAllocator-parameter\",\n\"VUID-vkCreatePipelineCache-pAllocator-parameter\",\n\"VUID-vkCreatePipelineLayout-pAllocator-parameter\",\n\"VUID-vkCreatePrivateDataSlot-pAllocator-parameter\",\n\"VUID-vkCreateQueryPool-pAllocator-parameter\",\n\"VUID-vkCreateRayTracingPipelinesKHR-pAllocator-parameter\",\n\"VUID-vkCreateRayTracingPipelinesNV-pAllocator-parameter\",\n\"VUID-vkCreateRenderPass-pAllocator-parameter\",\n\"VUID-vkCreateRenderPass2-pAllocator-parameter\",\n\"VUID-vkCreateSampler-pAllocator-parameter\",\n\"VUID-vkCreateSamplerYcbcrConversion-pAllocator-parameter\",\n\"VUID-vkCreateScreenSurfaceQNX-pAllocator-parameter\",\n\"VUID-vkCreateSemaphore-pAllocator-parameter\",\n\"VUID-vkCreateShaderModule-pAllocator-parameter\",\n\"VUID-vkCreateShadersEXT-pAllocator-parameter\",\n\"VUID-vkCreateSharedSwapchainsKHR-pAllocator-parameter\",\n\"VUID-vkCreateStreamDescriptorSurfaceGGP-pAllocator-parameter\",\n\"VUID-vkCreateSwapchainKHR-pAllocator-parameter\",\n\"VUID-vkCreateValidationCacheEXT-pAllocator-parameter\",\n\"VUID-vkCreateViSurfaceNN-pAllocator-parameter\",\n\"VUID-vkCreateVideoSessionKHR-pAllocator-parameter\",\n\"VUID-vkCreateVideoSessionParametersKHR-pAllocator-parameter\",\n\"VUID-vkCreateWaylandSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateWin32SurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateXcbSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateXlibSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkDestroyAccelerationStructureKHR-pAllocator-parameter\",\n\"VUID-vkDestroyAccelerationStructureNV-pAllocator-parameter\",\n\"VUID-vkDestroyBuffer-pAllocator-parameter\",\n\"VUID-vkDestroyBufferCollectionFUCHSIA-pAllocator-parameter\",\n\"VUID-vkDestroyBufferView-pAllocator-parameter\",\n\"VUID-vkDestroyCommandPool-pAllocator-parameter\",\n\"VUID-vkDestroyCuFunctionNVX-pAllocator-parameter\",\n\"VUID-vkDestroyCuModuleNVX-pAllocator-parameter\",\n\"VUID-vkDestroyCudaFunctionNV-pAllocator-parameter\",\n\"VUID-vkDestroyCudaModuleNV-pAllocator-parameter\",\n\"VUID-vkDestroyDebugReportCallbackEXT-pAllocator-parameter\",\n\"VUID-vkDestroyDebugUtilsMessengerEXT-pAllocator-parameter\",\n\"VUID-vkDestroyDeferredOperationKHR-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorPool-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorSetLayout-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorUpdateTemplate-pAllocator-parameter\",\n\"VUID-vkDestroyDevice-pAllocator-parameter\",\n\"VUID-vkDestroyEvent-pAllocator-parameter\",\n\"VUID-vkDestroyFence-pAllocator-parameter\",\n\"VUID-vkDestroyFramebuffer-pAllocator-parameter\",\n\"VUID-vkDestroyImage-pAllocator-parameter\",\n\"VUID-vkDestroyImageView-pAllocator-parameter\",\n\"VUID-vkDestroyIndirectCommandsLayoutNV-pAllocator-parameter\",\n\"VUID-vkDestroyInstance-pAllocator-parameter\",\n\"VUID-vkDestroyMicromapEXT-pAllocator-parameter\",\n\"VUID-vkDestroyOpticalFlowSessionNV-pAllocator-parameter\",\n\"VUID-vkDestroyPipeline-pAllocator-parameter\",\n\"VUID-vkDestroyPipelineCache-pAllocator-parameter\",\n\"VUID-vkDestroyPipelineLayout-pAllocator-parameter\",\n\"VUID-vkDestroyPrivateDataSlot-pAllocator-parameter\",\n\"VUID-vkDestroyQueryPool-pAllocator-parameter\",\n\"VUID-vkDestroyRenderPass-pAllocator-parameter\",\n\"VUID-vkDestroySampler-pAllocator-parameter\",\n\"VUID-vkDestroySamplerYcbcrConversion-pAllocator-parameter\",\n\"VUID-vkDestroySemaphore-pAllocator-parameter\",\n\"VUID-vkDestroyShaderEXT-pAllocator-parameter\",\n\"VUID-vkDestroyShaderModule-pAllocator-parameter\",\n\"VUID-vkDestroySurfaceKHR-pAllocator-parameter\",\n\"VUID-vkDestroySwapchainKHR-pAllocator-parameter\",\n\"VUID-vkDestroyValidationCacheEXT-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionKHR-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionParametersKHR-pAllocator-parameter\",\n\"VUID-vkFreeMemory-pAllocator-parameter\",\n\"VUID-vkRegisterDeviceEventEXT-pAllocator-parameter\",\n\"VUID-vkRegisterDisplayEventEXT-pAllocator-parameter\",\n\"VUID-vkAllocateMemory-pAllocator-parameter\",\n};\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCreateIndirectCommandsLayoutNV-pAllocator-parameter\", \"If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "\"VUID-vkCreateImage-pAllocator-parameter\",\n\"VUID-vkCreateImagePipeSurfaceFUCHSIA-pAllocator-parameter\",\n\"VUID-vkCreateImageView-pAllocator-parameter\",\n\"VUID-vkCreateIndirectCommandsLayoutNV-pAllocator-parameter\",\n\"VUID-vkCreateInstance-pAllocator-parameter\",\n\"VUID-vkCreateMacOSSurfaceMVK-pAllocator-parameter\",\n\"VUID-vkCreateMetalSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateMicromapEXT-pAllocator-parameter\",\n\"VUID-vkCreateOpticalFlowSessionNV-pAllocator-parameter\",\n\"VUID-vkCreatePipelineCache-pAllocator-parameter\",\n\"VUID-vkCreatePipelineLayout-pAllocator-parameter\",\n\"VUID-vkCreatePrivateDataSlot-pAllocator-parameter\",\n\"VUID-vkCreateQueryPool-pAllocator-parameter\",\n\"VUID-vkCreateRayTracingPipelinesKHR-pAllocator-parameter\",\n\"VUID-vkCreateRayTracingPipelinesNV-pAllocator-parameter\",\n\"VUID-vkCreateRenderPass-pAllocator-parameter\",\n\"VUID-vkCreateRenderPass2-pAllocator-parameter\",\n\"VUID-vkCreateSampler-pAllocator-parameter\",\n\"VUID-vkCreateSamplerYcbcrConversion-pAllocator-parameter\",\n\"VUID-vkCreateScreenSurfaceQNX-pAllocator-parameter\",\n\"VUID-vkCreateSemaphore-pAllocator-parameter\",\n\"VUID-vkCreateShaderModule-pAllocator-parameter\",\n\"VUID-vkCreateShadersEXT-pAllocator-parameter\",\n\"VUID-vkCreateSharedSwapchainsKHR-pAllocator-parameter\",\n\"VUID-vkCreateStreamDescriptorSurfaceGGP-pAllocator-parameter\",\n\"VUID-vkCreateSwapchainKHR-pAllocator-parameter\",\n\"VUID-vkCreateValidationCacheEXT-pAllocator-parameter\",\n\"VUID-vkCreateViSurfaceNN-pAllocator-parameter\",\n\"VUID-vkCreateVideoSessionKHR-pAllocator-parameter\",\n\"VUID-vkCreateVideoSessionParametersKHR-pAllocator-parameter\",\n\"VUID-vkCreateWaylandSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateWin32SurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateXcbSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateXlibSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkDestroyAccelerationStructureKHR-pAllocator-parameter\",\n\"VUID-vkDestroyAccelerationStructureNV-pAllocator-parameter\",\n\"VUID-vkDestroyBuffer-pAllocator-parameter\",\n\"VUID-vkDestroyBufferCollectionFUCHSIA-pAllocator-parameter\",\n\"VUID-vkDestroyBufferView-pAllocator-parameter\",\n\"VUID-vkDestroyCommandPool-pAllocator-parameter\",\n\"VUID-vkDestroyCuFunctionNVX-pAllocator-parameter\",\n\"VUID-vkDestroyCuModuleNVX-pAllocator-parameter\",\n\"VUID-vkDestroyCudaFunctionNV-pAllocator-parameter\",\n\"VUID-vkDestroyCudaModuleNV-pAllocator-parameter\",\n\"VUID-vkDestroyDebugReportCallbackEXT-pAllocator-parameter\",\n\"VUID-vkDestroyDebugUtilsMessengerEXT-pAllocator-parameter\",\n\"VUID-vkDestroyDeferredOperationKHR-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorPool-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorSetLayout-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorUpdateTemplate-pAllocator-parameter\",\n\"VUID-vkDestroyDevice-pAllocator-parameter\",\n\"VUID-vkDestroyEvent-pAllocator-parameter\",\n\"VUID-vkDestroyFence-pAllocator-parameter\",\n\"VUID-vkDestroyFramebuffer-pAllocator-parameter\",\n\"VUID-vkDestroyImage-pAllocator-parameter\",\n\"VUID-vkDestroyImageView-pAllocator-parameter\",\n\"VUID-vkDestroyIndirectCommandsLayoutNV-pAllocator-parameter\",\n\"VUID-vkDestroyInstance-pAllocator-parameter\",\n\"VUID-vkDestroyMicromapEXT-pAllocator-parameter\",\n\"VUID-vkDestroyOpticalFlowSessionNV-pAllocator-parameter\",\n\"VUID-vkDestroyPipeline-pAllocator-parameter\",\n\"VUID-vkDestroyPipelineCache-pAllocator-parameter\",\n\"VUID-vkDestroyPipelineLayout-pAllocator-parameter\",\n\"VUID-vkDestroyPrivateDataSlot-pAllocator-parameter\",\n\"VUID-vkDestroyQueryPool-pAllocator-parameter\",\n\"VUID-vkDestroyRenderPass-pAllocator-parameter\",\n\"VUID-vkDestroySampler-pAllocator-parameter\",\n\"VUID-vkDestroySamplerYcbcrConversion-pAllocator-parameter\",\n\"VUID-vkDestroySemaphore-pAllocator-parameter\",\n\"VUID-vkDestroyShaderEXT-pAllocator-parameter\",\n\"VUID-vkDestroyShaderModule-pAllocator-parameter\",\n\"VUID-vkDestroySurfaceKHR-pAllocator-parameter\",\n\"VUID-vkDestroySwapchainKHR-pAllocator-parameter\",\n\"VUID-vkDestroyValidationCacheEXT-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionKHR-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionParametersKHR-pAllocator-parameter\",\n\"VUID-vkFreeMemory-pAllocator-parameter\",\n\"VUID-vkRegisterDeviceEventEXT-pAllocator-parameter\",\n\"VUID-vkRegisterDisplayEventEXT-pAllocator-parameter\",\n\"VUID-vkAllocateMemory-pAllocator-parameter\",\n};\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCreateOpticalFlowSessionNV-pAllocator-parameter\", \"If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "\"VUID-vkCreateMacOSSurfaceMVK-pAllocator-parameter\",\n\"VUID-vkCreateMetalSurfaceEXT-pAllocator-parameter\",\n\"VUID-vkCreateMicromapEXT-pAllocator-parameter\",\n\"VUID-vkCreateOpticalFlowSessionNV-pAllocator-parameter\",\n\"VUID-vkCreatePipelineCache-pAllocator-parameter\",\n\"VUID-vkCreatePipelineLayout-pAllocator-parameter\",\n\"VUID-vkCreatePrivateDataSlot-pAllocator-parameter\",\n\"VUID-vkCreateQueryPool-pAllocator-parameter\",\n\"VUID-vkCreateRayTracingPipelinesKHR-pAllocator-parameter\",\n\"VUID-vkCreateRayTracingPipelinesNV-pAllocator-parameter\",\n\"VUID-vkCreateRenderPass-pAllocator-parameter\",\n\"VUID-vkCreateRenderPass2-pAllocator-parameter\",\n\"VUID-vkCreateSampler-pAllocator-parameter\",\n\"VUID-vkCreateSamplerYcbcrConversion-pAllocator-parameter\",\n\"VUID-vkCreateScreenSurfaceQNX-pAllocator-parameter\",\n\"VUID-vkCreateSemaphore-pAllocator-parameter\",\n\"VUID-vkCreateShaderModule-pAllocator-parameter\",\n\"VUID-vkCreateShadersEXT-pAllocator-parameter\",\n\"VUID-vkCreateSharedSwapchainsKHR-pAllocator-parameter\",\n\"VUID-vkCreateStreamDescriptorSurfaceGGP-pAllocator-parameter\",\n\"VUID-vkCreateSwapchainKHR-pAllocator-parameter\",\n\"VUID-vkCreateValidationCacheEXT-pAllocator-parameter\",\n\"VUID-vkCreateViSurfaceNN-pAllocator-parameter\",\n\"VUID-vkCreateVideoSessionKHR-pAllocator-parameter\",\n\"VUID-vkCreateVideoSessionParametersKHR-pAllocator-parameter\",\n\"VUID-vkCreateWaylandSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateWin32SurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateXcbSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateXlibSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkDestroyAccelerationStructureKHR-pAllocator-parameter\",\n\"VUID-vkDestroyAccelerationStructureNV-pAllocator-parameter\",\n\"VUID-vkDestroyBuffer-pAllocator-parameter\",\n\"VUID-vkDestroyBufferCollectionFUCHSIA-pAllocator-parameter\",\n\"VUID-vkDestroyBufferView-pAllocator-parameter\",\n\"VUID-vkDestroyCommandPool-pAllocator-parameter\",\n\"VUID-vkDestroyCuFunctionNVX-pAllocator-parameter\",\n\"VUID-vkDestroyCuModuleNVX-pAllocator-parameter\",\n\"VUID-vkDestroyCudaFunctionNV-pAllocator-parameter\",\n\"VUID-vkDestroyCudaModuleNV-pAllocator-parameter\",\n\"VUID-vkDestroyDebugReportCallbackEXT-pAllocator-parameter\",\n\"VUID-vkDestroyDebugUtilsMessengerEXT-pAllocator-parameter\",\n\"VUID-vkDestroyDeferredOperationKHR-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorPool-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorSetLayout-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorUpdateTemplate-pAllocator-parameter\",\n\"VUID-vkDestroyDevice-pAllocator-parameter\",\n\"VUID-vkDestroyEvent-pAllocator-parameter\",\n\"VUID-vkDestroyFence-pAllocator-parameter\",\n\"VUID-vkDestroyFramebuffer-pAllocator-parameter\",\n\"VUID-vkDestroyImage-pAllocator-parameter\",\n\"VUID-vkDestroyImageView-pAllocator-parameter\",\n\"VUID-vkDestroyIndirectCommandsLayoutNV-pAllocator-parameter\",\n\"VUID-vkDestroyInstance-pAllocator-parameter\",\n\"VUID-vkDestroyMicromapEXT-pAllocator-parameter\",\n\"VUID-vkDestroyOpticalFlowSessionNV-pAllocator-parameter\",\n\"VUID-vkDestroyPipeline-pAllocator-parameter\",\n\"VUID-vkDestroyPipelineCache-pAllocator-parameter\",\n\"VUID-vkDestroyPipelineLayout-pAllocator-parameter\",\n\"VUID-vkDestroyPrivateDataSlot-pAllocator-parameter\",\n\"VUID-vkDestroyQueryPool-pAllocator-parameter\",\n\"VUID-vkDestroyRenderPass-pAllocator-parameter\",\n\"VUID-vkDestroySampler-pAllocator-parameter\",\n\"VUID-vkDestroySamplerYcbcrConversion-pAllocator-parameter\",\n\"VUID-vkDestroySemaphore-pAllocator-parameter\",\n\"VUID-vkDestroyShaderEXT-pAllocator-parameter\",\n\"VUID-vkDestroyShaderModule-pAllocator-parameter\",\n\"VUID-vkDestroySurfaceKHR-pAllocator-parameter\",\n\"VUID-vkDestroySwapchainKHR-pAllocator-parameter\",\n\"VUID-vkDestroyValidationCacheEXT-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionKHR-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionParametersKHR-pAllocator-parameter\",\n\"VUID-vkFreeMemory-pAllocator-parameter\",\n\"VUID-vkRegisterDeviceEventEXT-pAllocator-parameter\",\n\"VUID-vkRegisterDisplayEventEXT-pAllocator-parameter\",\n\"VUID-vkAllocateMemory-pAllocator-parameter\",\n};\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCreateRayTracingPipelinesKHR-pAllocator-parameter\", \"If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "\"VUID-vkCreatePipelineLayout-pAllocator-parameter\",\n\"VUID-vkCreatePrivateDataSlot-pAllocator-parameter\",\n\"VUID-vkCreateQueryPool-pAllocator-parameter\",\n\"VUID-vkCreateRayTracingPipelinesKHR-pAllocator-parameter\",\n\"VUID-vkCreateRayTracingPipelinesNV-pAllocator-parameter\",\n\"VUID-vkCreateRenderPass-pAllocator-parameter\",\n\"VUID-vkCreateRenderPass2-pAllocator-parameter\",\n\"VUID-vkCreateSampler-pAllocator-parameter\",\n\"VUID-vkCreateSamplerYcbcrConversion-pAllocator-parameter\",\n\"VUID-vkCreateScreenSurfaceQNX-pAllocator-parameter\",\n\"VUID-vkCreateSemaphore-pAllocator-parameter\",\n\"VUID-vkCreateShaderModule-pAllocator-parameter\",\n\"VUID-vkCreateShadersEXT-pAllocator-parameter\",\n\"VUID-vkCreateSharedSwapchainsKHR-pAllocator-parameter\",\n\"VUID-vkCreateStreamDescriptorSurfaceGGP-pAllocator-parameter\",\n\"VUID-vkCreateSwapchainKHR-pAllocator-parameter\",\n\"VUID-vkCreateValidationCacheEXT-pAllocator-parameter\",\n\"VUID-vkCreateViSurfaceNN-pAllocator-parameter\",\n\"VUID-vkCreateVideoSessionKHR-pAllocator-parameter\",\n\"VUID-vkCreateVideoSessionParametersKHR-pAllocator-parameter\",\n\"VUID-vkCreateWaylandSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateWin32SurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateXcbSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateXlibSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkDestroyAccelerationStructureKHR-pAllocator-parameter\",\n\"VUID-vkDestroyAccelerationStructureNV-pAllocator-parameter\",\n\"VUID-vkDestroyBuffer-pAllocator-parameter\",\n\"VUID-vkDestroyBufferCollectionFUCHSIA-pAllocator-parameter\",\n\"VUID-vkDestroyBufferView-pAllocator-parameter\",\n\"VUID-vkDestroyCommandPool-pAllocator-parameter\",\n\"VUID-vkDestroyCuFunctionNVX-pAllocator-parameter\",\n\"VUID-vkDestroyCuModuleNVX-pAllocator-parameter\",\n\"VUID-vkDestroyCudaFunctionNV-pAllocator-parameter\",\n\"VUID-vkDestroyCudaModuleNV-pAllocator-parameter\",\n\"VUID-vkDestroyDebugReportCallbackEXT-pAllocator-parameter\",\n\"VUID-vkDestroyDebugUtilsMessengerEXT-pAllocator-parameter\",\n\"VUID-vkDestroyDeferredOperationKHR-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorPool-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorSetLayout-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorUpdateTemplate-pAllocator-parameter\",\n\"VUID-vkDestroyDevice-pAllocator-parameter\",\n\"VUID-vkDestroyEvent-pAllocator-parameter\",\n\"VUID-vkDestroyFence-pAllocator-parameter\",\n\"VUID-vkDestroyFramebuffer-pAllocator-parameter\",\n\"VUID-vkDestroyImage-pAllocator-parameter\",\n\"VUID-vkDestroyImageView-pAllocator-parameter\",\n\"VUID-vkDestroyIndirectCommandsLayoutNV-pAllocator-parameter\",\n\"VUID-vkDestroyInstance-pAllocator-parameter\",\n\"VUID-vkDestroyMicromapEXT-pAllocator-parameter\",\n\"VUID-vkDestroyOpticalFlowSessionNV-pAllocator-parameter\",\n\"VUID-vkDestroyPipeline-pAllocator-parameter\",\n\"VUID-vkDestroyPipelineCache-pAllocator-parameter\",\n\"VUID-vkDestroyPipelineLayout-pAllocator-parameter\",\n\"VUID-vkDestroyPrivateDataSlot-pAllocator-parameter\",\n\"VUID-vkDestroyQueryPool-pAllocator-parameter\",\n\"VUID-vkDestroyRenderPass-pAllocator-parameter\",\n\"VUID-vkDestroySampler-pAllocator-parameter\",\n\"VUID-vkDestroySamplerYcbcrConversion-pAllocator-parameter\",\n\"VUID-vkDestroySemaphore-pAllocator-parameter\",\n\"VUID-vkDestroyShaderEXT-pAllocator-parameter\",\n\"VUID-vkDestroyShaderModule-pAllocator-parameter\",\n\"VUID-vkDestroySurfaceKHR-pAllocator-parameter\",\n\"VUID-vkDestroySwapchainKHR-pAllocator-parameter\",\n\"VUID-vkDestroyValidationCacheEXT-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionKHR-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionParametersKHR-pAllocator-parameter\",\n\"VUID-vkFreeMemory-pAllocator-parameter\",\n\"VUID-vkRegisterDeviceEventEXT-pAllocator-parameter\",\n\"VUID-vkRegisterDisplayEventEXT-pAllocator-parameter\",\n\"VUID-vkAllocateMemory-pAllocator-parameter\",\n};\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCreateSamplerYcbcrConversion-pAllocator-parameter\", \"If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "\"VUID-vkCreateRenderPass-pAllocator-parameter\",\n\"VUID-vkCreateRenderPass2-pAllocator-parameter\",\n\"VUID-vkCreateSampler-pAllocator-parameter\",\n\"VUID-vkCreateSamplerYcbcrConversion-pAllocator-parameter\",\n\"VUID-vkCreateScreenSurfaceQNX-pAllocator-parameter\",\n\"VUID-vkCreateSemaphore-pAllocator-parameter\",\n\"VUID-vkCreateShaderModule-pAllocator-parameter\",\n\"VUID-vkCreateShadersEXT-pAllocator-parameter\",\n\"VUID-vkCreateSharedSwapchainsKHR-pAllocator-parameter\",\n\"VUID-vkCreateStreamDescriptorSurfaceGGP-pAllocator-parameter\",\n\"VUID-vkCreateSwapchainKHR-pAllocator-parameter\",\n\"VUID-vkCreateValidationCacheEXT-pAllocator-parameter\",\n\"VUID-vkCreateViSurfaceNN-pAllocator-parameter\",\n\"VUID-vkCreateVideoSessionKHR-pAllocator-parameter\",\n\"VUID-vkCreateVideoSessionParametersKHR-pAllocator-parameter\",\n\"VUID-vkCreateWaylandSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateWin32SurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateXcbSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateXlibSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkDestroyAccelerationStructureKHR-pAllocator-parameter\",\n\"VUID-vkDestroyAccelerationStructureNV-pAllocator-parameter\",\n\"VUID-vkDestroyBuffer-pAllocator-parameter\",\n\"VUID-vkDestroyBufferCollectionFUCHSIA-pAllocator-parameter\",\n\"VUID-vkDestroyBufferView-pAllocator-parameter\",\n\"VUID-vkDestroyCommandPool-pAllocator-parameter\",\n\"VUID-vkDestroyCuFunctionNVX-pAllocator-parameter\",\n\"VUID-vkDestroyCuModuleNVX-pAllocator-parameter\",\n\"VUID-vkDestroyCudaFunctionNV-pAllocator-parameter\",\n\"VUID-vkDestroyCudaModuleNV-pAllocator-parameter\",\n\"VUID-vkDestroyDebugReportCallbackEXT-pAllocator-parameter\",\n\"VUID-vkDestroyDebugUtilsMessengerEXT-pAllocator-parameter\",\n\"VUID-vkDestroyDeferredOperationKHR-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorPool-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorSetLayout-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorUpdateTemplate-pAllocator-parameter\",\n\"VUID-vkDestroyDevice-pAllocator-parameter\",\n\"VUID-vkDestroyEvent-pAllocator-parameter\",\n\"VUID-vkDestroyFence-pAllocator-parameter\",\n\"VUID-vkDestroyFramebuffer-pAllocator-parameter\",\n\"VUID-vkDestroyImage-pAllocator-parameter\",\n\"VUID-vkDestroyImageView-pAllocator-parameter\",\n\"VUID-vkDestroyIndirectCommandsLayoutNV-pAllocator-parameter\",\n\"VUID-vkDestroyInstance-pAllocator-parameter\",\n\"VUID-vkDestroyMicromapEXT-pAllocator-parameter\",\n\"VUID-vkDestroyOpticalFlowSessionNV-pAllocator-parameter\",\n\"VUID-vkDestroyPipeline-pAllocator-parameter\",\n\"VUID-vkDestroyPipelineCache-pAllocator-parameter\",\n\"VUID-vkDestroyPipelineLayout-pAllocator-parameter\",\n\"VUID-vkDestroyPrivateDataSlot-pAllocator-parameter\",\n\"VUID-vkDestroyQueryPool-pAllocator-parameter\",\n\"VUID-vkDestroyRenderPass-pAllocator-parameter\",\n\"VUID-vkDestroySampler-pAllocator-parameter\",\n\"VUID-vkDestroySamplerYcbcrConversion-pAllocator-parameter\",\n\"VUID-vkDestroySemaphore-pAllocator-parameter\",\n\"VUID-vkDestroyShaderEXT-pAllocator-parameter\",\n\"VUID-vkDestroyShaderModule-pAllocator-parameter\",\n\"VUID-vkDestroySurfaceKHR-pAllocator-parameter\",\n\"VUID-vkDestroySwapchainKHR-pAllocator-parameter\",\n\"VUID-vkDestroyValidationCacheEXT-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionKHR-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionParametersKHR-pAllocator-parameter\",\n\"VUID-vkFreeMemory-pAllocator-parameter\",\n\"VUID-vkRegisterDeviceEventEXT-pAllocator-parameter\",\n\"VUID-vkRegisterDisplayEventEXT-pAllocator-parameter\",\n\"VUID-vkAllocateMemory-pAllocator-parameter\",\n};\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCreateSharedSwapchainsKHR-pAllocator-parameter\", \"If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "\"VUID-vkCreateSemaphore-pAllocator-parameter\",\n\"VUID-vkCreateShaderModule-pAllocator-parameter\",\n\"VUID-vkCreateShadersEXT-pAllocator-parameter\",\n\"VUID-vkCreateSharedSwapchainsKHR-pAllocator-parameter\",\n\"VUID-vkCreateStreamDescriptorSurfaceGGP-pAllocator-parameter\",\n\"VUID-vkCreateSwapchainKHR-pAllocator-parameter\",\n\"VUID-vkCreateValidationCacheEXT-pAllocator-parameter\",\n\"VUID-vkCreateViSurfaceNN-pAllocator-parameter\",\n\"VUID-vkCreateVideoSessionKHR-pAllocator-parameter\",\n\"VUID-vkCreateVideoSessionParametersKHR-pAllocator-parameter\",\n\"VUID-vkCreateWaylandSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateWin32SurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateXcbSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateXlibSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkDestroyAccelerationStructureKHR-pAllocator-parameter\",\n\"VUID-vkDestroyAccelerationStructureNV-pAllocator-parameter\",\n\"VUID-vkDestroyBuffer-pAllocator-parameter\",\n\"VUID-vkDestroyBufferCollectionFUCHSIA-pAllocator-parameter\",\n\"VUID-vkDestroyBufferView-pAllocator-parameter\",\n\"VUID-vkDestroyCommandPool-pAllocator-parameter\",\n\"VUID-vkDestroyCuFunctionNVX-pAllocator-parameter\",\n\"VUID-vkDestroyCuModuleNVX-pAllocator-parameter\",\n\"VUID-vkDestroyCudaFunctionNV-pAllocator-parameter\",\n\"VUID-vkDestroyCudaModuleNV-pAllocator-parameter\",\n\"VUID-vkDestroyDebugReportCallbackEXT-pAllocator-parameter\",\n\"VUID-vkDestroyDebugUtilsMessengerEXT-pAllocator-parameter\",\n\"VUID-vkDestroyDeferredOperationKHR-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorPool-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorSetLayout-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorUpdateTemplate-pAllocator-parameter\",\n\"VUID-vkDestroyDevice-pAllocator-parameter\",\n\"VUID-vkDestroyEvent-pAllocator-parameter\",\n\"VUID-vkDestroyFence-pAllocator-parameter\",\n\"VUID-vkDestroyFramebuffer-pAllocator-parameter\",\n\"VUID-vkDestroyImage-pAllocator-parameter\",\n\"VUID-vkDestroyImageView-pAllocator-parameter\",\n\"VUID-vkDestroyIndirectCommandsLayoutNV-pAllocator-parameter\",\n\"VUID-vkDestroyInstance-pAllocator-parameter\",\n\"VUID-vkDestroyMicromapEXT-pAllocator-parameter\",\n\"VUID-vkDestroyOpticalFlowSessionNV-pAllocator-parameter\",\n\"VUID-vkDestroyPipeline-pAllocator-parameter\",\n\"VUID-vkDestroyPipelineCache-pAllocator-parameter\",\n\"VUID-vkDestroyPipelineLayout-pAllocator-parameter\",\n\"VUID-vkDestroyPrivateDataSlot-pAllocator-parameter\",\n\"VUID-vkDestroyQueryPool-pAllocator-parameter\",\n\"VUID-vkDestroyRenderPass-pAllocator-parameter\",\n\"VUID-vkDestroySampler-pAllocator-parameter\",\n\"VUID-vkDestroySamplerYcbcrConversion-pAllocator-parameter\",\n\"VUID-vkDestroySemaphore-pAllocator-parameter\",\n\"VUID-vkDestroyShaderEXT-pAllocator-parameter\",\n\"VUID-vkDestroyShaderModule-pAllocator-parameter\",\n\"VUID-vkDestroySurfaceKHR-pAllocator-parameter\",\n\"VUID-vkDestroySwapchainKHR-pAllocator-parameter\",\n\"VUID-vkDestroyValidationCacheEXT-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionKHR-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionParametersKHR-pAllocator-parameter\",\n\"VUID-vkFreeMemory-pAllocator-parameter\",\n\"VUID-vkRegisterDeviceEventEXT-pAllocator-parameter\",\n\"VUID-vkRegisterDisplayEventEXT-pAllocator-parameter\",\n\"VUID-vkAllocateMemory-pAllocator-parameter\",\n};\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCreateVideoSessionKHR-pAllocator-parameter\", \"If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "\"VUID-vkCreateSwapchainKHR-pAllocator-parameter\",\n\"VUID-vkCreateValidationCacheEXT-pAllocator-parameter\",\n\"VUID-vkCreateViSurfaceNN-pAllocator-parameter\",\n\"VUID-vkCreateVideoSessionKHR-pAllocator-parameter\",\n\"VUID-vkCreateVideoSessionParametersKHR-pAllocator-parameter\",\n\"VUID-vkCreateWaylandSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateWin32SurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateXcbSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateXlibSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkDestroyAccelerationStructureKHR-pAllocator-parameter\",\n\"VUID-vkDestroyAccelerationStructureNV-pAllocator-parameter\",\n\"VUID-vkDestroyBuffer-pAllocator-parameter\",\n\"VUID-vkDestroyBufferCollectionFUCHSIA-pAllocator-parameter\",\n\"VUID-vkDestroyBufferView-pAllocator-parameter\",\n\"VUID-vkDestroyCommandPool-pAllocator-parameter\",\n\"VUID-vkDestroyCuFunctionNVX-pAllocator-parameter\",\n\"VUID-vkDestroyCuModuleNVX-pAllocator-parameter\",\n\"VUID-vkDestroyCudaFunctionNV-pAllocator-parameter\",\n\"VUID-vkDestroyCudaModuleNV-pAllocator-parameter\",\n\"VUID-vkDestroyDebugReportCallbackEXT-pAllocator-parameter\",\n\"VUID-vkDestroyDebugUtilsMessengerEXT-pAllocator-parameter\",\n\"VUID-vkDestroyDeferredOperationKHR-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorPool-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorSetLayout-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorUpdateTemplate-pAllocator-parameter\",\n\"VUID-vkDestroyDevice-pAllocator-parameter\",\n\"VUID-vkDestroyEvent-pAllocator-parameter\",\n\"VUID-vkDestroyFence-pAllocator-parameter\",\n\"VUID-vkDestroyFramebuffer-pAllocator-parameter\",\n\"VUID-vkDestroyImage-pAllocator-parameter\",\n\"VUID-vkDestroyImageView-pAllocator-parameter\",\n\"VUID-vkDestroyIndirectCommandsLayoutNV-pAllocator-parameter\",\n\"VUID-vkDestroyInstance-pAllocator-parameter\",\n\"VUID-vkDestroyMicromapEXT-pAllocator-parameter\",\n\"VUID-vkDestroyOpticalFlowSessionNV-pAllocator-parameter\",\n\"VUID-vkDestroyPipeline-pAllocator-parameter\",\n\"VUID-vkDestroyPipelineCache-pAllocator-parameter\",\n\"VUID-vkDestroyPipelineLayout-pAllocator-parameter\",\n\"VUID-vkDestroyPrivateDataSlot-pAllocator-parameter\",\n\"VUID-vkDestroyQueryPool-pAllocator-parameter\",\n\"VUID-vkDestroyRenderPass-pAllocator-parameter\",\n\"VUID-vkDestroySampler-pAllocator-parameter\",\n\"VUID-vkDestroySamplerYcbcrConversion-pAllocator-parameter\",\n\"VUID-vkDestroySemaphore-pAllocator-parameter\",\n\"VUID-vkDestroyShaderEXT-pAllocator-parameter\",\n\"VUID-vkDestroyShaderModule-pAllocator-parameter\",\n\"VUID-vkDestroySurfaceKHR-pAllocator-parameter\",\n\"VUID-vkDestroySwapchainKHR-pAllocator-parameter\",\n\"VUID-vkDestroyValidationCacheEXT-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionKHR-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionParametersKHR-pAllocator-parameter\",\n\"VUID-vkFreeMemory-pAllocator-parameter\",\n\"VUID-vkRegisterDeviceEventEXT-pAllocator-parameter\",\n\"VUID-vkRegisterDisplayEventEXT-pAllocator-parameter\",\n\"VUID-vkAllocateMemory-pAllocator-parameter\",\n};\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCreateXlibSurfaceKHR-pAllocator-parameter\", \"If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "\"VUID-vkCreateWaylandSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateWin32SurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateXcbSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkCreateXlibSurfaceKHR-pAllocator-parameter\",\n\"VUID-vkDestroyAccelerationStructureKHR-pAllocator-parameter\",\n\"VUID-vkDestroyAccelerationStructureNV-pAllocator-parameter\",\n\"VUID-vkDestroyBuffer-pAllocator-parameter\",\n\"VUID-vkDestroyBufferCollectionFUCHSIA-pAllocator-parameter\",\n\"VUID-vkDestroyBufferView-pAllocator-parameter\",\n\"VUID-vkDestroyCommandPool-pAllocator-parameter\",\n\"VUID-vkDestroyCuFunctionNVX-pAllocator-parameter\",\n\"VUID-vkDestroyCuModuleNVX-pAllocator-parameter\",\n\"VUID-vkDestroyCudaFunctionNV-pAllocator-parameter\",\n\"VUID-vkDestroyCudaModuleNV-pAllocator-parameter\",\n\"VUID-vkDestroyDebugReportCallbackEXT-pAllocator-parameter\",\n\"VUID-vkDestroyDebugUtilsMessengerEXT-pAllocator-parameter\",\n\"VUID-vkDestroyDeferredOperationKHR-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorPool-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorSetLayout-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorUpdateTemplate-pAllocator-parameter\",\n\"VUID-vkDestroyDevice-pAllocator-parameter\",\n\"VUID-vkDestroyEvent-pAllocator-parameter\",\n\"VUID-vkDestroyFence-pAllocator-parameter\",\n\"VUID-vkDestroyFramebuffer-pAllocator-parameter\",\n\"VUID-vkDestroyImage-pAllocator-parameter\",\n\"VUID-vkDestroyImageView-pAllocator-parameter\",\n\"VUID-vkDestroyIndirectCommandsLayoutNV-pAllocator-parameter\",\n\"VUID-vkDestroyInstance-pAllocator-parameter\",\n\"VUID-vkDestroyMicromapEXT-pAllocator-parameter\",\n\"VUID-vkDestroyOpticalFlowSessionNV-pAllocator-parameter\",\n\"VUID-vkDestroyPipeline-pAllocator-parameter\",\n\"VUID-vkDestroyPipelineCache-pAllocator-parameter\",\n\"VUID-vkDestroyPipelineLayout-pAllocator-parameter\",\n\"VUID-vkDestroyPrivateDataSlot-pAllocator-parameter\",\n\"VUID-vkDestroyQueryPool-pAllocator-parameter\",\n\"VUID-vkDestroyRenderPass-pAllocator-parameter\",\n\"VUID-vkDestroySampler-pAllocator-parameter\",\n\"VUID-vkDestroySamplerYcbcrConversion-pAllocator-parameter\",\n\"VUID-vkDestroySemaphore-pAllocator-parameter\",\n\"VUID-vkDestroyShaderEXT-pAllocator-parameter\",\n\"VUID-vkDestroyShaderModule-pAllocator-parameter\",\n\"VUID-vkDestroySurfaceKHR-pAllocator-parameter\",\n\"VUID-vkDestroySwapchainKHR-pAllocator-parameter\",\n\"VUID-vkDestroyValidationCacheEXT-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionKHR-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionParametersKHR-pAllocator-parameter\",\n\"VUID-vkFreeMemory-pAllocator-parameter\",\n\"VUID-vkRegisterDeviceEventEXT-pAllocator-parameter\",\n\"VUID-vkRegisterDisplayEventEXT-pAllocator-parameter\",\n\"VUID-vkAllocateMemory-pAllocator-parameter\",\n};\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkDestroyBufferView-pAllocator-parameter\", \"If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "\"VUID-vkDestroyAccelerationStructureNV-pAllocator-parameter\",\n\"VUID-vkDestroyBuffer-pAllocator-parameter\",\n\"VUID-vkDestroyBufferCollectionFUCHSIA-pAllocator-parameter\",\n\"VUID-vkDestroyBufferView-pAllocator-parameter\",\n\"VUID-vkDestroyCommandPool-pAllocator-parameter\",\n\"VUID-vkDestroyCuFunctionNVX-pAllocator-parameter\",\n\"VUID-vkDestroyCuModuleNVX-pAllocator-parameter\",\n\"VUID-vkDestroyCudaFunctionNV-pAllocator-parameter\",\n\"VUID-vkDestroyCudaModuleNV-pAllocator-parameter\",\n\"VUID-vkDestroyDebugReportCallbackEXT-pAllocator-parameter\",\n\"VUID-vkDestroyDebugUtilsMessengerEXT-pAllocator-parameter\",\n\"VUID-vkDestroyDeferredOperationKHR-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorPool-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorSetLayout-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorUpdateTemplate-pAllocator-parameter\",\n\"VUID-vkDestroyDevice-pAllocator-parameter\",\n\"VUID-vkDestroyEvent-pAllocator-parameter\",\n\"VUID-vkDestroyFence-pAllocator-parameter\",\n\"VUID-vkDestroyFramebuffer-pAllocator-parameter\",\n\"VUID-vkDestroyImage-pAllocator-parameter\",\n\"VUID-vkDestroyImageView-pAllocator-parameter\",\n\"VUID-vkDestroyIndirectCommandsLayoutNV-pAllocator-parameter\",\n\"VUID-vkDestroyInstance-pAllocator-parameter\",\n\"VUID-vkDestroyMicromapEXT-pAllocator-parameter\",\n\"VUID-vkDestroyOpticalFlowSessionNV-pAllocator-parameter\",\n\"VUID-vkDestroyPipeline-pAllocator-parameter\",\n\"VUID-vkDestroyPipelineCache-pAllocator-parameter\",\n\"VUID-vkDestroyPipelineLayout-pAllocator-parameter\",\n\"VUID-vkDestroyPrivateDataSlot-pAllocator-parameter\",\n\"VUID-vkDestroyQueryPool-pAllocator-parameter\",\n\"VUID-vkDestroyRenderPass-pAllocator-parameter\",\n\"VUID-vkDestroySampler-pAllocator-parameter\",\n\"VUID-vkDestroySamplerYcbcrConversion-pAllocator-parameter\",\n\"VUID-vkDestroySemaphore-pAllocator-parameter\",\n\"VUID-vkDestroyShaderEXT-pAllocator-parameter\",\n\"VUID-vkDestroyShaderModule-pAllocator-parameter\",\n\"VUID-vkDestroySurfaceKHR-pAllocator-parameter\",\n\"VUID-vkDestroySwapchainKHR-pAllocator-parameter\",\n\"VUID-vkDestroyValidationCacheEXT-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionKHR-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionParametersKHR-pAllocator-parameter\",\n\"VUID-vkFreeMemory-pAllocator-parameter\",\n\"VUID-vkRegisterDeviceEventEXT-pAllocator-parameter\",\n\"VUID-vkRegisterDisplayEventEXT-pAllocator-parameter\",\n\"VUID-vkAllocateMemory-pAllocator-parameter\",\n};\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkDestroyCudaModuleNV-pAllocator-parameter\", \"If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "\"VUID-vkDestroyCuFunctionNVX-pAllocator-parameter\",\n\"VUID-vkDestroyCuModuleNVX-pAllocator-parameter\",\n\"VUID-vkDestroyCudaFunctionNV-pAllocator-parameter\",\n\"VUID-vkDestroyCudaModuleNV-pAllocator-parameter\",\n\"VUID-vkDestroyDebugReportCallbackEXT-pAllocator-parameter\",\n\"VUID-vkDestroyDebugUtilsMessengerEXT-pAllocator-parameter\",\n\"VUID-vkDestroyDeferredOperationKHR-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorPool-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorSetLayout-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorUpdateTemplate-pAllocator-parameter\",\n\"VUID-vkDestroyDevice-pAllocator-parameter\",\n\"VUID-vkDestroyEvent-pAllocator-parameter\",\n\"VUID-vkDestroyFence-pAllocator-parameter\",\n\"VUID-vkDestroyFramebuffer-pAllocator-parameter\",\n\"VUID-vkDestroyImage-pAllocator-parameter\",\n\"VUID-vkDestroyImageView-pAllocator-parameter\",\n\"VUID-vkDestroyIndirectCommandsLayoutNV-pAllocator-parameter\",\n\"VUID-vkDestroyInstance-pAllocator-parameter\",\n\"VUID-vkDestroyMicromapEXT-pAllocator-parameter\",\n\"VUID-vkDestroyOpticalFlowSessionNV-pAllocator-parameter\",\n\"VUID-vkDestroyPipeline-pAllocator-parameter\",\n\"VUID-vkDestroyPipelineCache-pAllocator-parameter\",\n\"VUID-vkDestroyPipelineLayout-pAllocator-parameter\",\n\"VUID-vkDestroyPrivateDataSlot-pAllocator-parameter\",\n\"VUID-vkDestroyQueryPool-pAllocator-parameter\",\n\"VUID-vkDestroyRenderPass-pAllocator-parameter\",\n\"VUID-vkDestroySampler-pAllocator-parameter\",\n\"VUID-vkDestroySamplerYcbcrConversion-pAllocator-parameter\",\n\"VUID-vkDestroySemaphore-pAllocator-parameter\",\n\"VUID-vkDestroyShaderEXT-pAllocator-parameter\",\n\"VUID-vkDestroyShaderModule-pAllocator-parameter\",\n\"VUID-vkDestroySurfaceKHR-pAllocator-parameter\",\n\"VUID-vkDestroySwapchainKHR-pAllocator-parameter\",\n\"VUID-vkDestroyValidationCacheEXT-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionKHR-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionParametersKHR-pAllocator-parameter\",\n\"VUID-vkFreeMemory-pAllocator-parameter\",\n\"VUID-vkRegisterDeviceEventEXT-pAllocator-parameter\",\n\"VUID-vkRegisterDisplayEventEXT-pAllocator-parameter\",\n\"VUID-vkAllocateMemory-pAllocator-parameter\",\n};\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkDestroyDescriptorSetLayout-pAllocator-parameter\", \"If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "\"VUID-vkDestroyDebugUtilsMessengerEXT-pAllocator-parameter\",\n\"VUID-vkDestroyDeferredOperationKHR-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorPool-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorSetLayout-pAllocator-parameter\",\n\"VUID-vkDestroyDescriptorUpdateTemplate-pAllocator-parameter\",\n\"VUID-vkDestroyDevice-pAllocator-parameter\",\n\"VUID-vkDestroyEvent-pAllocator-parameter\",\n\"VUID-vkDestroyFence-pAllocator-parameter\",\n\"VUID-vkDestroyFramebuffer-pAllocator-parameter\",\n\"VUID-vkDestroyImage-pAllocator-parameter\",\n\"VUID-vkDestroyImageView-pAllocator-parameter\",\n\"VUID-vkDestroyIndirectCommandsLayoutNV-pAllocator-parameter\",\n\"VUID-vkDestroyInstance-pAllocator-parameter\",\n\"VUID-vkDestroyMicromapEXT-pAllocator-parameter\",\n\"VUID-vkDestroyOpticalFlowSessionNV-pAllocator-parameter\",\n\"VUID-vkDestroyPipeline-pAllocator-parameter\",\n\"VUID-vkDestroyPipelineCache-pAllocator-parameter\",\n\"VUID-vkDestroyPipelineLayout-pAllocator-parameter\",\n\"VUID-vkDestroyPrivateDataSlot-pAllocator-parameter\",\n\"VUID-vkDestroyQueryPool-pAllocator-parameter\",\n\"VUID-vkDestroyRenderPass-pAllocator-parameter\",\n\"VUID-vkDestroySampler-pAllocator-parameter\",\n\"VUID-vkDestroySamplerYcbcrConversion-pAllocator-parameter\",\n\"VUID-vkDestroySemaphore-pAllocator-parameter\",\n\"VUID-vkDestroyShaderEXT-pAllocator-parameter\",\n\"VUID-vkDestroyShaderModule-pAllocator-parameter\",\n\"VUID-vkDestroySurfaceKHR-pAllocator-parameter\",\n\"VUID-vkDestroySwapchainKHR-pAllocator-parameter\",\n\"VUID-vkDestroyValidationCacheEXT-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionKHR-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionParametersKHR-pAllocator-parameter\",\n\"VUID-vkFreeMemory-pAllocator-parameter\",\n\"VUID-vkRegisterDeviceEventEXT-pAllocator-parameter\",\n\"VUID-vkRegisterDisplayEventEXT-pAllocator-parameter\",\n\"VUID-vkAllocateMemory-pAllocator-parameter\",\n};\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkDestroyFramebuffer-pAllocator-parameter\", \"If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "\"VUID-vkDestroyDevice-pAllocator-parameter\",\n\"VUID-vkDestroyEvent-pAllocator-parameter\",\n\"VUID-vkDestroyFence-pAllocator-parameter\",\n\"VUID-vkDestroyFramebuffer-pAllocator-parameter\",\n\"VUID-vkDestroyImage-pAllocator-parameter\",\n\"VUID-vkDestroyImageView-pAllocator-parameter\",\n\"VUID-vkDestroyIndirectCommandsLayoutNV-pAllocator-parameter\",\n\"VUID-vkDestroyInstance-pAllocator-parameter\",\n\"VUID-vkDestroyMicromapEXT-pAllocator-parameter\",\n\"VUID-vkDestroyOpticalFlowSessionNV-pAllocator-parameter\",\n\"VUID-vkDestroyPipeline-pAllocator-parameter\",\n\"VUID-vkDestroyPipelineCache-pAllocator-parameter\",\n\"VUID-vkDestroyPipelineLayout-pAllocator-parameter\",\n\"VUID-vkDestroyPrivateDataSlot-pAllocator-parameter\",\n\"VUID-vkDestroyQueryPool-pAllocator-parameter\",\n\"VUID-vkDestroyRenderPass-pAllocator-parameter\",\n\"VUID-vkDestroySampler-pAllocator-parameter\",\n\"VUID-vkDestroySamplerYcbcrConversion-pAllocator-parameter\",\n\"VUID-vkDestroySemaphore-pAllocator-parameter\",\n\"VUID-vkDestroyShaderEXT-pAllocator-parameter\",\n\"VUID-vkDestroyShaderModule-pAllocator-parameter\",\n\"VUID-vkDestroySurfaceKHR-pAllocator-parameter\",\n\"VUID-vkDestroySwapchainKHR-pAllocator-parameter\",\n\"VUID-vkDestroyValidationCacheEXT-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionKHR-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionParametersKHR-pAllocator-parameter\",\n\"VUID-vkFreeMemory-pAllocator-parameter\",\n\"VUID-vkRegisterDeviceEventEXT-pAllocator-parameter\",\n\"VUID-vkRegisterDisplayEventEXT-pAllocator-parameter\",\n\"VUID-vkAllocateMemory-pAllocator-parameter\",\n};\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkDestroyMicromapEXT-pAllocator-parameter\", \"If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "\"VUID-vkDestroyImageView-pAllocator-parameter\",\n\"VUID-vkDestroyIndirectCommandsLayoutNV-pAllocator-parameter\",\n\"VUID-vkDestroyInstance-pAllocator-parameter\",\n\"VUID-vkDestroyMicromapEXT-pAllocator-parameter\",\n\"VUID-vkDestroyOpticalFlowSessionNV-pAllocator-parameter\",\n\"VUID-vkDestroyPipeline-pAllocator-parameter\",\n\"VUID-vkDestroyPipelineCache-pAllocator-parameter\",\n\"VUID-vkDestroyPipelineLayout-pAllocator-parameter\",\n\"VUID-vkDestroyPrivateDataSlot-pAllocator-parameter\",\n\"VUID-vkDestroyQueryPool-pAllocator-parameter\",\n\"VUID-vkDestroyRenderPass-pAllocator-parameter\",\n\"VUID-vkDestroySampler-pAllocator-parameter\",\n\"VUID-vkDestroySamplerYcbcrConversion-pAllocator-parameter\",\n\"VUID-vkDestroySemaphore-pAllocator-parameter\",\n\"VUID-vkDestroyShaderEXT-pAllocator-parameter\",\n\"VUID-vkDestroyShaderModule-pAllocator-parameter\",\n\"VUID-vkDestroySurfaceKHR-pAllocator-parameter\",\n\"VUID-vkDestroySwapchainKHR-pAllocator-parameter\",\n\"VUID-vkDestroyValidationCacheEXT-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionKHR-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionParametersKHR-pAllocator-parameter\",\n\"VUID-vkFreeMemory-pAllocator-parameter\",\n\"VUID-vkRegisterDeviceEventEXT-pAllocator-parameter\",\n\"VUID-vkRegisterDisplayEventEXT-pAllocator-parameter\",\n\"VUID-vkAllocateMemory-pAllocator-parameter\",\n};\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkDestroyPrivateDataSlot-pAllocator-parameter\", \"If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "\"VUID-vkDestroyPipeline-pAllocator-parameter\",\n\"VUID-vkDestroyPipelineCache-pAllocator-parameter\",\n\"VUID-vkDestroyPipelineLayout-pAllocator-parameter\",\n\"VUID-vkDestroyPrivateDataSlot-pAllocator-parameter\",\n\"VUID-vkDestroyQueryPool-pAllocator-parameter\",\n\"VUID-vkDestroyRenderPass-pAllocator-parameter\",\n\"VUID-vkDestroySampler-pAllocator-parameter\",\n\"VUID-vkDestroySamplerYcbcrConversion-pAllocator-parameter\",\n\"VUID-vkDestroySemaphore-pAllocator-parameter\",\n\"VUID-vkDestroyShaderEXT-pAllocator-parameter\",\n\"VUID-vkDestroyShaderModule-pAllocator-parameter\",\n\"VUID-vkDestroySurfaceKHR-pAllocator-parameter\",\n\"VUID-vkDestroySwapchainKHR-pAllocator-parameter\",\n\"VUID-vkDestroyValidationCacheEXT-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionKHR-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionParametersKHR-pAllocator-parameter\",\n\"VUID-vkFreeMemory-pAllocator-parameter\",\n\"VUID-vkRegisterDeviceEventEXT-pAllocator-parameter\",\n\"VUID-vkRegisterDisplayEventEXT-pAllocator-parameter\",\n\"VUID-vkAllocateMemory-pAllocator-parameter\",\n};\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkDestroySemaphore-pAllocator-parameter\", \"If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "\"VUID-vkDestroyRenderPass-pAllocator-parameter\",\n\"VUID-vkDestroySampler-pAllocator-parameter\",\n\"VUID-vkDestroySamplerYcbcrConversion-pAllocator-parameter\",\n\"VUID-vkDestroySemaphore-pAllocator-parameter\",\n\"VUID-vkDestroyShaderEXT-pAllocator-parameter\",\n\"VUID-vkDestroyShaderModule-pAllocator-parameter\",\n\"VUID-vkDestroySurfaceKHR-pAllocator-parameter\",\n\"VUID-vkDestroySwapchainKHR-pAllocator-parameter\",\n\"VUID-vkDestroyValidationCacheEXT-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionKHR-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionParametersKHR-pAllocator-parameter\",\n\"VUID-vkFreeMemory-pAllocator-parameter\",\n\"VUID-vkRegisterDeviceEventEXT-pAllocator-parameter\",\n\"VUID-vkRegisterDisplayEventEXT-pAllocator-parameter\",\n\"VUID-vkAllocateMemory-pAllocator-parameter\",\n};\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkDestroyValidationCacheEXT-pAllocator-parameter\", \"If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "\"VUID-vkDestroyShaderModule-pAllocator-parameter\",\n\"VUID-vkDestroySurfaceKHR-pAllocator-parameter\",\n\"VUID-vkDestroySwapchainKHR-pAllocator-parameter\",\n\"VUID-vkDestroyValidationCacheEXT-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionKHR-pAllocator-parameter\",\n\"VUID-vkDestroyVideoSessionParametersKHR-pAllocator-parameter\",\n\"VUID-vkFreeMemory-pAllocator-parameter\",\n\"VUID-vkRegisterDeviceEventEXT-pAllocator-parameter\",\n\"VUID-vkRegisterDisplayEventEXT-pAllocator-parameter\",\n\"VUID-vkAllocateMemory-pAllocator-parameter\",\n};\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkRegisterDisplayEventEXT-pAllocator-parameter\", \"If pAllocator is not NULL, pAllocator must be a valid pointer to a valid VkAllocationCallbacks structure\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "\"VUID-vkDestroyVideoSessionParametersKHR-pAllocator-parameter\",\n\"VUID-vkFreeMemory-pAllocator-parameter\",\n\"VUID-vkRegisterDeviceEventEXT-pAllocator-parameter\",\n\"VUID-vkRegisterDisplayEventEXT-pAllocator-parameter\",\n\"VUID-vkAllocateMemory-pAllocator-parameter\",\n};\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkDispatchIndirectCommand-y-00418\", \"y must be less than or equal to VkPhysicalDeviceLimits::maxComputeWorkGroupCount[1]\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "skip |= gpuav.LogError(\"VUID-VkDispatchIndirectCommand-y-00418\", objlist, loc,\n                       \"Indirect dispatch VkDispatchIndirectCommand::y of %\" PRIu32\n                       \" would exceed maxComputeWorkGroupCount[1] limit of %\" PRIu32 \".\",\n                       count, gpuav.phys_dev_props.limits.maxComputeWorkGroupCount[1]);\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-RuntimeSpirv-OpRayQueryInitializeKHR-06349\", \"For OpRayQueryInitializeKHR instructions, the RayTmin and RayTmax operands must be non-negative floating-point values\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "strm << \"OpRayQueryInitializeKHR operand Ray Tmin value is negative. \";\nout_vuid_msg = \"VUID-RuntimeSpirv-OpRayQueryInitializeKHR-06349\";\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-RuntimeSpirv-OpRayQueryInitializeKHR-06351\", \"For OpRayQueryInitializeKHR instructions, RayOrigin, RayDirection, RayTmin, and RayTmax operands must not contain NaNs\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "strm << \"OpRayQueryInitializeKHR operand Ray Origin contains a NaN. \";\nout_vuid_msg = \"VUID-RuntimeSpirv-OpRayQueryInitializeKHR-06351\";\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-RuntimeSpirv-OpRayQueryInitializeKHR-06890\", \"For OpRayQueryInitializeKHR instructions, the Rayflags operand must not contain more than one of SkipTrianglesKHR, CullBackFacingTrianglesKHR, and CullFrontFacingTrianglesKHR\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "strm << \"OpRayQueryInitializeKHR operand Ray Flags is 0x\" << std::hex << value << \". \";\nout_vuid_msg = \"VUID-RuntimeSpirv-OpRayQueryInitializeKHR-06890\";\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkFreeDescriptorSets-pDescriptorSets-parent\", \"Each element of pDescriptorSets that is a valid handle must have been created, allocated, or retrieved from descriptorPool\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "// We know that the parent *must* be a descriptor pool\nconst LogObjectList objlist(descriptor_set, parent_pool, descriptor_pool);\nskip |= LogError(\"VUID-vkFreeDescriptorSets-pDescriptorSets-parent\", objlist, loc,\n                 \"attempting to free %s\"\n                 \" belonging to %s from %s.\",\n                 FormatHandle(descriptor_set).c_str(), FormatHandle(parent_pool).c_str(),\n                 FormatHandle(descriptor_pool).c_str());\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkWriteDescriptorSet-descriptorType-02995\", \"If descriptorType is VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER or VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER and the nullDescriptor feature is not enabled, each element of pTexelBufferView must not be VK_NULL_HANDLE\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!null_descriptor_enabled && desc->pTexelBufferView[i] == VK_NULL_HANDLE) {\n    skip |= LogError(\"VUID-VkWriteDescriptorSet-descriptorType-02995\", desc->dstSet,\n                     loc.dot(Field::pTexelBufferView, i), \"is VK_NULL_HANDLE.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkWriteDescriptorSet-descriptorType-07683\", \"If descriptorType is VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT, the imageView member of each element of pImageInfo must not be VK_NULL_HANDLE\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "\"VUID-VkWriteDescriptorSet-descriptorType-07683\",\n\"VUID-vkUpdateDescriptorSets-pDescriptorWrites-06239\",\nloc.dot(Field::pImageInfo, i).dot(Field::imageView));\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkUpdateDescriptorSets-pDescriptorWrites-06240\", \"For each element i where pDescriptorWrites[i].descriptorType is VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR, elements of the pAccelerationStructures member of a VkWriteDescriptorSetAccelerationStructureKHR structure in the pNext chain of pDescriptorWrites[i] must have been created on device\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "\"VUID-VkWriteDescriptorSetAccelerationStructureKHR-pAccelerationStructures-parameter\",\n\"VUID-vkUpdateDescriptorSets-pDescriptorWrites-06240\",\nloc.pNext(Struct::VkWriteDescriptorSetAccelerationStructureKHR, Field::pAccelerationStructures, i));\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdPushDescriptorSetKHR-commonparent\", \"Both of commandBuffer, and layout must have been created, allocated, or retrieved from the same VkDevice\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "// Checked by chassis: commandBuffer: \"VUID-vkCmdPushDescriptorSetKHR-commandBuffer-parameter\"\nskip |= ValidateObject(layout, kVulkanObjectTypePipelineLayout, false, \"VUID-vkCmdPushDescriptorSetKHR-layout-parameter\",\n                       \"VUID-vkCmdPushDescriptorSetKHR-commonparent\", error_obj.location.dot(Field::layout));\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkDestroyInstance-instance-00630\", \"If VkAllocationCallbacks were provided when instance was created, a compatible set of callbacks must be provided here\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "skip |= obj_lifetimes_data->ReportUndestroyedDeviceObjects(device, error_obj.location);\nskip |= ValidateDestroyObject(device, kVulkanObjectTypeDevice, pAllocator, \"VUID-vkDestroyInstance-instance-00630\",\n                              \"VUID-vkDestroyInstance-instance-00631\", error_obj.location);\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkDestroyDevice-device-00379\", \"If VkAllocationCallbacks were provided when device was created, a compatible set of callbacks must be provided here\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "bool skip = false;\n// Checked by chassis: device: \"VUID-vkDestroyDevice-device-parameter\"\nskip |= ValidateDestroyObject(device, kVulkanObjectTypeDevice, pAllocator, \"VUID-vkDestroyDevice-device-00379\",\n                              \"VUID-vkDestroyDevice-device-00380\", error_obj.location);\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkResetDescriptorPool-device-parameter\", \"device must be a valid VkDevice handle\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "// Checked by chassis: device: \"VUID-vkResetDescriptorPool-device-parameter\"\nskip |= ValidateObject(descriptorPool, kVulkanObjectTypeDescriptorPool, false,\n                       \"VUID-vkResetDescriptorPool-descriptorPool-parameter\",\n                       \"VUID-vkResetDescriptorPool-descriptorPool-parent\", error_obj.location.dot(Field::descriptorPool));\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkCommandBufferInheritanceInfo-commonparent\", \"Both of framebuffer, and renderPass that are valid handles of non-ignored parameters must have been created, allocated, or retrieved from the same VkDevice\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "\"VUID-VkCommandBufferBeginInfo-flags-06000\", \"VUID-VkCommandBufferInheritanceInfo-commonparent\",\ninheritance_info_loc.dot(Field::renderPass));\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkAllocateCommandBuffers-device-parameter\", \"device must be a valid VkDevice handle\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "bool ObjectLifetimes::PreCallValidateAllocateCommandBuffers(VkDevice device, const VkCommandBufferAllocateInfo *pAllocateInfo,\n    // Checked by chassis: device: \"VUID-vkAllocateCommandBuffers-device-parameter\"\n     skip |= ValidateObject(pAllocateInfo->commandPool, kVulkanObjectTypeCommandPool, false,\n                           \"VUID-VkCommandBufferAllocateInfo-commandPool-parameter\", kVUIDUndefined,\n                           error_obj.location.dot(Field::pAllocateInfo).dot(Field::commandPool));\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkDescriptorSetAllocateInfo-commonparent\", \"Both of descriptorPool, and the elements of pSetLayouts must have been created, allocated, or retrieved from the same VkDevice\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "for (uint32_t i = 0; i < pAllocateInfo->descriptorSetCount; i++) {\n    skip |= ValidateObject(pAllocateInfo->pSetLayouts[i], kVulkanObjectTypeDescriptorSetLayout, false,\n                           \"VUID-VkDescriptorSetAllocateInfo-pSetLayouts-parameter\",\n                           \"VUID-VkDescriptorSetAllocateInfo-commonparent\", allocate_info.dot(Field::pSetLayouts, i));\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkFreeDescriptorSets-device-parameter\", \"device must be a valid VkDevice handle\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "// Checked by chassis: device: \"VUID-vkFreeDescriptorSets-device-parameter\"\nskip |=\n    ValidateObject(descriptorPool, kVulkanObjectTypeDescriptorPool, false, \"VUID-vkFreeDescriptorSets-descriptorPool-parameter\",\n                   \"VUID-vkFreeDescriptorSets-descriptorPool-parent\", error_obj.location.dot(Field::descriptorPool));\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkDestroyDescriptorPool-descriptorPool-parent\", \"If descriptorPool is a valid handle, it must have been created, allocated, or retrieved from device\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "const Location descriptor_pool_loc = error_obj.location.dot(Field::descriptorPool);\nskip |= ValidateObject(descriptorPool, kVulkanObjectTypeDescriptorPool, true,\n                       \"VUID-vkDestroyDescriptorPool-descriptorPool-parameter\",\n                       \"VUID-vkDestroyDescriptorPool-descriptorPool-parent\", descriptor_pool_loc);\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkDestroyCommandPool-commandPool-parent\", \"If commandPool is a valid handle, it must have been created, allocated, or retrieved from device\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "const Location command_pool_loc = error_obj.location.dot(Field::commandPool);\nskip |= ValidateObject(commandPool, kVulkanObjectTypeCommandPool, true, \"VUID-vkDestroyCommandPool-commandPool-parameter\",\n                       \"VUID-vkDestroyCommandPool-commandPool-parent\", command_pool_loc);\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkFramebufferCreateInfo-commonparent\", \"Both of renderPass, and the elements of pAttachments that are valid handles of non-ignored parameters must have been created, allocated, or retrieved from the same VkDevice\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (pCreateInfo) {\n    skip |= ValidateObject(pCreateInfo->renderPass, kVulkanObjectTypeRenderPass, false,\n                           \"VUID-VkFramebufferCreateInfo-renderPass-parameter\", \"VUID-VkFramebufferCreateInfo-commonparent\",\n                           create_info_loc.dot(Field::renderPass));\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkDebugMarkerSetObjectTagEXT-device-parameter\", \"device must be a valid VkDevice handle\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "bool ObjectLifetimes::PreCallValidateDebugMarkerSetObjectTagEXT(VkDevice device, const VkDebugMarkerObjectTagInfoEXT *pTagInfo,\n    // Checked by chassis: device: \"VUID-vkDebugMarkerSetObjectTagEXT-device-parameter\"\n    bool skip = false;\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkDebugMarkerObjectNameInfoEXT-objectType-01490\", \"objectType must not be VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (pNameInfo->objectType == VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT) {\n    skip |= LogError(\"VUID-VkDebugMarkerObjectNameInfoEXT-objectType-01490\", device,\n                     error_obj.location.dot(Field::pNameInfo).dot(Field::objectType),\n                     \"is VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkSetDebugUtilsObjectNameEXT-pNameInfo-07873\", \"If pNameInfo->objectHandle is the valid handle of a physical-device-level object, the VkDevice identified by device must be a descendant of the same VkPhysicalDevice as the object identified by pNameInfo->objectHandle\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (IsInstanceVkObjectType(object_type)) {\n    // VUID-vkSetDebugUtilsObjectNameEXT-pNameInfo-07872 /  VUID-vkSetDebugUtilsObjectNameEXT-pNameInfo-07873\n} else if (object_type == VK_OBJECT_TYPE_DEVICE) {\n    if (HandleToUint64(device) != object_handle) {\n        skip |= LogError(\"VUID-vkSetDebugUtilsObjectNameEXT-pNameInfo-07874\", device, error_obj.location.dot(Field::objectType),\n                         \"is VK_OBJECT_TYPE_DEVICE but objectHandle (0x%\" PRIx64 \") != device (%s).\", object_handle,\n                         FormatHandle(device).c_str());\n    }\n} else {\n    skip |= ValidateAnonymousObject(object_handle, object_type, \"VUID-VkDebugUtilsObjectNameInfoEXT-objectType-02590\",\n                                    \"VUID-vkSetDebugUtilsObjectNameEXT-pNameInfo-07874\",\n                                    error_obj.location.dot(Field::pNameInfo).dot(Field::objectHandle));\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkSetDebugUtilsObjectTagEXT-pNameInfo-07875\", \"If pNameInfo->objectHandle is the valid handle of an instance-level object, the VkDevice identified by device must be a descendent of the same VkInstance as the object identified by pNameInfo->objectHandle\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (IsInstanceVkObjectType(object_type)) {\n    // VUID-vkSetDebugUtilsObjectTagEXT-pNameInfo-07875 / VUID-vkSetDebugUtilsObjectTagEXT-pNameInfo-07876\n} else if (object_type == VK_OBJECT_TYPE_DEVICE) {\n    if (HandleToUint64(device) != object_handle) {\n        skip |= LogError(\"VUID-vkSetDebugUtilsObjectTagEXT-pNameInfo-07877\", device,\n                         error_obj.location.dot(Field::pTagInfo).dot(Field::objectType),\n                         \"is VK_OBJECT_TYPE_DEVICE but objectHandle (0x%\" PRIx64 \") != device (%s).\", object_handle,\n                         FormatHandle(device).c_str());\n    }\n} else {\n    skip |= ValidateAnonymousObject(object_handle, object_type, \"VUID-VkDebugUtilsObjectTagInfoEXT-objectHandle-01910\",\n                                    \"VUID-vkSetDebugUtilsObjectTagEXT-pNameInfo-07877\",\n                                    error_obj.location.dot(Field::pTagInfo).dot(Field::objectHandle));\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCreateDescriptorUpdateTemplate-device-parameter\", \"device must be a valid VkDevice handle\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "// Checked by chassis: device: \"VUID-vkCreateDescriptorUpdateTemplate-device-parameter\"\nif (pCreateInfo) {\n    const Location create_info_loc = error_obj.location.dot(Field::pCreateInfo);\n    if (pCreateInfo->templateType == VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET) {\n        skip |= ValidateObject(pCreateInfo->descriptorSetLayout, kVulkanObjectTypeDescriptorSetLayout, false,\n                               \"VUID-VkDescriptorUpdateTemplateCreateInfo-templateType-00350\",\n                               \"VUID-VkDescriptorUpdateTemplateCreateInfo-commonparent\",\n                               create_info_loc.dot(Field::descriptorSetLayout));\n    }\n    if (pCreateInfo->templateType == VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR) {\n        skip |= ValidateObject(pCreateInfo->pipelineLayout, kVulkanObjectTypePipelineLayout, false,\n                               \"VUID-VkDescriptorUpdateTemplateCreateInfo-templateType-00352\",\n                               \"VUID-VkDescriptorUpdateTemplateCreateInfo-commonparent\",\n                               create_info_loc.dot(Field::pipelineLayout));\n    }\n}\nreturn skip;\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdBuildAccelerationStructuresKHR-srcAccelerationStructure-04629\", \"If the srcAccelerationStructure member of any element of pInfos is not VK_NULL_HANDLE, the srcAccelerationStructure member must be a valid VkAccelerationStructureKHR handle\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "bool skip = false;\n// Checked by chassis: commandBuffer: \"VUID-vkCmdBuildAccelerationStructuresKHR-commandBuffer-parameter\"\nskip |= ValidateAccelerationStructures(\"VUID-vkCmdBuildAccelerationStructuresKHR-srcAccelerationStructure-04629\",\n                                       \"VUID-vkCmdBuildAccelerationStructuresKHR-dstAccelerationStructure-03800\", infoCount,\n                                       pInfos, error_obj.location);\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkBuildAccelerationStructuresKHR-device-parameter\", \"device must be a valid VkDevice handle\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "// Checked by chassis: device: \"VUID-vkBuildAccelerationStructuresKHR-device-parameter\"\nskip |= ValidateObject(deferredOperation, kVulkanObjectTypeDeferredOperationKHR, true,\n                       \"VUID-vkBuildAccelerationStructuresKHR-deferredOperation-parameter\",\n                       \"VUID-vkBuildAccelerationStructuresKHR-deferredOperation-parent\",\n                       error_obj.location.dot(Field::deferredOperation));\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCreateRayTracingPipelinesKHR-device-parameter\", \"device must be a valid VkDevice handle\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "// Checked by chassis: device: \"VUID-vkCreateRayTracingPipelinesKHR-device-parameter\"\nskip |= ValidateObject(deferredOperation, kVulkanObjectTypeDeferredOperationKHR, true,\n                       \"VUID-vkCreateRayTracingPipelinesKHR-deferredOperation-parameter\",\n                       \"VUID-vkCreateRayTracingPipelinesKHR-deferredOperation-parent\",\n                       error_obj.location.dot(Field::deferredOperation));\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkPipelineLibraryCreateInfoKHR-pLibraries-parameter\", \"If libraryCount is not 0, pLibraries must be a valid pointer to an array of libraryCount valid VkPipeline handles\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (pCreateInfos[index0].pLibraryInfo->pLibraries) {\n        skip |= ValidateObject(pCreateInfos[index0].pLibraryInfo->pLibraries[index2], kVulkanObjectTypePipeline,\n                               false, \"VUID-VkPipelineLibraryCreateInfoKHR-pLibraries-parameter\", kVUIDUndefined,\n                               create_info_loc.dot(Field::pLibraryInfo).dot(Field::pLibraries, index2));\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkExportMetalObjectsEXT-device-parameter\", \"device must be a valid VkDevice handle\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "bool ObjectLifetimes::PreCallValidateExportMetalObjectsEXT(VkDevice device, VkExportMetalObjectsInfoEXT *pMetalObjectsInfo,\n    // Checked by chassis: device: \"VUID-vkExportMetalObjectsEXT-device-parameter\"\n     const VkBaseOutStructure *metal_objects_info_ptr = reinterpret_cast<const VkBaseOutStructure *>(pMetalObjectsInfo->pNext);\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkExportMetalTextureInfoEXT-commonparent\", \"Each of bufferView, image, and imageView that are valid handles of non-ignored parameters must have been created, allocated, or retrieved from the same VkDevice\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "\"VUID-VkExportMetalTextureInfoEXT-commonparent\", error_obj.location);\n\"VUID-VkExportMetalTextureInfoEXT-imageView-parameter\",\n\"VUID-VkExportMetalTextureInfoEXT-commonparent\", error_obj.location);\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkExportMetalSharedEventInfoEXT-semaphore-parameter\", \"If semaphore is not VK_NULL_HANDLE, semaphore must be a valid VkSemaphore handle\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "auto metal_shared_event_ptr = reinterpret_cast<const VkExportMetalSharedEventInfoEXT *>(metal_objects_info_ptr);\nskip |= ValidateObject(metal_shared_event_ptr->semaphore, kVulkanObjectTypeSemaphore, true,\n                       \"VUID-VkExportMetalSharedEventInfoEXT-semaphore-parameter\",\n                       \"VUID-VkExportMetalSharedEventInfoEXT-commonparent\", error_obj.location);\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkSetPrivateData-objectHandle-04017\", \"objectHandle must be a valid handle to an object of type objectType\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "skip |= ValidateAnonymousObject(objectHandle, objectType, \"VUID-vkSetPrivateData-objectHandle-04017\",\n                                \"VUID-vkSetPrivateData-objectHandle-04016\", error_obj.location.dot(Field::objectHandle));\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkGetPrivateData-privateDataSlot-parent\", \"privateDataSlot must have been created, allocated, or retrieved from device\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "ValidateObject(privateDataSlot, kVulkanObjectTypePrivateDataSlot, false, \"VUID-vkGetPrivateData-privateDataSlot-parameter\",\n               \"VUID-vkGetPrivateData-privateDataSlot-parent\", error_obj.location.dot(Field::privateDataSlot));\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkBufferCreateInfo-flags-00916\", \"If the sparseResidencyBuffer feature is not enabled, flags must not contain VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((pCreateInfo->flags & VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT) && (!enabled_features.sparseResidencyBuffer)) {\n    skip |= LogError(\"VUID-VkBufferCreateInfo-flags-00916\", device, create_info_loc.dot(Field::flags),\n                     \"includes VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT, but the sparseResidencyBuffer feature is not enabled.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkBufferCreateInfo-None-09500\", \"If the pNext chain does not include a VkBufferUsageFlags2CreateInfoKHR structure, usage must not be 0\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!vku::FindStructInPNextChain<VkBufferUsageFlags2CreateInfoKHR>(pCreateInfo->pNext)) {\n                          pCreateInfo->usage, kRequiredFlags, \"VUID-VkBufferCreateInfo-None-09499\",\n                          \"VUID-VkBufferCreateInfo-None-09500\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdBindIndexBuffer-buffer-09494\", \"If buffer is VK_NULL_HANDLE, offset must be zero\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "vuid = is_2 ? \"VUID-vkCmdBindIndexBuffer2KHR-None-09493\" : \"VUID-vkCmdBindIndexBuffer-None-09493\";\nskip |= LogError(vuid, commandBuffer, loc.dot(Field::buffer), \"is VK_NULL_HANDLE.\");\nvuid = is_2 ? \"VUID-vkCmdBindIndexBuffer2KHR-buffer-09494\" : \"VUID-vkCmdBindIndexBuffer-buffer-09494\";\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdBindIndexBuffer2KHR-indexType-08787\", \"If indexType is VK_INDEX_TYPE_UINT8_KHR, the indexTypeUint8 feature must be enabled\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (indexType == VK_INDEX_TYPE_UINT8_KHR && !enabled_features.indexTypeUint8) {\n    vuid = is_2 ? \"VUID-vkCmdBindIndexBuffer2KHR-indexType-08787\" : \"VUID-vkCmdBindIndexBuffer-indexType-08787\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdBindVertexBuffers-pBuffers-04002\", \"If an element of pBuffers is VK_NULL_HANDLE, then the corresponding element of pOffsets must be zero\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (pOffsets[i] != 0) {\n    skip |= LogError(\"VUID-vkCmdBindVertexBuffers-pBuffers-04002\", commandBuffer, buffer_loc,\n                     \"is VK_NULL_HANDLE, but pOffsets[%\" PRIu32 \"] is not 0.\", i);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdBindTransformFeedbackBuffersEXT-pSize-02361\", \"If the optional pSize array is specified, each element of pSizes must either be VK_WHOLE_SIZE, or be less than or equal to VkPhysicalDeviceTransformFeedbackPropertiesEXT::maxTransformFeedbackBufferSize\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (pSizes[i] != VK_WHOLE_SIZE &&\n    skip |= LogError(\"VUID-vkCmdBindTransformFeedbackBuffersEXT-pSize-02361\", commandBuffer,\n                     error_obj.location.dot(Field::pSizes, i),\n                     \"(%\" PRIu64\n                     \") is not VK_WHOLE_SIZE and is greater than \"\n                     \"maxTransformFeedbackBufferSize.\",\n                     pSizes[i]);\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdEndTransformFeedbackEXT-pCounterBuffer-02379\", \"If pCounterBuffer is NULL, then pCounterBufferOffsets must also be NULL\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (pCounterBuffers == nullptr && pCounterBufferOffsets != nullptr) {\n    skip |= LogError(\"VUID-vkCmdEndTransformFeedbackEXT-pCounterBuffer-02379\", commandBuffer, error_obj.location,\n                     \"pCounterBuffers is NULL and pCounterBufferOffsets is not NULL.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdBindVertexBuffers2-pOffsets-parameter\", \"pOffsets must be a valid pointer to an array of bindingCount VkDeviceSize values\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!pOffsets && bindingCount > 0) {\n    skip |= LogError(\"VUID-vkCmdBindVertexBuffers2-pOffsets-parameter\", commandBuffer,\n                     error_obj.location.dot(Field::pOffsets), \"is NULL.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdBindVertexBuffers2-pBuffers-04112\", \"If an element of pBuffers is VK_NULL_HANDLE, then the corresponding element of pOffsets must be zero\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!enabled_features.nullDescriptor) {\n    skip |= LogError(\"VUID-vkCmdBindVertexBuffers2-pBuffers-04111\", commandBuffer, buffer_loc, \"is VK_NULL_HANDLE.\");\n    skip |= LogError(\"VUID-vkCmdBindVertexBuffers2-pBuffers-04112\", commandBuffer, buffer_loc,\n                     \"is VK_NULL_HANDLE, but pOffsets[%\" PRIu32 \"] is not 0.\", i);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdPushConstants-size-00371\", \"size must be less than or equal to VkPhysicalDeviceLimits::maxPushConstantsSize minus offset\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (size > max_push_constants_size - offset) {\n    const char *vuid = is_2 ? \"VUID-VkPushConstantsInfoKHR-size-00371\" : \"VUID-vkCmdPushConstants-size-00371\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkPushConstantsInfoKHR-None-09495\", \"If the dynamicPipelineLayout feature is not enabled, layout must be a valid VkPipelineLayout handle\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!enabled_features.dynamicPipelineLayout) {\n    skip |= LogError(\"VUID-VkPushConstantsInfoKHR-None-09495\", commandBuffer,\n                     error_obj.location.dot(Field::pPushConstantsInfo).dot(Field::layout), \"is VK_NULL_HANDLE.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdClearAttachments-layerCount-01934\", \"The layerCount member of each element of pRects must not be 0\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (pRects[rect].layerCount == 0) {\n        LogError(\"VUID-vkCmdClearAttachments-layerCount-01934\", commandBuffer, rect_loc.dot(Field::layerCount), \"is zero.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdUpdateBuffer-dstOffset-00036\", \"dstOffset must be a multiple of 4\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (dstOffset & 3) {\n    const LogObjectList objlist(commandBuffer, dstBuffer);\n    skip |= LogError(\"VUID-vkCmdUpdateBuffer-dstOffset-00036\", objlist, error_obj.location.dot(Field::dstOffset),\n                     \"(%\" PRIu64 \"), is not a multiple of 4.\", dstOffset);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdFillBuffer-size-00028\", \"If size is not equal to VK_WHOLE_SIZE, size must be a multiple of 4\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "\"(%\" PRIu64 \") must be greater than zero.\", size);\n} else if (size & 3) {\nconst LogObjectList objlist(commandBuffer, dstBuffer);\nskip |= LogError(\"VUID-vkCmdFillBuffer-size-00028\", objlist, error_obj.location.dot(Field::size),\n\"(%\" PRIu64 \") is not a multiple of 4.\", size);\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkPhysicalDeviceExternalBufferInfo-None-09500\", \"If the pNext chain does not include a VkBufferUsageFlags2CreateInfoKHR structure, usage must not be 0\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "kRequiredFlags, \"VUID-VkPhysicalDeviceExternalBufferInfo-None-09499\",\n\"VUID-VkPhysicalDeviceExternalBufferInfo-None-09500\");\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkViewport-apiVersion-07917\", \"If the VK_KHR_maintenance1 extension is not enabled, the VK_AMD_negative_viewport_height extension is not enabled, and VkPhysicalDeviceProperties::apiVersion is less than Vulkan 1.1, height must be greater than 0.0\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!negative_height_enabled && !(viewport.height > 0.0f)) {\n    skip |= LogError(\"VUID-VkViewport-apiVersion-07917\", object, loc.dot(Field::height), \"(%f) is not greater 0.0.\",\n                     viewport.height);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkViewport-y-01776\", \"y must be less than or equal to viewportBoundsRange[1]\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "} else if (negative_height_enabled && viewport.y > device_limits.viewportBoundsRange[1]) {\n    skip |= LogError(\"VUID-VkViewport-y-01776\", object, loc.dot(Field::y),\n                     \"(%f) exceeds VkPhysicalDeviceLimits::viewportBoundsRange[1] (%f).\", viewport.y,\n                     device_limits.viewportBoundsRange[1]);\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkCommandBufferInheritanceInfo-sType-sType\", \"sType must be VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "\"VUID-VkCommandBufferInheritanceInfo-sType-sType\");\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkCommandBufferInheritanceInfo-queryFlags-02788\", \"If the inheritedQueries feature is not enabled, queryFlags must be 0\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "\"VUID-VkCommandBufferInheritanceInfo-queryFlags-00057\");\nskip |= ValidateReservedFlags(inheritance_loc.dot(Field::queryFlags), info->queryFlags,\n        \"VUID-VkCommandBufferInheritanceInfo-queryFlags-02788\");\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdSetViewportWithCount-viewportCount-03395\", \"If the multiViewport feature is not enabled, viewportCount must be 1\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (viewportCount != 1) {\n    skip |= LogError(\"VUID-vkCmdSetViewportWithCount-viewportCount-03395\", commandBuffer,\n                     error_obj.location.dot(Field::viewportCount),\n                     \"(%\" PRIu32 \") is not 1, but the multiViewport feature is not enabled.\", viewportCount);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdSetScissorWithCount-x-03399\", \"The x and y members of offset member of any element of pScissors must be greater than or equal to 0\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (scissor.offset.x < 0) {\n    skip |= LogError(\"VUID-vkCmdSetScissorWithCount-x-03399\", commandBuffer,\n                     scissor_loc.dot(Field::offset).dot(Field::x), \"(%\" PRId32 \") is negative.\", scissor.offset.x);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdSetVertexInputEXT-vertexAttributeDescriptionCount-04792\", \"vertexAttributeDescriptionCount must be less than or equal to VkPhysicalDeviceLimits::maxVertexInputAttributes\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (vertexAttributeDescriptionCount > device_limits.maxVertexInputAttributes) {\n    skip |= LogError(\"VUID-vkCmdSetVertexInputEXT-vertexAttributeDescriptionCount-04792\", commandBuffer,\n                     error_obj.location.dot(Field::vertexAttributeDescriptionCount),\n                     \"(%\" PRIu32 \") is greater than the maxVertexInputAttributes limit (%\" PRIu32 \").\",\n                     vertexAttributeDescriptionCount, device_limits.maxVertexInputAttributes);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkVertexInputBindingDescription2EXT-stride-04797\", \"stride must be less than or equal to VkPhysicalDeviceLimits::maxVertexInputBindingStride\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (pVertexBindingDescriptions[binding].stride > device_limits.maxVertexInputBindingStride) {\n    skip |= LogError(\"VUID-VkVertexInputBindingDescription2EXT-stride-04797\", commandBuffer, binding_loc.dot(Field::stride),\n                     \"(%\" PRIu32 \") is greater than maxVertexInputBindingStride (%\" PRIu32 \").\",\n                     pVertexBindingDescriptions[binding].stride, device_limits.maxVertexInputBindingStride);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkVertexInputAttributeDescription2EXT-location-06228\", \"location must be less than VkPhysicalDeviceLimits::maxVertexInputAttributes\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (pVertexAttributeDescriptions[attribute].location > device_limits.maxVertexInputAttributes) {\n    skip |= LogError(\"VUID-VkVertexInputAttributeDescription2EXT-location-06228\", commandBuffer,\n                     attribute_loc.dot(Field::location),\n                     \"(%\" PRIu32 \") is greater than maxVertexInputAttributes (%\" PRIu32 \").\",\n                     pVertexAttributeDescriptions[attribute].location, device_limits.maxVertexInputAttributes);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdSetDiscardRectangleEXT-offset-00589\", \"Evaluation of (offset.y + extent.height) in each VkRect2D element of pDiscardRectangles must not cause a signed integer addition overflow\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (y_sum > std::numeric_limits<int32_t>::max()) {\n    skip |= LogError(\"VUID-vkCmdSetDiscardRectangleEXT-offset-00589\", commandBuffer, loc,\n                     \"offset.y (%\" PRId32 \") + extent.height (%\" PRIu32 \") is %\" PRIi64 \") which will overflow int32_t.\",\n                     pDiscardRectangles[i].offset.y, pDiscardRectangles[i].extent.height, y_sum);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdSetExclusiveScissorNV-exclusiveScissorCount-02036\", \"If the multiViewport feature is not enabled, exclusiveScissorCount must be 1\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (exclusiveScissorCount > 1) {\n    skip |= LogError(\"VUID-vkCmdSetExclusiveScissorNV-exclusiveScissorCount-02036\", commandBuffer,\n                     error_obj.location.dot(Field::exclusiveScissorCount),\n                     \"is %\" PRIu32 \" but the multiViewport feature is not enabled.\", exclusiveScissorCount);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdSetExclusiveScissorNV-offset-02039\", \"Evaluation of (offset.y + extent.height) for each member of pExclusiveScissors must not cause a signed integer addition overflow\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (y_sum > vvl::kI32Max) {\n    skip |= LogError(\"VUID-vkCmdSetExclusiveScissorNV-offset-02039\", commandBuffer, scissor_loc,\n                     \"offset.y (%\" PRId32 \") + extent.height (%\" PRIu32 \") is %\" PRIi64 \" which will overflow int32_t.\",\n                     scissor.offset.y, scissor.extent.height, y_sum);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdSetCoarseSampleOrderNV-sampleOrderType-02081\", \"If sampleOrderType is not VK_COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV, customSamplerOrderCount must be 0\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (sampleOrderType != VK_COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV && customSampleOrderCount != 0) {\n    skip |= LogError(\"VUID-vkCmdSetCoarseSampleOrderNV-sampleOrderType-02081\", commandBuffer, error_obj.location,\n                     \"If sampleOrderType is not VK_COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV, \"\n                     \"customSampleOrderCount must be 0.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdSetScissor-scissorCount-00594\", \"If the multiViewport feature is not enabled, scissorCount must be 1\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (scissorCount > 1) {\n    skip |= LogError(\"VUID-vkCmdSetScissor-scissorCount-00594\", commandBuffer, error_obj.location.dot(Field::scissorCount),\n                     \"is %\" PRIu32 \" but the multiViewport feature was not enabled.\", scissorCount);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdSetScissor-offset-00597\", \"Evaluation of (offset.y + extent.height) must not cause a signed integer addition overflow for any element of pScissors\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (y_sum > vvl::kI32Max) {\n    skip |= LogError(\"VUID-vkCmdSetScissor-offset-00597\", commandBuffer, scissor_loc,\n                     \"offset.y (%\" PRId32 \") + extent.height (%\" PRIu32 \") is %\" PRIi64 \" which will overflow int32_t.\",\n                     scissor.offset.y, scissor.extent.height, y_sum);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkCoarseSampleOrderCustomNV-sampleLocationCount-02075\", \"sampleLocationCount must be equal to the product of sampleCount, the fragment width for shadingRate, and the fragment height for shadingRate\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (order.sampleLocationCount != order.sampleCount * sample_order_info->width * sample_order_info->height) {\n    skip |= LogError(\"VUID-VkCoarseSampleOrderCustomNV-sampleLocationCount-02075\", device, order_loc,\n                     \"sampleLocationCount (=%\" PRIu32\n                     \") must \"\n                     \"be equal to the product of sampleCount (=%\" PRIu32\n                     \"), the fragment width for shadingRate \"\n                     \"(=%\" PRIu32 \"), and the fragment height for shadingRate (=%\" PRIu32 \").\",\n                     order.sampleLocationCount, order.sampleCount, sample_order_info->width, sample_order_info->height);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkCoarseSampleOrderCustomNV-pSampleLocations-02077\", \"The array pSampleLocations must contain exactly one entry for every combination of valid values for pixelX, pixelY, and sample in the structure VkCoarseSampleOrderCustomNV\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (sample_locations_mask != expected_mask) {\n        \"VUID-VkCoarseSampleOrderCustomNV-pSampleLocations-02077\", device, order_loc,\n        \"The array pSampleLocations must contain exactly one entry for \"\n        \"every combination of valid values for pixelX, pixelY, and sample in the structure VkCoarseSampleOrderCustomNV.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkSamplerCreateInfo-magFilter-07911\", \"If the VK_EXT_filter_cubic extension is not enabled and either magFilter or minFilter is VK_FILTER_CUBIC_IMG, the reductionMode member of VkSamplerReductionModeCreateInfo must be VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!IsExtEnabled(device_extensions.vk_ext_filter_cubic)) {\n    skip |= LogError(\"VUID-VkSamplerCreateInfo-magFilter-07911\", device,\n                     create_info_loc.pNext(Struct::VkSamplerReductionModeCreateInfo, Field::reductionMode),\n                     \"is %s, magFilter is %s and minFilter is %s, but \"\n                     \"extension %s is not enabled.\",\n                     string_VkSamplerReductionMode(sampler_reduction->reductionMode),\n                     string_VkFilter(create_info.magFilter), string_VkFilter(create_info.minFilter),\n                     VK_EXT_FILTER_CUBIC_EXTENSION_NAME);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkSamplerCreateInfo-flags-02574\", \"If flags includes VK_SAMPLER_CREATE_SUBSAMPLED_BIT_EXT, then minFilter and magFilter must be equal\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (create_info.minFilter != create_info.magFilter) {\n    skip |= LogError(\"VUID-VkSamplerCreateInfo-flags-02574\", device, create_info_loc.dot(Field::flags),\n                     \"includes VK_SAMPLER_CREATE_SUBSAMPLED_BIT_EXT, but \"\n                     \"minFilter (%s) and magFilter (%s) are not equal.\",\n                     string_VkFilter(create_info.minFilter), string_VkFilter(create_info.magFilter));\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkSamplerCreateInfo-flags-02579\", \"If flags includes VK_SAMPLER_CREATE_SUBSAMPLED_BIT_EXT, then compareEnable must be VK_FALSE\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (create_info.compareEnable) {\n    skip |= LogError(\"VUID-VkSamplerCreateInfo-flags-02579\", device, create_info_loc.dot(Field::flags),\n                     \"includes VK_SAMPLER_CREATE_SUBSAMPLED_BIT_EXT, \"\n                     \"but compareEnable is VK_TRUE.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkSamplerCreateInfo-flags-06967\", \"If flags includes VK_SAMPLER_CREATE_IMAGE_PROCESSING_BIT_QCOM, then addressModeU and addressModeV must each be either VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE or VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "LogError(\"VUID-VkSamplerCreateInfo-flags-06967\", device, create_info_loc.dot(Field::flags),\n         \"includes VK_SAMPLER_CREATE_IMAGE_PROCESSING_BIT_QCOM, so \"\n         \"addressModeU (%s) and addressModeV (%s) must be either \"\n         \"VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE or VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER.\",\n         string_VkSamplerAddressMode(create_info.addressModeU), string_VkSamplerAddressMode(create_info.addressModeV));\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkSamplerCreateInfo-anisotropyEnable-01070\", \"If the samplerAnisotropy feature is not enabled, anisotropyEnable must be VK_FALSE\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (enabled_features.samplerAnisotropy == VK_FALSE) {\n        LogError(\"VUID-VkSamplerCreateInfo-anisotropyEnable-01070\", device, create_info_loc.dot(Field::anisotropyEnable),\n                 \"is VK_TRUE but the samplerAnisotropy feature was not enabled.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkSamplerCreateInfo-unnormalizedCoordinates-01076\", \"If unnormalizedCoordinates is VK_TRUE, anisotropyEnable must be VK_FALSE\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (pCreateInfo->anisotropyEnable == VK_TRUE) {\n    skip |= LogError(\"VUID-VkSamplerCreateInfo-unnormalizedCoordinates-01076\", device, create_info_loc,\n                     \"anisotropyEnable and unnormalizedCoordinates are both VK_TRUE.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkSamplerCreateInfo-addressModeU-01079\", \"If samplerMirrorClampToEdge is not enabled, and if the VK_KHR_sampler_mirror_clamp_to_edge extension is not enabled, addressModeU, addressModeV and addressModeW must not be VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "} else if (pCreateInfo->addressModeV == VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE) {\n    skip |= LogError(\"VUID-VkSamplerCreateInfo-addressModeU-01079\", device, create_info_loc.dot(Field::addressModeV),\n                     \"is VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE but the \"\n                     \"VK_KHR_sampler_mirror_clamp_to_edge extension or samplerMirrorClampToEdge feature was not enabled.\");\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkSamplerCreateInfo-addressModeU-01646\", \"If sampler Y'CBCR conversion is enabled, addressModeU, addressModeV, and addressModeW must be VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE, anisotropyEnable must be VK_FALSE, and unnormalizedCoordinates must be VK_FALSE\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "\"VUID-VkSamplerCreateInfo-addressModeU-01646\", device, create_info_loc,\n\"SamplerYCbCrConversion is enabled: \"\n\"addressModeU (%s), addressModeV (%s), addressModeW (%s) must be CLAMP_TO_EDGE, and anisotropyEnable (%s) \"\n\"and unnormalizedCoordinates (%s) must be VK_FALSE.\",\nstring_VkSamplerAddressMode(pCreateInfo->addressModeU), string_VkSamplerAddressMode(pCreateInfo->addressModeV),\nstring_VkSamplerAddressMode(pCreateInfo->addressModeW), pCreateInfo->anisotropyEnable ? \"VK_TRUE\" : \"VK_FALSE\",\npCreateInfo->unnormalizedCoordinates ? \"VK_TRUE\" : \"VK_FALSE\");\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkMutableDescriptorTypeListEXT-descriptorTypeCount-04597\", \"descriptorTypeCount must not be 0 if the corresponding binding is of VK_DESCRIPTOR_TYPE_MUTABLE_EXT\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (mutable_type_count == 0) {\n        \"VUID-VkMutableDescriptorTypeListEXT-descriptorTypeCount-04597\", device, binding_loc.dot(Field::descriptorType),\n        \"is VK_DESCRIPTOR_TYPE_MUTABLE_EXT, but \"\n        \"VkMutableDescriptorTypeCreateInfoEXT::pMutableDescriptorTypeLists[%\" PRIu32 \"].descriptorTypeCount is 0.\",\n        i);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkMutableDescriptorTypeListEXT-pDescriptorTypes-04603\", \"pDescriptorTypes must not contain VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "skip |= LogError(\"VUID-VkMutableDescriptorTypeListEXT-pDescriptorTypes-04603\", device, type_loc,\n                 \"is VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT.\");\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkDescriptorSetLayoutCreateInfo-pBindings-07303\", \"If any element pBindings[i] has a descriptorType of VK_DESCRIPTOR_TYPE_MUTABLE_EXT, then the pNext chain must include a VkMutableDescriptorTypeCreateInfoEXT structure, and mutableDescriptorTypeListCount must be greater than i\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "skip |= LogError(\"VUID-VkDescriptorSetLayoutCreateInfo-pBindings-07303\", device,\n                 binding_loc.dot(Field::descriptorType),\n                 \"is VK_DESCRIPTOR_TYPE_MUTABLE_EXT but VkMutableDescriptorTypeCreateInfoEXT is not \"\n                 \"included in the pNext chain.\");\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkDescriptorSetLayoutCreateInfo-flags-04590\", \"If flags contains VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR, flags must not contain VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_EXT\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((create_info.flags & VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR) &&\n    (create_info.flags & VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_EXT)) {\n    skip |= LogError(\"VUID-VkDescriptorSetLayoutCreateInfo-flags-04590\", device, create_info_loc.dot(Field::flags), \"is %s.\",\n                     string_VkDescriptorSetLayoutCreateFlags(create_info.flags).c_str());\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkDescriptorSetLayoutCreateInfo-flags-08003\", \"If flags contains VK_DESCRIPTOR_SET_LAYOUT_CREATE_DESCRIPTOR_BUFFER_BIT_EXT, then flags must not contain VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_VALVE\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((create_info.flags & VK_DESCRIPTOR_SET_LAYOUT_CREATE_DESCRIPTOR_BUFFER_BIT_EXT) &&\n    (create_info.flags & VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_VALVE)) {\n    skip |= LogError(\"VUID-VkDescriptorSetLayoutCreateInfo-flags-08003\", device, create_info_loc.dot(Field::flags), \"is %s.\",\n                     string_VkDescriptorSetLayoutCreateFlags(create_info.flags).c_str());\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkWriteDescriptorSet-descriptorType-00324\", \"If descriptorType is VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER, VK_DESCRIPTOR_TYPE_STORAGE_BUFFER, VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC, or VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC, pBufferInfo must be a valid pointer to an array of descriptorCount valid VkDescriptorBufferInfo structures\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (descriptor_writes.pBufferInfo == nullptr) {\n    skip |= LogError(\"VUID-VkWriteDescriptorSet-descriptorType-00324\", device, writes_loc.dot(Field::descriptorType),\n                     \"is %s but pBufferInfo is NULL.\", string_VkDescriptorType(descriptor_type));\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkWriteDescriptorSet-descriptorType-02382\", \"If descriptorType is VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR, the pNext chain must include a VkWriteDescriptorSetAccelerationStructureKHR structure whose accelerationStructureCount member equals descriptorCount\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "\"VUID-VkWriteDescriptorSet-descriptorType-02382\", device,\nwrites_loc.pNext(Struct::VkWriteDescriptorSetAccelerationStructureKHR, Field::accelerationStructureCount),\n\"%\" PRIu32 \" does not equal descriptorCount %\" PRIu32 \".\", pnext_struct->accelerationStructureCount,\ndescriptor_writes.descriptorCount);\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkWriteDescriptorSetAccelerationStructureNV-accelerationStructureCount-03747\", \"accelerationStructureCount must be equal to descriptorCount in the extended structure\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (pnext_struct->accelerationStructureCount != descriptor_writes.descriptorCount) {\n        LogError(\"VUID-VkWriteDescriptorSetAccelerationStructureNV-accelerationStructureCount-03747\", device, loc,\n                 \"accelerationStructureCount %\" PRIu32 \" must be equal to descriptorCount %\" PRIu32\n                 \" in the extended structure \"\n                 \".\",\n                 pnext_struct->accelerationStructureCount, descriptor_writes.descriptorCount);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkDescriptorPoolSize-type-02218\", \"If type is VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK then descriptorCount must be a multiple of 4\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (SafeModulo(pCreateInfo->pPoolSizes[i].descriptorCount, 4) != 0) {\n        LogError(\"VUID-VkDescriptorPoolSize-type-02218\", device, pool_loc.dot(Field::descriptorCount),\n                 \"is %\" PRIu32 \" (not a multiple of 4), but type is VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT.\",\n                 pCreateInfo->pPoolSizes[i].descriptorCount);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkDescriptorPoolCreateInfo-flags-04607\", \"If flags has the VK_DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_EXT bit set, then the VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT bit must not be set\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((pCreateInfo->flags & VK_DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_EXT) &&\n    (pCreateInfo->flags & VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT)) {\n    skip |= LogError(\"VUID-VkDescriptorPoolCreateInfo-flags-04607\", device, create_info_loc.dot(Field::flags),\n                     \"includes both \"\n                     \"VK_DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_EXT and VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkQueryPoolPerformanceCreateInfoKHR-performanceCounterQueryPools-03237\", \"The performanceCounterQueryPools feature must be enabled\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!enabled_features.performanceCounterQueryPools) {\n        LogError(\"VUID-VkQueryPoolPerformanceCreateInfoKHR-performanceCounterQueryPools-03237\", device,\n                 create_info_loc.dot(Field::queryType),\n                 \"is VK_QUERY_TYPE_PERFORMANCE_QUERY_KHR but performanceCounterQueryPools feature was not enabled.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkSamplerYcbcrConversionCreateInfo-components-02581\", \"If the format has a _422 or _420 suffix, then components.g must be the identity swizzle\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((components.g != VK_COMPONENT_SWIZZLE_G) && (components.g != VK_COMPONENT_SWIZZLE_IDENTITY)) {\n    skip |= LogError(\"VUID-VkSamplerYcbcrConversionCreateInfo-components-02581\", device, create_info_loc,\n                     \"When using a XChroma subsampled format (%s) the components.g needs to be VK_COMPONENT_SWIZZLE_G \"\n                     \"or VK_COMPONENT_SWIZZLE_IDENTITY, but is %s.\",\n                     string_VkFormat(format), string_VkComponentSwizzle(components.g));\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkSamplerYcbcrConversionCreateInfo-ycbcrModel-01655\", \"If ycbcrModel is not VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY, then components.r, components.g, and components.b must correspond to components of the format; that is, components.r, components.g, and components.b must not be VK_COMPONENT_SWIZZLE_ZERO or VK_COMPONENT_SWIZZLE_ONE, and must not correspond to a component containing zero or one as a consequence of conversion to RGBA\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (pCreateInfo->ycbcrModel != VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY) {\n    const char *vuid = \"VUID-VkSamplerYcbcrConversionCreateInfo-ycbcrModel-01655\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkDescriptorAddressInfoEXT-None-09508\", \"If address is not zero, and the descriptor is of type VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER or VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER, then format must not be VK_FORMAT_UNDEFINED\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((pDescriptorInfo->type == VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER ||\n    address_info->format == VK_FORMAT_UNDEFINED) {\n    skip |= LogError(\"VUID-VkDescriptorAddressInfoEXT-None-09508\", device, address_loc.dot(Field::format),\n                     \"is VK_FORMAT_UNDEFINED.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkPushDescriptorSetWithTemplateInfoKHR-None-09495\", \"If the dynamicPipelineLayout feature is not enabled, layout must be a valid VkPipelineLayout handle\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!enabled_features.dynamicPipelineLayout) {\n    skip |= LogError(\"VUID-VkPushDescriptorSetWithTemplateInfoKHR-None-09495\", commandBuffer,\n                     error_obj.location.dot(Field::pPushDescriptorSetWithTemplateInfo).dot(Field::layout),\n                     \"is VK_NULL_HANDLE.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkMemoryAllocateInfo-flags-03330\", \"If VkMemoryAllocateFlagsInfo::flags includes VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT, the bufferDeviceAddressCaptureReplay feature must be enabled\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((flags & VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT) && !enabled_features.bufferDeviceAddressCaptureReplay) {\n    skip |= LogError(\"VUID-VkMemoryAllocateInfo-flags-03330\", device, flags_loc,\n                     \"has VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT set, but\"\n                     \"bufferDeviceAddressCaptureReplay feature is not enabled.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkDeviceImageMemoryRequirements-pCreateInfo-06419\", \"If pCreateInfo->flags has VK_IMAGE_CREATE_DISJOINT_BIT set and if the pCreateInfo->tiling is VK_IMAGE_TILING_LINEAR or VK_IMAGE_TILING_OPTIMAL, then planeAspect must be a single valid multi-planar aspect mask bit\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "!IsOnlyOneValidPlaneAspect(create_info.format, memory_requirements.planeAspect)) {\nskip |= LogError(\"VUID-VkDeviceImageMemoryRequirements-pCreateInfo-06419\", device, loc.dot(Field::planeAspect),\n          \"is %s but is invalid for %s.\", string_VkImageAspectFlags(memory_requirements.planeAspect).c_str(),\n          string_VkFormat(create_info.format));\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkSetDeviceMemoryPriorityEXT-priority-06258\", \"priority must be between 0 and 1, inclusive\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!IsBetweenInclusive(priority, 0.0F, 1.0F)) {\n    skip |= LogError(\"VUID-vkSetDeviceMemoryPriorityEXT-priority-06258\", device, error_obj.location.dot(Field::priority),\n                     \"is %f.\", priority);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkImportSemaphoreFdInfoKHR-handleType-01143\", \"handleType must be a value included in the Handle Types Supported by VkImportSemaphoreFdInfoKHR table\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "const Location info_loc = error_obj.location.dot(Field::pImportSemaphoreFdInfo);\n    ValidateExternalSemaphoreHandleType(pImportSemaphoreFdInfo->semaphore, \"VUID-VkImportSemaphoreFdInfoKHR-handleType-01143\",\n                                        info_loc.dot(Field::handleType), pImportSemaphoreFdInfo->handleType, kSemFdHandleTypes);\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkGetMemoryHostPointerPropertiesEXT-pHostPointer-01753\", \"pHostPointer must be a pointer aligned to an integer multiple of VkPhysicalDeviceExternalMemoryHostPropertiesEXT::minImportedHostPointerAlignment\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (SafeModulo(host_pointer, phys_dev_ext_props.external_memory_host_props.minImportedHostPointerAlignment) != 0) {\n    skip |= LogError(\"VUID-vkGetMemoryHostPointerPropertiesEXT-pHostPointer-01753\", device,\n                     error_obj.location.dot(Field::pHostPointer),\n                     \"(0x%\" PRIxLEAST64\n                     \") is not aligned \"\n                     \"to minImportedHostPointerAlignment (%\" PRIuLEAST64 \")\",\n                     host_pointer, phys_dev_ext_props.external_memory_host_props.minImportedHostPointerAlignment);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkImportSemaphoreWin32HandleInfoKHR-handleType-01466\", \"If handleType is not VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT or VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT, name must be NULL\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((info->handleType & kNameAllowedTypes) == 0 && info->name) {\n    skip |= LogError(\"VUID-VkImportSemaphoreWin32HandleInfoKHR-handleType-01466\", info->semaphore,\n                     error_obj.location.dot(Field::pImportSemaphoreWin32HandleInfo).dot(Field::name),\n                     \"(%p) must be NULL if handleType is %s\", reinterpret_cast<const void *>(info->name),\n                     string_VkExternalSemaphoreHandleTypeFlagBits(info->handleType));\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkImportFenceWin32HandleInfoKHR-handle-01462\", \"If handle is not NULL, name must be NULL\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (info->handle && info->name) {\n    skip |= LogError(\"VUID-VkImportFenceWin32HandleInfoKHR-handle-01462\", info->fence,\n                     error_obj.location.dot(Field::pImportFenceWin32HandleInfo), \"both handle (%p) and name (%p) are non-NULL\",\n                     info->handle, reinterpret_cast<const void *>(info->name));\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkMemoryAllocateInfo-opaqueCaptureAddress-03329\", \"If VkMemoryOpaqueCaptureAddressAllocateInfo::opaqueCaptureAddress is not zero, VkMemoryAllocateFlagsInfo::flags must include VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!(flags & VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT)) {\n    skip |= LogError(\"VUID-VkMemoryAllocateInfo-opaqueCaptureAddress-03329\", device, address_loc,\n                     \"is non-zero (%\" PRIu64\n                     \") so VkMemoryAllocateFlagsInfo::flags must include \"\n                     \"VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT.\",\n                     opaque_alloc_info->opaqueCaptureAddress);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkMemoryAllocateInfo-pNext-00640\", \"If the pNext chain includes a VkExportMemoryAllocateInfo structure, it must not include a VkExportMemoryAllocateInfoNV or VkExportMemoryWin32HandleInfoNV structure\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (ext.export_info_win32_nv) {\n    skip |= LogError(\"VUID-VkMemoryAllocateInfo-pNext-00640\", device, allocate_info_loc,\n                     \"pNext chain includes both VkExportMemoryAllocateInfo and \"\n                     \"VkExportMemoryWin32HandleInfoNV\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkImportMemoryHostPointerInfoEXT-pHostPointer-01749\", \"pHostPointer must be a pointer aligned to an integer multiple of VkPhysicalDeviceExternalMemoryHostPropertiesEXT::minImportedHostPointerAlignment\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (SafeModulo(host_pointer, phys_dev_ext_props.external_memory_host_props.minImportedHostPointerAlignment) != 0) {\n    skip |= LogError(\"VUID-VkImportMemoryHostPointerInfoEXT-pHostPointer-01749\", device,\n                     allocate_info_loc.pNext(Struct::VkImportMemoryHostPointerInfoEXT, Field::pHostPointer),\n                     \"(0x%\" PRIxLEAST64\n                     \") is not aligned \"\n                     \"to minImportedHostPointerAlignment (%\" PRIuLEAST64 \")\",\n                     host_pointer, phys_dev_ext_props.external_memory_host_props.minImportedHostPointerAlignment);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkMemoryAllocateInfo-pNext-06780\", \"If the pNext chain includes a VkExportMetalObjectCreateInfoEXT structure, its exportObjectType member must be VK_EXPORT_METAL_OBJECT_TYPE_METAL_BUFFER_BIT_EXT\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "skip |= ExportMetalObjectsPNextUtil(VK_EXPORT_METAL_OBJECT_TYPE_METAL_BUFFER_BIT_EXT, \"VUID-VkMemoryAllocateInfo-pNext-06780\",\n                                    allocate_info_loc, \"VK_EXPORT_METAL_OBJECT_TYPE_METAL_BUFFER_BIT_EXT\", allocate_info.pNext);\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkFramebufferCreateInfo-height-00887\", \"height must be greater than 0\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (pCreateInfo->height == 0) {\n    skip |= LogError(\"VUID-VkFramebufferCreateInfo-height-00887\", device, create_info_loc.dot(Field::height), \"is zero.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkImageCreateInfo-sharingMode-00942\", \"If sharingMode is VK_SHARING_MODE_CONCURRENT, queueFamilyIndexCount must be greater than 1\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (queue_family_index_count <= 1) {\n    skip |= LogError(\"VUID-VkImageCreateInfo-sharingMode-00942\", device, create_info_loc.dot(Field::queueFamilyIndexCount),\n                     \"is %\" PRIu32 \".\", queue_family_index_count);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkImageCreateInfo-mipLevels-00947\", \"mipLevels must be greater than 0\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "skip |= ValidateNotZero(pCreateInfo->extent.depth == 0, \"VUID-VkImageCreateInfo-extent-00946\",\nskip |= ValidateNotZero(pCreateInfo->mipLevels == 0, \"VUID-VkImageCreateInfo-mipLevels-00947\",\n                        create_info_loc.dot(Field::mipLevels));\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkImageCreateInfo-flags-08865\", \"If flags contains VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT, extent.width and extent.height must be equal\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (width != height) {\n    skip |= LogError(\"VUID-VkImageCreateInfo-flags-08865\", device, create_info_loc,\n                     \"extent.width (=%\" PRIu32 \") not equal to extent.height (=%\" PRIu32 \").\", pCreateInfo->extent.width,\n                     pCreateInfo->extent.height);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkImageCreateInfo-usage-00966\", \"If usage includes VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT, usage must also contain at least one of VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT, VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT, or VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (0 == (pCreateInfo->usage & legal_flags)) {\n    skip |= LogError(\"VUID-VkImageCreateInfo-usage-00966\", device, create_info_loc,\n                     \"Transient attachment image without a compatible attachment flag set.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkImageCreateInfo-flags-01533\", \"If flags contains VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT format must be a depth or depth/stencil format\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (((image_flags & VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT) != 0) &&\n    skip |= LogError(\"VUID-VkImageCreateInfo-flags-01533\", device, create_info_loc.dot(Field::flags),\n                     \"includes VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT the \"\n                     \"format (%s) must be a depth or depth/stencil format.\",\n                     string_VkFormat(image_format));\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkImageCreateInfo-tiling-02353\", \"If tiling is VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT and flags contains VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT, then the pNext chain must include a VkImageFormatListCreateInfo structure with non-zero viewFormatCount\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "LogError(\"VUID-VkImageCreateInfo-tiling-02353\", device, create_info_loc.dot(Field::tiling),\n         \"is VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT, flags includes VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT, \"\n         \"but pNext<VkImageFormatListCreateInfo>.viewFormatCount is zero.\");\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkImageDrmFormatModifierExplicitCreateInfoEXT-depthPitch-02269\", \"For each element of pPlaneLayouts, depthPitch must be 0 if VkImageCreateInfo::extent.depth is 1\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (pCreateInfo->extent.depth == 1 && drm_format_mod_explict->pPlaneLayouts[i].depthPitch != 0) {\n    skip |= LogError(\"VUID-VkImageDrmFormatModifierExplicitCreateInfoEXT-depthPitch-02269\", device,\n                     drm_loc.dot(Field::depthPitch), \"is %\" PRIu64 \" and extext.depth is 1.\",\n                     drm_format_mod_explict->pPlaneLayouts[i].depthPitch);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkImageCreateInfo-samples-02558\", \"If samples is not VK_SAMPLE_COUNT_1_BIT, usage must not contain VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (pCreateInfo->samples != VK_SAMPLE_COUNT_1_BIT) {\n    skip |= LogError(\"VUID-VkImageCreateInfo-samples-02558\", device, create_info_loc.dot(Field::usage),\n                     \"includes VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT, but samples is %s.\",\n                     string_VkSampleCountFlagBits(pCreateInfo->samples));\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkImageCreateInfo-format-04712\", \"If format has a _422 or _420 suffix, extent.width must be a multiple of 2\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (vkuFormatIsXChromaSubsampled(image_format) && (SafeModulo(pCreateInfo->extent.width, 2) != 0)) {\n        LogError(\"VUID-VkImageCreateInfo-format-04712\", device, create_info_loc.dot(Field::format),\n                 \"(%s) is X Chroma Subsampled (has _422 or _420 suffix) so the width (%\" PRIu32 \") must be a multiple of 2.\",\n                 string_VkFormat(image_format), pCreateInfo->extent.width);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkImageCreateInfo-pNext-06722\", \"If a VkImageFormatListCreateInfo structure was included in the pNext chain and format is not a multi-planar format and VkImageFormatListCreateInfo::viewFormatCount is not zero, then each format in VkImageFormatListCreateInfo::pViewFormats must either be compatible with the format as described in the compatibility table or, if flags contains VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT, be an uncompressed format that is size-compatible with format\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "skip |= LogError(\"VUID-VkImageCreateInfo-pNext-06722\", device, format_loc,\n                 \"(%s) and VkImageCreateInfo::format (%s) are not compatible.\", string_VkFormat(view_format),\n                 string_VkFormat(image_format));\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkImageCreateInfo-flags-01924\", \"If the sparseResidencyAliased feature is not enabled, flags must not contain VK_IMAGE_CREATE_SPARSE_ALIASED_BIT\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((image_flags & VK_IMAGE_CREATE_SPARSE_ALIASED_BIT) && (!enabled_features.sparseResidencyAliased)) {\n    skip |= LogError(\"VUID-VkImageCreateInfo-flags-01924\", device, create_info_loc.dot(Field::flags),\n                     \"includes VK_IMAGE_CREATE_SPARSE_ALIASED_BIT but the sparseResidencyAliased feature was not enabled.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkImageCreateInfo-imageType-00972\", \"If the sparseResidencyImage3D feature is not enabled, and imageType is VK_IMAGE_TYPE_3D, flags must not contain VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((!enabled_features.sparseResidencyImage3D) && (VK_IMAGE_TYPE_3D == create_info.imageType)) {\n    skip |= LogError(\"VUID-VkImageCreateInfo-imageType-00972\", device, create_info_loc.dot(Field::flags),\n                     \"includes VK_IMAGE_CREATE_SPARSE_BINDING_BIT and imageType is VK_IMAGE_TYPE_3D, but \"\n                     \"sparseResidencyImage3D feature was not enabled.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkImageCreateInfo-imageType-02082\", \"If usage includes VK_IMAGE_USAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR, imageType must be VK_IMAGE_TYPE_2D\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (create_info.imageType != VK_IMAGE_TYPE_2D) {\n    skip |= LogError(\"VUID-VkImageCreateInfo-imageType-02082\", device, create_info_loc.dot(Field::usage),\n                     \"includes VK_IMAGE_USAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR (or the \"\n                     \"alias VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV), but imageType is %s.\",\n                     string_VkImageType(create_info.imageType));\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkImageCreateInfo-flags-02052\", \"If flags contains VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV and imageType is VK_IMAGE_TYPE_2D, extent.width and extent.height must be greater than 1\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (create_info.imageType == VK_IMAGE_TYPE_2D && (create_info.extent.width == 1 || create_info.extent.height == 1)) {\n    skip |= LogError(\"VUID-VkImageCreateInfo-flags-02052\", device, create_info_loc.dot(Field::flags),\n                     \"includes VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV and \"\n                     \"imageType is VK_IMAGE_TYPE_2D, extent.width and extent.height must be \"\n                     \"greater than 1.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkImageCreateInfo-format-02537\", \"If format is a depth-stencil format and the pNext chain includes a VkImageStencilUsageCreateInfo structure with its stencilUsage member including VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT, extent.height must be less than or equal to VkPhysicalDeviceLimits::maxFramebufferHeight\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (create_info.extent.height > device_limits.maxFramebufferHeight) {\n    skip |= LogError(\"VUID-VkImageCreateInfo-format-02537\", device,\n                     create_info_loc.pNext(Struct::VkImageStencilUsageCreateInfo, Field::stencilUsage),\n                     \"includes VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT and image height (%\" PRIu32\n                     \") exceeds device \"\n                     \"maxFramebufferHeight (%\" PRIu32 \")\",\n                     create_info.extent.height, device_limits.maxFramebufferHeight);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkImageCreateInfo-format-02798\", \"If format is a depth-stencil format, usage does not include VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT, and the pNext chain includes a VkImageStencilUsageCreateInfo structure, then its VkImageStencilUsageCreateInfo::stencilUsage member must also not include VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "} else if (((create_info.usage & VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT) == 0) &&\n    skip |= LogError(\"VUID-VkImageCreateInfo-format-02798\", device, create_info_loc.dot(Field::usage),\n                     \"is (%s), format is %s, and %s is %s\", string_VkImageUsageFlags(create_info.usage).c_str(),\n                     string_VkFormat(create_info.format),\n                     create_info_loc.pNext(Struct::VkImageStencilUsageCreateInfo, Field::stencilUsage).Fields().c_str(),\n                     string_VkImageUsageFlags(image_stencil_struct->stencilUsage).c_str());\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkImageViewCreateInfo-viewType-01004\", \"If the imageCubeArray feature is not enabled, viewType must not be VK_IMAGE_VIEW_TYPE_CUBE_ARRAY\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((pCreateInfo->viewType == VK_IMAGE_VIEW_TYPE_CUBE_ARRAY) && (!enabled_features.imageCubeArray)) {\n    skip |= LogError(\"VUID-VkImageViewCreateInfo-viewType-01004\", pCreateInfo->image, create_info_loc.dot(Field::viewType),\n                     \"is VK_IMAGE_VIEW_TYPE_CUBE_ARRAY but the imageCubeArray feature is not enabled.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkImageViewCreateInfo-pNext-01970\", \"If the pNext chain includes a VkSamplerYcbcrConversionInfo structure with a conversion value other than VK_NULL_HANDLE, all members of components must have the identity swizzle\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (IsIdentitySwizzle(pCreateInfo->components) == false) {\n        \"VUID-VkImageViewCreateInfo-pNext-01970\", pCreateInfo->image, create_info_loc,\n        \"If there is a VkSamplerYcbcrConversion, the imageView must \"\n        \"be created with the identity swizzle. Here are the actual swizzle values:\\n\"\n        \"r swizzle = %s\\n\"\n        \"g swizzle = %s\\n\"\n        \"b swizzle = %s\\n\"\n        \"a swizzle = %s\\n\",\n        string_VkComponentSwizzle(pCreateInfo->components.r), string_VkComponentSwizzle(pCreateInfo->components.g),\n        string_VkComponentSwizzle(pCreateInfo->components.b), string_VkComponentSwizzle(pCreateInfo->components.a));\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkDeviceImageSubresourceInfoKHR-format-08886\", \"If format of the image is a color format that is not a multi-planar image format, and tiling of the pCreateInfo is VK_IMAGE_TILING_LINEAR or VK_IMAGE_TILING_OPTIMAL, the aspectMask member of pSubresource must be VK_IMAGE_ASPECT_COLOR_BIT\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (vkuFormatIsColor(image_format) && !vkuFormatIsMultiplane(image_format) && (aspect_mask != VK_IMAGE_ASPECT_COLOR_BIT) &&\n    skip |= LogError(\"VUID-VkDeviceImageSubresourceInfoKHR-format-08886\", device, subresource_loc.dot(Field::aspectMask),\n                     \"(%s) is invalid with %s (%s).\", string_VkImageAspectFlags(aspect_mask).c_str(),\n                     create_info_loc.dot(Field::format).Fields().c_str(), string_VkFormat(image_format));\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkApplicationInfo-apiVersion-04010\", \"If apiVersion is not 0, then it must be greater than or equal to VK_API_VERSION_1_0\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((api_version_nopatch < VK_API_VERSION_1_0) && (local_api_version != 0)) {\n    skip |= LogError(\"VUID-VkApplicationInfo-apiVersion-04010\", instance,\n                     create_info_loc.dot(Field::pApplicationInfo).dot(Field::apiVersion),\n                     \"is (0x%08x). \"\n                     \"Using VK_API_VERSION_%\" PRIu32 \"_%\" PRIu32 \".\",\n                     local_api_version, api_version.Major(), api_version.Minor());\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkInstanceCreateInfo-pNext-04925\", \"If the pNext chain of VkInstanceCreateInfo includes a VkDebugReportCallbackCreateInfoEXT structure, the list of enabled extensions in ppEnabledExtensionNames must contain VK_EXT_debug_report\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (debug_report_callback && !local_instance_extensions.vk_ext_debug_report) {\n    skip |= LogError(\"VUID-VkInstanceCreateInfo-pNext-04925\", instance, create_info_loc.dot(Field::ppEnabledExtensionNames),\n                     \"does not include VK_EXT_debug_report, but the pNext chain includes VkDebugReportCallbackCreateInfoEXT.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkDeviceCreateInfo-ppEnabledExtensionNames-parameter\", \"If enabledExtensionCount is not 0, ppEnabledExtensionNames must be a valid pointer to an array of enabledExtensionCount null-terminated UTF-8 strings\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "ValidateString(create_info_loc.dot(Field::ppEnabledExtensionNames),\n               \"VUID-VkDeviceCreateInfo-ppEnabledExtensionNames-parameter\", pCreateInfo->ppEnabledExtensionNames[i]);\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkDeviceCreateInfo-ppEnabledExtensionNames-03328\", \"ppEnabledExtensionNames must not contain both VK_KHR_buffer_device_address and VK_EXT_buffer_device_address\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (khr_bda && ext_bda) {\n    skip |= LogError(\"VUID-VkDeviceCreateInfo-ppEnabledExtensionNames-03328\", physicalDevice, error_obj.location,\n                     \"ppEnabledExtensionNames must not contain both VK_KHR_buffer_device_address and \"\n                     \"VK_EXT_buffer_device_address.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkDeviceCreateInfo-pNext-02830\", \"If the pNext chain includes a VkPhysicalDeviceVulkan12Features structure, then it must not include a VkPhysicalDevice8BitStorageFeatures, VkPhysicalDeviceShaderAtomicInt64Features, VkPhysicalDeviceShaderFloat16Int8Features, VkPhysicalDeviceDescriptorIndexingFeatures, VkPhysicalDeviceScalarBlockLayoutFeatures, VkPhysicalDeviceImagelessFramebufferFeatures, VkPhysicalDeviceUniformBufferStandardLayoutFeatures, VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures, VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures, VkPhysicalDeviceHostQueryResetFeatures, VkPhysicalDeviceTimelineSemaphoreFeatures, VkPhysicalDeviceBufferDeviceAddressFeatures, or VkPhysicalDeviceVulkanMemoryModelFeatures structure\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "skip |= LogError(\"VUID-VkDeviceCreateInfo-pNext-02830\", physicalDevice, error_obj.location,\n                 \"If the pNext chain includes a VkPhysicalDeviceVulkan12Features structure, then it must not \"\n                 \"include a %s structure\",\n                 string_VkStructureType(current->sType));\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkPhysicalDeviceVariablePointersFeatures-variablePointers-01431\", \"If variablePointers is enabled then variablePointersStorageBuffer must also be enabled\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((variable_pointers == VK_TRUE) && (variable_pointers_storage_buffer == VK_FALSE)) {\n    skip |= LogError(\"VUID-VkPhysicalDeviceVariablePointersFeatures-variablePointers-01431\", physicalDevice, error_obj.location,\n                     \"If variablePointers is VK_TRUE then variablePointersStorageBuffer also needs to be VK_TRUE\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkPhysicalDeviceImageFormatInfo2-tiling-02249\", \"tiling must be VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT if and only if the pNext chain includes VkPhysicalDeviceImageDrmFormatModifierInfoEXT\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (pImageFormatInfo->tiling != VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT) {\n    skip |= LogError(\"VUID-VkPhysicalDeviceImageFormatInfo2-tiling-02249\", physicalDevice,\n                     format_info_loc.dot(Field::tiling),\n                     \"(%s) but no VkPhysicalDeviceImageDrmFormatModifierInfoEXT in pNext chain.\",\n                     string_VkImageTiling(pImageFormatInfo->tiling));\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkPhysicalDeviceImageDrmFormatModifierInfoEXT-sharingMode-02316\", \"If sharingMode is VK_SHARING_MODE_CONCURRENT, each element of pQueueFamilyIndices must be unique and must be less than the pQueueFamilyPropertyCount returned by vkGetPhysicalDeviceQueueFamilyProperties2 for the physicalDevice that was used to create device\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "\"VUID-VkPhysicalDeviceImageDrmFormatModifierInfoEXT-sharingMode-02316\", physicalDevice,\nformat_info_loc.pNext(Struct::VkPhysicalDeviceImageDrmFormatModifierInfoEXT,\n                      Field::pQueueFamilyIndices, i),\n\"is %\" PRIu32\n\", but vkGetPhysicalDeviceQueueFamilyProperties2::pQueueFamilyPropertyCount returned %\" PRIu32 \".\",\nqueue_index, queue_family_property_count);\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkDebugUtilsObjectNameInfoEXT-objectType-02589\", \"If objectType is VK_OBJECT_TYPE_UNKNOWN, objectHandle must not be VK_NULL_HANDLE\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((pNameInfo->objectType == VK_OBJECT_TYPE_UNKNOWN) && (pNameInfo->objectHandle == HandleToUint64(VK_NULL_HANDLE))) {\n    skip |= LogError(\"VUID-VkDebugUtilsObjectNameInfoEXT-objectType-02589\", device, name_info_loc.dot(Field::objectType),\n                     \"is VK_OBJECT_TYPE_UNKNOWN but objectHandle is VK_NULL_HANDLE\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkPushConstantRange-size-00298\", \"size must be less than or equal to VkPhysicalDeviceLimits::maxPushConstantsSize minus offset\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (size > max_push_constants_size - offset) {\n    skip |= LogError(\"VUID-VkPushConstantRange-size-00298\", device, pc_loc.dot(Field::offset),\n                     \"(%\" PRIu32 \") and size (%\" PRIu32\n                     \") \"\n                     \"together exceeds this device's maxPushConstantSize of %\" PRIu32 \".\",\n                     offset, size, max_push_constants_size);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkPipelineShaderStageCreateInfo-pName-parameter\", \"pName must be a null-terminated UTF-8 string\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (create_info.pName) {\n    skip |= ValidateString(loc.dot(Field::pName), \"VUID-VkPipelineShaderStageCreateInfo-pName-parameter\", create_info.pName);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkGraphicsPipelineCreateInfo-renderPass-06584\", \"If the pipeline requires fragment output interface state, and renderPass is VK_NULL_HANDLE, VkPipelineRenderingCreateInfo::stencilAttachmentFormat must be a valid VkFormat value\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((rendering_struct.stencilAttachmentFormat != VK_FORMAT_UNDEFINED)) {\n                               \"VUID-VkGraphicsPipelineCreateInfo-renderPass-06584\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkGraphicsPipelineCreateInfo-flags-09245\", \"If flags includes VK_PIPELINE_CREATE_RETAIN_LINK_TIME_OPTIMIZATION_INFO_BIT_EXT, flags must also include VK_PIPELINE_CREATE_LIBRARY_BIT_KHR\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((flags & VK_PIPELINE_CREATE_RETAIN_LINK_TIME_OPTIMIZATION_INFO_BIT_EXT) != 0 &&\n    (flags & VK_PIPELINE_CREATE_LIBRARY_BIT_KHR) == 0) {\n    skip |= LogError(\"VUID-VkGraphicsPipelineCreateInfo-flags-09245\", device, flags_loc, \"is (%s).\",\n                     string_VkPipelineCreateFlags2KHR(flags).c_str());\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkGraphicsPipelineCreateInfo-flags-03374\", \"flags must not include VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((flags & VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR) != 0) {\n    skip |= LogError(\"VUID-VkGraphicsPipelineCreateInfo-flags-03374\", device, flags_loc,\n                     \"(%s) must not include VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR.\",\n                     string_VkPipelineCreateFlags2KHR(flags).c_str());\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkGraphicsPipelineCreateInfo-flags-04947\", \"flags must not include VK_PIPELINE_CREATE_RAY_TRACING_ALLOW_MOTION_BIT_NV\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((flags & VK_PIPELINE_CREATE_RAY_TRACING_ALLOW_MOTION_BIT_NV) != 0) {\n    skip |= LogError(\"VUID-VkGraphicsPipelineCreateInfo-flags-04947\", device, flags_loc,\n                     \"(%s) must not include VK_PIPELINE_CREATE_RAY_TRACING_ALLOW_MOTION_BIT_NV.\",\n                     string_VkPipelineCreateFlags2KHR(flags).c_str());\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkGraphicsPipelineCreateInfo-stageCount-09530\", \"If the pipeline requires pre-rasterization shader state, stageCount must be greater than 0\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (create_info.stageCount == 0) {\n        LogError(\"VUID-VkGraphicsPipelineCreateInfo-stageCount-09530\", device, create_info_loc.dot(Field::stageCount),\n                 \"is 0, but %s is not enabled\", VK_EXT_GRAPHICS_PIPELINE_LIBRARY_EXTENSION_NAME);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkGraphicsPipelineCreateInfo-flags-06644\", \"If VkGraphicsPipelineLibraryCreateInfoEXT::flags includes VK_GRAPHICS_PIPELINE_LIBRARY_PRE_RASTERIZATION_SHADERS_BIT_EXT or VK_GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_SHADER_BIT_EXT, stageCount must be greater than 0\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (graphics_lib_info && (graphics_lib_info->flags & (VK_GRAPHICS_PIPELINE_LIBRARY_PRE_RASTERIZATION_SHADERS_BIT_EXT))) {\n                          \"VUID-VkGraphicsPipelineCreateInfo-flags-06644\", \"VUID-VkGraphicsPipelineCreateInfo-flags-06640\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkGraphicsPipelineCreateInfo-pDynamicStates-07855\", \"If VK_DYNAMIC_STATE_DISCARD_RECTANGLE_ENABLE_EXT is included in the pDynamicStates array then the implementation must support at least specVersion 2 of the VK_EXT_discard_rectangles extension\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (vvl::Contains(dynamic_state_map, VK_DYNAMIC_STATE_DISCARD_RECTANGLE_ENABLE_EXT) &&\n        \"VUID-VkGraphicsPipelineCreateInfo-pDynamicStates-07855\", device,\n        create_info_loc.dot(Field::pDynamicState)\n            .dot(Field::pDynamicStates, dynamic_state_map[VK_DYNAMIC_STATE_DISCARD_RECTANGLE_ENABLE_EXT]),\n        \"is VK_DYNAMIC_STATE_DISCARD_RECTANGLE_ENABLE_EXT without support for version 2 of VK_EXT_discard_rectangles.\");\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkPipelineVertexInputStateCreateInfo-vertexBindingDescriptionCount-00613\", \"vertexBindingDescriptionCount must be less than or equal to VkPhysicalDeviceLimits::maxVertexInputBindings\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (vertex_input_state->vertexBindingDescriptionCount > device_limits.maxVertexInputBindings) {\n    skip |= LogError(\"VUID-VkPipelineVertexInputStateCreateInfo-vertexBindingDescriptionCount-00613\", device,\n                     vertex_loc.dot(Field::vertexBindingDescriptionCount),\n                     \"(%\" PRIu32 \") is larger than maxVertexInputBindings (%\" PRIu32 \").\",\n                     vertex_input_state->vertexBindingDescriptionCount, device_limits.maxVertexInputBindings);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkPipelineVertexInputStateCreateInfo-pVertexAttributeDescriptions-00617\", \"All elements of pVertexAttributeDescriptions must describe distinct attribute locations\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (location_it != attribute_locations.cend()) {\n    skip |= LogError(\"VUID-VkPipelineVertexInputStateCreateInfo-pVertexAttributeDescriptions-00617\", device,\n                     attribute_loc.dot(Field::location),\n                     \"(%\" PRIu32 \") is already in pVertexAttributeDescriptions[%\" PRIu32 \"].\",\n                     vertex_attrib_desc.location, *location_it);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkVertexInputAttributeDescription-format-00623\", \"The format features of format must contain VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((properties.bufferFeatures & VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT) == 0) {\n        LogError(\"VUID-VkVertexInputAttributeDescription-format-00623\", device, attribute_loc.dot(Field::format),\n                 \"(%s) doesn't support VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT.\\n\"\n                 \"(supported bufferFeatures: %s)\",\n                 string_VkFormat(vertex_attrib_desc.format),\n                 string_VkFormatFeatureFlags2(properties.bufferFeatures).c_str());\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkPipelineViewportStateCreateInfo-viewportCount-04135\", \"If the graphics pipeline is being created with VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT set then viewportCount must be 0, otherwise viewportCount must be greater than 0\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (viewport_state.viewportCount == 0) {\n    skip |= LogError(\"VUID-VkPipelineViewportStateCreateInfo-viewportCount-04135\", device,\n                     viewport_loc.dot(Field::viewportCount),\n                     \"can't be 0 unless VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT is used.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkPipelineViewportStateCreateInfo-scissorCount-01217\", \"If the multiViewport feature is not enabled, scissorCount must not be greater than 1\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!enabled_features.multiViewport && (viewport_state.scissorCount > 1)) {\n    skip |= LogError(\"VUID-VkPipelineViewportStateCreateInfo-scissorCount-01217\", device,\n                     viewport_loc.dot(Field::scissorCount),\n                     \"is %\" PRIu32 \" but multiViewport feature is not enabled.\", viewport_state.scissorCount);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkPipelineViewportExclusiveScissorStateCreateInfoNV-exclusiveScissorCount-02028\", \"exclusiveScissorCount must be less than or equal to VkPhysicalDeviceLimits::maxViewports\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (exclusive_scissor_struct && exclusive_scissor_struct->exclusiveScissorCount > device_limits.maxViewports) {\n    skip |= LogError(\"VUID-VkPipelineViewportExclusiveScissorStateCreateInfoNV-exclusiveScissorCount-02028\", device,\n                     viewport_loc.pNext(Struct::VkPipelineViewportExclusiveScissorStateCreateInfoNV,\n                                        Field::exclusiveScissorCount),\n                     \"(%\" PRIu32 \") is larger than maxViewports (%\" PRIu32 \").\",\n                     exclusive_scissor_struct->exclusiveScissorCount, device_limits.maxViewports);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkGraphicsPipelineCreateInfo-pDynamicStates-04130\", \"If the pipeline requires pre-rasterization shader state, and pViewportState->pViewports is not dynamic, then pViewportState->pViewports must be a valid pointer to an array of pViewportState->viewportCount valid VkViewport structures\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!has_dynamic_viewport && !has_dynamic_viewport_with_count && viewport_state.viewportCount > 0 &&\n    skip |= LogError(\"VUID-VkGraphicsPipelineCreateInfo-pDynamicStates-04130\", device,\n                     viewport_loc.dot(Field::pViewports), \"is NULL, but the viewport state is not dynamic.\");\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkPipelineViewportCoarseSampleOrderStateCreateInfoNV-sampleOrderType-02072\", \"If sampleOrderType is not VK_COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV, customSamplerOrderCount must be 0\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (coarse_sample_order_struct->sampleOrderType != VK_COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV &&\n    skip |= LogError(\"VUID-VkPipelineViewportCoarseSampleOrderStateCreateInfoNV-sampleOrderType-02072\", device,\n                     coarse_sample_loc.dot(Field::sampleOrderType),\n                     \"is not VK_COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV and customSampleOrderCount is not 0.\");\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkPipelineMultisampleStateCreateInfo-sampleShadingEnable-00784\", \"If the sampleRateShading feature is not enabled, sampleShadingEnable must be VK_FALSE\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!enabled_features.sampleRateShading) {\n    skip |= LogError(\"VUID-VkPipelineMultisampleStateCreateInfo-sampleShadingEnable-00784\", device,\n                     ms_loc.dot(Field::sampleShadingEnable),\n                     \"is VK_TRUE but the sampleRateShading feature was not enabled.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkPipelineRasterizationStateCreateInfo-polygonMode-01414\", \"If the VK_NV_fill_rectangle extension is not enabled, polygonMode must not be VK_POLYGON_MODE_FILL_RECTANGLE_NV\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (create_info.pRasterizationState->polygonMode == VK_POLYGON_MODE_FILL_RECTANGLE_NV) {\n    skip |= LogError(\"VUID-VkPipelineRasterizationStateCreateInfo-polygonMode-01414\", device,\n                     rasterization_loc.dot(Field::polygonMode),\n                     \"is VK_POLYGON_MODE_FILL_RECTANGLE_NV, but \"\n                     \"the extension VK_NV_fill_rectangle is not enabled.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkGraphicsPipelineCreateInfo-lineRasterizationMode-02766\", \"If the pipeline requires pre-rasterization shader state and at least one of fragment output interface state or fragment shader state, and pMultisampleState is not NULL, the lineRasterizationMode member of a VkPipelineRasterizationLineStateCreateInfoKHR structure included in the pNext chain of pRasterizationState is VK_LINE_RASTERIZATION_MODE_BRESENHAM_KHR or VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_KHR, then the alphaToCoverageEnable, alphaToOneEnable, and sampleShadingEnable members of pMultisampleState must all be VK_FALSE\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (create_info.pMultisampleState->alphaToOneEnable) {\n    skip |= LogError(\"VUID-VkGraphicsPipelineCreateInfo-lineRasterizationMode-02766\", device,\n                     rasterization_loc.pNext(Struct::VkPipelineRasterizationLineStateCreateInfoKHR,\n                                             Field::lineStippleFactor),\n                     \"is %s, but pCreateInfos[%\" PRIu32 \"].pMultisampleState->alphaToOneEnable == VK_TRUE.\",\n                     string_VkLineRasterizationModeKHR(line_state->lineRasterizationMode), i);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkPipelineRasterizationLineStateCreateInfoKHR-stippledLineEnable-02771\", \"If stippledLineEnable is VK_TRUE and lineRasterizationMode is VK_LINE_RASTERIZATION_MODE_RECTANGULAR_KHR, then the stippledRectangularLines feature must be enabled\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (line_state->lineRasterizationMode == VK_LINE_RASTERIZATION_MODE_RECTANGULAR_KHR &&\n    skip |= LogError(\"VUID-VkPipelineRasterizationLineStateCreateInfoKHR-stippledLineEnable-02771\", device,\n                     rasterization_loc.pNext(Struct::VkPhysicalDeviceLineRasterizationFeaturesKHR,\n                                             Field::lineRasterizationMode),\n                     \"is VK_LINE_RASTERIZATION_MODE_RECTANGULAR_KHR and stippledLineEnable was VK_TRUE, \"\n                     \"but the stippledRectangularLines feature was not enabled.\");\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkGraphicsPipelineCreateInfo-flags-07985\", \"If flags contains the VK_PIPELINE_CREATE_DERIVATIVE_BIT flag, and basePipelineHandle is VK_NULL_HANDLE, basePipelineIndex must be a valid index into the calling command's pCreateInfos parameter\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "} else if (static_cast<uint32_t>(create_info.basePipelineIndex) >= createInfoCount) {\n        LogError(\"VUID-VkGraphicsPipelineCreateInfo-flags-07985\", device, create_info_loc.dot(Field::basePipelineIndex),\n                 \"(%\" PRIu32 \") is greater than or equal to createInfoCount %\" PRIu32 \".\",\n                 create_info.basePipelineIndex, createInfoCount);\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkComputePipelineCreateInfo-flags-03368\", \"flags must not include VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((flags & VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR) != 0) {\n    skip |= LogError(\"VUID-VkComputePipelineCreateInfo-flags-03368\", device, flags_loc,\n                     \"(%s) must not include VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR.\",\n                     string_VkPipelineCreateFlags2KHR(flags).c_str());\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkComputePipelineCreateInfo-flags-07367\", \"flags must not include VK_PIPELINE_CREATE_RAY_TRACING_OPACITY_MICROMAP_BIT_EXT\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((flags & VK_PIPELINE_CREATE_RAY_TRACING_OPACITY_MICROMAP_BIT_EXT) != 0) {\n    skip |= LogError(\"VUID-VkComputePipelineCreateInfo-flags-07367\", device, flags_loc,\n                     \"(%s) must not include VK_PIPELINE_CREATE_RAY_TRACING_OPACITY_MICROMAP_BIT_EXT.\",\n                     string_VkPipelineCreateFlags2KHR(flags).c_str());\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkComputePipelineCreateInfo-flags-07986\", \"If flags contains the VK_PIPELINE_CREATE_DERIVATIVE_BIT flag, basePipelineIndex must be -1 or basePipelineHandle must be VK_NULL_HANDLE\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (create_info.basePipelineIndex != -1) {\n    skip |= LogError(\"VUID-VkComputePipelineCreateInfo-flags-07986\", device,\n                     create_info_loc.dot(Field::basePipelineIndex),\n                     \"(%\" PRIu32 \") and basePipelineHandle is not VK_NULL_HANDLE.\", create_info.basePipelineIndex);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkGeometryTrianglesNV-vertexFormat-02430\", \"vertexFormat must be one of VK_FORMAT_R32G32B32_SFLOAT, VK_FORMAT_R32G32_SFLOAT, VK_FORMAT_R16G16B16_SFLOAT, VK_FORMAT_R16G16_SFLOAT, VK_FORMAT_R16G16_SNORM, or VK_FORMAT_R16G16B16_SNORM\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (triangles.vertexFormat != VK_FORMAT_R32G32B32_SFLOAT && triangles.vertexFormat != VK_FORMAT_R16G16B16_SFLOAT &&\n    triangles.vertexFormat != VK_FORMAT_R16G16B16_SNORM && triangles.vertexFormat != VK_FORMAT_R32G32_SFLOAT &&\n    triangles.vertexFormat != VK_FORMAT_R16G16_SFLOAT && triangles.vertexFormat != VK_FORMAT_R16G16_SNORM) {\n    skip |= LogError(\"VUID-VkGeometryTrianglesNV-vertexFormat-02430\", object_handle, loc, \"is invalid.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkGeometryTrianglesNV-indexData-02434\", \"indexData must be VK_NULL_HANDLE if indexType is VK_INDEX_TYPE_NONE_NV\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (triangles.indexData != VK_NULL_HANDLE) {\n    skip |= LogError(\"VUID-VkGeometryTrianglesNV-indexData-02434\", object_handle, loc, \"is invalid.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkAccelerationStructureInfoNV-type-02426\", \"If type is VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_NV then instanceCount must be 0\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (info.type == VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_NV && info.instanceCount != 0) {\n    skip |= LogError(\"VUID-VkAccelerationStructureInfoNV-type-02426\", object_handle, loc,\n                     \"If type is VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_NV then \"\n                     \"instanceCount must be 0.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkAccelerationStructureInfoNV-maxTriangleCount-02424\", \"The total number of triangles in all geometries must be less than or equal to VkPhysicalDeviceRayTracingPropertiesNV::maxTriangleCount\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (total_triangle_count > phys_dev_ext_props.ray_tracing_props_nv.maxTriangleCount) {\n    skip |= LogError(\"VUID-VkAccelerationStructureInfoNV-maxTriangleCount-02424\", object_handle, loc,\n                     \"The total number of triangles in all geometries must be less than \"\n                     \"or equal to VkPhysicalDeviceRayTracingPropertiesNV::maxTriangleCount.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCreateAccelerationStructureKHR-accelerationStructure-03611\", \"The VkPhysicalDeviceAccelerationStructureFeaturesKHR::accelerationStructure feature must be enabled\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!enabled_features.accelerationStructure) {\n    skip |= LogError(\"VUID-vkCreateAccelerationStructureKHR-accelerationStructure-03611\", device, error_obj.location,\n                     \"accelerationStructure feature was not enabled.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkAccelerationStructureCreateInfoKHR-createFlags-08108\", \"If createFlags includes VK_ACCELERATION_STRUCTURE_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT, the descriptorBufferCaptureReplay feature must be enabled\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((pCreateInfo->createFlags & VK_ACCELERATION_STRUCTURE_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT) &&\n    skip |= LogError(\"VUID-VkAccelerationStructureCreateInfoKHR-createFlags-08108\", device,\n                     create_info_loc.dot(Field::createFlags),\n                     \"includes VK_ACCELERATION_STRUCTURE_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_BIT_EXT, but the \"\n                     \"descriptorBufferCaptureReplay feature was not enabled.\");\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkRayTracingPipelineCreateInfoNV-flags-02904\", \"flags must not include VK_PIPELINE_CREATE_INDIRECT_BINDABLE_BIT_NV\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (flags & VK_PIPELINE_CREATE_INDIRECT_BINDABLE_BIT_NV) {\n    skip |= LogError(\"VUID-VkRayTracingPipelineCreateInfoNV-flags-02904\", device, flags_loc, \"is %s.\",\n                     string_VkPipelineCreateFlags2KHR(flags).c_str());\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkRayTracingPipelineCreateInfoNV-flags-03460\", \"flags must not include VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (flags & VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR) {\n    skip |= LogError(\"VUID-VkRayTracingPipelineCreateInfoNV-flags-03460\", device, flags_loc, \"is %s\",\n                     string_VkPipelineCreateFlags2KHR(flags).c_str());\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCreateRayTracingPipelinesNV-flags-03816\", \"flags must not contain the VK_PIPELINE_CREATE_DISPATCH_BASE flag\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (flags & VK_PIPELINE_CREATE_DISPATCH_BASE) {\n    skip |= LogError(\"VUID-vkCreateRayTracingPipelinesNV-flags-03816\", device, flags_loc, \"is %s\",\n                     string_VkPipelineCreateFlags2KHR(flags).c_str());\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkRayTracingPipelineCreateInfoNV-flags-07986\", \"If flags contains the VK_PIPELINE_CREATE_DERIVATIVE_BIT flag, basePipelineIndex must be -1 or basePipelineHandle must be VK_NULL_HANDLE\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (create_info.basePipelineIndex != -1) {\n    skip |= LogError(\"VUID-VkRayTracingPipelineCreateInfoNV-flags-07986\", device, flags_loc,\n                     \"is %s, but %s is %\" PRId32 \".\", string_VkPipelineCreateFlags2KHR(flags).c_str(),\n                     create_info_loc.dot(Field::basePipelineIndex).Fields().c_str(), create_info.basePipelineIndex);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkRayTracingPipelineCreateInfoKHR-flags-03598\", \"If flags includes VK_PIPELINE_CREATE_RAY_TRACING_SHADER_GROUP_HANDLE_CAPTURE_REPLAY_BIT_KHR, rayTracingPipelineShaderGroupHandleCaptureReplay must be enabled\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (flags & VK_PIPELINE_CREATE_RAY_TRACING_SHADER_GROUP_HANDLE_CAPTURE_REPLAY_BIT_KHR &&\n    skip |= LogError(\"VUID-VkRayTracingPipelineCreateInfoKHR-flags-03598\", device, flags_loc, \"is %s.\",\n                     string_VkPipelineCreateFlags2KHR(flags).c_str());\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkRayTracingPipelineCreateInfoKHR-stage-06899\", \"The stage value in all pStages elements must be one of VK_SHADER_STAGE_RAYGEN_BIT_KHR, VK_SHADER_STAGE_ANY_HIT_BIT_KHR, VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR, VK_SHADER_STAGE_MISS_BIT_KHR, VK_SHADER_STAGE_INTERSECTION_BIT_KHR, or VK_SHADER_STAGE_CALLABLE_BIT_KHR\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((stage & kShaderStageAllRayTracing) == 0) {\n    skip |= LogError(\"VUID-VkRayTracingPipelineCreateInfoKHR-stage-06899\", device, stage_loc.dot(Field::stage),\n                     \"is %s.\", string_VkShaderStageFlagBits(stage));\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkRayTracingPipelineCreateInfoKHR-flags-07986\", \"If flags contains the VK_PIPELINE_CREATE_DERIVATIVE_BIT flag, basePipelineIndex must be -1 or basePipelineHandle must be VK_NULL_HANDLE\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (create_info.basePipelineHandle != VK_NULL_HANDLE) {\n    skip |= LogError(\"VUID-VkRayTracingPipelineCreateInfoKHR-flags-07986\", device,\n                     create_info_loc.dot(Field::basePipelineIndex),\n                     \"is %\" PRId32 \" and basePipelineHandle is not VK_NULL_HANDLE.\", create_info.basePipelineIndex);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkRayTracingPipelineCreateInfoKHR-pLibraryInfo-03595\", \"If the VK_KHR_pipeline_library extension is not enabled, pLibraryInfo and pLibraryInterface must be NULL\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (create_info.pLibraryInterface) {\n    skip |= LogError(\"VUID-VkRayTracingPipelineCreateInfoKHR-pLibraryInfo-03595\", device,\n                     create_info_loc.dot(Field::pLibraryInterface), \"is not NULL.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkRayTracingPipelineCreateInfoKHR-flags-08700\", \"If flags does not include VK_PIPELINE_CREATE_LIBRARY_BIT_KHR and either pLibraryInfo is NULL or its libraryCount is 0, groupCount must not be 0\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (((flags & VK_PIPELINE_CREATE_LIBRARY_BIT_KHR) == 0) && (create_info.groupCount == 0)) {\n    skip |= LogError(\"VUID-VkRayTracingPipelineCreateInfoKHR-flags-08700\", device,\n                     create_info_loc.dot(Field::pLibraryInfo).dot(Field::libraryCount), \"is zero and flags is %s.\",\n                     string_VkPipelineCreateFlags2KHR(flags).c_str());\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkCopyAccelerationStructureToMemoryInfoKHR-mode-03412\", \"mode must be VK_COPY_ACCELERATION_STRUCTURE_MODE_SERIALIZE_KHR\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (pInfo->mode != VK_COPY_ACCELERATION_STRUCTURE_MODE_SERIALIZE_KHR) {\n    skip |=  // to update VUID to VkCmdCopyAccelerationStructureToMemoryInfoKHR after spec update\n        LogError(\"VUID-VkCopyAccelerationStructureToMemoryInfoKHR-mode-03412\", commandBuffer, info_loc.dot(Field::mode),\n                 \"is %s.\", string_VkCopyAccelerationStructureModeKHR(pInfo->mode));\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdCopyAccelerationStructureToMemoryKHR-pInfo-03740\", \"pInfo->dst.deviceAddress must be aligned to 256 bytes\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (SafeModulo(pInfo->dst.deviceAddress, 256) != 0) {\n    skip |= LogError(\"VUID-vkCmdCopyAccelerationStructureToMemoryKHR-pInfo-03740\", commandBuffer,\n                     info_loc.dot(Field::dst).dot(Field::deviceAddress), \"(0x%\" PRIx64 \") must be aligned to 256 bytes.\",\n                     pInfo->dst.deviceAddress);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCopyMemoryToAccelerationStructureKHR-accelerationStructureHostCommands-03583\", \"The VkPhysicalDeviceAccelerationStructureFeaturesKHR::accelerationStructureHostCommands feature must be enabled\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!enabled_features.accelerationStructureHostCommands) {\n    skip |= LogError(\"VUID-vkCopyMemoryToAccelerationStructureKHR-accelerationStructureHostCommands-03583\", device,\n                     error_obj.location, \"accelerationStructureHostCommands feature was not enabled.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdWriteAccelerationStructuresPropertiesKHR-accelerationStructure-08924\", \"The VkPhysicalDeviceAccelerationStructureFeaturesKHR::accelerationStructure feature must be enabled\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!enabled_features.accelerationStructure) {\n    skip |= LogError(\"VUID-vkCmdWriteAccelerationStructuresPropertiesKHR-accelerationStructure-08924\", commandBuffer,\n                     error_obj.location, \"accelerationStructure feature was not enabled.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkWriteAccelerationStructuresPropertiesKHR-queryType-03451\", \"If queryType is VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_SIZE_KHR, then pData must point to a VkDeviceSize\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "\"is %s, but %s is %zu.\", string_VkQueryType(queryType), data_size_loc.Fields().c_str(), dataSize);\nskip |= LogError(\"VUID-vkWriteAccelerationStructuresPropertiesKHR-queryType-03451\", device, query_type_loc,\n\"is %s, but %s is %zu.\", string_VkQueryType(queryType), data_size_loc.Fields().c_str(), dataSize);\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkWriteAccelerationStructuresPropertiesKHR-queryType-03450\", \"If queryType is VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_SIZE_KHR, then stride must be a multiple of the size of VkDeviceSize\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "} else if (queryType == VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_SIZE_KHR) {\n    skip |= LogError(\"VUID-vkWriteAccelerationStructuresPropertiesKHR-queryType-03450\", device,\n                     error_obj.location.dot(Field::queryType),\n                     \"is VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_SIZE_KHR, but then stride (%zu) must be a \"\n                     \"multiple of the size of VkDeviceSize.\",\n                     stride);\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkAccelerationStructureBuildGeometryInfoKHR-type-03795\", \"If type is VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR and the geometryType member of either pGeometries or ppGeometries is VK_GEOMETRY_TYPE_TRIANGLES_KHR, the total number of triangles in all geometries must be less than or equal to VkPhysicalDeviceAccelerationStructurePropertiesKHR::maxPrimitiveCount\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (total_triangles_count > phys_dev_ext_props.acc_structure_props.maxPrimitiveCount) {\n    skip |= LogError(\"VUID-VkAccelerationStructureBuildGeometryInfoKHR-type-03795\", handle, loc,\n                     \"total number of triangles in all geometries (%\" PRIu64\n                     \") is larger than maxPrimitiveCount \"\n                     \"(%\" PRIu64 \")\",\n                     total_triangles_count, phys_dev_ext_props.acc_structure_props.maxPrimitiveCount);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkAccelerationStructureBuildGeometryInfoKHR-pGeometries-03788\", \"If geometryCount is not 0, exactly one of pGeometries or ppGeometries must be a valid pointer, the other must be NULL\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (info.geometryCount > 0 && !info.pGeometries && !info.ppGeometries) {\n    skip |= LogError(\"VUID-VkAccelerationStructureBuildGeometryInfoKHR-pGeometries-03788\", handle,\n                     info_loc.dot(Field::geometryCount), \"is (%\" PRIu32 \") but both pGeometries and ppGeometries are NULL.\",\n                     info.geometryCount);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkAccelerationStructureGeometryTrianglesDataKHR-pNext-pNext\", \"Each pNext member of any structure (including this one) in the pNext chain must be either NULL or a pointer to a valid instance of VkAccelerationStructureGeometryMotionTrianglesDataNV, VkAccelerationStructureTrianglesDisplacementMicromapNV, or VkAccelerationStructureTrianglesOpacityMicromapEXT\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "\"VUID-VkAccelerationStructureGeometryTrianglesDataKHR-sType-sType\");\nskip |= ValidateStructPnext(geometry_loc.dot(Field::geometry).dot(Field::triangles), geom.geometry.triangles.pNext,\n \"VUID-VkAccelerationStructureGeometryTrianglesDataKHR-pNext-pNext\",\n \"VUID-VkAccelerationStructureGeometryTrianglesDataKHR-sType-unique\");\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkAccelerationStructureGeometryTrianglesDataKHR-vertexStride-03819\", \"vertexStride must be less than or equal to 232-1\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (geom.geometry.triangles.vertexStride > vvl::kU32Max) {\n    skip |= LogError(\"VUID-VkAccelerationStructureGeometryTrianglesDataKHR-vertexStride-03819\", handle,\n                     geometry_loc.dot(Field::geometry).dot(Field::triangles).dot(Field::vertexStride),\n                     \"(%\" PRIu64 \") must be less than or equal to 2^32-1.\", geom.geometry.triangles.vertexStride);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkAccelerationStructureGeometryKHR-aabbs-parameter\", \"If geometryType is VK_GEOMETRY_TYPE_AABBS_KHR, the aabbs member of geometry must be a valid VkAccelerationStructureGeometryAabbsDataKHR structure\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (geom.geometryType == VK_GEOMETRY_TYPE_AABBS_KHR) {\n    skip |= ValidateStructType(geometry_loc.dot(Field::geometry).dot(Field::aabbs), &geom.geometry.aabbs,\n                               \"VUID-VkAccelerationStructureGeometryKHR-aabbs-parameter\", kVUIDUndefined);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkAccelerationStructureBuildGeometryInfoKHR-type-03789\", \"If type is VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR, the geometryType member of elements of either pGeometries or ppGeometries must be VK_GEOMETRY_TYPE_INSTANCES_KHR\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (info.type == VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR && geom.geometryType != VK_GEOMETRY_TYPE_INSTANCES_KHR) {\n    skip |= LogError(\"VUID-VkAccelerationStructureBuildGeometryInfoKHR-type-03789\", handle,\n                     geometry_loc.dot(Field::geometryType), \"is %s but %s is VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR.\",\n                     string_VkGeometryTypeKHR(geom.geometryType), info_loc.dot(Field::type).Fields().c_str());\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdBuildAccelerationStructuresKHR-mode-04628\", \"The mode member of each element of pInfos must be a valid VkBuildAccelerationStructureModeKHR value\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "skip |= ValidateRangedEnum(info_loc.dot(Field::mode), vvl::Enum::VkBuildAccelerationStructureModeKHR, info->mode,\n                           \"VUID-vkCmdBuildAccelerationStructuresKHR-mode-04628\");\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdBuildAccelerationStructuresKHR-pInfos-03810\", \"For any element of pInfos[i].pGeometries or pInfos[i].ppGeometries with a geometryType of VK_GEOMETRY_TYPE_TRIANGLES_KHR, if geometry.triangles.transformData.deviceAddress is not 0, it must be aligned to 16 bytes\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (SafeModulo(as_geometry.geometry.triangles.transformData.deviceAddress, 16) != 0) {\n        \"VUID-vkCmdBuildAccelerationStructuresKHR-pInfos-03810\", commandBuffer,\n        p_geom_geom_loc.dot(Field::triangles).dot(Field::transformData).dot(Field::deviceAddress),\n        \"(%\" PRIu64 \") must be aligned to 16 bytes when geometryType is VK_GEOMETRY_TYPE_TRIANGLES_KHR.\",\n        as_geometry.geometry.triangles.transformData.deviceAddress);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdBuildAccelerationStructuresKHR-ppBuildRangeInfos-03676\", \"Each element of ppBuildRangeInfos[i] must be a valid pointer to an array of pInfos[i].geometryCount VkAccelerationStructureBuildRangeInfoKHR structures\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "skip |= ValidateArray(info_loc.dot(Field::geometryCount), error_obj.location.dot(Field::ppBuildRangeInfos, info_i),\n                      info->geometryCount, &ppBuildRangeInfos[info_i], false, true, kVUIDUndefined,\n                      \"VUID-vkCmdBuildAccelerationStructuresKHR-ppBuildRangeInfos-03676\");\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdBuildAccelerationStructuresIndirectKHR-dstAccelerationStructure-03698\", \"The dstAccelerationStructure member of any element of pInfos must not be the same acceleration structure as the dstAccelerationStructure member of any other element of pInfos\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (info->dstAccelerationStructure == pInfos[info_k].dstAccelerationStructure) {\n    const LogObjectList objlist(commandBuffer, info->dstAccelerationStructure);\n    skip |= LogError(\"VUID-vkCmdBuildAccelerationStructuresIndirectKHR-dstAccelerationStructure-03698\", objlist,\n                     info_loc.dot(Field::dstAccelerationStructure),\n                     \"and pInfos[%\" PRIu32 \"].dstAccelerationStructure are both %s.\", info_k,\n                     FormatHandle(info->dstAccelerationStructure).c_str());\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdBuildAccelerationStructuresIndirectKHR-pInfos-03715\", \"For any element of pInfos[i].pGeometries or pInfos[i].ppGeometries with a geometryType of VK_GEOMETRY_TYPE_INSTANCES_KHR, if geometry.arrayOfPointers is VK_FALSE, geometry.instances.data.deviceAddress must be aligned to 16 bytes\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (SafeModulo(as_geometry->geometry.instances.data.deviceAddress, 16) != 0) {\n        \"VUID-vkCmdBuildAccelerationStructuresIndirectKHR-pInfos-03715\", commandBuffer,\n        geometry_loc.dot(Field::geometry).dot(Field::instances).dot(Field::data).dot(Field::deviceAddress),\n        \"(%\" PRIu64\n        \") must be aligned to 16 bytes when geometryType is VK_GEOMETRY_TYPE_INSTANCES_KHR and \"\n        \"geometry.instances.arrayOfPointers is VK_FALSE.\",\n        info->pGeometries[j].geometry.instances.data.deviceAddress);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdBuildAccelerationStructuresIndirectKHR-pInfos-03810\", \"For any element of pInfos[i].pGeometries or pInfos[i].ppGeometries with a geometryType of VK_GEOMETRY_TYPE_TRIANGLES_KHR, if geometry.triangles.transformData.deviceAddress is not 0, it must be aligned to 16 bytes\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (SafeModulo(as_geometry->geometry.triangles.indexData.deviceAddress, 16) != 0) {\n    skip |= LogError(\"VUID-vkCmdBuildAccelerationStructuresIndirectKHR-pInfos-03810\", commandBuffer,\n                     geometry_loc.dot(Field::geometry)\n                         .dot(Field::triangles)\n                         .dot(Field::transformData)\n                         .dot(Field::deviceAddress),\n                     \"(%\" PRIu64\n                     \") must be aligned to 16 bytes when geometryType is VK_GEOMETRY_TYPE_TRIANGLES_KHR.\",\n                     info->pGeometries[j].geometry.triangles.transformData.deviceAddress);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkBuildAccelerationStructuresKHR-ppBuildRangeInfos-03676\", \"Each element of ppBuildRangeInfos[i] must be a valid pointer to an array of pInfos[i].geometryCount VkAccelerationStructureBuildRangeInfoKHR structures\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "skip |= ValidateArray(info_loc.dot(Field::geometryCount), error_obj.location.dot(Field::ppBuildRangeInfos, info_i),\n                      info->geometryCount, &ppBuildRangeInfos[info_i], false, true, kVUIDUndefined,\n                      \"VUID-vkBuildAccelerationStructuresKHR-ppBuildRangeInfos-03676\");\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkBuildAccelerationStructuresKHR-pInfos-03772\", \"For any element of pInfos[i].pGeometries or pInfos[i].ppGeometries with a geometryType of VK_GEOMETRY_TYPE_TRIANGLES_KHR, if geometry.triangles.indexType is not VK_INDEX_TYPE_NONE_KHR, geometry.triangles.indexData.hostAddress must be a valid host address\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (geom.geometry.triangles.indexData.hostAddress == nullptr) {\n        LogError(\"VUID-vkBuildAccelerationStructuresKHR-pInfos-03772\", device,\n                 info_loc.dot(Field::triangles).dot(Field::indexData).dot(Field::hostAddress), \"is NULL.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkGetAccelerationStructureBuildSizesKHR-accelerationStructure-08933\", \"The VkPhysicalDeviceAccelerationStructureFeaturesKHR::accelerationStructure feature must be enabled\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!enabled_features.accelerationStructure) {\n    skip |= LogError(\"VUID-vkGetAccelerationStructureBuildSizesKHR-accelerationStructure-08933\", device, error_obj.location,\n                     \"accelerationStructure feature was not enabled.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdTraceRaysIndirectKHR-pRayGenShaderBindingTable-03682\", \"pRayGenShaderBindingTable->deviceAddress must be a multiple of VkPhysicalDeviceRayTracingPipelinePropertiesKHR::shaderGroupBaseAlignment\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (SafeModulo(raygen_shader_binding_table.deviceAddress, phys_dev_ext_props.ray_tracing_props_khr.shaderGroupBaseAlignment) !=\n    const char *vuid = indirect ? \"VUID-vkCmdTraceRaysIndirectKHR-pRayGenShaderBindingTable-03682\"\n                                : \"VUID-vkCmdTraceRaysKHR-pRayGenShaderBindingTable-03682\";\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdTraceRaysKHR-stride-04029\", \"pMissShaderBindingTable->stride must be less than or equal to VkPhysicalDeviceRayTracingPipelinePropertiesKHR::maxShaderGroupStride\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (miss_shader_binding_table.stride > props.maxShaderGroupStride) {\n    const char *vuid = indirect ? \"VUID-vkCmdTraceRaysIndirectKHR-stride-04029\" : \"VUID-vkCmdTraceRaysKHR-stride-04029\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdTraceRaysIndirectKHR-stride-04035\", \"pHitShaderBindingTable->stride must be less than or equal to VkPhysicalDeviceRayTracingPipelinePropertiesKHR::maxShaderGroupStride\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (hit_shader_binding_table.stride > props.maxShaderGroupStride) {\n    const char *vuid = indirect ? \"VUID-vkCmdTraceRaysIndirectKHR-stride-04035\" : \"VUID-vkCmdTraceRaysKHR-stride-04035\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdTraceRaysKHR-stride-03694\", \"pCallableShaderBindingTable->stride must be a multiple of VkPhysicalDeviceRayTracingPipelinePropertiesKHR::shaderGroupHandleAlignment\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (SafeModulo(callable_shader_binding_table.stride, props.shaderGroupHandleAlignment) != 0) {\n    const char *vuid = indirect ? \"VUID-vkCmdTraceRaysIndirectKHR-stride-03694\" : \"VUID-vkCmdTraceRaysKHR-stride-03694\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdTraceRaysKHR-width-03641\", \"width \u00d7 height \u00d7 depth must be less than or equal to VkPhysicalDeviceRayTracingPipelinePropertiesKHR::maxRayDispatchInvocationCount\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (width * depth * height > phys_dev_ext_props.ray_tracing_props_khr.maxRayDispatchInvocationCount) {\n    skip |= LogError(\"VUID-vkCmdTraceRaysKHR-width-03641\", commandBuffer, error_obj.location,\n                     \"width x height x depth (%\" PRIu32 \" x %\" PRIu32 \" x %\" PRIu32\n                     \") must be less than or equal to \"\n                     \"VkPhysicalDeviceRayTracingPipelinePropertiesKHR::maxRayDispatchInvocationCount (%\" PRIu32 \").\",\n                     width, depth, height, phys_dev_ext_props.ray_tracing_props_khr.maxRayDispatchInvocationCount);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkCmdTraceRaysIndirectKHR-indirectDeviceAddress-03634\", \"indirectDeviceAddress must be a multiple of 4\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (SafeModulo(indirectDeviceAddress, 4) != 0) {\n    skip |= LogError(\"VUID-vkCmdTraceRaysIndirectKHR-indirectDeviceAddress-03634\", commandBuffer,\n                     error_obj.location.dot(Field::indirectDeviceAddress), \"(%\" PRIu64 \") must be a multiple of 4.\",\n                     indirectDeviceAddress);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkAttachmentDescription2-format-09332\", \"If externalFormatResolve is not enabled, format must not be VK_FORMAT_UNDEFINED\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "vuid = use_rp2 ? \"VUID-VkAttachmentDescription2-format-09332\" : \"VUID-VkAttachmentDescription-format-06698\";\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkAttachmentDescription2-separateDepthStencilLayouts-03285\", \"If the separateDepthStencilLayouts feature is not enabled, finalLayout must not be VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL, VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL, VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL, or VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL,\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (IsImageLayoutDepthOnly(final_layout) || IsImageLayoutStencilOnly(final_layout)) {\n    vuid = use_rp2 ? \"VUID-VkAttachmentDescription2-separateDepthStencilLayouts-03285\"\n                   : \"VUID-VkAttachmentDescription-separateDepthStencilLayouts-03285\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkAttachmentDescription-attachmentFeedbackLoopLayout-07310\", \"If the attachmentFeedbackLoopLayout feature is not enabled, finalLayout must not be VK_IMAGE_LAYOUT_ATTACHMENT_FEEDBACK_LOOP_OPTIMAL_EXT\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (final_layout == VK_IMAGE_LAYOUT_ATTACHMENT_FEEDBACK_LOOP_OPTIMAL_EXT) {\n    vuid = use_rp2 ? \"VUID-VkAttachmentDescription2-attachmentFeedbackLoopLayout-07310\"\n                   : \"VUID-VkAttachmentDescription-attachmentFeedbackLoopLayout-07310\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkAttachmentDescription2-dynamicRenderingLocalRead-09544\", \"If the dynamicRenderingLocalRead feature is not enabled, initialLayout must not be VK_IMAGE_LAYOUT_RENDERING_LOCAL_READ_KHR\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (initial_layout == VK_IMAGE_LAYOUT_RENDERING_LOCAL_READ_KHR) {\n    vuid = use_rp2 ? \"VUID-VkAttachmentDescription2-dynamicRenderingLocalRead-09544\"\n                   : \"VUID-VkAttachmentDescription-dynamicRenderingLocalRead-09544\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkAttachmentDescription2-format-03286\", \"If format is a color format, initialLayout must not be VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL, VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL, VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL, or VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (IsImageLayoutDepthOnly(initial_layout) || IsImageLayoutStencilOnly(initial_layout)) {\n    vuid = use_rp2 ? \"VUID-VkAttachmentDescription2-format-03286\" : \"VUID-VkAttachmentDescription-format-03286\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkAttachmentDescription-format-06907\", \"If format is a depth/stencil format which includes both depth and stencil components, finalLayout must not be VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL or VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (IsImageLayoutStencilOnly(final_layout)) {\n    vuid = use_rp2 ? \"VUID-VkAttachmentDescription2-format-06907\" : \"VUID-VkAttachmentDescription-format-06907\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkAttachmentDescription2-format-06250\", \"If format is a depth/stencil format which includes both depth and stencil components, and finalLayout is VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL or VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL, the pNext chain must include a VkAttachmentDescriptionStencilLayout structure\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (IsImageLayoutDepthOnly(final_layout)) {\n    vuid = use_rp2 ? \"VUID-VkAttachmentDescription2-format-06250\" : \"VUID-VkAttachmentDescription-format-06243\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkAttachmentDescription-format-03292\", \"If format is a depth/stencil format which includes only the stencil component, initialLayout must not be VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL or VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (IsImageLayoutDepthOnly(initial_layout)) {\n    vuid = use_rp2 ? \"VUID-VkAttachmentDescription2-format-06247\" : \"VUID-VkAttachmentDescription-format-03292\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkAttachmentDescriptionStencilLayout-stencilFinalLayout-03309\", \"stencilFinalLayout must not be VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL, VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL, VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL, VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL, VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL, VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL, or VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "skip |= LogError(\"VUID-VkAttachmentDescriptionStencilLayout-stencilFinalLayout-03309\", device,\n                 attachment_loc.pNext(Struct::VkAttachmentDescriptionStencilLayout, Field::stencilFinalLayout),\n                 \"is %s.\", string_VkImageLayout(stencil_final_layout));\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkAttachmentDescription2-format-03283\", \"If format is a depth/stencil format, finalLayout must not be VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (final_layout == VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL) {\n    vuid = use_rp2 ? \"VUID-VkAttachmentDescription2-format-03283\" : \"VUID-VkAttachmentDescription-format-03283\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkAttachmentDescription-format-03282\", \"If format is a color format, finalLayout must not be VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL or VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (final_layout == VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL ||\n    vuid = use_rp2 ? \"VUID-VkAttachmentDescription2-format-03282\" : \"VUID-VkAttachmentDescription-format-03282\";\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkAttachmentDescription2-format-06699\", \"If format includes a color or depth component and loadOp is VK_ATTACHMENT_LOAD_OP_LOAD, then initialLayout must not be VK_IMAGE_LAYOUT_UNDEFINED\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (pCreateInfo->pAttachments[i].loadOp == VK_ATTACHMENT_LOAD_OP_LOAD && initial_layout == VK_IMAGE_LAYOUT_UNDEFINED) {\n    vuid = use_rp2 ? \"VUID-VkAttachmentDescription2-format-06699\" : \"VUID-VkAttachmentDescription-format-06699\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkSubpassDescription-colorAttachmentCount-00845\", \"colorAttachmentCount must be less than or equal to VkPhysicalDeviceLimits::maxColorAttachments\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (pCreateInfo->pSubpasses[i].colorAttachmentCount > max_color_attachments) {\n    vuid = use_rp2 ? \"VUID-VkSubpassDescription2-colorAttachmentCount-03063\"\n                   : \"VUID-VkSubpassDescription-colorAttachmentCount-00845\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkRenderPassCreateInfo-pDependencies-00837\", \"For any element of pDependencies, if the srcSubpass is not VK_SUBPASS_EXTERNAL, all stage flags included in the srcStageMask member of that dependency must be a pipeline stage supported by the pipeline identified by the pipelineBindPoint member of the source subpass\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "vuid = use_rp2 ? \"VUID-VkRenderPassCreateInfo2-pDependencies-03054\" : \"VUID-VkRenderPassCreateInfo-pDependencies-00837\";\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkRenderPassStripeBeginInfoARM-stripeArea-09451\", \"The stripeArea defined by each element of pStripeInfos must not overlap the stripeArea of any other element\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (has_overlapping_stripes) {\n    skip |= LogError(\"VUID-VkRenderPassStripeBeginInfoARM-stripeArea-09451\", commandBuffer, stripe_info_loc,\n                     \"(offset{%s} extent{%s}) is overlapping with pStripeInfos[%\" PRIu32 \"] (offset{%s} extent {%s}).\",\n                     string_VkOffset2D(stripe_area.offset).c_str(), string_VkExtent2D(stripe_area.extent).c_str(),\n                     index, string_VkOffset2D(rect.offset).c_str(), string_VkExtent2D(rect.extent).c_str());\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkRenderPassBeginInfo-pNext-09539\", \"If the pNext chain contains a VkRenderPassStripeBeginInfoARM structure, the union of stripe areas defined by the elements of VkRenderPassStripeInfoARM::pStripeInfos must cover the renderArea\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!has_overlapping_stripes && (total_stripe_area != total_render_area)) {\n    const std::string vuid = (loc.function == Func::vkCmdBeginRenderPass) ? \"VUID-VkRenderPassBeginInfo-pNext-09539\"\n                                                                          : \"VUID-VkRenderingInfo-pNext-09535\";\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkRenderingInfo-colorAttachmentCount-06106\", \"colorAttachmentCount must be less than or equal to VkPhysicalDeviceLimits::maxColorAttachments\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (pRenderingInfo->colorAttachmentCount > device_limits.maxColorAttachments) {\n    skip |= LogError(\"VUID-VkRenderingInfo-colorAttachmentCount-06106\", commandBuffer,\n                     rendering_info_loc.dot(Field::colorAttachmentCount),\n                     \"(%\" PRIu32\n                     \") must be less than or equal to \"\n                     \"maxColorAttachments (%\" PRIu32 \").\",\n                     pRenderingInfo->colorAttachmentCount, device_limits.maxColorAttachments);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkRenderingFragmentDensityMapAttachmentInfoEXT-imageView-06157\", \"If imageView is not VK_NULL_HANDLE, imageLayout must be VK_IMAGE_LAYOUT_GENERAL or VK_IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (fragment_density_map_attachment_info->imageLayout != VK_IMAGE_LAYOUT_GENERAL &&\n    skip |= LogError(\"VUID-VkRenderingFragmentDensityMapAttachmentInfoEXT-imageView-06157\", commandBuffer,\n                     rendering_info_loc.pNext(Struct::VkRenderingFragmentDensityMapAttachmentInfoEXT, Field::imageView),\n                     \"is %s, but \"\n                     \"VkRenderingFragmentDensityMapAttachmentInfoEXT::imageLayout is %s.\",\n                     FormatHandle(fragment_density_map_attachment_info->imageView).c_str(),\n                     string_VkImageLayout(fragment_density_map_attachment_info->imageLayout));\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkRenderingInfo-colorAttachmentCount-06097\", \"If colorAttachmentCount is not 0 and the imageView member of an element of pColorAttachments is not VK_NULL_HANDLE, if the resolveMode member of that element of pColorAttachments is not VK_RESOLVE_MODE_NONE, its resolveImageLayout member must not be VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL or VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (resolve_image_layout == VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL ||\n    skip |= LogError(\"VUID-VkRenderingInfo-colorAttachmentCount-06097\", commandBuffer,\n                     attachment_loc.dot(Field::resolveImageLayout), \"is %s and resolve_mode is %s.\",\n                     string_VkImageLayout(resolve_image_layout), string_VkResolveModeFlagBits(resolve_mode));\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkRenderingInfo-pDepthAttachment-06093\", \"If pDepthAttachment is not NULL, pDepthAttachment->imageView is not VK_NULL_HANDLE, and pDepthAttachment->resolveMode is not VK_RESOLVE_MODE_NONE, pDepthAttachment->resolveImageLayout must not be VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (resolve_layout == VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL) {\n    skip |= LogError(\"VUID-VkRenderingInfo-pDepthAttachment-06093\", commandBuffer,\n                     attachment_loc.dot(Field::resolveImageLayout),\n                     \"is VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL and resolve_mode is %s.\",\n                     string_VkResolveModeFlagBits(pRenderingInfo->pDepthAttachment->resolveMode));\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkRenderingInfo-pStencilAttachment-07734\", \"If pStencilAttachment is not NULL and pStencilAttachment->imageView is not VK_NULL_HANDLE, pStencilAttachment->layout must not be VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL or VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "skip |= LogError(\"VUID-VkRenderingInfo-pStencilAttachment-06094\", commandBuffer, attachment_loc.dot(Field::imageLayout),\nskip |= LogError(\"VUID-VkRenderingInfo-pStencilAttachment-07734\", commandBuffer, attachment_loc.dot(Field::imageLayout),\n                 \"is %s.\", string_VkImageLayout(layout));\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkRenderingInfo-imageView-06125\", \"If the imageView member of a VkRenderingFragmentShadingRateAttachmentInfoKHR structure included in the pNext chain is not VK_NULL_HANDLE, it must not be equal to the imageView or resolveImageView member of pDepthAttachment, pStencilAttachment, or any element of pColorAttachments\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (UniqueRenderingInfoImageViews(rendering_info, rendering_fsr_attachment_info.imageView) == false) {\n    skip |= LogError(\"VUID-VkRenderingInfo-imageView-06125\", commandBuffer,\n                     rendering_info_loc.pNext(Struct::VkRenderingFragmentShadingRateAttachmentInfoKHR, Field::imageView),\n                     \"is %s.\", FormatHandle(rendering_fsr_attachment_info.imageView).c_str());\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkRenderingFragmentShadingRateAttachmentInfoKHR-imageView-06152\", \"If imageView is not VK_NULL_HANDLE, shadingRateAttachmentTexelSize.height must be a power of two value\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (!IsPowerOfTwo(rendering_fsr_attachment_info.shadingRateAttachmentTexelSize.height)) {\n        \"VUID-VkRenderingFragmentShadingRateAttachmentInfoKHR-imageView-06152\", commandBuffer,\n        rendering_info_loc.pNext(Struct::VkRenderingFragmentShadingRateAttachmentInfoKHR, Field::shadingRateAttachmentTexelSize)\n            .dot(Field::height),\n        \"(%\" PRIu32 \") must be a power of two.\", rendering_fsr_attachment_info.shadingRateAttachmentTexelSize.height);\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkShaderCreateInfoEXT-codeSize-08735\", \"If codeType is VK_SHADER_CODE_TYPE_SPIRV_EXT, codeSize must be a multiple of 4\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (createInfo.codeType == VK_SHADER_CODE_TYPE_SPIRV_EXT && SafeModulo(createInfo.codeSize, 4) != 0) {\n    skip |= LogError(\"VUID-VkShaderCreateInfoEXT-codeSize-08735\", device, create_info_loc.dot(Field::codeSize),\n                     \"(%\" PRIu64 \") is not a multiple of 4.\", static_cast<uint64_t>(createInfo.codeSize));\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkShaderCreateInfoEXT-flags-08486\", \"If stage is not VK_SHADER_STAGE_FRAGMENT_BIT, flags must not include VK_SHADER_CREATE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_EXT\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if ((createInfo.flags & VK_SHADER_CREATE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_EXT) != 0) {\n    skip |= LogError(\"VUID-VkShaderCreateInfoEXT-flags-08486\", device, create_info_loc.dot(Field::flags),\n                     \"is %s and stage is %s.\", string_VkShaderCreateFlagsEXT(createInfo.flags).c_str(),\n                     string_VkShaderStageFlagBits(createInfo.stage));\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkShaderCreateInfoEXT-stage-08418\", \"stage must not be VK_SHADER_STAGE_ALL_GRAPHICS or VK_SHADER_STAGE_ALL\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "} else if (createInfo.stage == VK_SHADER_STAGE_ALL) {\n    skip |= LogError(\"VUID-VkShaderCreateInfoEXT-stage-08418\", device, create_info_loc.dot(Field::stage),\n                     \"is VK_SHADER_STAGE_ALL.\");\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkAllocationCallbacks-pfnReallocation-00633\", \"pfnReallocation must be a valid pointer to a valid application-defined PFN_vkReallocationFunction\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "\"VUID-VkAllocationCallbacks-pfnAllocation-00632\");\nskip |= ValidateRequiredPointer(loc.dot(Field::pfnReallocation), reinterpret_cast<const void *>(callback.pfnReallocation),\n\"VUID-VkAllocationCallbacks-pfnReallocation-00633\");\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkAcquireNextImageInfoKHR-semaphore-01782\", \"semaphore and fence must not both be equal to VK_NULL_HANDLE\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (pAcquireInfo->semaphore == VK_NULL_HANDLE && pAcquireInfo->fence == VK_NULL_HANDLE) {\n    skip |= LogError(\"VUID-VkAcquireNextImageInfoKHR-semaphore-01782\", pAcquireInfo->swapchain,\n                     error_obj.location.dot(Field::pAcquireInfo), \"semaphore and fence are both VK_NULL_HANDLE.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkSwapchainCreateInfoKHR-flags-03168\", \"If flags contains VK_SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR then the pNext chain must include a VkImageFormatListCreateInfo structure with a viewFormatCount greater than zero and pViewFormats must have an element equal to imageFormat\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (format_list_info == nullptr) {\n    skip |= LogError(\"VUID-VkSwapchainCreateInfoKHR-flags-03168\", device, loc.dot(Field::flags),\n                     \"includes VK_SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR but the pNext does not contain \"\n                     \"VkImageFormatListCreateInfo.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkPresentInfoKHR-sType-unique\", \"The sType value of each struct in the pNext chain must be unique\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "GeneratedVulkanHeaderVersion, \"VUID-VkPresentInfoKHR-pNext-pNext\",\n\"VUID-VkPresentInfoKHR-sType-unique\");\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkGetPhysicalDeviceSurfaceFormatsKHR-surface-06524\", \"If the VK_GOOGLE_surfaceless_query extension is not enabled, surface must be a valid VkSurfaceKHR handle\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (surface == VK_NULL_HANDLE && !IsExtEnabled(instance_extensions.vk_google_surfaceless_query)) {\n        LogError(\"VUID-vkGetPhysicalDeviceSurfaceFormatsKHR-surface-06524\", physicalDevice,\n                 error_obj.location.dot(Field::surface), \"is VK_NULL_HANDLE and VK_GOOGLE_surfaceless_query is not enabled.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkGetPhysicalDeviceSurfaceCapabilities2KHR-pNext-07777\", \"If a VkSurfacePresentScalingCapabilitiesEXT structure is included in the pNext chain of pSurfaceCapabilities, a VkSurfacePresentModeEXT structure must be included in the pNext chain of pSurfaceInfo\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (surface_present_scaling_compatibilities) {\n    skip |= LogError(\"VUID-vkGetPhysicalDeviceSurfaceCapabilities2KHR-pNext-07777\", physicalDevice, error_obj.location,\n                     \"pSurfaceCapabilities->pNext contains VkSurfacePresentScalingCapabilitiesEXT, but \"\n                     \"pSurfaceInfo->pNext does not contain a VkSurfacePresentModeEXT structure.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-vkGetPhysicalDeviceSurfacePresentModes2EXT-pSurfaceInfo-06521\", \"If the VK_GOOGLE_surfaceless_query extension is not enabled, pSurfaceInfo->surface must be a valid VkSurfaceKHR handle\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (pSurfaceInfo->surface == VK_NULL_HANDLE && !IsExtEnabled(instance_extensions.vk_google_surfaceless_query)) {\n    skip |= LogError(\"VUID-vkGetPhysicalDeviceSurfacePresentModes2EXT-pSurfaceInfo-06521\", device,\n                     error_obj.location.dot(Field::pSurfaceInfo).dot(Field::surface),\n                     \"is VK_NULL_HANDLE and VK_GOOGLE_surfaceless_query is not enabled.\");\n}"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkPhysicalDeviceSurfaceInfo2KHR-pNext-pNext\", \"Each pNext member of any structure (including this one) in the pNext chain must be either NULL or a pointer to a valid instance of VkSurfaceFullScreenExclusiveInfoEXT, VkSurfaceFullScreenExclusiveWin32InfoEXT, or VkSurfacePresentModeEXT\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "skip |= ValidateStructPnext(error_obj.location.dot(Field::pSurfaceInfo), pSurfaceInfo->pNext, allowed_structs.size(),\n                            \"VUID-VkPhysicalDeviceSurfaceInfo2KHR-pNext-pNext\",\n                            \"VUID-VkPhysicalDeviceSurfaceInfo2KHR-sType-unique\");\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-VkXcbSurfaceCreateInfoKHR-window-01311\", \"window must be a valid X11 xcb_window_t\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "skip |= ValidateNotZero(window == 0, \"VUID-VkXcbSurfaceCreateInfoKHR-window-01311\",\n                        error_obj.location.dot(Field::pCreateInfo).dot(Field::window));\n"
            }
        ],
        [
            {
                "role": "user",
                "content": "{\"VUID-WorkgroupSize-WorkgroupSize-04427\", \"The variable decorated with WorkgroupSize must be declared as a three-component vector of 32-bit integer values\", \"1.3-extensions\"}"
            },
            {
                "role": "assistant",
                "content": "if (composite_def->Opcode() == spv::OpConstantComposite) {\n    // VUID-WorkgroupSize-WorkgroupSize-04427 makes sure this is a OpTypeVector of int32\n    local_size_x = GetConstantValueById(composite_def->Word(3));\n}"
            }
        ]
    ]
}